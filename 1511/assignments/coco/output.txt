dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Kangying: [10, 12, 18, 24, 33, 35, 37, 38, 39, 43]
Table position 1: Finbar  : [14, 19, 20, 21, 28, 31, 32, 34, 36, 49]
Table position 2: Eugenius: [13, 15, 16, 17, 27, 29, 30, 40, 44, 48]
Table position 3: Gal     : [11, 22, 23, 25, 26, 41, 42, 45, 46, 47]

Discards:
Kangying [24, 37, 43]
Finbar   [34, 36, 49]
Eugenius [40, 44, 48]
Gal      [26, 42, 46]

Round 0: Kangying holding [10, 12, 18, 26, 33, 35, 38, 39, 42, 46] plays the 18 
Round 0: Finbar   holding [14, 19, 20, 21, 24, 28, 31, 32, 37, 43] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 16 17 27 29 30 34 36 49 

15------------------------------------------------------------------------

Round 0: Eugenius holding [13, 15, 16, 17, 27, 29, 30, 34, 36, 49] plays the 15 
Round 0: Gal      holding [11, 22, 23, 25, 40, 41, 44, 45, 47, 48] plays the 44 
Gal wins the round 

Round 1: Gal      holding [11, 22, 23, 25, 40, 41, 45, 47, 48] plays the 22 
Round 1: Kangying holding [10, 12, 26, 33, 35, 38, 39, 42, 46] plays the 12 
Round 1: Finbar   holding [14, 19, 20, 21, 28, 31, 32, 37, 43] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 17 27 29 30 34 36 49 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [13, 16, 17, 27, 29, 30, 34, 36, 49] plays the 16 
Finbar wins the round 

Round 2: Finbar   holding [14, 19, 20, 21, 31, 32, 37, 43] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 27 29 30 34 36 49 0 0 

30------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 27, 29, 30, 34, 36, 49] plays the 30 
Round 2: Gal      holding [11, 23, 25, 40, 41, 45, 47, 48] plays the 48 
Round 2: Kangying holding [10, 26, 33, 35, 38, 39, 42, 46] plays the 35 
Gal wins the round 

Round 3: Gal      holding [11, 23, 25, 40, 41, 45, 47] plays the 25 
Round 3: Kangying holding [10, 26, 33, 38, 39, 42, 46] plays the 10 
Round 3: Finbar   holding [19, 20, 21, 31, 32, 37, 43] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 27 29 34 36 49 0 0 0 

13 chah------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 27, 29, 34, 36, 49] plays the 13 
Gal wins the round which contains 1 penalty points

Round 4: Gal      holding [11, 23, 40, 41, 45, 47] plays the 40 
Round 4: Kangying holding [26, 33, 38, 39, 42, 46] plays the 46 
Round 4: Finbar   holding [19, 21, 31, 32, 37, 43] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 29 34 36 49 0 0 0 0 

34------------------------------------------------------------------------

Round 4: Eugenius holding [17, 27, 29, 34, 36, 49] plays the 34 
Kangying wins the round 

Round 5: Kangying holding [26, 33, 38, 39, 42] plays the 39 
Round 5: Finbar   holding [19, 21, 31, 37, 43] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 29 36 49 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius holding [17, 27, 29, 36, 49] plays the 27 
Round 5: Gal      holding [11, 23, 41, 45, 47] plays the 45 
Gal wins the round 

Round 6: Gal      holding [11, 23, 41, 47] plays the 11 
Round 6: Kangying holding [26, 33, 38, 42] plays the 26 
Round 6: Finbar   holding [19, 31, 37, 43] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 36 49 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 29, 36, 49] plays the 17 
Finbar wins the round which contains 3 penalty points

Round 7: Finbar   holding [19, 37, 43] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
29 36 49 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 36, 49] plays the 29 
Round 7: Gal      holding [23, 41, 47] plays the 23 
Round 7: Kangying holding [33, 38, 42] plays the 33 
Finbar wins the round which contains 3 penalty points

Round 8: Finbar   holding [19, 43] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
36 49 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [36, 49] plays the 36 
Round 8: Gal      holding [41, 47] plays the 41 
Round 8: Kangying holding [38, 42] plays the 38 
Gal wins the round which contains 2 penalty points

Round 9: Gal      holding [47] plays the 47 
Round 9: Kangying holding [42] plays the 42 
Round 9: Finbar   holding [43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 9: Eugenius holding [49] plays the 49 
Gal wins the round which contains 9 penalty points


Finishing Positions

#1 with 0 penalty points Kangying (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Finbar (system)
#4 with 12 penalty points Gal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14765584 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Dylan   : [10, 14, 19, 22, 25, 31, 41, 42, 46, 47]
Table position 1: Eugenius: [11, 15, 26, 27, 28, 32, 39, 45, 48, 49]
Table position 2: Livia   : [13, 16, 20, 21, 24, 29, 30, 34, 38, 44]
Table position 3: David   : [12, 17, 18, 23, 33, 35, 36, 37, 40, 43]

Discards:
Dylan    [14, 19, 46]
Eugenius [45, 48, 49]
Livia    [16, 24, 44]
David    [18, 36, 43]

Round 0: Dylan    holding [10, 18, 22, 25, 31, 36, 41, 42, 43, 47] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 15 19 26 27 28 32 39 46 

14------------------------------------------------------------------------

Round 0: Eugenius holding [11, 14, 15, 19, 26, 27, 28, 32, 39, 46] plays the 14 
Round 0: Livia    holding [13, 20, 21, 29, 30, 34, 38, 45, 48, 49] plays the 48 
Round 0: David    holding [12, 16, 17, 23, 24, 33, 35, 37, 40, 44] plays the 16 
Livia wins the round 

Round 1: Livia    holding [13, 20, 21, 29, 30, 34, 38, 45, 49] plays the 30 
Round 1: David    holding [12, 17, 23, 24, 33, 35, 37, 40, 44] plays the 40 
Round 1: Dylan    holding [18, 22, 25, 31, 36, 41, 42, 43, 47] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 19 26 27 28 32 39 46 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [11, 15, 19, 26, 27, 28, 32, 39, 46] plays the 15 
David wins the round 

Round 2: David    holding [12, 17, 23, 24, 33, 35, 37, 44] plays the 24 
Round 2: Dylan    holding [18, 25, 31, 36, 41, 42, 43, 47] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 26 27 28 32 39 46 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [11, 19, 26, 27, 28, 32, 39, 46] plays the 26 
Round 2: Livia    holding [13, 20, 21, 29, 34, 38, 45, 49] plays the 34 
Livia wins the round 

Round 3: Livia    holding [13, 20, 21, 29, 38, 45, 49] plays the 20 
Round 3: David    holding [12, 17, 23, 33, 35, 37, 44] plays the 12 
Round 3: Dylan    holding [25, 31, 36, 41, 42, 43, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 27 28 32 39 46 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [11, 19, 27, 28, 32, 39, 46] plays the 28 
Dylan wins the round which contains 7 penalty points

Round 4: Dylan    holding [25, 31, 36, 41, 43, 47] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 27 32 39 46 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [11, 19, 27, 32, 39, 46] plays the 27 
Round 4: Livia    holding [13, 21, 29, 38, 45, 49] plays the 45 
Round 4: David    holding [17, 23, 33, 35, 37, 44] plays the 44 
Livia wins the round 

Round 5: Livia    holding [13, 21, 29, 38, 49] plays the 21 
Round 5: David    holding [17, 23, 33, 35, 37] plays the 35 
Round 5: Dylan    holding [25, 31, 41, 43, 47] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 32 39 46 0 0 0 0 0 

39------------------------------------------------------------------------

Round 5: Eugenius holding [11, 19, 32, 39, 46] plays the 39 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
11 19 32 46 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 19, 32, 46] plays the 11 
Round 6: Livia    holding [13, 29, 38, 49] plays the 13 
Round 6: David    holding [17, 23, 33, 37] plays the 17 
Round 6: Dylan    holding [25, 41, 43, 47] plays the 47 
Dylan wins the round which contains 4 penalty points

Round 7: Dylan    holding [25, 41, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
19 32 46 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius holding [19, 32, 46] plays the 19 
Round 7: Livia    holding [29, 38, 49] plays the 29 
Round 7: David    holding [23, 33, 37] plays the 37 
Dylan wins the round which contains 4 penalty points

Round 8: Dylan    holding [25, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
32 46 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 8: Eugenius holding [32, 46] plays the 32 
Round 8: Livia    holding [38, 49] plays the 49 
Round 8: David    holding [23, 33] plays the 23 
Dylan wins the round which contains 2 penalty points

Round 9: Dylan    holding [25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
46 0 0 0 0 0 0 0 0 0 

46 chah------------------------------------------------------------------------

Round 9: Eugenius holding [46] plays the 46 
Round 9: Livia    holding [38] plays the 38 
Round 9: David    holding [33] plays the 33 
Dylan wins the round 


Finishing Positions

#1 with 0 penalty points Livia (system)
#1 with 0 penalty points David (system)
#3 with 1 penalty points Eugenius (dodo.c)
#4 with 17 penalty points Dylan (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5034011 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Finbar  : [20, 21, 22, 25, 31, 38, 45, 46, 48, 49]
Table position 1: Minh    : [10, 11, 13, 15, 17, 19, 26, 32, 35, 41]
Table position 2: Eugenius: [12, 23, 24, 28, 30, 33, 37, 39, 43, 44]
Table position 3: Reede   : [14, 16, 18, 27, 29, 34, 36, 40, 42, 47]

Discards:
Finbar   [38, 45, 49]
Minh     [10, 13, 26]
Eugenius [39, 43, 44]
Reede    [16, 29, 34]

Round 0: Finbar   holding [16, 20, 21, 22, 25, 29, 31, 34, 46, 48] plays the 48 
Round 0: Minh     holding [11, 15, 17, 19, 32, 35, 38, 41, 45, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 13 23 24 26 28 30 33 37 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 13, 23, 24, 26, 28, 30, 33, 37] plays the 10 
Round 0: Reede    holding [14, 18, 27, 36, 39, 40, 42, 43, 44, 47] plays the 44 
Finbar wins the round 

Round 1: Finbar   holding [16, 20, 21, 22, 25, 29, 31, 34, 46] plays the 25 
Round 1: Minh     holding [11, 17, 19, 32, 35, 38, 41, 45, 49] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 23 24 26 28 30 33 37 0 

30------------------------------------------------------------------------

Round 1: Eugenius holding [12, 13, 23, 24, 26, 28, 30, 33, 37] plays the 30 
Round 1: Reede    holding [14, 18, 27, 36, 39, 40, 42, 43, 47] plays the 40 
Minh wins the round 

Round 2: Minh     holding [11, 17, 19, 32, 35, 38, 41, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 23 24 26 28 33 37 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [12, 13, 23, 24, 26, 28, 33, 37] plays the 28 
Round 2: Reede    holding [14, 18, 27, 36, 39, 42, 43, 47] plays the 14 
Round 2: Finbar   holding [16, 20, 21, 22, 29, 31, 34, 46] plays the 21 
Minh wins the round 

Round 3: Minh     holding [11, 17, 19, 32, 35, 38, 41] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 23 24 26 33 37 0 0 0 

12------------------------------------------------------------------------

Round 3: Eugenius holding [12, 13, 23, 24, 26, 33, 37] plays the 12 
Round 3: Reede    holding [18, 27, 36, 39, 42, 43, 47] plays the 36 
Round 3: Finbar   holding [16, 20, 22, 29, 31, 34, 46] plays the 22 
Reede wins the round 

Round 4: Reede    holding [18, 27, 39, 42, 43, 47] plays the 42 
Round 4: Finbar   holding [16, 20, 29, 31, 34, 46] plays the 20 
Round 4: Minh     holding [11, 17, 19, 35, 38, 41] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 24 26 33 37 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius holding [13, 23, 24, 26, 33, 37] plays the 24 
Reede wins the round which contains 7 penalty points

Round 5: Reede    holding [18, 27, 39, 43, 47] plays the 27 
Round 5: Finbar   holding [16, 29, 31, 34, 46] plays the 31 
Round 5: Minh     holding [11, 17, 19, 35, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 26 33 37 0 0 0 0 0 

33------------------------------------------------------------------------

Round 5: Eugenius holding [13, 23, 26, 33, 37] plays the 33 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 23 26 37 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 23, 26, 37] plays the 13 
Round 6: Reede    holding [18, 39, 43, 47] plays the 47 
Round 6: Finbar   holding [16, 29, 34, 46] plays the 29 
Round 6: Minh     holding [11, 17, 19, 35] plays the 11 
Reede wins the round which contains 4 penalty points

Round 7: Reede    holding [18, 39, 43] plays the 18 
Round 7: Finbar   holding [16, 34, 46] plays the 34 
Round 7: Minh     holding [17, 19, 35] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
23 26 37 0 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 7: Eugenius holding [23, 26, 37] plays the 26 
Finbar wins the round which contains 1 penalty points

Round 8: Finbar   holding [16, 46] plays the 16 
Round 8: Minh     holding [17, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
23 37 0 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 8: Eugenius holding [23, 37] plays the 23 
Round 8: Reede    holding [39, 43] plays the 39 
Finbar wins the round which contains 1 penalty points

Round 9: Finbar   holding [46] plays the 46 
Round 9: Minh     holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Reede    holding [43] plays the 43 
Finbar wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Minh (system)
#2 with 2 penalty points Eugenius (dodo.c)
#3 with 5 penalty points Finbar (system)
#4 with 11 penalty points Reede (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1289941 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 12, 17, 20, 22, 30, 32, 33, 34, 35]
Table position 1: Kane    : [11, 19, 24, 29, 31, 36, 37, 38, 42, 47]
Table position 2: Harrison: [15, 18, 21, 23, 27, 28, 40, 41, 46, 48]
Table position 3: Aydin   : [13, 14, 16, 25, 26, 39, 43, 44, 45, 49]

Discards:
Eugenius [33, 34, 35]
Kane     [19, 31, 42]
Harrison [18, 23, 48]
Aydin    [16, 26, 44]


Debug output from Eugenius
------------------------------------------------------------------------
10 12 16 17 20 22 26 30 32 44 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 16, 17, 20, 22, 26, 30, 32, 44] plays the 10 
Round 0: Kane     holding [11, 24, 29, 33, 34, 35, 36, 37, 38, 47] plays the 38 
Round 0: Harrison holding [15, 19, 21, 27, 28, 31, 40, 41, 42, 46] plays the 15 
Round 0: Aydin    holding [13, 14, 18, 23, 25, 39, 43, 45, 48, 49] plays the 48 
Aydin wins the round 

Round 1: Aydin    holding [13, 14, 18, 23, 25, 39, 43, 45, 49] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
12 16 17 20 22 26 30 32 44 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 16, 17, 20, 22, 26, 30, 32, 44] plays the 12 
Round 1: Kane     holding [11, 24, 29, 33, 34, 35, 36, 37, 47] plays the 24 
Round 1: Harrison holding [19, 21, 27, 28, 31, 40, 41, 42, 46] plays the 40 
Aydin wins the round 

Round 2: Aydin    holding [13, 14, 18, 23, 25, 39, 43, 49] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 20 22 26 30 32 44 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [16, 17, 20, 22, 26, 30, 32, 44] plays the 16 
Round 2: Kane     holding [11, 29, 33, 34, 35, 36, 37, 47] plays the 36 
Round 2: Harrison holding [19, 21, 27, 28, 31, 41, 42, 46] plays the 28 
Kane wins the round 

Round 3: Kane     holding [11, 29, 33, 34, 35, 37, 47] plays the 33 
Round 3: Harrison holding [19, 21, 27, 31, 41, 42, 46] plays the 21 
Round 3: Aydin    holding [13, 18, 23, 25, 39, 43, 49] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
17 20 22 26 30 32 44 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [17, 20, 22, 26, 30, 32, 44] plays the 22 
Aydin wins the round 

Round 4: Aydin    holding [13, 18, 23, 25, 43, 49] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
17 20 26 30 32 44 0 0 0 0 

20------------------------------------------------------------------------

Round 4: Eugenius holding [17, 20, 26, 30, 32, 44] plays the 20 
Round 4: Kane     holding [11, 29, 34, 35, 37, 47] plays the 34 
Round 4: Harrison holding [19, 27, 31, 41, 42, 46] plays the 27 
Kane wins the round 

Round 5: Kane     holding [11, 29, 35, 37, 47] plays the 35 
Round 5: Harrison holding [19, 31, 41, 42, 46] plays the 42 
Round 5: Aydin    holding [13, 23, 25, 43, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
17 26 30 32 44 0 0 0 0 0 

30------------------------------------------------------------------------

Round 5: Eugenius holding [17, 26, 30, 32, 44] plays the 30 
Aydin wins the round which contains 7 penalty points

Round 6: Aydin    holding [13, 23, 25, 43] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
17 26 32 44 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 6: Eugenius holding [17, 26, 32, 44] plays the 17 
Round 6: Kane     holding [11, 29, 37, 47] plays the 29 
Round 6: Harrison holding [19, 31, 41, 46] plays the 31 
Aydin wins the round which contains 3 penalty points

Round 7: Aydin    holding [13, 23, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
26 32 44 0 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 7: Eugenius holding [26, 32, 44] plays the 26 
Round 7: Kane     holding [11, 37, 47] plays the 47 
Round 7: Harrison holding [19, 41, 46] plays the 19 
Kane wins the round which contains 3 penalty points

Round 8: Kane     holding [11, 37] plays the 11 
Round 8: Harrison holding [41, 46] plays the 41 
Round 8: Aydin    holding [13, 23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
32 44 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 8: Eugenius holding [32, 44] plays the 32 
Harrison wins the round which contains 3 penalty points

Round 9: Harrison holding [46] plays the 46 
Round 9: Aydin    holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
44 0 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 9: Eugenius holding [44] plays the 44 
Round 9: Kane     holding [37] plays the 37 
Harrison wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 3 penalty points Kane (system)
#3 with 5 penalty points Harrison (system)
#4 with 10 penalty points Aydin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1306246 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Sabrina : [11, 12, 22, 25, 30, 33, 39, 40, 43, 44]
Table position 1: Eugenius: [10, 13, 15, 16, 18, 19, 20, 21, 34, 45]
Table position 2: Michael : [14, 28, 29, 35, 36, 37, 41, 42, 46, 49]
Table position 3: Claire  : [17, 23, 24, 26, 27, 31, 32, 38, 47, 48]

Discards:
Sabrina  [11, 33, 39]
Eugenius [21, 34, 45]
Michael  [29, 35, 46]
Claire   [23, 26, 32]

Round 0: Sabrina  holding [12, 22, 23, 25, 26, 30, 32, 40, 43, 44] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 13 15 16 18 19 20 33 39 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 13, 15, 16, 18, 19, 20, 33, 39] plays the 10 
Round 0: Michael  holding [14, 21, 28, 34, 36, 37, 41, 42, 45, 49] plays the 45 
Round 0: Claire   holding [17, 24, 27, 29, 31, 35, 38, 46, 47, 48] plays the 35 
Michael wins the round 

Round 1: Michael  holding [14, 21, 28, 34, 36, 37, 41, 42, 49] plays the 14 
Round 1: Claire   holding [17, 24, 27, 29, 31, 38, 46, 47, 48] plays the 24 
Round 1: Sabrina  holding [12, 22, 23, 26, 30, 32, 40, 43, 44] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 15 16 18 19 20 33 39 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 15, 16, 18, 19, 20, 33, 39] plays the 16 
Sabrina wins the round 

Round 2: Sabrina  holding [12, 22, 23, 26, 32, 40, 43, 44] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 15 18 19 20 33 39 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 15, 18, 19, 20, 33, 39] plays the 18 
Round 2: Michael  holding [21, 28, 34, 36, 37, 41, 42, 49] plays the 34 
Round 2: Claire   holding [17, 27, 29, 31, 38, 46, 47, 48] plays the 48 
Claire wins the round 

Round 3: Claire   holding [17, 27, 29, 31, 38, 46, 47] plays the 27 
Round 3: Sabrina  holding [12, 22, 23, 26, 40, 43, 44] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 15 19 20 33 39 0 0 0 

15------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 15, 19, 20, 33, 39] plays the 15 
Round 3: Michael  holding [21, 28, 36, 37, 41, 42, 49] plays the 42 
Michael wins the round which contains 7 penalty points

Round 4: Michael  holding [21, 28, 36, 37, 41, 49] plays the 36 
Round 4: Claire   holding [17, 29, 31, 38, 46, 47] plays the 38 
Round 4: Sabrina  holding [22, 23, 26, 40, 43, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 20 33 39 0 0 0 0 

20------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 19, 20, 33, 39] plays the 20 
Sabrina wins the round 

Round 5: Sabrina  holding [22, 23, 26, 40, 43] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 33 39 0 0 0 0 0 

39------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 19, 33, 39] plays the 39 
Round 5: Michael  holding [21, 28, 37, 41, 49] plays the 28 
Round 5: Claire   holding [17, 29, 31, 46, 47] plays the 46 
Claire wins the round 

Round 6: Claire   holding [17, 29, 31, 47] plays the 29 
Round 6: Sabrina  holding [22, 23, 40, 43] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 33 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 13, 19, 33] plays the 11 
Round 6: Michael  holding [21, 37, 41, 49] plays the 37 
Michael wins the round which contains 4 penalty points

Round 7: Michael  holding [21, 41, 49] plays the 49 
Round 7: Claire   holding [17, 31, 47] plays the 47 
Round 7: Sabrina  holding [22, 40, 43] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 33 0 0 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 7: Eugenius holding [13, 19, 33] plays the 13 
Michael wins the round which contains 2 penalty points

Round 8: Michael  holding [21, 41] plays the 21 
Round 8: Claire   holding [17, 31] plays the 31 
Round 8: Sabrina  holding [40, 43] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
19 33 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 8: Eugenius holding [19, 33] plays the 33 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
19 0 0 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 9: Eugenius holding [19] plays the 19 
Round 9: Michael  holding [41] plays the 41 
Round 9: Claire   holding [17] plays the 17 
Round 9: Sabrina  holding [43] plays the 43 
Sabrina wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Claire (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Sabrina (system)
#4 with 13 penalty points Michael (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6286969 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Matthew : [15, 16, 20, 24, 27, 29, 30, 38, 44, 45]
Table position 1: Dean    : [13, 22, 23, 25, 31, 32, 34, 35, 36, 42]
Table position 2: Eugenius: [12, 14, 21, 26, 28, 37, 39, 40, 41, 47]
Table position 3: Alex    : [10, 11, 17, 18, 19, 33, 43, 46, 48, 49]

Discards:
Matthew  [20, 27, 30]
Dean     [13, 22, 31]
Eugenius [40, 41, 47]
Alex     [10, 17, 33]

Round 0: Matthew  holding [10, 15, 16, 17, 24, 29, 33, 38, 44, 45] plays the 15 
Round 0: Dean     holding [20, 23, 25, 27, 30, 32, 34, 35, 36, 42] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 14 21 22 26 28 31 37 39 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 13, 14, 21, 22, 26, 28, 31, 37, 39] plays the 12 
Round 0: Alex     holding [11, 18, 19, 40, 41, 43, 46, 47, 48, 49] plays the 48 
Alex wins the round 

Round 1: Alex     holding [11, 18, 19, 40, 41, 43, 46, 47, 49] plays the 40 
Round 1: Matthew  holding [10, 16, 17, 24, 29, 33, 38, 44, 45] plays the 38 
Round 1: Dean     holding [20, 23, 25, 27, 30, 32, 34, 35, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
13 14 21 22 26 28 31 37 39 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [13, 14, 21, 22, 26, 28, 31, 37, 39] plays the 14 
Dean wins the round which contains 7 penalty points

Round 2: Dean     holding [20, 23, 25, 27, 30, 32, 34, 35] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
13 21 22 26 28 31 37 39 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [13, 21, 22, 26, 28, 31, 37, 39] plays the 21 
Round 2: Alex     holding [11, 18, 19, 41, 43, 46, 47, 49] plays the 46 
Round 2: Matthew  holding [10, 16, 17, 24, 29, 33, 44, 45] plays the 24 
Alex wins the round 

Round 3: Alex     holding [11, 18, 19, 41, 43, 47, 49] plays the 49 
Round 3: Matthew  holding [10, 16, 17, 29, 33, 44, 45] plays the 10 
Round 3: Dean     holding [20, 23, 25, 27, 32, 34, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
13 22 26 28 31 37 39 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [13, 22, 26, 28, 31, 37, 39] plays the 28 
Alex wins the round 

Round 4: Alex     holding [11, 18, 19, 41, 43, 47] plays the 18 
Round 4: Matthew  holding [16, 17, 29, 33, 44, 45] plays the 33 
Round 4: Dean     holding [20, 23, 25, 27, 32, 34] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
13 22 26 31 37 39 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius holding [13, 22, 26, 31, 37, 39] plays the 22 
Matthew wins the round 

Round 5: Matthew  holding [16, 17, 29, 44, 45] plays the 44 
Round 5: Dean     holding [23, 25, 27, 32, 34] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 26 31 37 39 0 0 0 0 0 

26------------------------------------------------------------------------

Round 5: Eugenius holding [13, 26, 31, 37, 39] plays the 26 
Round 5: Alex     holding [11, 19, 41, 43, 47] plays the 11 
Matthew wins the round which contains 1 penalty points

Round 6: Matthew  holding [16, 17, 29, 45] plays the 29 
Round 6: Dean     holding [23, 25, 27, 32] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
13 31 37 39 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 31, 37, 39] plays the 13 
Round 6: Alex     holding [19, 41, 43, 47] plays the 43 
Alex wins the round which contains 4 penalty points

Round 7: Alex     holding [19, 41, 47] plays the 47 
Round 7: Matthew  holding [16, 17, 45] plays the 17 
Round 7: Dean     holding [25, 27, 32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 39 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [31, 37, 39] plays the 31 
Alex wins the round which contains 3 penalty points

Round 8: Alex     holding [19, 41] plays the 41 
Round 8: Matthew  holding [16, 45] plays the 45 
Round 8: Dean     holding [25, 27] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
37 39 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 8: Eugenius holding [37, 39] plays the 37 
Alex wins the round which contains 2 penalty points

Round 9: Alex     holding [19] plays the 19 
Round 9: Matthew  holding [16] plays the 16 
Round 9: Dean     holding [27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Alex wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Matthew (system)
#3 with 7 penalty points Dean (system)
#4 with 10 penalty points Alex (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1557849 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Elizabeth: [11, 12, 17, 19, 29, 30, 31, 34, 43, 48]
Table position 1: Eugenius : [10, 21, 24, 27, 38, 39, 40, 41, 45, 49]
Table position 2: Vincent  : [14, 18, 20, 23, 28, 32, 42, 44, 46, 47]
Table position 3: Heather  : [13, 15, 16, 22, 25, 26, 33, 35, 36, 37]

Discards:
Elizabeth [17, 30, 43]
Eugenius  [41, 45, 49]
Vincent   [28, 42, 47]
Heather   [13, 25, 36]

Round 0: Elizabeth holding [11, 12, 13, 19, 25, 29, 31, 34, 36, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
10 17 21 24 27 30 38 39 40 43 

10------------------------------------------------------------------------

Round 0: Eugenius  holding [10, 17, 21, 24, 27, 30, 38, 39, 40, 43] plays the 10 
Round 0: Vincent   holding [14, 18, 20, 23, 32, 41, 44, 45, 46, 49] plays the 44 
Round 0: Heather   holding [15, 16, 22, 26, 28, 33, 35, 37, 42, 47] plays the 16 
Elizabeth wins the round 

Round 1: Elizabeth holding [11, 12, 13, 19, 25, 29, 31, 34, 36] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
17 21 24 27 30 38 39 40 43 0 

21------------------------------------------------------------------------

Round 1: Eugenius  holding [17, 21, 24, 27, 30, 38, 39, 40, 43] plays the 21 
Round 1: Vincent   holding [14, 18, 20, 23, 32, 41, 45, 46, 49] plays the 46 
Round 1: Heather   holding [15, 22, 26, 28, 33, 35, 37, 42, 47] plays the 33 
Vincent wins the round 

Round 2: Vincent   holding [14, 18, 20, 23, 32, 41, 45, 49] plays the 45 
Round 2: Heather   holding [15, 22, 26, 28, 35, 37, 42, 47] plays the 35 
Round 2: Elizabeth holding [11, 13, 19, 25, 29, 31, 34, 36] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
17 24 27 30 38 39 40 43 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius  holding [17, 24, 27, 30, 38, 39, 40, 43] plays the 24 
Vincent wins the round 

Round 3: Vincent   holding [14, 18, 20, 23, 32, 41, 49] plays the 32 
Round 3: Heather   holding [15, 22, 26, 28, 37, 42, 47] plays the 28 
Round 3: Elizabeth holding [11, 13, 19, 25, 29, 31, 34] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 30 38 39 40 43 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius  holding [17, 27, 30, 38, 39, 40, 43] plays the 30 
Elizabeth wins the round 

Round 4: Elizabeth holding [11, 13, 19, 25, 29, 31] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 38 39 40 43 0 0 0 0 

40------------------------------------------------------------------------

Round 4: Eugenius  holding [17, 27, 38, 39, 40, 43] plays the 40 
Round 4: Vincent   holding [14, 18, 20, 23, 41, 49] plays the 20 
Round 4: Heather   holding [15, 22, 26, 37, 42, 47] plays the 15 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
17 27 38 39 43 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius  holding [17, 27, 38, 39, 43] plays the 27 
Round 5: Vincent   holding [14, 18, 23, 41, 49] plays the 18 
Round 5: Heather   holding [22, 26, 37, 42, 47] plays the 42 
Round 5: Elizabeth holding [11, 13, 19, 29, 31] plays the 29 
Heather wins the round which contains 8 penalty points

Round 6: Heather   holding [22, 26, 37, 47] plays the 37 
Round 6: Elizabeth holding [11, 13, 19, 31] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
17 38 39 43 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius  holding [17, 38, 39, 43] plays the 17 
Round 6: Vincent   holding [14, 23, 41, 49] plays the 23 
Heather wins the round which contains 4 penalty points

Round 7: Heather   holding [22, 26, 47] plays the 22 
Round 7: Elizabeth holding [13, 19, 31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
38 39 43 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 7: Eugenius  holding [38, 39, 43] plays the 38 
Round 7: Vincent   holding [14, 41, 49] plays the 14 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
39 43 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 8: Eugenius  holding [39, 43] plays the 39 
Round 8: Vincent   holding [41, 49] plays the 49 
Round 8: Heather   holding [26, 47] plays the 26 
Round 8: Elizabeth holding [13, 19] plays the 19 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 9: Eugenius  holding [43] plays the 43 
Round 9: Vincent   holding [41] plays the 41 
Round 9: Heather   holding [47] plays the 47 
Round 9: Elizabeth holding [13] plays the 13 
Heather wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Elizabeth (system)
#1 with 0 penalty points Vincent (system)
#3 with 2 penalty points Eugenius (dodo.c)
#4 with 16 penalty points Heather (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7010567 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Minh    : [12, 13, 16, 19, 29, 30, 33, 38, 43, 46]
Table position 1: Alex    : [10, 17, 22, 26, 34, 39, 40, 41, 42, 47]
Table position 2: Nathan  : [14, 18, 20, 21, 28, 31, 32, 35, 37, 48]
Table position 3: Eugenius: [11, 15, 23, 24, 25, 27, 36, 44, 45, 49]

Discards:
Minh     [19, 33, 46]
Alex     [17, 26, 39]
Nathan   [21, 32, 48]
Eugenius [44, 45, 49]

Round 0: Minh     holding [12, 13, 16, 29, 30, 38, 43, 44, 45, 49] plays the 44 
Round 0: Alex     holding [10, 19, 22, 33, 34, 40, 41, 42, 46, 47] plays the 33 
Round 0: Nathan   holding [14, 17, 18, 20, 26, 28, 31, 35, 37, 39] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 21 23 24 25 27 32 36 48 

24------------------------------------------------------------------------

Round 0: Eugenius holding [11, 15, 21, 23, 24, 25, 27, 32, 36, 48] plays the 24 
Minh wins the round 

Round 1: Minh     holding [12, 13, 16, 29, 30, 38, 43, 45, 49] plays the 45 
Round 1: Alex     holding [10, 19, 22, 34, 40, 41, 42, 46, 47] plays the 40 
Round 1: Nathan   holding [14, 17, 20, 26, 28, 31, 35, 37, 39] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 21 23 25 27 32 36 48 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [11, 15, 21, 23, 25, 27, 32, 36, 48] plays the 15 
Minh wins the round 

Round 2: Minh     holding [12, 13, 16, 29, 30, 38, 43, 49] plays the 12 
Round 2: Alex     holding [10, 19, 22, 34, 41, 42, 46, 47] plays the 34 
Round 2: Nathan   holding [14, 17, 26, 28, 31, 35, 37, 39] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 21 23 25 27 32 36 48 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [11, 21, 23, 25, 27, 32, 36, 48] plays the 21 
Alex wins the round 

Round 3: Alex     holding [10, 19, 22, 41, 42, 46, 47] plays the 22 
Round 3: Nathan   holding [14, 17, 26, 31, 35, 37, 39] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 25 27 32 36 48 0 0 0 

32------------------------------------------------------------------------

Round 3: Eugenius holding [11, 23, 25, 27, 32, 36, 48] plays the 32 
Round 3: Minh     holding [13, 16, 29, 30, 38, 43, 49] plays the 38 
Minh wins the round 

Round 4: Minh     holding [13, 16, 29, 30, 43, 49] plays the 30 
Round 4: Alex     holding [10, 19, 41, 42, 46, 47] plays the 10 
Round 4: Nathan   holding [14, 17, 31, 35, 37, 39] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 25 27 36 48 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [11, 23, 25, 27, 36, 48] plays the 25 
Minh wins the round 

Round 5: Minh     holding [13, 16, 29, 43, 49] plays the 49 
Round 5: Alex     holding [19, 41, 42, 46, 47] plays the 42 
Round 5: Nathan   holding [17, 31, 35, 37, 39] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 27 36 48 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 23, 27, 36, 48] plays the 11 
Minh wins the round which contains 8 penalty points

Round 6: Minh     holding [13, 16, 29, 43] plays the 29 
Round 6: Alex     holding [19, 41, 46, 47] plays the 47 
Round 6: Nathan   holding [17, 31, 37, 39] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
23 27 36 48 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 27, 36, 48] plays the 23 
Alex wins the round which contains 4 penalty points

Round 7: Alex     holding [19, 41, 46] plays the 41 
Round 7: Nathan   holding [17, 37, 39] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
27 36 48 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [27, 36, 48] plays the 27 
Round 7: Minh     holding [13, 16, 43] plays the 43 
Minh wins the round which contains 3 penalty points

Round 8: Minh     holding [13, 16] plays the 16 
Round 8: Alex     holding [19, 46] plays the 46 
Round 8: Nathan   holding [37, 39] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
36 48 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [36, 48] plays the 36 
Alex wins the round which contains 1 penalty points

Round 9: Alex     holding [19] plays the 19 
Round 9: Nathan   holding [39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
48 0 0 0 0 0 0 0 0 0 

48------------------------------------------------------------------------

Round 9: Eugenius holding [48] plays the 48 
Round 9: Minh     holding [13] plays the 13 
Alex wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Nathan (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Alex (system)
#4 with 11 penalty points Minh (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15831096 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Elizabeth: [10, 19, 25, 27, 28, 33, 37, 41, 42, 49]
Table position 1: George   : [12, 14, 15, 18, 23, 30, 39, 40, 43, 45]
Table position 2: Eugenius : [11, 16, 20, 21, 22, 24, 32, 38, 46, 47]
Table position 3: Stephen  : [13, 17, 26, 29, 31, 34, 35, 36, 44, 48]

Discards:
Elizabeth [10, 41, 42]
George    [12, 30, 39]
Eugenius  [38, 46, 47]
Stephen   [13, 31, 48]

Round 0: Elizabeth holding [13, 19, 25, 27, 28, 31, 33, 37, 48, 49] plays the 28 
Round 0: George    holding [10, 14, 15, 18, 23, 40, 41, 42, 43, 45] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 16 20 21 22 24 30 32 39 

12------------------------------------------------------------------------

Round 0: Eugenius  holding [11, 12, 16, 20, 21, 22, 24, 30, 32, 39] plays the 12 
Round 0: Stephen   holding [17, 26, 29, 34, 35, 36, 38, 44, 46, 47] plays the 26 
Elizabeth wins the round 

Round 1: Elizabeth holding [13, 19, 25, 27, 31, 33, 37, 48, 49] plays the 25 
Round 1: George    holding [10, 15, 18, 23, 40, 41, 42, 43, 45] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 20 21 22 24 30 32 39 0 

20------------------------------------------------------------------------

Round 1: Eugenius  holding [11, 16, 20, 21, 22, 24, 30, 32, 39] plays the 20 
Round 1: Stephen   holding [17, 29, 34, 35, 36, 38, 44, 46, 47] plays the 35 
Stephen wins the round 

Round 2: Stephen   holding [17, 29, 34, 36, 38, 44, 46, 47] plays the 34 
Round 2: Elizabeth holding [13, 19, 27, 31, 33, 37, 48, 49] plays the 48 
Round 2: George    holding [15, 18, 23, 40, 41, 42, 43, 45] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 21 22 24 30 32 39 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius  holding [11, 16, 21, 22, 24, 30, 32, 39] plays the 16 
Elizabeth wins the round 

Round 3: Elizabeth holding [13, 19, 27, 31, 33, 37, 49] plays the 33 
Round 3: George    holding [15, 18, 23, 41, 42, 43, 45] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 21 22 24 30 32 39 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius  holding [11, 21, 22, 24, 30, 32, 39] plays the 21 
Round 3: Stephen   holding [17, 29, 36, 38, 44, 46, 47] plays the 36 
Stephen wins the round 

Round 4: Stephen   holding [17, 29, 38, 44, 46, 47] plays the 46 
Round 4: Elizabeth holding [13, 19, 27, 31, 37, 49] plays the 27 
Round 4: George    holding [15, 23, 41, 42, 43, 45] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 22 24 30 32 39 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius  holding [11, 22, 24, 30, 32, 39] plays the 22 
Stephen wins the round which contains 7 penalty points

Round 5: Stephen   holding [17, 29, 38, 44, 47] plays the 44 
Round 5: Elizabeth holding [13, 19, 31, 37, 49] plays the 49 
Round 5: George    holding [15, 23, 41, 43, 45] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
11 24 30 32 39 0 0 0 0 0 

24------------------------------------------------------------------------

Round 5: Eugenius  holding [11, 24, 30, 32, 39] plays the 24 
Stephen wins the round which contains 1 penalty points

Round 6: Stephen   holding [17, 29, 38, 47] plays the 29 
Round 6: Elizabeth holding [13, 19, 31, 37] plays the 37 
Round 6: George    holding [15, 23, 41, 45] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
11 30 32 39 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius  holding [11, 30, 32, 39] plays the 11 
George wins the round which contains 4 penalty points

Round 7: George    holding [15, 23, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
30 32 39 0 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 7: Eugenius  holding [30, 32, 39] plays the 30 
Round 7: Stephen   holding [17, 38, 47] plays the 17 
Round 7: Elizabeth holding [13, 19, 31] plays the 19 
George wins the round which contains 2 penalty points

Round 8: George    holding [15, 23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
32 39 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 8: Eugenius  holding [32, 39] plays the 32 
Round 8: Stephen   holding [38, 47] plays the 47 
Round 8: Elizabeth holding [13, 31] plays the 31 
Stephen wins the round which contains 3 penalty points

Round 9: Stephen   holding [38] plays the 38 
Round 9: Elizabeth holding [13] plays the 13 
Round 9: George    holding [15] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39 chah------------------------------------------------------------------------

Round 9: Eugenius  holding [39] plays the 39 
Stephen wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Elizabeth (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 6 penalty points George (system)
#4 with 12 penalty points Stephen (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1467049 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Jamal   : [11, 15, 16, 23, 25, 31, 38, 39, 45, 46]
Table position 1: Trung   : [12, 13, 14, 18, 19, 33, 37, 41, 44, 49]
Table position 2: Eugenius: [17, 20, 22, 24, 26, 27, 28, 34, 35, 43]
Table position 3: Stephen : [10, 21, 29, 30, 32, 36, 40, 42, 47, 48]

Discards:
Jamal    [11, 25, 39]
Trung    [41, 44, 49]
Eugenius [34, 35, 43]
Stephen  [40, 47, 48]

Round 0: Jamal    holding [15, 16, 23, 31, 38, 40, 45, 46, 47, 48] plays the 38 
Round 0: Trung    holding [11, 12, 13, 14, 18, 19, 25, 33, 37, 39] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
17 20 22 24 26 27 28 41 44 49 

20------------------------------------------------------------------------

Round 0: Eugenius holding [17, 20, 22, 24, 26, 27, 28, 41, 44, 49] plays the 20 
Round 0: Stephen  holding [10, 21, 29, 30, 32, 34, 35, 36, 42, 43] plays the 34 
Jamal wins the round 

Round 1: Jamal    holding [15, 16, 23, 31, 40, 45, 46, 47, 48] plays the 15 
Round 1: Trung    holding [11, 12, 13, 14, 19, 25, 33, 37, 39] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 24 26 27 28 41 44 49 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [17, 22, 24, 26, 27, 28, 41, 44, 49] plays the 24 
Round 1: Stephen  holding [10, 21, 29, 30, 32, 35, 36, 42, 43] plays the 36 
Stephen wins the round 

Round 2: Stephen  holding [10, 21, 29, 30, 32, 35, 42, 43] plays the 21 
Round 2: Jamal    holding [16, 23, 31, 40, 45, 46, 47, 48] plays the 45 
Round 2: Trung    holding [11, 13, 14, 19, 25, 33, 37, 39] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 26 27 28 41 44 49 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [17, 22, 26, 27, 28, 41, 44, 49] plays the 27 
Jamal wins the round 

Round 3: Jamal    holding [16, 23, 31, 40, 46, 47, 48] plays the 46 
Round 3: Trung    holding [11, 13, 14, 19, 25, 37, 39] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 26 28 41 44 49 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [17, 22, 26, 28, 41, 44, 49] plays the 22 
Round 3: Stephen  holding [10, 29, 30, 32, 35, 42, 43] plays the 10 
Jamal wins the round 

Round 4: Jamal    holding [16, 23, 31, 40, 47, 48] plays the 48 
Round 4: Trung    holding [11, 13, 19, 25, 37, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
17 26 28 41 44 49 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [17, 26, 28, 41, 44, 49] plays the 26 
Round 4: Stephen  holding [29, 30, 32, 35, 42, 43] plays the 32 
Jamal wins the round 

Round 5: Jamal    holding [16, 23, 31, 40, 47] plays the 40 
Round 5: Trung    holding [11, 13, 19, 25, 37] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
17 28 41 44 49 0 0 0 0 0 

28------------------------------------------------------------------------

Round 5: Eugenius holding [17, 28, 41, 44, 49] plays the 28 
Round 5: Stephen  holding [29, 30, 35, 42, 43] plays the 35 
Jamal wins the round 

Round 6: Jamal    holding [16, 23, 31, 47] plays the 16 
Round 6: Trung    holding [11, 13, 19, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
17 41 44 49 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 6: Eugenius holding [17, 41, 44, 49] plays the 44 
Round 6: Stephen  holding [29, 30, 42, 43] plays the 30 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
17 41 49 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 41, 49] plays the 17 
Round 7: Stephen  holding [29, 42, 43] plays the 29 
Round 7: Jamal    holding [23, 31, 47] plays the 31 
Round 7: Trung    holding [11, 13, 19] plays the 11 
Jamal wins the round which contains 4 penalty points

Round 8: Jamal    holding [23, 47] plays the 47 
Round 8: Trung    holding [13, 19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
41 49 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 8: Eugenius holding [41, 49] plays the 41 
Round 8: Stephen  holding [42, 43] plays the 43 
Jamal wins the round which contains 4 penalty points

Round 9: Jamal    holding [23] plays the 23 
Round 9: Trung    holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 9: Eugenius holding [49] plays the 49 
Round 9: Stephen  holding [42] plays the 42 
Jamal wins the round which contains 9 penalty points


Finishing Positions

#1 with 0 penalty points Trung (system)
#1 with 0 penalty points Stephen (system)
#3 with 1 penalty points Eugenius (dodo.c)
#4 with 17 penalty points Jamal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2266265 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Jamal   : [10, 14, 17, 27, 28, 32, 33, 38, 39, 40]
Table position 1: Emily   : [16, 19, 22, 23, 25, 30, 34, 36, 45, 46]
Table position 2: Eugenius: [11, 12, 13, 18, 21, 24, 29, 31, 43, 48]
Table position 3: Livia   : [15, 20, 26, 35, 37, 41, 42, 44, 47, 49]

Discards:
Jamal    [32, 33, 38]
Emily    [23, 25, 36]
Eugenius [31, 43, 48]
Livia    [35, 37, 47]

Round 0: Jamal    holding [10, 14, 17, 27, 28, 35, 37, 39, 40, 47] plays the 27 
Round 0: Emily    holding [16, 19, 22, 30, 32, 33, 34, 38, 45, 46] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 13 18 21 23 24 25 29 36 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 13, 18, 21, 23, 24, 25, 29, 36] plays the 12 
Round 0: Livia    holding [15, 20, 26, 31, 41, 42, 43, 44, 48, 49] plays the 42 
Livia wins the round which contains 7 penalty points

Round 1: Livia    holding [15, 20, 26, 31, 41, 43, 44, 48, 49] plays the 15 
Round 1: Jamal    holding [10, 14, 17, 28, 35, 37, 39, 40, 47] plays the 10 
Round 1: Emily    holding [16, 19, 22, 32, 33, 34, 38, 45, 46] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 18 21 23 24 25 29 36 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 18, 21, 23, 24, 25, 29, 36] plays the 18 
Emily wins the round 

Round 2: Emily    holding [16, 19, 22, 32, 34, 38, 45, 46] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 21 23 24 25 29 36 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 21, 23, 24, 25, 29, 36] plays the 21 
Round 2: Livia    holding [20, 26, 31, 41, 43, 44, 48, 49] plays the 20 
Round 2: Jamal    holding [14, 17, 28, 35, 37, 39, 40, 47] plays the 35 
Emily wins the round 

Round 3: Emily    holding [16, 19, 22, 32, 34, 38, 46] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 23 24 25 29 36 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 23, 24, 25, 29, 36] plays the 24 
Round 3: Livia    holding [26, 31, 41, 43, 44, 48, 49] plays the 26 
Round 3: Jamal    holding [14, 17, 28, 37, 39, 40, 47] plays the 28 
Jamal wins the round 

Round 4: Jamal    holding [14, 17, 37, 39, 40, 47] plays the 14 
Round 4: Emily    holding [19, 22, 32, 34, 38, 46] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 23 25 29 36 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 23, 25, 29, 36] plays the 36 
Round 4: Livia    holding [31, 41, 43, 44, 48, 49] plays the 44 
Livia wins the round 

Round 5: Livia    holding [31, 41, 43, 48, 49] plays the 49 
Round 5: Jamal    holding [17, 37, 39, 40, 47] plays the 37 
Round 5: Emily    holding [19, 22, 34, 38, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 23 25 29 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 23, 25, 29] plays the 11 
Livia wins the round which contains 2 penalty points

Round 6: Livia    holding [31, 41, 43, 48] plays the 43 
Round 6: Jamal    holding [17, 39, 40, 47] plays the 17 
Round 6: Emily    holding [19, 22, 34, 38] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 25 29 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 23, 25, 29] plays the 13 
Livia wins the round which contains 4 penalty points

Round 7: Livia    holding [31, 41, 48] plays the 48 
Round 7: Jamal    holding [39, 40, 47] plays the 40 
Round 7: Emily    holding [22, 34, 38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 29 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 7: Eugenius holding [23, 25, 29] plays the 23 
Livia wins the round which contains 1 penalty points

Round 8: Livia    holding [31, 41] plays the 31 
Round 8: Jamal    holding [39, 47] plays the 47 
Round 8: Emily    holding [22, 34] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [25, 29] plays the 29 
Jamal wins the round which contains 3 penalty points

Round 9: Jamal    holding [39] plays the 39 
Round 9: Emily    holding [22] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
25 0 0 0 0 0 0 0 0 0 

25 chah------------------------------------------------------------------------

Round 9: Eugenius holding [25] plays the 25 
Round 9: Livia    holding [41] plays the 41 
Jamal wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Emily (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Jamal (system)
#4 with 14 penalty points Livia (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 857281 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [12, 14, 15, 18, 25, 27, 28, 34, 36, 41]
Table position 1: Connor  : [11, 13, 21, 22, 30, 33, 37, 43, 47, 49]
Table position 2: Alex    : [10, 16, 19, 23, 24, 29, 32, 40, 45, 48]
Table position 3: Dylan   : [17, 20, 26, 31, 35, 38, 39, 42, 44, 46]

Discards:
Eugenius [34, 36, 41]
Connor   [11, 22, 30]
Alex     [19, 32, 48]
Dylan    [20, 31, 42]


Debug output from Eugenius
------------------------------------------------------------------------
12 14 15 18 20 25 27 28 31 42 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 14, 15, 18, 20, 25, 27, 28, 31, 42] plays the 12 
Round 0: Connor   holding [13, 21, 33, 34, 36, 37, 41, 43, 47, 49] plays the 21 
Round 0: Alex     holding [10, 11, 16, 22, 23, 24, 29, 30, 40, 45] plays the 22 
Round 0: Dylan    holding [17, 19, 26, 32, 35, 38, 39, 44, 46, 48] plays the 46 
Dylan wins the round 

Round 1: Dylan    holding [17, 19, 26, 32, 35, 38, 39, 44, 48] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
14 15 18 20 25 27 28 31 42 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 15, 18, 20, 25, 27, 28, 31, 42] plays the 14 
Round 1: Connor   holding [13, 33, 34, 36, 37, 41, 43, 47, 49] plays the 36 
Round 1: Alex     holding [10, 11, 16, 23, 24, 29, 30, 40, 45] plays the 30 
Connor wins the round 

Round 2: Connor   holding [13, 33, 34, 37, 41, 43, 47, 49] plays the 49 
Round 2: Alex     holding [10, 11, 16, 23, 24, 29, 40, 45] plays the 29 
Round 2: Dylan    holding [17, 19, 26, 35, 38, 39, 44, 48] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
15 18 20 25 27 28 31 42 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [15, 18, 20, 25, 27, 28, 31, 42] plays the 28 
Connor wins the round which contains 1 penalty points

Round 3: Connor   holding [13, 33, 34, 37, 41, 43, 47] plays the 13 
Round 3: Alex     holding [10, 11, 16, 23, 24, 40, 45] plays the 23 
Round 3: Dylan    holding [17, 19, 26, 38, 39, 44, 48] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
15 18 20 25 27 31 42 0 0 0 

31------------------------------------------------------------------------

Round 3: Eugenius holding [15, 18, 20, 25, 27, 31, 42] plays the 31 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
15 18 20 25 27 42 0 0 0 0 

15------------------------------------------------------------------------

Round 4: Eugenius holding [15, 18, 20, 25, 27, 42] plays the 15 
Round 4: Connor   holding [33, 34, 37, 41, 43, 47] plays the 33 
Round 4: Alex     holding [10, 11, 16, 24, 40, 45] plays the 24 
Round 4: Dylan    holding [17, 26, 38, 39, 44, 48] plays the 48 
Dylan wins the round 

Round 5: Dylan    holding [17, 26, 38, 39, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
18 20 25 27 42 0 0 0 0 0 

18------------------------------------------------------------------------

Round 5: Eugenius holding [18, 20, 25, 27, 42] plays the 18 
Round 5: Connor   holding [34, 37, 41, 43, 47] plays the 34 
Round 5: Alex     holding [10, 11, 16, 40, 45] plays the 10 
Dylan wins the round 

Round 6: Dylan    holding [17, 26, 38, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
20 25 27 42 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 6: Eugenius holding [20, 25, 27, 42] plays the 27 
Round 6: Connor   holding [37, 41, 43, 47] plays the 43 
Round 6: Alex     holding [11, 16, 40, 45] plays the 45 
Alex wins the round which contains 1 penalty points

Round 7: Alex     holding [11, 16, 40] plays the 40 
Round 7: Dylan    holding [17, 26, 38] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
20 25 42 0 0 0 0 0 0 0 

20------------------------------------------------------------------------

Round 7: Eugenius holding [20, 25, 42] plays the 20 
Round 7: Connor   holding [37, 41, 47] plays the 37 
Alex wins the round which contains 1 penalty points

Round 8: Alex     holding [11, 16] plays the 11 
Round 8: Dylan    holding [17, 38] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
25 42 0 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 8: Eugenius holding [25, 42] plays the 25 
Round 8: Connor   holding [41, 47] plays the 47 
Connor wins the round which contains 3 penalty points

Round 9: Connor   holding [41] plays the 41 
Round 9: Alex     holding [16] plays the 16 
Round 9: Dylan    holding [38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
42 0 0 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 9: Eugenius holding [42] plays the 42 
Connor wins the round which contains 8 penalty points


Finishing Positions

#1 with 0 penalty points Dylan (system)
#2 with 2 penalty points Alex (system)
#3 with 4 penalty points Eugenius (dodo.c)
#4 with 12 penalty points Connor (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9199629 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [16, 24, 27, 28, 29, 31, 36, 37, 48, 49]
Table position 1: Andrew  : [11, 15, 26, 32, 35, 39, 41, 42, 44, 45]
Table position 2: Gal     : [10, 17, 18, 19, 21, 22, 33, 38, 46, 47]
Table position 3: Harrison: [12, 13, 14, 20, 23, 25, 30, 34, 40, 43]

Discards:
Eugenius [37, 48, 49]
Andrew   [11, 15, 41]
Gal      [10, 22, 47]
Harrison [23, 40, 43]


Debug output from Eugenius
------------------------------------------------------------------------
16 23 24 27 28 29 31 36 40 43 

16------------------------------------------------------------------------

Round 0: Eugenius holding [16, 23, 24, 27, 28, 29, 31, 36, 40, 43] plays the 16 
Round 0: Andrew   holding [26, 32, 35, 37, 39, 42, 44, 45, 48, 49] plays the 26 
Round 0: Gal      holding [11, 15, 17, 18, 19, 21, 33, 38, 41, 46] plays the 38 
Round 0: Harrison holding [10, 12, 13, 14, 20, 22, 25, 30, 34, 47] plays the 34 
Gal wins the round 

Round 1: Gal      holding [11, 15, 17, 18, 19, 21, 33, 41, 46] plays the 33 
Round 1: Harrison holding [10, 12, 13, 14, 20, 22, 25, 30, 47] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
23 24 27 28 29 31 36 40 43 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [23, 24, 27, 28, 29, 31, 36, 40, 43] plays the 24 
Round 1: Andrew   holding [32, 35, 37, 39, 42, 44, 45, 48, 49] plays the 44 
Andrew wins the round 

Round 2: Andrew   holding [32, 35, 37, 39, 42, 45, 48, 49] plays the 32 
Round 2: Gal      holding [11, 15, 17, 18, 19, 21, 41, 46] plays the 18 
Round 2: Harrison holding [10, 12, 13, 14, 20, 25, 30, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
23 27 28 29 31 36 40 43 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [23, 27, 28, 29, 31, 36, 40, 43] plays the 28 
Andrew wins the round 

Round 3: Andrew   holding [35, 37, 39, 42, 45, 48, 49] plays the 42 
Round 3: Gal      holding [11, 15, 17, 19, 21, 41, 46] plays the 21 
Round 3: Harrison holding [10, 12, 13, 14, 25, 30, 47] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
23 27 29 31 36 40 43 0 0 0 

27------------------------------------------------------------------------

Round 3: Eugenius holding [23, 27, 29, 31, 36, 40, 43] plays the 27 
Andrew wins the round which contains 7 penalty points

Round 4: Andrew   holding [35, 37, 39, 45, 48, 49] plays the 35 
Round 4: Gal      holding [11, 15, 17, 19, 41, 46] plays the 15 
Round 4: Harrison holding [10, 12, 13, 14, 25, 47] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 31 36 40 43 0 0 0 0 

40------------------------------------------------------------------------

Round 4: Eugenius holding [23, 29, 31, 36, 40, 43] plays the 40 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
23 29 31 36 43 0 0 0 0 0 

36------------------------------------------------------------------------

Round 5: Eugenius holding [23, 29, 31, 36, 43] plays the 36 
Round 5: Andrew   holding [37, 39, 45, 48, 49] plays the 45 
Round 5: Gal      holding [11, 17, 19, 41, 46] plays the 46 
Round 5: Harrison holding [10, 12, 13, 25, 47] plays the 10 
Gal wins the round 

Round 6: Gal      holding [11, 17, 19, 41] plays the 17 
Round 6: Harrison holding [12, 13, 25, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 31 43 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 29, 31, 43] plays the 23 
Round 6: Andrew   holding [37, 39, 48, 49] plays the 37 
Harrison wins the round which contains 4 penalty points

Round 7: Harrison holding [12, 13, 25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 43 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 43] plays the 29 
Round 7: Andrew   holding [39, 48, 49] plays the 49 
Round 7: Gal      holding [11, 19, 41] plays the 19 
Harrison wins the round which contains 2 penalty points

Round 8: Harrison holding [12, 13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
31 43 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 43] plays the 31 
Round 8: Andrew   holding [39, 48] plays the 48 
Round 8: Gal      holding [11, 41] plays the 41 
Gal wins the round which contains 3 penalty points

Round 9: Gal      holding [11] plays the 11 
Round 9: Harrison holding [12] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Round 9: Andrew   holding [39] plays the 39 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 2 penalty points Eugenius (dodo.c)
#2 with 3 penalty points Gal (system)
#3 with 6 penalty points Harrison (system)
#4 with 7 penalty points Andrew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9662404 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Oscar   : [10, 16, 21, 26, 28, 30, 34, 39, 43, 47]
Table position 1: Eugenius: [12, 14, 17, 18, 19, 23, 29, 31, 37, 49]
Table position 2: Stephen : [15, 25, 33, 35, 36, 41, 42, 44, 45, 46]
Table position 3: Alex    : [11, 13, 20, 22, 24, 27, 32, 38, 40, 48]

Discards:
Oscar    [10, 39, 47]
Eugenius [31, 37, 49]
Stephen  [41, 42, 44]
Alex     [22, 38, 48]

Round 0: Oscar    holding [16, 21, 22, 26, 28, 30, 34, 38, 43, 48] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 14 17 18 19 23 29 39 47 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 14, 17, 18, 19, 23, 29, 39, 47] plays the 10 
Round 0: Stephen  holding [15, 25, 31, 33, 35, 36, 37, 45, 46, 49] plays the 36 
Round 0: Alex     holding [11, 13, 20, 24, 27, 32, 40, 41, 42, 44] plays the 40 
Alex wins the round 

Round 1: Alex     holding [11, 13, 20, 24, 27, 32, 41, 42, 44] plays the 24 
Round 1: Oscar    holding [21, 22, 26, 28, 30, 34, 38, 43, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 17 18 19 23 29 39 47 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 14, 17, 18, 19, 23, 29, 39, 47] plays the 12 
Round 1: Stephen  holding [15, 25, 31, 33, 35, 37, 45, 46, 49] plays the 45 
Oscar wins the round 

Round 2: Oscar    holding [21, 22, 26, 28, 30, 34, 38, 43] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 18 19 23 29 39 47 0 0 

14------------------------------------------------------------------------

Round 2: Eugenius holding [14, 17, 18, 19, 23, 29, 39, 47] plays the 14 
Round 2: Stephen  holding [15, 25, 31, 33, 35, 37, 46, 49] plays the 46 
Round 2: Alex     holding [11, 13, 20, 27, 32, 41, 42, 44] plays the 42 
Stephen wins the round which contains 7 penalty points

Round 3: Stephen  holding [15, 25, 31, 33, 35, 37, 49] plays the 25 
Round 3: Alex     holding [11, 13, 20, 27, 32, 41, 44] plays the 20 
Round 3: Oscar    holding [21, 22, 26, 28, 30, 34, 43] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
17 18 19 23 29 39 47 0 0 0 

17 chah------------------------------------------------------------------------

Round 3: Eugenius holding [17, 18, 19, 23, 29, 39, 47] plays the 17 
Oscar wins the round which contains 1 penalty points

Round 4: Oscar    holding [21, 22, 26, 28, 34, 43] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
18 19 23 29 39 47 0 0 0 0 

18------------------------------------------------------------------------

Round 4: Eugenius holding [18, 19, 23, 29, 39, 47] plays the 18 
Round 4: Stephen  holding [15, 31, 33, 35, 37, 49] plays the 33 
Round 4: Alex     holding [11, 13, 27, 32, 41, 44] plays the 44 
Alex wins the round 

Round 5: Alex     holding [11, 13, 27, 32, 41] plays the 27 
Round 5: Oscar    holding [21, 22, 28, 34, 43] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 29 39 47 0 0 0 0 0 

39------------------------------------------------------------------------

Round 5: Eugenius holding [19, 23, 29, 39, 47] plays the 39 
Round 5: Stephen  holding [15, 31, 35, 37, 49] plays the 15 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
19 23 29 47 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 23, 29, 47] plays the 19 
Round 6: Stephen  holding [31, 35, 37, 49] plays the 31 
Round 6: Alex     holding [11, 13, 32, 41] plays the 41 
Round 6: Oscar    holding [22, 28, 34, 43] plays the 43 
Oscar wins the round which contains 4 penalty points

Round 7: Oscar    holding [22, 28, 34] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 47 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 7: Eugenius holding [23, 29, 47] plays the 23 
Round 7: Stephen  holding [35, 37, 49] plays the 35 
Round 7: Alex     holding [11, 13, 32] plays the 32 
Alex wins the round which contains 1 penalty points

Round 8: Alex     holding [11, 13] plays the 13 
Round 8: Oscar    holding [28, 34] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
29 47 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 47] plays the 29 
Round 8: Stephen  holding [37, 49] plays the 37 
Stephen wins the round which contains 3 penalty points

Round 9: Stephen  holding [49] plays the 49 
Round 9: Alex     holding [11] plays the 11 
Round 9: Oscar    holding [28] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
47 0 0 0 0 0 0 0 0 0 

47 chah------------------------------------------------------------------------

Round 9: Eugenius holding [47] plays the 47 
Stephen wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Alex (system)
#3 with 5 penalty points Oscar (system)
#4 with 12 penalty points Stephen (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1417871 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Kane    : [21, 29, 36, 38, 39, 44, 46, 47, 48, 49]
Table position 1: Mitchell: [10, 16, 23, 24, 26, 27, 32, 40, 43, 45]
Table position 2: Eugenius: [14, 17, 19, 20, 28, 30, 31, 34, 35, 41]
Table position 3: Gal     : [11, 12, 13, 15, 18, 22, 25, 33, 37, 42]

Discards:
Kane     [38, 46, 48]
Mitchell [26, 27, 43]
Eugenius [34, 35, 41]
Gal      [12, 18, 33]

Round 0: Kane     holding [12, 18, 21, 29, 33, 36, 39, 44, 47, 49] plays the 44 
Round 0: Mitchell holding [10, 16, 23, 24, 32, 38, 40, 45, 46, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 19 20 26 27 28 30 31 43 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 17, 19, 20, 26, 27, 28, 30, 31, 43] plays the 14 
Round 0: Gal      holding [11, 13, 15, 22, 25, 34, 35, 37, 41, 42] plays the 42 
Mitchell wins the round which contains 7 penalty points

Round 1: Mitchell holding [10, 16, 23, 24, 32, 38, 40, 45, 46] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 20 26 27 28 30 31 43 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [17, 19, 20, 26, 27, 28, 30, 31, 43] plays the 20 
Round 1: Gal      holding [11, 13, 15, 22, 25, 34, 35, 37, 41] plays the 22 
Round 1: Kane     holding [12, 18, 21, 29, 33, 36, 39, 47, 49] plays the 12 
Gal wins the round 

Round 2: Gal      holding [11, 13, 15, 25, 34, 35, 37, 41] plays the 15 
Round 2: Kane     holding [18, 21, 29, 33, 36, 39, 47, 49] plays the 36 
Round 2: Mitchell holding [10, 23, 24, 32, 38, 40, 45, 46] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 26 27 28 30 31 43 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [17, 19, 26, 27, 28, 30, 31, 43] plays the 27 
Mitchell wins the round 

Round 3: Mitchell holding [10, 23, 24, 32, 38, 40, 46] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 26 28 30 31 43 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 26, 28, 30, 31, 43] plays the 26 
Round 3: Gal      holding [11, 13, 25, 34, 35, 37, 41] plays the 34 
Round 3: Kane     holding [18, 21, 29, 33, 39, 47, 49] plays the 18 
Mitchell wins the round 

Round 4: Mitchell holding [10, 23, 24, 32, 40, 46] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 28 30 31 43 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 28, 30, 31, 43] plays the 28 
Round 4: Gal      holding [11, 13, 25, 35, 37, 41] plays the 35 
Round 4: Kane     holding [21, 29, 33, 39, 47, 49] plays the 33 
Kane wins the round 

Round 5: Kane     holding [21, 29, 39, 47, 49] plays the 39 
Round 5: Mitchell holding [10, 23, 32, 40, 46] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 30 31 43 0 0 0 0 0 

30------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 30, 31, 43] plays the 30 
Round 5: Gal      holding [11, 13, 25, 37, 41] plays the 37 
Kane wins the round which contains 2 penalty points

Round 6: Kane     holding [21, 29, 47, 49] plays the 29 
Round 6: Mitchell holding [10, 32, 40, 46] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 31 43 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 19, 31, 43] plays the 17 
Round 6: Gal      holding [11, 13, 25, 41] plays the 41 
Gal wins the round which contains 3 penalty points

Round 7: Gal      holding [11, 13, 25] plays the 11 
Round 7: Kane     holding [21, 47, 49] plays the 47 
Round 7: Mitchell holding [10, 32, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
19 31 43 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius holding [19, 31, 43] plays the 19 
Kane wins the round which contains 3 penalty points

Round 8: Kane     holding [21, 49] plays the 21 
Round 8: Mitchell holding [10, 32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
31 43 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius holding [31, 43] plays the 31 
Round 8: Gal      holding [13, 25] plays the 25 
Kane wins the round which contains 1 penalty points

Round 9: Kane     holding [49] plays the 49 
Round 9: Mitchell holding [10] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43 chah------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Round 9: Gal      holding [13] plays the 13 
Kane wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 3 penalty points Gal (system)
#3 with 7 penalty points Mitchell (system)
#4 with 8 penalty points Kane (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14689090 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Michael  : [11, 13, 25, 27, 29, 33, 36, 38, 44, 49]
Table position 1: Eugenius : [14, 16, 17, 18, 20, 28, 40, 45, 46, 48]
Table position 2: Peter    : [10, 15, 21, 23, 30, 32, 35, 37, 42, 43]
Table position 3: Elizabeth: [12, 19, 22, 24, 26, 31, 34, 39, 41, 47]

Discards:
Michael   [11, 25, 49]
Eugenius  [45, 46, 48]
Peter     [10, 30, 37]
Elizabeth [31, 39, 47]

Round 0: Michael   holding [13, 27, 29, 31, 33, 36, 38, 39, 44, 47] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 16 17 18 20 25 28 40 49 

18------------------------------------------------------------------------

Round 0: Eugenius  holding [11, 14, 16, 17, 18, 20, 25, 28, 40, 49] plays the 18 
Round 0: Peter     holding [15, 21, 23, 32, 35, 42, 43, 45, 46, 48] plays the 48 
Round 0: Elizabeth holding [10, 12, 19, 22, 24, 26, 30, 34, 37, 41] plays the 12 
Peter wins the round 

Round 1: Peter     holding [15, 21, 23, 32, 35, 42, 43, 45, 46] plays the 32 
Round 1: Elizabeth holding [10, 19, 22, 24, 26, 30, 34, 37, 41] plays the 26 
Round 1: Michael   holding [13, 29, 31, 33, 36, 38, 39, 44, 47] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 16 17 20 25 28 40 49 0 

14------------------------------------------------------------------------

Round 1: Eugenius  holding [11, 14, 16, 17, 20, 25, 28, 40, 49] plays the 14 
Michael wins the round 

Round 2: Michael   holding [13, 29, 31, 33, 36, 39, 44, 47] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 17 20 25 28 40 49 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius  holding [11, 16, 17, 20, 25, 28, 40, 49] plays the 16 
Round 2: Peter     holding [15, 21, 23, 35, 42, 43, 45, 46] plays the 46 
Round 2: Elizabeth holding [10, 19, 22, 24, 30, 34, 37, 41] plays the 10 
Peter wins the round 

Round 3: Peter     holding [15, 21, 23, 35, 42, 43, 45] plays the 21 
Round 3: Elizabeth holding [19, 22, 24, 30, 34, 37, 41] plays the 24 
Round 3: Michael   holding [13, 29, 31, 33, 39, 44, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 20 25 28 40 49 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius  holding [11, 17, 20, 25, 28, 40, 49] plays the 28 
Michael wins the round 

Round 4: Michael   holding [13, 29, 31, 39, 44, 47] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 20 25 40 49 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 4: Eugenius  holding [11, 17, 20, 25, 40, 49] plays the 11 
Round 4: Peter     holding [15, 23, 35, 42, 43, 45] plays the 42 
Round 4: Elizabeth holding [19, 22, 30, 34, 37, 41] plays the 30 
Peter wins the round which contains 8 penalty points

Round 5: Peter     holding [15, 23, 35, 43, 45] plays the 45 
Round 5: Elizabeth holding [19, 22, 34, 37, 41] plays the 37 
Round 5: Michael   holding [13, 29, 31, 44, 47] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
17 20 25 40 49 0 0 0 0 0 

20------------------------------------------------------------------------

Round 5: Eugenius  holding [17, 20, 25, 40, 49] plays the 20 
Peter wins the round which contains 2 penalty points

Round 6: Peter     holding [15, 23, 35, 43] plays the 23 
Round 6: Elizabeth holding [19, 22, 34, 41] plays the 19 
Round 6: Michael   holding [13, 29, 44, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 40 49 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius  holding [17, 25, 40, 49] plays the 17 
Michael wins the round which contains 4 penalty points

Round 7: Michael   holding [13, 29, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
25 40 49 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 7: Eugenius  holding [25, 40, 49] plays the 40 
Round 7: Peter     holding [15, 35, 43] plays the 15 
Round 7: Elizabeth holding [22, 34, 41] plays the 34 
Michael wins the round 

Round 8: Michael   holding [13, 29] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
25 49 0 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 8: Eugenius  holding [25, 49] plays the 25 
Round 8: Peter     holding [35, 43] plays the 43 
Round 8: Elizabeth holding [22, 41] plays the 41 
Peter wins the round which contains 3 penalty points

Round 9: Peter     holding [35] plays the 35 
Round 9: Elizabeth holding [22] plays the 22 
Round 9: Michael   holding [29] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 9: Eugenius  holding [49] plays the 49 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Elizabeth (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Michael (system)
#4 with 13 penalty points Peter (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 4718292 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Finbar  : [15, 16, 18, 21, 26, 28, 32, 35, 36, 41]
Table position 1: Eugenius: [12, 13, 20, 22, 30, 33, 37, 39, 43, 46]
Table position 2: Dean    : [11, 14, 17, 24, 27, 29, 31, 44, 45, 48]
Table position 3: Stephen : [10, 19, 23, 25, 34, 38, 40, 42, 47, 49]

Discards:
Finbar   [16, 32, 35]
Eugenius [39, 43, 46]
Dean     [11, 29, 44]
Stephen  [38, 47, 49]

Round 0: Finbar   holding [15, 18, 21, 26, 28, 36, 38, 41, 47, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 16 20 22 30 32 33 35 37 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 13, 16, 20, 22, 30, 32, 33, 35, 37] plays the 12 
Round 0: Dean     holding [14, 17, 24, 27, 31, 39, 43, 45, 46, 48] plays the 48 
Round 0: Stephen  holding [10, 11, 19, 23, 25, 29, 34, 40, 42, 44] plays the 42 
Dean wins the round which contains 7 penalty points

Round 1: Dean     holding [14, 17, 24, 27, 31, 39, 43, 45, 46] plays the 14 
Round 1: Stephen  holding [10, 11, 19, 23, 25, 29, 34, 40, 44] plays the 40 
Round 1: Finbar   holding [18, 21, 26, 28, 36, 38, 41, 47, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 20 22 30 32 33 35 37 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [13, 16, 20, 22, 30, 32, 33, 35, 37] plays the 16 
Finbar wins the round 

Round 2: Finbar   holding [18, 21, 26, 28, 36, 38, 41, 47] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
13 20 22 30 32 33 35 37 0 0 

30------------------------------------------------------------------------

Round 2: Eugenius holding [13, 20, 22, 30, 32, 33, 35, 37] plays the 30 
Round 2: Dean     holding [17, 24, 27, 31, 39, 43, 45, 46] plays the 45 
Round 2: Stephen  holding [10, 11, 19, 23, 25, 29, 34, 44] plays the 23 
Dean wins the round which contains 1 penalty points

Round 3: Dean     holding [17, 24, 27, 31, 39, 43, 46] plays the 39 
Round 3: Stephen  holding [10, 11, 19, 25, 29, 34, 44] plays the 25 
Round 3: Finbar   holding [18, 26, 28, 36, 38, 41, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
13 20 22 32 33 35 37 0 0 0 

33------------------------------------------------------------------------

Round 3: Eugenius holding [13, 20, 22, 32, 33, 35, 37] plays the 33 
Dean wins the round 

Round 4: Dean     holding [17, 24, 27, 31, 43, 46] plays the 27 
Round 4: Stephen  holding [10, 11, 19, 29, 34, 44] plays the 19 
Round 4: Finbar   holding [18, 28, 36, 38, 41, 47] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
13 20 22 32 35 37 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 4: Eugenius holding [13, 20, 22, 32, 35, 37] plays the 13 
Finbar wins the round which contains 2 penalty points

Round 5: Finbar   holding [18, 28, 38, 41, 47] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
20 22 32 35 37 0 0 0 0 0 

37------------------------------------------------------------------------

Round 5: Eugenius holding [20, 22, 32, 35, 37] plays the 37 
Round 5: Dean     holding [17, 24, 31, 43, 46] plays the 43 
Round 5: Stephen  holding [10, 11, 29, 34, 44] plays the 29 
Dean wins the round which contains 4 penalty points

Round 6: Dean     holding [17, 24, 31, 46] plays the 17 
Round 6: Stephen  holding [10, 11, 34, 44] plays the 11 
Round 6: Finbar   holding [18, 28, 38, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
20 22 32 35 0 0 0 0 0 0 

20------------------------------------------------------------------------

Round 6: Eugenius holding [20, 22, 32, 35] plays the 20 
Finbar wins the round which contains 3 penalty points

Round 7: Finbar   holding [18, 28, 38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
22 32 35 0 0 0 0 0 0 0 

22------------------------------------------------------------------------

Round 7: Eugenius holding [22, 32, 35] plays the 22 
Round 7: Dean     holding [24, 31, 46] plays the 46 
Round 7: Stephen  holding [10, 34, 44] plays the 10 
Dean wins the round 

Round 8: Dean     holding [24, 31] plays the 31 
Round 8: Stephen  holding [34, 44] plays the 34 
Round 8: Finbar   holding [18, 28] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
32 35 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 8: Eugenius holding [32, 35] plays the 32 
Dean wins the round which contains 1 penalty points

Round 9: Dean     holding [24] plays the 24 
Round 9: Stephen  holding [44] plays the 44 
Round 9: Finbar   holding [28] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35 chah------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Stephen wins the round 


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Stephen (system)
#3 with 5 penalty points Finbar (system)
#4 with 13 penalty points Dean (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7190366 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [24, 29, 30, 31, 32, 40, 41, 45, 46, 49]
Table position 1: Benjamin: [10, 17, 19, 21, 23, 26, 35, 37, 38, 47]
Table position 2: Alex    : [12, 13, 14, 15, 20, 22, 34, 36, 42, 44]
Table position 3: Jamal   : [11, 16, 18, 25, 27, 28, 33, 39, 43, 48]

Discards:
Eugenius [45, 46, 49]
Benjamin [23, 35, 37]
Alex     [14, 34, 44]
Jamal    [16, 25, 43]


Debug output from Eugenius
------------------------------------------------------------------------
16 24 25 29 30 31 32 40 41 43 

16------------------------------------------------------------------------

Round 0: Eugenius holding [16, 24, 25, 29, 30, 31, 32, 40, 41, 43] plays the 16 
Round 0: Benjamin holding [10, 17, 19, 21, 26, 38, 45, 46, 47, 49] plays the 10 
Round 0: Alex     holding [12, 13, 15, 20, 22, 23, 35, 36, 37, 42] plays the 22 
Round 0: Jamal    holding [11, 14, 18, 27, 28, 33, 34, 39, 44, 48] plays the 34 
Jamal wins the round 

Round 1: Jamal    holding [11, 14, 18, 27, 28, 33, 39, 44, 48] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
24 25 29 30 31 32 40 41 43 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [24, 25, 29, 30, 31, 32, 40, 41, 43] plays the 24 
Round 1: Benjamin holding [17, 19, 21, 26, 38, 45, 46, 47, 49] plays the 45 
Round 1: Alex     holding [12, 13, 15, 20, 23, 35, 36, 37, 42] plays the 15 
Benjamin wins the round 

Round 2: Benjamin holding [17, 19, 21, 26, 38, 46, 47, 49] plays the 46 
Round 2: Alex     holding [12, 13, 20, 23, 35, 36, 37, 42] plays the 42 
Round 2: Jamal    holding [11, 14, 18, 27, 28, 39, 44, 48] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 30 31 32 40 41 43 0 0 

30------------------------------------------------------------------------

Round 2: Eugenius holding [25, 29, 30, 31, 32, 40, 41, 43] plays the 30 
Benjamin wins the round which contains 7 penalty points

Round 3: Benjamin holding [17, 19, 21, 26, 38, 47, 49] plays the 38 
Round 3: Alex     holding [12, 13, 20, 23, 35, 36, 37] plays the 12 
Round 3: Jamal    holding [11, 18, 27, 28, 39, 44, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 31 32 40 41 43 0 0 0 

32------------------------------------------------------------------------

Round 3: Eugenius holding [25, 29, 31, 32, 40, 41, 43] plays the 32 
Jamal wins the round 

Round 4: Jamal    holding [11, 18, 27, 28, 39, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 31 40 41 43 0 0 0 0 

40------------------------------------------------------------------------

Round 4: Eugenius holding [25, 29, 31, 40, 41, 43] plays the 40 
Round 4: Benjamin holding [17, 19, 21, 26, 47, 49] plays the 26 
Round 4: Alex     holding [13, 20, 23, 35, 36, 37] plays the 20 
Jamal wins the round 

Round 5: Jamal    holding [11, 18, 27, 28, 39] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 31 41 43 0 0 0 0 0 

25 chah------------------------------------------------------------------------

Round 5: Eugenius holding [25, 29, 31, 41, 43] plays the 25 
Round 5: Benjamin holding [17, 19, 21, 47, 49] plays the 21 
Round 5: Alex     holding [13, 23, 35, 36, 37] plays the 36 
Alex wins the round 

Round 6: Alex     holding [13, 23, 35, 37] plays the 35 
Round 6: Jamal    holding [11, 27, 28, 39] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 41 43 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 6: Eugenius holding [29, 31, 41, 43] plays the 29 
Round 6: Benjamin holding [17, 19, 47, 49] plays the 49 
Benjamin wins the round which contains 1 penalty points

Round 7: Benjamin holding [17, 19, 47] plays the 19 
Round 7: Alex     holding [13, 23, 37] plays the 13 
Round 7: Jamal    holding [11, 27, 39] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
31 41 43 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [31, 41, 43] plays the 31 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
41 43 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 8: Eugenius holding [41, 43] plays the 41 
Round 8: Benjamin holding [17, 47] plays the 47 
Round 8: Alex     holding [23, 37] plays the 23 
Round 8: Jamal    holding [27, 39] plays the 39 
Benjamin wins the round which contains 3 penalty points

Round 9: Benjamin holding [17] plays the 17 
Round 9: Alex     holding [37] plays the 37 
Round 9: Jamal    holding [27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Alex (system)
#1 with 0 penalty points Jamal (system)
#3 with 7 penalty points Eugenius (dodo.c)
#4 with 11 penalty points Benjamin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6871246 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Oscar   : [27, 29, 30, 31, 32, 34, 38, 39, 46, 48]
Table position 1: Zachary : [12, 13, 17, 19, 21, 22, 23, 24, 36, 45]
Table position 2: Connor  : [11, 14, 15, 16, 26, 35, 37, 41, 44, 47]
Table position 3: Eugenius: [10, 18, 20, 25, 28, 33, 40, 42, 43, 49]

Discards:
Oscar    [31, 34, 46]
Zachary  [12, 19, 24]
Connor   [15, 37, 41]
Eugenius [42, 43, 49]

Round 0: Oscar    holding [27, 29, 30, 32, 38, 39, 42, 43, 48, 49] plays the 42 
Round 0: Zachary  holding [13, 17, 21, 22, 23, 31, 34, 36, 45, 46] plays the 36 
Round 0: Connor   holding [11, 12, 14, 16, 19, 24, 26, 35, 44, 47] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
10 15 18 20 25 28 33 37 40 41 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 15, 18, 20, 25, 28, 33, 37, 40, 41] plays the 10 
Oscar wins the round which contains 7 penalty points

Round 1: Oscar    holding [27, 29, 30, 32, 38, 39, 43, 48, 49] plays the 48 
Round 1: Zachary  holding [13, 17, 21, 22, 23, 31, 34, 45, 46] plays the 21 
Round 1: Connor   holding [11, 12, 14, 16, 19, 26, 35, 44, 47] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
15 18 20 25 28 33 37 40 41 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [15, 18, 20, 25, 28, 33, 37, 40, 41] plays the 15 
Oscar wins the round 

Round 2: Oscar    holding [27, 29, 30, 32, 38, 39, 43, 49] plays the 38 
Round 2: Zachary  holding [13, 17, 22, 23, 31, 34, 45, 46] plays the 22 
Round 2: Connor   holding [11, 12, 16, 19, 26, 35, 44, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
18 20 25 28 33 37 40 41 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [18, 20, 25, 28, 33, 37, 40, 41] plays the 18 
Oscar wins the round 

Round 3: Oscar    holding [27, 29, 30, 32, 39, 43, 49] plays the 30 
Round 3: Zachary  holding [13, 17, 23, 31, 34, 45, 46] plays the 34 
Round 3: Connor   holding [11, 12, 16, 19, 35, 44, 47] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
20 25 28 33 37 40 41 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [20, 25, 28, 33, 37, 40, 41] plays the 20 
Connor wins the round 

Round 4: Connor   holding [11, 12, 16, 19, 35, 47] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
25 28 33 37 40 41 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [25, 28, 33, 37, 40, 41] plays the 28 
Round 4: Oscar    holding [27, 29, 32, 39, 43, 49] plays the 32 
Round 4: Zachary  holding [13, 17, 23, 31, 45, 46] plays the 45 
Zachary wins the round 

Round 5: Zachary  holding [13, 17, 23, 31, 46] plays the 46 
Round 5: Connor   holding [11, 16, 19, 35, 47] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
25 33 37 40 41 0 0 0 0 0 

40------------------------------------------------------------------------

Round 5: Eugenius holding [25, 33, 37, 40, 41] plays the 40 
Round 5: Oscar    holding [27, 29, 39, 43, 49] plays the 27 
Zachary wins the round 

Round 6: Zachary  holding [13, 17, 23, 31] plays the 23 
Round 6: Connor   holding [11, 19, 35, 47] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
25 33 37 41 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 6: Eugenius holding [25, 33, 37, 41] plays the 37 
Round 6: Oscar    holding [29, 39, 43, 49] plays the 43 
Oscar wins the round which contains 4 penalty points

Round 7: Oscar    holding [29, 39, 49] plays the 39 
Round 7: Zachary  holding [13, 17, 31] plays the 17 
Round 7: Connor   holding [11, 35, 47] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
25 33 41 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 7: Eugenius holding [25, 33, 41] plays the 33 
Oscar wins the round which contains 1 penalty points

Round 8: Oscar    holding [29, 49] plays the 49 
Round 8: Zachary  holding [13, 31] plays the 13 
Round 8: Connor   holding [11, 47] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
25 41 0 0 0 0 0 0 0 0 

25 chah------------------------------------------------------------------------

Round 8: Eugenius holding [25, 41] plays the 25 
Oscar wins the round which contains 2 penalty points

Round 9: Oscar    holding [29] plays the 29 
Round 9: Zachary  holding [31] plays the 31 
Round 9: Connor   holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Connor wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Zachary (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Connor (system)
#4 with 14 penalty points Oscar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7805894 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [12, 19, 22, 28, 36, 37, 38, 42, 46, 48]
Table position 1: Kangying: [10, 11, 15, 17, 18, 27, 32, 33, 45, 47]
Table position 2: Minh    : [14, 16, 20, 26, 29, 30, 34, 39, 40, 44]
Table position 3: Michael : [13, 21, 23, 24, 25, 31, 35, 41, 43, 49]

Discards:
Eugenius [42, 46, 48]
Kangying [10, 11, 17]
Minh     [26, 30, 34]
Michael  [23, 31, 43]


Debug output from Eugenius
------------------------------------------------------------------------
12 19 22 23 28 31 36 37 38 43 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 19, 22, 23, 28, 31, 36, 37, 38, 43] plays the 12 
Round 0: Kangying holding [15, 18, 27, 32, 33, 42, 45, 46, 47, 48] plays the 32 
Round 0: Minh     holding [10, 11, 14, 16, 17, 20, 29, 39, 40, 44] plays the 20 
Round 0: Michael  holding [13, 21, 24, 25, 26, 30, 34, 35, 41, 49] plays the 26 
Kangying wins the round 

Round 1: Kangying holding [15, 18, 27, 33, 42, 45, 46, 47, 48] plays the 18 
Round 1: Minh     holding [10, 11, 14, 16, 17, 29, 39, 40, 44] plays the 10 
Round 1: Michael  holding [13, 21, 24, 25, 30, 34, 35, 41, 49] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 23 28 31 36 37 38 43 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [19, 22, 23, 28, 31, 36, 37, 38, 43] plays the 22 
Michael wins the round 

Round 2: Michael  holding [13, 21, 24, 25, 34, 35, 41, 49] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 28 31 36 37 38 43 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [19, 23, 28, 31, 36, 37, 38, 43] plays the 28 
Round 2: Kangying holding [15, 27, 33, 42, 45, 46, 47, 48] plays the 48 
Round 2: Minh     holding [11, 14, 16, 17, 29, 39, 40, 44] plays the 44 
Kangying wins the round 

Round 3: Kangying holding [15, 27, 33, 42, 45, 46, 47] plays the 27 
Round 3: Minh     holding [11, 14, 16, 17, 29, 39, 40] plays the 39 
Round 3: Michael  holding [13, 21, 24, 25, 35, 41, 49] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 31 36 37 38 43 0 0 0 

36------------------------------------------------------------------------

Round 3: Eugenius holding [19, 23, 31, 36, 37, 38, 43] plays the 36 
Minh wins the round 

Round 4: Minh     holding [11, 14, 16, 17, 29, 40] plays the 14 
Round 4: Michael  holding [13, 24, 25, 35, 41, 49] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 31 37 38 43 0 0 0 0 

38------------------------------------------------------------------------

Round 4: Eugenius holding [19, 23, 31, 37, 38, 43] plays the 38 
Round 4: Kangying holding [15, 33, 42, 45, 46, 47] plays the 46 
Kangying wins the round 

Round 5: Kangying holding [15, 33, 42, 45, 47] plays the 33 
Round 5: Minh     holding [11, 16, 17, 29, 40] plays the 40 
Round 5: Michael  holding [13, 25, 35, 41, 49] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 31 37 43 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 5: Eugenius holding [19, 23, 31, 37, 43] plays the 19 
Kangying wins the round which contains 1 penalty points

Round 6: Kangying holding [15, 42, 45, 47] plays the 47 
Round 6: Minh     holding [11, 16, 17, 29] plays the 17 
Round 6: Michael  holding [13, 35, 41, 49] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 37 43 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 31, 37, 43] plays the 23 
Kangying wins the round which contains 4 penalty points

Round 7: Kangying holding [15, 42, 45] plays the 42 
Round 7: Minh     holding [11, 16, 29] plays the 16 
Round 7: Michael  holding [13, 35, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 43 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 7: Eugenius holding [31, 37, 43] plays the 31 
Michael wins the round which contains 8 penalty points

Round 8: Michael  holding [13, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
37 43 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 8: Eugenius holding [37, 43] plays the 37 
Round 8: Kangying holding [15, 45] plays the 45 
Round 8: Minh     holding [11, 29] plays the 11 
Kangying wins the round which contains 2 penalty points

Round 9: Kangying holding [15] plays the 15 
Round 9: Minh     holding [29] plays the 29 
Round 9: Michael  holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43 chah------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Kangying wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Minh (system)
#3 with 8 penalty points Michael (system)
#4 with 10 penalty points Kangying (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16766693 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Emily   : [15, 16, 17, 18, 20, 28, 31, 35, 40, 45]
Table position 1: Eugenius: [14, 19, 24, 25, 34, 37, 38, 41, 43, 49]
Table position 2: Zachary : [10, 13, 21, 27, 29, 32, 36, 42, 47, 48]
Table position 3: George  : [11, 12, 22, 23, 26, 30, 33, 39, 44, 46]

Discards:
Emily    [18, 28, 45]
Eugenius [41, 43, 49]
Zachary  [13, 32, 42]
George   [11, 12, 46]

Round 0: Emily    holding [11, 12, 15, 16, 17, 20, 31, 35, 40, 46] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
14 18 19 24 25 28 34 37 38 45 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 18, 19, 24, 25, 28, 34, 37, 38, 45] plays the 14 
Round 0: Zachary  holding [10, 21, 27, 29, 36, 41, 43, 47, 48, 49] plays the 36 
Round 0: George   holding [13, 22, 23, 26, 30, 32, 33, 39, 42, 44] plays the 30 
Emily wins the round 

Round 1: Emily    holding [11, 12, 15, 16, 17, 20, 31, 35, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
18 19 24 25 28 34 37 38 45 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [18, 19, 24, 25, 28, 34, 37, 38, 45] plays the 18 
Round 1: Zachary  holding [10, 21, 27, 29, 41, 43, 47, 48, 49] plays the 10 
Round 1: George   holding [13, 22, 23, 26, 32, 33, 39, 42, 44] plays the 44 
Emily wins the round 

Round 2: Emily    holding [11, 12, 15, 16, 17, 20, 31, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
19 24 25 28 34 37 38 45 0 0 

25------------------------------------------------------------------------

Round 2: Eugenius holding [19, 24, 25, 28, 34, 37, 38, 45] plays the 25 
Round 2: Zachary  holding [21, 27, 29, 41, 43, 47, 48, 49] plays the 21 
Round 2: George   holding [13, 22, 23, 26, 32, 33, 39, 42] plays the 42 
George wins the round which contains 7 penalty points

Round 3: George   holding [13, 22, 23, 26, 32, 33, 39] plays the 33 
Round 3: Emily    holding [11, 12, 15, 16, 17, 20, 31] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
19 24 28 34 37 38 45 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [19, 24, 28, 34, 37, 38, 45] plays the 24 
Round 3: Zachary  holding [27, 29, 41, 43, 47, 48, 49] plays the 27 
George wins the round 

Round 4: George   holding [13, 22, 23, 26, 32, 39] plays the 32 
Round 4: Emily    holding [11, 15, 16, 17, 20, 31] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
19 28 34 37 38 45 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [19, 28, 34, 37, 38, 45] plays the 28 
Round 4: Zachary  holding [29, 41, 43, 47, 48, 49] plays the 48 
Zachary wins the round 

Round 5: Zachary  holding [29, 41, 43, 47, 49] plays the 49 
Round 5: George   holding [13, 22, 23, 26, 39] plays the 23 
Round 5: Emily    holding [11, 15, 16, 17, 31] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
19 34 37 38 45 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 5: Eugenius holding [19, 34, 37, 38, 45] plays the 19 
Zachary wins the round which contains 3 penalty points

Round 6: Zachary  holding [29, 41, 43, 47] plays the 47 
Round 6: George   holding [13, 22, 26, 39] plays the 13 
Round 6: Emily    holding [15, 16, 17, 31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
34 37 38 45 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 6: Eugenius holding [34, 37, 38, 45] plays the 37 
Zachary wins the round which contains 4 penalty points

Round 7: Zachary  holding [29, 41, 43] plays the 29 
Round 7: George   holding [22, 26, 39] plays the 39 
Round 7: Emily    holding [15, 16, 17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
34 38 45 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 7: Eugenius holding [34, 38, 45] plays the 34 
Zachary wins the round which contains 2 penalty points

Round 8: Zachary  holding [41, 43] plays the 41 
Round 8: George   holding [22, 26] plays the 22 
Round 8: Emily    holding [15, 16] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
38 45 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [38, 45] plays the 38 
Zachary wins the round which contains 1 penalty points

Round 9: Zachary  holding [43] plays the 43 
Round 9: George   holding [26] plays the 26 
Round 9: Emily    holding [15] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Zachary wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Emily (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 7 penalty points George (system)
#4 with 11 penalty points Zachary (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6585359 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Mitchell: [11, 12, 14, 15, 22, 25, 29, 42, 47, 49]
Table position 1: Zachary : [20, 21, 23, 24, 26, 30, 32, 34, 36, 45]
Table position 2: Eugenius: [10, 13, 17, 18, 28, 37, 40, 41, 44, 46]
Table position 3: Nathan  : [16, 19, 27, 31, 33, 35, 38, 39, 43, 48]

Discards:
Mitchell [11, 15, 25]
Zachary  [32, 36, 45]
Eugenius [41, 44, 46]
Nathan   [19, 31, 33]

Round 0: Mitchell holding [12, 14, 19, 22, 29, 31, 33, 42, 47, 49] plays the 14 
Round 0: Zachary  holding [11, 15, 20, 21, 23, 24, 25, 26, 30, 34] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
10 13 17 18 28 32 36 37 40 45 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 13, 17, 18, 28, 32, 36, 37, 40, 45] plays the 10 
Round 0: Nathan   holding [16, 27, 35, 38, 39, 41, 43, 44, 46, 48] plays the 44 
Nathan wins the round 

Round 1: Nathan   holding [16, 27, 35, 38, 39, 41, 43, 46, 48] plays the 38 
Round 1: Mitchell holding [12, 19, 22, 29, 31, 33, 42, 47, 49] plays the 12 
Round 1: Zachary  holding [11, 15, 20, 21, 23, 24, 25, 30, 34] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 18 28 32 36 37 40 45 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [13, 17, 18, 28, 32, 36, 37, 40, 45] plays the 18 
Nathan wins the round 

Round 2: Nathan   holding [16, 27, 35, 39, 41, 43, 46, 48] plays the 39 
Round 2: Mitchell holding [19, 22, 29, 31, 33, 42, 47, 49] plays the 33 
Round 2: Zachary  holding [11, 15, 20, 21, 23, 25, 30, 34] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 28 32 36 37 40 45 0 0 

36------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 28, 32, 36, 37, 40, 45] plays the 36 
Nathan wins the round 

Round 3: Nathan   holding [16, 27, 35, 41, 43, 46, 48] plays the 46 
Round 3: Mitchell holding [19, 22, 29, 31, 42, 47, 49] plays the 42 
Round 3: Zachary  holding [11, 20, 21, 23, 25, 30, 34] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 28 32 37 40 45 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 28, 32, 37, 40, 45] plays the 28 
Nathan wins the round which contains 7 penalty points

Round 4: Nathan   holding [16, 27, 35, 41, 43, 48] plays the 27 
Round 4: Mitchell holding [19, 22, 29, 31, 47, 49] plays the 49 
Round 4: Zachary  holding [11, 20, 21, 23, 25, 30] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 32 37 40 45 0 0 0 0 

45------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 32, 37, 40, 45] plays the 45 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 17 32 37 40 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 32, 37, 40] plays the 32 
Round 5: Nathan   holding [16, 35, 41, 43, 48] plays the 16 
Round 5: Mitchell holding [19, 22, 29, 31, 47] plays the 22 
Round 5: Zachary  holding [11, 20, 23, 25, 30] plays the 30 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 17 37 40 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 6: Eugenius holding [13, 17, 37, 40] plays the 40 
Round 6: Nathan   holding [35, 41, 43, 48] plays the 35 
Round 6: Mitchell holding [19, 29, 31, 47] plays the 29 
Round 6: Zachary  holding [11, 20, 23, 25] plays the 20 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 17 37 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 17, 37] plays the 13 
Round 7: Nathan   holding [41, 43, 48] plays the 43 
Round 7: Mitchell holding [19, 31, 47] plays the 19 
Round 7: Zachary  holding [11, 23, 25] plays the 23 
Nathan wins the round which contains 4 penalty points

Round 8: Nathan   holding [41, 48] plays the 41 
Round 8: Mitchell holding [31, 47] plays the 47 
Round 8: Zachary  holding [11, 25] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
17 37 0 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 8: Eugenius holding [17, 37] plays the 17 
Mitchell wins the round which contains 4 penalty points

Round 9: Mitchell holding [31] plays the 31 
Round 9: Zachary  holding [25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Nathan   holding [48] plays the 48 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Zachary (system)
#2 with 3 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Mitchell (system)
#4 with 11 penalty points Nathan (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9774063 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Andrew  : [13, 15, 20, 21, 30, 40, 43, 44, 47, 48]
Table position 1: Dean    : [10, 16, 23, 25, 31, 33, 36, 39, 45, 46]
Table position 2: Nathan  : [11, 14, 17, 18, 22, 27, 32, 34, 37, 41]
Table position 3: Eugenius: [12, 19, 24, 26, 28, 29, 35, 38, 42, 49]

Discards:
Andrew   [21, 40, 47]
Dean     [16, 39, 45]
Nathan   [11, 32, 34]
Eugenius [38, 42, 49]

Round 0: Andrew   holding [13, 15, 20, 30, 38, 42, 43, 44, 48, 49] plays the 20 
Round 0: Dean     holding [10, 21, 23, 25, 31, 33, 36, 40, 46, 47] plays the 10 
Round 0: Nathan   holding [14, 16, 17, 18, 22, 27, 37, 39, 41, 45] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 19 24 26 28 29 32 34 35 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 19, 24, 26, 28, 29, 32, 34, 35] plays the 12 
Andrew wins the round 

Round 1: Andrew   holding [13, 15, 30, 38, 42, 43, 44, 48, 49] plays the 15 
Round 1: Dean     holding [21, 23, 25, 31, 33, 36, 40, 46, 47] plays the 33 
Round 1: Nathan   holding [14, 16, 17, 22, 27, 37, 39, 41, 45] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 24 26 28 29 32 34 35 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [11, 19, 24, 26, 28, 29, 32, 34, 35] plays the 24 
Nathan wins the round 

Round 2: Nathan   holding [14, 16, 17, 22, 27, 37, 41, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 26 28 29 32 34 35 0 0 

35------------------------------------------------------------------------

Round 2: Eugenius holding [11, 19, 26, 28, 29, 32, 34, 35] plays the 35 
Round 2: Andrew   holding [13, 30, 38, 42, 43, 44, 48, 49] plays the 48 
Round 2: Dean     holding [21, 23, 25, 31, 36, 40, 46, 47] plays the 25 
Andrew wins the round 

Round 3: Andrew   holding [13, 30, 38, 42, 43, 44, 49] plays the 38 
Round 3: Dean     holding [21, 23, 31, 36, 40, 46, 47] plays the 46 
Round 3: Nathan   holding [14, 16, 17, 22, 27, 37, 41] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 26 28 29 32 34 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [11, 19, 26, 28, 29, 32, 34] plays the 26 
Dean wins the round 

Round 4: Dean     holding [21, 23, 31, 36, 40, 47] plays the 36 
Round 4: Nathan   holding [16, 17, 22, 27, 37, 41] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 28 29 32 34 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [11, 19, 28, 29, 32, 34] plays the 28 
Round 4: Andrew   holding [13, 30, 42, 43, 44, 49] plays the 44 
Andrew wins the round 

Round 5: Andrew   holding [13, 30, 42, 43, 49] plays the 30 
Round 5: Dean     holding [21, 23, 31, 40, 47] plays the 21 
Round 5: Nathan   holding [17, 22, 27, 37, 41] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 29 32 34 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [11, 19, 29, 32, 34] plays the 32 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 19 29 34 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 6: Eugenius holding [11, 19, 29, 34] plays the 34 
Round 6: Andrew   holding [13, 42, 43, 49] plays the 42 
Round 6: Dean     holding [23, 31, 40, 47] plays the 40 
Round 6: Nathan   holding [17, 27, 37, 41] plays the 41 
Andrew wins the round which contains 8 penalty points

Round 7: Andrew   holding [13, 43, 49] plays the 13 
Round 7: Dean     holding [23, 31, 47] plays the 31 
Round 7: Nathan   holding [17, 27, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 29 0 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 7: Eugenius holding [11, 19, 29] plays the 11 
Nathan wins the round which contains 4 penalty points

Round 8: Nathan   holding [17, 27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 0 0 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 8: Eugenius holding [19, 29] plays the 19 
Round 8: Andrew   holding [43, 49] plays the 49 
Round 8: Dean     holding [23, 47] plays the 47 
Nathan wins the round which contains 2 penalty points

Round 9: Nathan   holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
29 0 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 9: Eugenius holding [29] plays the 29 
Round 9: Andrew   holding [43] plays the 43 
Round 9: Dean     holding [23] plays the 23 
Andrew wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Dean (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Nathan (system)
#4 with 12 penalty points Andrew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 4526565 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Oscar   : [14, 15, 17, 20, 25, 32, 34, 37, 39, 46]
Table position 1: Eugenius: [21, 27, 28, 29, 30, 33, 41, 42, 47, 49]
Table position 2: Xue     : [16, 22, 23, 26, 31, 38, 40, 43, 44, 45]
Table position 3: Kane    : [10, 11, 12, 13, 18, 19, 24, 35, 36, 48]

Discards:
Oscar    [20, 34, 46]
Eugenius [42, 47, 49]
Xue      [26, 31, 45]
Kane     [13, 19, 48]

Round 0: Oscar    holding [13, 14, 15, 17, 19, 25, 32, 37, 39, 48] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
20 21 27 28 29 30 33 34 41 46 

21------------------------------------------------------------------------

Round 0: Eugenius holding [20, 21, 27, 28, 29, 30, 33, 34, 41, 46] plays the 21 
Round 0: Xue      holding [16, 22, 23, 38, 40, 42, 43, 44, 47, 49] plays the 42 
Round 0: Kane     holding [10, 11, 12, 18, 24, 26, 31, 35, 36, 45] plays the 12 
Xue wins the round which contains 7 penalty points

Round 1: Xue      holding [16, 22, 23, 38, 40, 43, 44, 47, 49] plays the 40 
Round 1: Kane     holding [10, 11, 18, 24, 26, 31, 35, 36, 45] plays the 24 
Round 1: Oscar    holding [13, 14, 15, 17, 19, 25, 32, 37, 48] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
20 27 28 29 30 33 34 41 46 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [20, 27, 28, 29, 30, 33, 34, 41, 46] plays the 20 
Xue wins the round 

Round 2: Xue      holding [16, 22, 23, 38, 43, 44, 47, 49] plays the 49 
Round 2: Kane     holding [10, 11, 18, 26, 31, 35, 36, 45] plays the 35 
Round 2: Oscar    holding [13, 15, 17, 19, 25, 32, 37, 48] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
27 28 29 30 33 34 41 46 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [27, 28, 29, 30, 33, 34, 41, 46] plays the 28 
Xue wins the round which contains 1 penalty points

Round 3: Xue      holding [16, 22, 23, 38, 43, 44, 47] plays the 44 
Round 3: Kane     holding [10, 11, 18, 26, 31, 36, 45] plays the 10 
Round 3: Oscar    holding [13, 15, 19, 25, 32, 37, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 30 33 34 41 46 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [27, 29, 30, 33, 34, 41, 46] plays the 30 
Oscar wins the round 

Round 4: Oscar    holding [13, 15, 19, 25, 32, 37] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 33 34 41 46 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [27, 29, 33, 34, 41, 46] plays the 27 
Round 4: Xue      holding [16, 22, 23, 38, 43, 47] plays the 22 
Round 4: Kane     holding [11, 18, 26, 31, 36, 45] plays the 18 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
29 33 34 41 46 0 0 0 0 0 

29------------------------------------------------------------------------

Round 5: Eugenius holding [29, 33, 34, 41, 46] plays the 29 
Round 5: Xue      holding [16, 23, 38, 43, 47] plays the 43 
Round 5: Kane     holding [11, 26, 31, 36, 45] plays the 11 
Round 5: Oscar    holding [13, 19, 25, 32, 37] plays the 19 
Xue wins the round which contains 4 penalty points

Round 6: Xue      holding [16, 23, 38, 47] plays the 47 
Round 6: Kane     holding [26, 31, 36, 45] plays the 31 
Round 6: Oscar    holding [13, 25, 32, 37] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
33 34 41 46 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 6: Eugenius holding [33, 34, 41, 46] plays the 41 
Xue wins the round which contains 4 penalty points

Round 7: Xue      holding [16, 23, 38] plays the 16 
Round 7: Kane     holding [26, 36, 45] plays the 36 
Round 7: Oscar    holding [25, 32, 37] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
33 34 46 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 7: Eugenius holding [33, 34, 46] plays the 34 
Kane wins the round 

Round 8: Kane     holding [26, 45] plays the 26 
Round 8: Oscar    holding [25, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
33 46 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 8: Eugenius holding [33, 46] plays the 46 
Round 8: Xue      holding [23, 38] plays the 38 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
33 0 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 9: Eugenius holding [33] plays the 33 
Round 9: Xue      holding [23] plays the 23 
Round 9: Kane     holding [45] plays the 45 
Round 9: Oscar    holding [25] plays the 25 
Kane wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Oscar (system)
#2 with 1 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Kane (system)
#4 with 16 penalty points Xue (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7359124 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: George  : [20, 21, 22, 24, 27, 29, 34, 42, 44, 48]
Table position 1: Marc    : [10, 11, 13, 15, 23, 25, 30, 32, 37, 43]
Table position 2: Reede   : [12, 16, 17, 28, 40, 41, 45, 46, 47, 49]
Table position 3: Eugenius: [14, 18, 19, 26, 31, 33, 35, 36, 38, 39]

Discards:
George   [22, 42, 44]
Marc     [10, 11, 30]
Reede    [17, 41, 47]
Eugenius [36, 38, 39]

Round 0: George   holding [20, 21, 24, 27, 29, 34, 36, 38, 39, 48] plays the 21 
Round 0: Marc     holding [13, 15, 22, 23, 25, 32, 37, 42, 43, 44] plays the 42 
Round 0: Reede    holding [10, 11, 12, 16, 28, 30, 40, 45, 46, 49] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 18 19 26 31 33 35 41 47 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 17, 18, 19, 26, 31, 33, 35, 41, 47] plays the 14 
Marc wins the round which contains 7 penalty points

Round 1: Marc     holding [13, 15, 22, 23, 25, 32, 37, 43, 44] plays the 22 
Round 1: Reede    holding [10, 11, 12, 16, 30, 40, 45, 46, 49] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
17 18 19 26 31 33 35 41 47 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [17, 18, 19, 26, 31, 33, 35, 41, 47] plays the 18 
Round 1: George   holding [20, 24, 27, 29, 34, 36, 38, 39, 48] plays the 34 
George wins the round 

Round 2: George   holding [20, 24, 27, 29, 36, 38, 39, 48] plays the 20 
Round 2: Marc     holding [13, 15, 23, 25, 32, 37, 43, 44] plays the 32 
Round 2: Reede    holding [10, 11, 12, 30, 40, 45, 46, 49] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 26 31 33 35 41 47 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [17, 19, 26, 31, 33, 35, 41, 47] plays the 26 
Marc wins the round 

Round 3: Marc     holding [13, 15, 23, 25, 37, 43, 44] plays the 44 
Round 3: Reede    holding [10, 11, 12, 40, 45, 46, 49] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 31 33 35 41 47 0 0 0 

33------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 31, 33, 35, 41, 47] plays the 33 
Round 3: George   holding [24, 27, 29, 36, 38, 39, 48] plays the 24 
Marc wins the round 

Round 4: Marc     holding [13, 15, 23, 25, 37, 43] plays the 25 
Round 4: Reede    holding [11, 12, 40, 45, 46, 49] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 31 35 41 47 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 31, 35, 41, 47] plays the 35 
Round 4: George   holding [27, 29, 36, 38, 39, 48] plays the 27 
Reede wins the round 

Round 5: Reede    holding [11, 12, 45, 46, 49] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 31 41 47 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 31, 41, 47] plays the 17 
Round 5: George   holding [29, 36, 38, 39, 48] plays the 39 
Round 5: Marc     holding [13, 15, 23, 37, 43] plays the 15 
Reede wins the round which contains 1 penalty points

Round 6: Reede    holding [11, 12, 46, 49] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
19 31 41 47 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 31, 41, 47] plays the 19 
Round 6: George   holding [29, 36, 38, 48] plays the 29 
Round 6: Marc     holding [13, 23, 37, 43] plays the 13 
George wins the round which contains 4 penalty points

Round 7: George   holding [36, 38, 48] plays the 38 
Round 7: Marc     holding [23, 37, 43] plays the 23 
Round 7: Reede    holding [12, 46, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
31 41 47 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 7: Eugenius holding [31, 41, 47] plays the 31 
Reede wins the round which contains 2 penalty points

Round 8: Reede    holding [12, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
41 47 0 0 0 0 0 0 0 0 

41 chah------------------------------------------------------------------------

Round 8: Eugenius holding [41, 47] plays the 41 
Round 8: George   holding [36, 48] plays the 48 
Round 8: Marc     holding [37, 43] plays the 43 
Reede wins the round which contains 2 penalty points

Round 9: Reede    holding [12] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
47 0 0 0 0 0 0 0 0 0 

47 chah------------------------------------------------------------------------

Round 9: Eugenius holding [47] plays the 47 
Round 9: George   holding [36] plays the 36 
Round 9: Marc     holding [37] plays the 37 
George wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 5 penalty points Reede (system)
#3 with 6 penalty points George (system)
#4 with 7 penalty points Marc (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1681191 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [14, 20, 24, 31, 34, 35, 36, 38, 41, 45]
Table position 1: Finbar  : [10, 12, 13, 18, 22, 25, 26, 32, 33, 40]
Table position 2: George  : [11, 21, 28, 30, 39, 43, 44, 46, 47, 48]
Table position 3: Reede   : [15, 16, 17, 19, 23, 27, 29, 37, 42, 49]

Discards:
Eugenius [38, 41, 45]
Finbar   [13, 25, 26]
George   [11, 44, 47]
Reede    [16, 23, 37]


Debug output from Eugenius
------------------------------------------------------------------------
14 16 20 23 24 31 34 35 36 37 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 16, 20, 23, 24, 31, 34, 35, 36, 37] plays the 14 
Round 0: Finbar   holding [10, 12, 18, 22, 32, 33, 38, 40, 41, 45] plays the 40 
Round 0: George   holding [13, 21, 25, 26, 28, 30, 39, 43, 46, 48] plays the 48 
Round 0: Reede    holding [11, 15, 17, 19, 27, 29, 42, 44, 47, 49] plays the 42 
George wins the round which contains 7 penalty points

Round 1: George   holding [13, 21, 25, 26, 28, 30, 39, 43, 46] plays the 25 
Round 1: Reede    holding [11, 15, 17, 19, 27, 29, 44, 47, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
16 20 23 24 31 34 35 36 37 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [16, 20, 23, 24, 31, 34, 35, 36, 37] plays the 20 
Round 1: Finbar   holding [10, 12, 18, 22, 32, 33, 38, 41, 45] plays the 10 
George wins the round 

Round 2: George   holding [13, 21, 26, 28, 30, 39, 43, 46] plays the 39 
Round 2: Reede    holding [11, 17, 19, 27, 29, 44, 47, 49] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
16 23 24 31 34 35 36 37 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [16, 23, 24, 31, 34, 35, 36, 37] plays the 24 
Round 2: Finbar   holding [12, 18, 22, 32, 33, 38, 41, 45] plays the 12 
George wins the round 

Round 3: George   holding [13, 21, 26, 28, 30, 43, 46] plays the 21 
Round 3: Reede    holding [11, 17, 19, 29, 44, 47, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
16 23 31 34 35 36 37 0 0 0 

35------------------------------------------------------------------------

Round 3: Eugenius holding [16, 23, 31, 34, 35, 36, 37] plays the 35 
Round 3: Finbar   holding [18, 22, 32, 33, 38, 41, 45] plays the 33 
Reede wins the round 

Round 4: Reede    holding [11, 17, 19, 29, 44, 47] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
16 23 31 34 36 37 0 0 0 0 

16------------------------------------------------------------------------

Round 4: Eugenius holding [16, 23, 31, 34, 36, 37] plays the 16 
Round 4: Finbar   holding [18, 22, 32, 38, 41, 45] plays the 22 
Round 4: George   holding [13, 26, 28, 30, 43, 46] plays the 46 
George wins the round 

Round 5: George   holding [13, 26, 28, 30, 43] plays the 28 
Round 5: Reede    holding [11, 17, 19, 29, 47] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 34 36 37 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [23, 31, 34, 36, 37] plays the 34 
Round 5: Finbar   holding [18, 32, 38, 41, 45] plays the 18 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
23 31 36 37 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 31, 36, 37] plays the 23 
Round 6: Finbar   holding [32, 38, 41, 45] plays the 41 
Round 6: George   holding [13, 26, 30, 43] plays the 13 
Round 6: Reede    holding [17, 19, 29, 47] plays the 29 
Finbar wins the round which contains 4 penalty points

Round 7: Finbar   holding [32, 38, 45] plays the 45 
Round 7: George   holding [26, 30, 43] plays the 30 
Round 7: Reede    holding [17, 19, 47] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
31 36 37 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 7: Eugenius holding [31, 36, 37] plays the 36 
Finbar wins the round which contains 1 penalty points

Round 8: Finbar   holding [32, 38] plays the 32 
Round 8: George   holding [26, 43] plays the 26 
Round 8: Reede    holding [17, 47] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius holding [31, 37] plays the 31 
Finbar wins the round which contains 2 penalty points

Round 9: Finbar   holding [38] plays the 38 
Round 9: George   holding [43] plays the 43 
Round 9: Reede    holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Finbar wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Reede (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 7 penalty points George (system)
#4 with 10 penalty points Finbar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 8375256 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [23, 25, 27, 28, 39, 40, 41, 43, 44, 49]
Table position 1: Gal     : [12, 15, 16, 17, 19, 20, 21, 24, 29, 48]
Table position 2: Zachary : [11, 13, 18, 22, 31, 33, 34, 35, 42, 45]
Table position 3: Minh    : [10, 14, 26, 30, 32, 36, 37, 38, 46, 47]

Discards:
Eugenius [43, 44, 49]
Gal      [19, 20, 48]
Zachary  [13, 18, 22]
Minh     [30, 46, 47]


Debug output from Eugenius
------------------------------------------------------------------------
23 25 27 28 30 39 40 41 46 47 

25------------------------------------------------------------------------

Round 0: Eugenius holding [23, 25, 27, 28, 30, 39, 40, 41, 46, 47] plays the 25 
Round 0: Gal      holding [12, 15, 16, 17, 21, 24, 29, 43, 44, 49] plays the 15 
Round 0: Zachary  holding [11, 19, 20, 31, 33, 34, 35, 42, 45, 48] plays the 35 
Round 0: Minh     holding [10, 13, 14, 18, 22, 26, 32, 36, 37, 38] plays the 10 
Zachary wins the round 

Round 1: Zachary  holding [11, 19, 20, 31, 33, 34, 42, 45, 48] plays the 48 
Round 1: Minh     holding [13, 14, 18, 22, 26, 32, 36, 37, 38] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
23 27 28 30 39 40 41 46 47 0 

27------------------------------------------------------------------------

Round 1: Eugenius holding [23, 27, 28, 30, 39, 40, 41, 46, 47] plays the 27 
Round 1: Gal      holding [12, 16, 17, 21, 24, 29, 43, 44, 49] plays the 12 
Zachary wins the round 

Round 2: Zachary  holding [11, 19, 20, 31, 33, 34, 42, 45] plays the 34 
Round 2: Minh     holding [13, 18, 22, 26, 32, 36, 37, 38] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
23 28 30 39 40 41 46 47 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [23, 28, 30, 39, 40, 41, 46, 47] plays the 28 
Round 2: Gal      holding [16, 17, 21, 24, 29, 43, 44, 49] plays the 16 
Zachary wins the round 

Round 3: Zachary  holding [11, 19, 20, 31, 33, 42, 45] plays the 33 
Round 3: Minh     holding [13, 18, 26, 32, 36, 37, 38] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
23 30 39 40 41 46 47 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [23, 30, 39, 40, 41, 46, 47] plays the 30 
Round 3: Gal      holding [17, 21, 24, 29, 43, 44, 49] plays the 24 
Minh wins the round 

Round 4: Minh     holding [13, 18, 26, 32, 37, 38] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
23 39 40 41 46 47 0 0 0 0 

40------------------------------------------------------------------------

Round 4: Eugenius holding [23, 39, 40, 41, 46, 47] plays the 40 
Round 4: Gal      holding [17, 21, 29, 43, 44, 49] plays the 44 
Round 4: Zachary  holding [11, 19, 20, 31, 42, 45] plays the 42 
Gal wins the round which contains 7 penalty points

Round 5: Gal      holding [17, 21, 29, 43, 49] plays the 21 
Round 5: Zachary  holding [11, 19, 20, 31, 45] plays the 45 
Round 5: Minh     holding [13, 18, 26, 37, 38] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
23 39 41 46 47 0 0 0 0 0 

39------------------------------------------------------------------------

Round 5: Eugenius holding [23, 39, 41, 46, 47] plays the 39 
Zachary wins the round 

Round 6: Zachary  holding [11, 19, 20, 31] plays the 20 
Round 6: Minh     holding [13, 26, 37, 38] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
23 41 46 47 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 6: Eugenius holding [23, 41, 46, 47] plays the 46 
Round 6: Gal      holding [17, 29, 43, 49] plays the 49 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
23 41 47 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius holding [23, 41, 47] plays the 23 
Round 7: Gal      holding [17, 29, 43] plays the 43 
Round 7: Zachary  holding [11, 19, 31] plays the 19 
Round 7: Minh     holding [13, 37, 38] plays the 37 
Gal wins the round which contains 4 penalty points

Round 8: Gal      holding [17, 29] plays the 17 
Round 8: Zachary  holding [11, 31] plays the 31 
Round 8: Minh     holding [13, 38] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
41 47 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 8: Eugenius holding [41, 47] plays the 41 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
47 0 0 0 0 0 0 0 0 0 

47------------------------------------------------------------------------

Round 9: Eugenius holding [47] plays the 47 
Round 9: Gal      holding [29] plays the 29 
Round 9: Zachary  holding [11] plays the 11 
Round 9: Minh     holding [38] plays the 38 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Zachary (system)
#1 with 0 penalty points Minh (system)
#3 with 7 penalty points Eugenius (dodo.c)
#4 with 11 penalty points Gal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13723382 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Andrew  : [13, 15, 19, 21, 22, 32, 40, 42, 44, 49]
Table position 1: Eugenius: [11, 17, 20, 24, 34, 35, 38, 39, 43, 45]
Table position 2: Benjamin: [10, 14, 18, 26, 27, 29, 30, 31, 33, 36]
Table position 3: Sabrina : [12, 16, 23, 25, 28, 37, 41, 46, 47, 48]

Discards:
Andrew   [15, 44, 49]
Eugenius [39, 43, 45]
Benjamin [10, 18, 26]
Sabrina  [23, 37, 48]

Round 0: Andrew   holding [13, 19, 21, 22, 23, 32, 37, 40, 42, 48] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 17 20 24 34 35 38 44 49 

15------------------------------------------------------------------------

Round 0: Eugenius holding [11, 15, 17, 20, 24, 34, 35, 38, 44, 49] plays the 15 
Round 0: Benjamin holding [14, 27, 29, 30, 31, 33, 36, 39, 43, 45] plays the 27 
Round 0: Sabrina  holding [10, 12, 16, 18, 25, 26, 28, 41, 46, 47] plays the 12 
Benjamin wins the round 

Round 1: Benjamin holding [14, 29, 30, 31, 33, 36, 39, 43, 45] plays the 39 
Round 1: Sabrina  holding [10, 16, 18, 25, 26, 28, 41, 46, 47] plays the 18 
Round 1: Andrew   holding [13, 19, 22, 23, 32, 37, 40, 42, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 20 24 34 35 38 44 49 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [11, 17, 20, 24, 34, 35, 38, 44, 49] plays the 24 
Andrew wins the round 

Round 2: Andrew   holding [13, 19, 22, 23, 32, 37, 40, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 20 34 35 38 44 49 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [11, 17, 20, 34, 35, 38, 44, 49] plays the 20 
Round 2: Benjamin holding [14, 29, 30, 31, 33, 36, 43, 45] plays the 14 
Round 2: Sabrina  holding [10, 16, 25, 26, 28, 41, 46, 47] plays the 26 
Andrew wins the round which contains 7 penalty points

Round 3: Andrew   holding [13, 19, 22, 23, 32, 37, 40] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 34 35 38 44 49 0 0 0 

34------------------------------------------------------------------------

Round 3: Eugenius holding [11, 17, 34, 35, 38, 44, 49] plays the 34 
Round 3: Benjamin holding [29, 30, 31, 33, 36, 43, 45] plays the 33 
Round 3: Sabrina  holding [10, 16, 25, 28, 41, 46, 47] plays the 10 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 17 35 38 44 49 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [11, 17, 35, 38, 44, 49] plays the 35 
Round 4: Benjamin holding [29, 30, 31, 36, 43, 45] plays the 45 
Round 4: Sabrina  holding [16, 25, 28, 41, 46, 47] plays the 25 
Round 4: Andrew   holding [13, 19, 23, 32, 37, 40] plays the 40 
Benjamin wins the round 

Round 5: Benjamin holding [29, 30, 31, 36, 43] plays the 30 
Round 5: Sabrina  holding [16, 28, 41, 46, 47] plays the 46 
Round 5: Andrew   holding [13, 19, 23, 32, 37] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 38 44 49 0 0 0 0 0 

38------------------------------------------------------------------------

Round 5: Eugenius holding [11, 17, 38, 44, 49] plays the 38 
Sabrina wins the round 

Round 6: Sabrina  holding [16, 28, 41, 47] plays the 28 
Round 6: Andrew   holding [13, 19, 23, 37] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 44 49 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 6: Eugenius holding [11, 17, 44, 49] plays the 44 
Round 6: Benjamin holding [29, 31, 36, 43] plays the 36 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
11 17 49 0 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 7: Eugenius holding [11, 17, 49] plays the 11 
Round 7: Benjamin holding [29, 31, 43] plays the 43 
Round 7: Sabrina  holding [16, 41, 47] plays the 47 
Round 7: Andrew   holding [19, 23, 37] plays the 23 
Sabrina wins the round which contains 4 penalty points

Round 8: Sabrina  holding [16, 41] plays the 41 
Round 8: Andrew   holding [19, 37] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
17 49 0 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 8: Eugenius holding [17, 49] plays the 17 
Round 8: Benjamin holding [29, 31] plays the 29 
Sabrina wins the round which contains 4 penalty points

Round 9: Sabrina  holding [16] plays the 16 
Round 9: Andrew   holding [37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49 chah------------------------------------------------------------------------

Round 9: Eugenius holding [49] plays the 49 
Round 9: Benjamin holding [31] plays the 31 
Sabrina wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Benjamin (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Andrew (system)
#4 with 10 penalty points Sabrina (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2453281 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [18, 23, 24, 25, 27, 28, 33, 40, 44, 46]
Table position 1: Nathan  : [10, 12, 13, 15, 16, 34, 38, 42, 43, 45]
Table position 2: Jamal   : [14, 17, 19, 20, 29, 30, 32, 35, 36, 48]
Table position 3: Harrison: [11, 21, 22, 26, 31, 37, 39, 41, 47, 49]

Discards:
Eugenius [40, 44, 46]
Nathan   [13, 38, 42]
Jamal    [19, 20, 36]
Harrison [11, 39, 49]


Debug output from Eugenius
------------------------------------------------------------------------
11 18 23 24 25 27 28 33 39 49 

18------------------------------------------------------------------------

Round 0: Eugenius holding [11, 18, 23, 24, 25, 27, 28, 33, 39, 49] plays the 18 
Round 0: Nathan   holding [10, 12, 15, 16, 34, 40, 43, 44, 45, 46] plays the 45 
Round 0: Jamal    holding [13, 14, 17, 29, 30, 32, 35, 38, 42, 48] plays the 48 
Round 0: Harrison holding [19, 20, 21, 22, 26, 31, 36, 37, 41, 47] plays the 22 
Jamal wins the round 

Round 1: Jamal    holding [13, 14, 17, 29, 30, 32, 35, 38, 42] plays the 38 
Round 1: Harrison holding [19, 20, 21, 26, 31, 36, 37, 41, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 24 25 27 28 33 39 49 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [11, 23, 24, 25, 27, 28, 33, 39, 49] plays the 24 
Round 1: Nathan   holding [10, 12, 15, 16, 34, 40, 43, 44, 46] plays the 44 
Nathan wins the round 

Round 2: Nathan   holding [10, 12, 15, 16, 34, 40, 43, 46] plays the 40 
Round 2: Jamal    holding [13, 14, 17, 29, 30, 32, 35, 42] plays the 30 
Round 2: Harrison holding [19, 21, 26, 31, 36, 37, 41, 47] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 25 27 28 33 39 49 0 0 

25------------------------------------------------------------------------

Round 2: Eugenius holding [11, 23, 25, 27, 28, 33, 39, 49] plays the 25 
Nathan wins the round 

Round 3: Nathan   holding [10, 12, 15, 16, 34, 43, 46] plays the 16 
Round 3: Jamal    holding [13, 14, 17, 29, 32, 35, 42] plays the 32 
Round 3: Harrison holding [19, 21, 26, 31, 37, 41, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 27 28 33 39 49 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [11, 23, 27, 28, 33, 39, 49] plays the 28 
Jamal wins the round 

Round 4: Jamal    holding [13, 14, 17, 29, 35, 42] plays the 42 
Round 4: Harrison holding [19, 21, 31, 37, 41, 47] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 27 33 39 49 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [11, 23, 27, 33, 39, 49] plays the 27 
Round 4: Nathan   holding [10, 12, 15, 34, 43, 46] plays the 10 
Jamal wins the round which contains 7 penalty points

Round 5: Jamal    holding [13, 14, 17, 29, 35] plays the 35 
Round 5: Harrison holding [19, 31, 37, 41, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 33 39 49 0 0 0 0 0 

49------------------------------------------------------------------------

Round 5: Eugenius holding [11, 23, 33, 39, 49] plays the 49 
Round 5: Nathan   holding [12, 15, 34, 43, 46] plays the 15 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
11 23 33 39 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 23, 33, 39] plays the 11 
Round 6: Nathan   holding [12, 34, 43, 46] plays the 43 
Round 6: Jamal    holding [13, 14, 17, 29] plays the 17 
Round 6: Harrison holding [19, 31, 37, 41] plays the 19 
Nathan wins the round which contains 4 penalty points

Round 7: Nathan   holding [12, 34, 46] plays the 46 
Round 7: Jamal    holding [13, 14, 29] plays the 14 
Round 7: Harrison holding [31, 37, 41] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
23 33 39 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 7: Eugenius holding [23, 33, 39] plays the 23 
Nathan wins the round which contains 2 penalty points

Round 8: Nathan   holding [12, 34] plays the 34 
Round 8: Jamal    holding [13, 29] plays the 13 
Round 8: Harrison holding [31, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
33 39 0 0 0 0 0 0 0 0 

33 chah------------------------------------------------------------------------

Round 8: Eugenius holding [33, 39] plays the 33 
Nathan wins the round which contains 2 penalty points

Round 9: Nathan   holding [12] plays the 12 
Round 9: Jamal    holding [29] plays the 29 
Round 9: Harrison holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Harrison (system)
#2 with 3 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Jamal (system)
#4 with 8 penalty points Nathan (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16193771 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Reede   : [10, 11, 14, 16, 30, 34, 36, 38, 42, 44]
Table position 1: Aydin   : [15, 17, 19, 22, 29, 35, 43, 45, 47, 49]
Table position 2: Eugenius: [12, 24, 27, 28, 33, 37, 39, 40, 41, 48]
Table position 3: Dylan   : [13, 18, 20, 21, 23, 25, 26, 31, 32, 46]

Discards:
Reede    [30, 42, 44]
Aydin    [17, 22, 45]
Eugenius [40, 41, 48]
Dylan    [13, 21, 23]

Round 0: Reede    holding [10, 11, 13, 14, 16, 21, 23, 34, 36, 38] plays the 16 
Round 0: Aydin    holding [15, 19, 29, 30, 35, 42, 43, 44, 47, 49] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
12 17 22 24 27 28 33 37 39 45 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 17, 22, 24, 27, 28, 33, 37, 39, 45] plays the 12 
Round 0: Dylan    holding [18, 20, 25, 26, 31, 32, 40, 41, 46, 48] plays the 48 
Dylan wins the round which contains 7 penalty points

Round 1: Dylan    holding [18, 20, 25, 26, 31, 32, 40, 41, 46] plays the 46 
Round 1: Reede    holding [10, 11, 13, 14, 21, 23, 34, 36, 38] plays the 14 
Round 1: Aydin    holding [15, 19, 29, 30, 35, 43, 44, 47, 49] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 24 27 28 33 37 39 45 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [17, 22, 24, 27, 28, 33, 37, 39, 45] plays the 22 
Dylan wins the round 

Round 2: Dylan    holding [18, 20, 25, 26, 31, 32, 40, 41] plays the 25 
Round 2: Reede    holding [10, 11, 13, 21, 23, 34, 36, 38] plays the 10 
Round 2: Aydin    holding [15, 19, 29, 35, 43, 44, 47, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
17 24 27 28 33 37 39 45 0 0 

45------------------------------------------------------------------------

Round 2: Eugenius holding [17, 24, 27, 28, 33, 37, 39, 45] plays the 45 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
17 24 27 28 33 37 39 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [17, 24, 27, 28, 33, 37, 39] plays the 24 
Round 3: Dylan    holding [18, 20, 26, 31, 32, 40, 41] plays the 32 
Round 3: Reede    holding [11, 13, 21, 23, 34, 36, 38] plays the 21 
Round 3: Aydin    holding [19, 29, 35, 43, 44, 47, 49] plays the 44 
Aydin wins the round 

Round 4: Aydin    holding [19, 29, 35, 43, 47, 49] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 28 33 37 39 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [17, 27, 28, 33, 37, 39] plays the 28 
Round 4: Dylan    holding [18, 20, 26, 31, 40, 41] plays the 40 
Round 4: Reede    holding [11, 13, 23, 34, 36, 38] plays the 38 
Dylan wins the round 

Round 5: Dylan    holding [18, 20, 26, 31, 41] plays the 20 
Round 5: Reede    holding [11, 13, 23, 34, 36] plays the 36 
Round 5: Aydin    holding [19, 29, 43, 47, 49] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 33 37 39 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 5: Eugenius holding [17, 27, 33, 37, 39] plays the 17 
Reede wins the round which contains 2 penalty points

Round 6: Reede    holding [11, 13, 23, 34] plays the 23 
Round 6: Aydin    holding [19, 29, 47, 49] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
27 33 37 39 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 6: Eugenius holding [27, 33, 37, 39] plays the 37 
Round 6: Dylan    holding [18, 26, 31, 41] plays the 41 
Aydin wins the round which contains 4 penalty points

Round 7: Aydin    holding [19, 29, 49] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
27 33 39 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [27, 33, 39] plays the 27 
Round 7: Dylan    holding [18, 26, 31] plays the 31 
Round 7: Reede    holding [11, 13, 34] plays the 13 
Dylan wins the round which contains 3 penalty points

Round 8: Dylan    holding [18, 26] plays the 18 
Round 8: Reede    holding [11, 34] plays the 34 
Round 8: Aydin    holding [29, 49] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
33 39 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 8: Eugenius holding [33, 39] plays the 33 
Reede wins the round which contains 1 penalty points

Round 9: Reede    holding [11] plays the 11 
Round 9: Aydin    holding [49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Round 9: Dylan    holding [26] plays the 26 
Reede wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Reede (system)
#2 with 4 penalty points Aydin (system)
#4 with 10 penalty points Dylan (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11086414 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Michael : [13, 15, 16, 17, 18, 19, 26, 33, 36, 37]
Table position 1: Nicholas: [11, 23, 24, 31, 35, 39, 40, 44, 45, 47]
Table position 2: Eugenius: [10, 14, 21, 22, 25, 27, 28, 29, 41, 48]
Table position 3: Kane    : [12, 20, 30, 32, 34, 38, 42, 43, 46, 49]

Discards:
Michael  [13, 17, 37]
Nicholas [24, 31, 39]
Eugenius [29, 41, 48]
Kane     [20, 32, 46]

Round 0: Michael  holding [15, 16, 18, 19, 20, 26, 32, 33, 36, 46] plays the 33 
Round 0: Nicholas holding [11, 13, 17, 23, 35, 37, 40, 44, 45, 47] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
10 14 21 22 24 25 27 28 31 39 

21------------------------------------------------------------------------

Round 0: Eugenius holding [10, 14, 21, 22, 24, 25, 27, 28, 31, 39] plays the 21 
Round 0: Kane     holding [12, 29, 30, 34, 38, 41, 42, 43, 48, 49] plays the 30 
Nicholas wins the round 

Round 1: Nicholas holding [11, 13, 17, 23, 35, 37, 40, 45, 47] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
10 14 22 24 25 27 28 31 39 0 

10------------------------------------------------------------------------

Round 1: Eugenius holding [10, 14, 22, 24, 25, 27, 28, 31, 39] plays the 10 
Round 1: Kane     holding [12, 29, 34, 38, 41, 42, 43, 48, 49] plays the 49 
Round 1: Michael  holding [15, 16, 18, 19, 20, 26, 32, 36, 46] plays the 20 
Kane wins the round 

Round 2: Kane     holding [12, 29, 34, 38, 41, 42, 43, 48] plays the 12 
Round 2: Michael  holding [15, 16, 18, 19, 26, 32, 36, 46] plays the 18 
Round 2: Nicholas holding [11, 13, 17, 23, 37, 40, 45, 47] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
14 22 24 25 27 28 31 39 0 0 

14------------------------------------------------------------------------

Round 2: Eugenius holding [14, 22, 24, 25, 27, 28, 31, 39] plays the 14 
Nicholas wins the round 

Round 3: Nicholas holding [11, 13, 17, 23, 37, 40, 47] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
22 24 25 27 28 31 39 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [22, 24, 25, 27, 28, 31, 39] plays the 22 
Round 3: Kane     holding [29, 34, 38, 41, 42, 43, 48] plays the 38 
Round 3: Michael  holding [15, 16, 19, 26, 32, 36, 46] plays the 46 
Michael wins the round 

Round 4: Michael  holding [15, 16, 19, 26, 32, 36] plays the 36 
Round 4: Nicholas holding [11, 13, 17, 23, 37, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
24 25 27 28 31 39 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius holding [24, 25, 27, 28, 31, 39] plays the 24 
Round 4: Kane     holding [29, 34, 41, 42, 43, 48] plays the 48 
Kane wins the round which contains 1 penalty points

Round 5: Kane     holding [29, 34, 41, 42, 43] plays the 29 
Round 5: Michael  holding [15, 16, 19, 26, 32] plays the 19 
Round 5: Nicholas holding [11, 13, 17, 23, 37] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
25 27 28 31 39 0 0 0 0 0 

31------------------------------------------------------------------------

Round 5: Eugenius holding [25, 27, 28, 31, 39] plays the 31 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
25 27 28 39 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 6: Eugenius holding [25, 27, 28, 39] plays the 25 
Round 6: Kane     holding [34, 41, 42, 43] plays the 41 
Round 6: Michael  holding [15, 16, 26, 32] plays the 15 
Round 6: Nicholas holding [11, 17, 23, 37] plays the 23 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
27 28 39 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [27, 28, 39] plays the 27 
Round 7: Kane     holding [34, 42, 43] plays the 42 
Round 7: Michael  holding [16, 26, 32] plays the 32 
Round 7: Nicholas holding [11, 17, 37] plays the 11 
Kane wins the round which contains 8 penalty points

Round 8: Kane     holding [34, 43] plays the 43 
Round 8: Michael  holding [16, 26] plays the 26 
Round 8: Nicholas holding [17, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
28 39 0 0 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 8: Eugenius holding [28, 39] plays the 28 
Kane wins the round which contains 2 penalty points

Round 9: Kane     holding [34] plays the 34 
Round 9: Michael  holding [16] plays the 16 
Round 9: Nicholas holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39 chah------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Kane wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Michael (system)
#1 with 0 penalty points Nicholas (system)
#3 with 6 penalty points Eugenius (dodo.c)
#4 with 12 penalty points Kane (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5879927 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 17, 24, 33, 34, 40, 41, 42, 45, 47]
Table position 1: Dean    : [12, 14, 18, 21, 25, 29, 36, 38, 39, 48]
Table position 2: Nicholas: [15, 16, 19, 20, 23, 28, 31, 32, 35, 44]
Table position 3: Vincent : [11, 13, 22, 26, 27, 30, 37, 43, 46, 49]

Discards:
Eugenius [42, 45, 47]
Dean     [12, 14, 39]
Nicholas [19, 31, 44]
Vincent  [26, 30, 46]


Debug output from Eugenius
------------------------------------------------------------------------
10 17 24 26 30 33 34 40 41 46 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 17, 24, 26, 30, 33, 34, 40, 41, 46] plays the 10 
Round 0: Dean     holding [18, 21, 25, 29, 36, 38, 42, 45, 47, 48] plays the 48 
Round 0: Nicholas holding [12, 14, 15, 16, 20, 23, 28, 32, 35, 39] plays the 14 
Round 0: Vincent  holding [11, 13, 19, 22, 27, 31, 37, 43, 44, 49] plays the 44 
Dean wins the round 

Round 1: Dean     holding [18, 21, 25, 29, 36, 38, 42, 45, 47] plays the 38 
Round 1: Nicholas holding [12, 15, 16, 20, 23, 28, 32, 35, 39] plays the 16 
Round 1: Vincent  holding [11, 13, 19, 22, 27, 31, 37, 43, 49] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
17 24 26 30 33 34 40 41 46 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [17, 24, 26, 30, 33, 34, 40, 41, 46] plays the 24 
Dean wins the round 

Round 2: Dean     holding [18, 21, 25, 29, 36, 42, 45, 47] plays the 36 
Round 2: Nicholas holding [12, 15, 20, 23, 28, 32, 35, 39] plays the 20 
Round 2: Vincent  holding [11, 13, 19, 27, 31, 37, 43, 49] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
17 26 30 33 34 40 41 46 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [17, 26, 30, 33, 34, 40, 41, 46] plays the 26 
Dean wins the round 

Round 3: Dean     holding [18, 21, 25, 29, 42, 45, 47] plays the 45 
Round 3: Nicholas holding [12, 15, 23, 28, 32, 35, 39] plays the 12 
Round 3: Vincent  holding [11, 13, 19, 31, 37, 43, 49] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
17 30 33 34 40 41 46 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [17, 30, 33, 34, 40, 41, 46] plays the 30 
Dean wins the round which contains 1 penalty points

Round 4: Dean     holding [18, 21, 25, 29, 42, 47] plays the 29 
Round 4: Nicholas holding [15, 23, 28, 32, 35, 39] plays the 23 
Round 4: Vincent  holding [13, 19, 31, 37, 43, 49] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
17 33 34 40 41 46 0 0 0 0 

17------------------------------------------------------------------------

Round 4: Eugenius holding [17, 33, 34, 40, 41, 46] plays the 17 
Vincent wins the round which contains 4 penalty points

Round 5: Vincent  holding [13, 19, 31, 37, 49] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
33 34 40 41 46 0 0 0 0 0 

41------------------------------------------------------------------------

Round 5: Eugenius holding [33, 34, 40, 41, 46] plays the 41 
Round 5: Dean     holding [18, 21, 25, 42, 47] plays the 47 
Round 5: Nicholas holding [15, 28, 32, 35, 39] plays the 28 
Dean wins the round which contains 3 penalty points

Round 6: Dean     holding [18, 21, 25, 42] plays the 18 
Round 6: Nicholas holding [15, 32, 35, 39] plays the 39 
Round 6: Vincent  holding [19, 31, 37, 49] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
33 34 40 46 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 6: Eugenius holding [33, 34, 40, 46] plays the 33 
Nicholas wins the round which contains 1 penalty points

Round 7: Nicholas holding [15, 32, 35] plays the 15 
Round 7: Vincent  holding [19, 37, 49] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
34 40 46 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 7: Eugenius holding [34, 40, 46] plays the 40 
Round 7: Dean     holding [21, 25, 42] plays the 21 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
34 46 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 8: Eugenius holding [34, 46] plays the 34 
Round 8: Dean     holding [25, 42] plays the 42 
Round 8: Nicholas holding [32, 35] plays the 32 
Round 8: Vincent  holding [19, 49] plays the 49 
Dean wins the round which contains 7 penalty points

Round 9: Dean     holding [25] plays the 25 
Round 9: Nicholas holding [35] plays the 35 
Round 9: Vincent  holding [19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
46 0 0 0 0 0 0 0 0 0 

46 chah------------------------------------------------------------------------

Round 9: Eugenius holding [46] plays the 46 
Nicholas wins the round which contains 1 penalty points


Finishing Positions

#1 with 1 penalty points Eugenius (dodo.c)
#2 with 2 penalty points Nicholas (system)
#3 with 4 penalty points Vincent (system)
#4 with 11 penalty points Dean (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3055306 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [12, 16, 17, 27, 31, 36, 41, 42, 47, 48]
Table position 1: Sabrina : [13, 15, 18, 19, 28, 29, 32, 34, 43, 49]
Table position 2: George  : [11, 20, 24, 25, 30, 35, 38, 39, 45, 46]
Table position 3: Braedon : [10, 14, 21, 22, 23, 26, 33, 37, 40, 44]

Discards:
Eugenius [42, 47, 48]
Sabrina  [32, 34, 43]
George   [20, 38, 39]
Braedon  [37, 40, 44]


Debug output from Eugenius
------------------------------------------------------------------------
12 16 17 27 31 36 37 40 41 44 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 16, 17, 27, 31, 36, 37, 40, 41, 44] plays the 12 
Round 0: Sabrina  holding [13, 15, 18, 19, 28, 29, 42, 47, 48, 49] plays the 42 
Round 0: George   holding [11, 24, 25, 30, 32, 34, 35, 43, 45, 46] plays the 24 
Round 0: Braedon  holding [10, 14, 20, 21, 22, 23, 26, 33, 38, 39] plays the 22 
Sabrina wins the round which contains 7 penalty points

Round 1: Sabrina  holding [13, 15, 18, 19, 28, 29, 47, 48, 49] plays the 18 
Round 1: George   holding [11, 25, 30, 32, 34, 35, 43, 45, 46] plays the 45 
Round 1: Braedon  holding [10, 14, 20, 21, 23, 26, 33, 38, 39] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 27 31 36 37 40 41 44 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 17, 27, 31, 36, 37, 40, 41, 44] plays the 16 
George wins the round 

Round 2: George   holding [11, 25, 30, 32, 34, 35, 43, 46] plays the 25 
Round 2: Braedon  holding [10, 14, 20, 21, 23, 33, 38, 39] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 31 36 37 40 41 44 0 0 

40------------------------------------------------------------------------

Round 2: Eugenius holding [17, 27, 31, 36, 37, 40, 41, 44] plays the 40 
Round 2: Sabrina  holding [13, 15, 19, 28, 29, 47, 48, 49] plays the 15 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
17 27 31 36 37 41 44 0 0 0 

27------------------------------------------------------------------------

Round 3: Eugenius holding [17, 27, 31, 36, 37, 41, 44] plays the 27 
Round 3: Sabrina  holding [13, 19, 28, 29, 47, 48, 49] plays the 48 
Round 3: George   holding [11, 30, 32, 34, 35, 43, 46] plays the 30 
Round 3: Braedon  holding [14, 20, 21, 23, 33, 38, 39] plays the 39 
Sabrina wins the round 

Round 4: Sabrina  holding [13, 19, 28, 29, 47, 49] plays the 28 
Round 4: George   holding [11, 32, 34, 35, 43, 46] plays the 46 
Round 4: Braedon  holding [14, 20, 21, 23, 33, 38] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 36 37 41 44 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius holding [17, 31, 36, 37, 41, 44] plays the 36 
George wins the round 

Round 5: George   holding [11, 32, 34, 35, 43] plays the 34 
Round 5: Braedon  holding [20, 21, 23, 33, 38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 37 41 44 0 0 0 0 0 

44------------------------------------------------------------------------

Round 5: Eugenius holding [17, 31, 37, 41, 44] plays the 44 
Round 5: Sabrina  holding [13, 19, 29, 47, 49] plays the 49 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
17 31 37 41 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 31, 37, 41] plays the 17 
Round 6: Sabrina  holding [13, 19, 29, 47] plays the 19 
Round 6: George   holding [11, 32, 35, 43] plays the 11 
Round 6: Braedon  holding [20, 21, 23, 33] plays the 23 
Braedon wins the round which contains 4 penalty points

Round 7: Braedon  holding [20, 21, 33] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 41 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 7: Eugenius holding [31, 37, 41] plays the 31 
Round 7: Sabrina  holding [13, 29, 47] plays the 29 
Round 7: George   holding [32, 35, 43] plays the 32 
Braedon wins the round which contains 2 penalty points

Round 8: Braedon  holding [20, 21] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
37 41 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 8: Eugenius holding [37, 41] plays the 37 
Round 8: Sabrina  holding [13, 47] plays the 47 
Round 8: George   holding [35, 43] plays the 35 
George wins the round which contains 2 penalty points

Round 9: George   holding [43] plays the 43 
Round 9: Braedon  holding [20] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Round 9: Sabrina  holding [13] plays the 13 
George wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 5 penalty points George (system)
#3 with 6 penalty points Braedon (system)
#4 with 7 penalty points Sabrina (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7354110 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Oscar    : [10, 11, 13, 17, 18, 26, 27, 29, 34, 47]
Table position 1: Eugenius : [25, 28, 31, 33, 36, 43, 44, 45, 46, 49]
Table position 2: Eleni    : [14, 16, 19, 20, 24, 35, 37, 39, 42, 48]
Table position 3: Elizabeth: [12, 15, 21, 22, 23, 30, 32, 38, 40, 41]

Discards:
Oscar     [10, 17, 34]
Eugenius  [45, 46, 49]
Eleni     [37, 42, 48]
Elizabeth [30, 40, 41]

Round 0: Oscar     holding [11, 13, 18, 26, 27, 29, 30, 40, 41, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
10 17 25 28 31 33 34 36 43 44 

10------------------------------------------------------------------------

Round 0: Eugenius  holding [10, 17, 25, 28, 31, 33, 34, 36, 43, 44] plays the 10 
Round 0: Eleni     holding [14, 16, 19, 20, 24, 35, 39, 45, 46, 49] plays the 20 
Round 0: Elizabeth holding [12, 15, 21, 22, 23, 32, 37, 38, 42, 48] plays the 22 
Oscar wins the round 

Round 1: Oscar     holding [11, 13, 18, 27, 29, 30, 40, 41, 47] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 28 31 33 34 36 43 44 0 

33------------------------------------------------------------------------

Round 1: Eugenius  holding [17, 25, 28, 31, 33, 34, 36, 43, 44] plays the 33 
Round 1: Eleni     holding [14, 16, 19, 24, 35, 39, 45, 46, 49] plays the 24 
Round 1: Elizabeth holding [12, 15, 21, 23, 32, 37, 38, 42, 48] plays the 42 
Elizabeth wins the round which contains 7 penalty points

Round 2: Elizabeth holding [12, 15, 21, 23, 32, 37, 38, 48] plays the 21 
Round 2: Oscar     holding [11, 13, 18, 29, 30, 40, 41, 47] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 28 31 34 36 43 44 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius  holding [17, 25, 28, 31, 34, 36, 43, 44] plays the 28 
Round 2: Eleni     holding [14, 16, 19, 35, 39, 45, 46, 49] plays the 35 
Eleni wins the round 

Round 3: Eleni     holding [14, 16, 19, 39, 45, 46, 49] plays the 39 
Round 3: Elizabeth holding [12, 15, 23, 32, 37, 38, 48] plays the 12 
Round 3: Oscar     holding [11, 13, 29, 30, 40, 41, 47] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 31 34 36 43 44 0 0 0 

36------------------------------------------------------------------------

Round 3: Eugenius  holding [17, 25, 31, 34, 36, 43, 44] plays the 36 
Eleni wins the round 

Round 4: Eleni     holding [14, 16, 19, 45, 46, 49] plays the 46 
Round 4: Elizabeth holding [15, 23, 32, 37, 38, 48] plays the 32 
Round 4: Oscar     holding [11, 13, 29, 40, 41, 47] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 31 34 43 44 0 0 0 0 

34------------------------------------------------------------------------

Round 4: Eugenius  holding [17, 25, 31, 34, 43, 44] plays the 34 
Eleni wins the round 

Round 5: Eleni     holding [14, 16, 19, 45, 49] plays the 49 
Round 5: Elizabeth holding [15, 23, 37, 38, 48] plays the 23 
Round 5: Oscar     holding [11, 13, 29, 41, 47] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 31 43 44 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 5: Eugenius  holding [17, 25, 31, 43, 44] plays the 17 
Eleni wins the round which contains 3 penalty points

Round 6: Eleni     holding [14, 16, 19, 45] plays the 19 
Round 6: Elizabeth holding [15, 37, 38, 48] plays the 37 
Round 6: Oscar     holding [11, 13, 41, 47] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
25 31 43 44 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 6: Eugenius  holding [25, 31, 43, 44] plays the 31 
Oscar wins the round which contains 4 penalty points

Round 7: Oscar     holding [11, 13, 47] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
25 43 44 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 7: Eugenius  holding [25, 43, 44] plays the 43 
Round 7: Eleni     holding [14, 16, 45] plays the 16 
Round 7: Elizabeth holding [15, 38, 48] plays the 38 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
25 44 0 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 8: Eugenius  holding [25, 44] plays the 25 
Round 8: Eleni     holding [14, 45] plays the 45 
Round 8: Elizabeth holding [15, 48] plays the 15 
Round 8: Oscar     holding [11, 47] plays the 11 
Eleni wins the round which contains 1 penalty points

Round 9: Eleni     holding [14] plays the 14 
Round 9: Elizabeth holding [48] plays the 48 
Round 9: Oscar     holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
44 0 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 9: Eugenius  holding [44] plays the 44 
Elizabeth wins the round which contains 1 penalty points


Finishing Positions

#1 with 2 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Oscar (system)
#2 with 4 penalty points Eleni (system)
#4 with 8 penalty points Elizabeth (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9471218 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [17, 22, 25, 31, 34, 36, 38, 39, 48, 49]
Table position 1: Peter   : [12, 13, 24, 26, 27, 28, 29, 40, 45, 46]
Table position 2: Eleni   : [11, 15, 18, 19, 21, 23, 32, 33, 35, 42]
Table position 3: Kangying: [10, 14, 16, 20, 30, 37, 41, 43, 44, 47]

Discards:
Eugenius [39, 48, 49]
Peter    [12, 13, 28]
Eleni    [15, 21, 35]
Kangying [37, 41, 44]


Debug output from Eugenius
------------------------------------------------------------------------
17 22 25 31 34 36 37 38 41 44 

22------------------------------------------------------------------------

Round 0: Eugenius holding [17, 22, 25, 31, 34, 36, 37, 38, 41, 44] plays the 22 
Round 0: Peter    holding [24, 26, 27, 29, 39, 40, 45, 46, 48, 49] plays the 48 
Round 0: Eleni    holding [11, 12, 13, 18, 19, 23, 28, 32, 33, 42] plays the 32 
Round 0: Kangying holding [10, 14, 15, 16, 20, 21, 30, 35, 43, 47] plays the 20 
Peter wins the round 

Round 1: Peter    holding [24, 26, 27, 29, 39, 40, 45, 46, 49] plays the 24 
Round 1: Eleni    holding [11, 12, 13, 18, 19, 23, 28, 33, 42] plays the 33 
Round 1: Kangying holding [10, 14, 15, 16, 21, 30, 35, 43, 47] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 31 34 36 37 38 41 44 0 

34------------------------------------------------------------------------

Round 1: Eugenius holding [17, 25, 31, 34, 36, 37, 38, 41, 44] plays the 34 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
17 25 31 36 37 38 41 44 0 0 

25------------------------------------------------------------------------

Round 2: Eugenius holding [17, 25, 31, 36, 37, 38, 41, 44] plays the 25 
Round 2: Peter    holding [26, 27, 29, 39, 40, 45, 46, 49] plays the 40 
Round 2: Eleni    holding [11, 12, 13, 18, 19, 23, 28, 42] plays the 23 
Round 2: Kangying holding [10, 14, 15, 16, 30, 35, 43, 47] plays the 10 
Peter wins the round which contains 1 penalty points

Round 3: Peter    holding [26, 27, 29, 39, 45, 46, 49] plays the 46 
Round 3: Eleni    holding [11, 12, 13, 18, 19, 28, 42] plays the 12 
Round 3: Kangying holding [14, 15, 16, 30, 35, 43, 47] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 36 37 38 41 44 0 0 0 

36------------------------------------------------------------------------

Round 3: Eugenius holding [17, 31, 36, 37, 38, 41, 44] plays the 36 
Peter wins the round 

Round 4: Peter    holding [26, 27, 29, 39, 45, 49] plays the 29 
Round 4: Eleni    holding [11, 13, 18, 19, 28, 42] plays the 11 
Round 4: Kangying holding [14, 15, 16, 35, 43, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 37 38 41 44 0 0 0 0 

17------------------------------------------------------------------------

Round 4: Eugenius holding [17, 31, 37, 38, 41, 44] plays the 17 
Kangying wins the round which contains 4 penalty points

Round 5: Kangying holding [14, 15, 16, 35, 43] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 38 41 44 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 5: Eugenius holding [31, 37, 38, 41, 44] plays the 31 
Round 5: Peter    holding [26, 27, 39, 45, 49] plays the 45 
Round 5: Eleni    holding [13, 18, 19, 28, 42] plays the 28 
Peter wins the round which contains 1 penalty points

Round 6: Peter    holding [26, 27, 39, 49] plays the 27 
Round 6: Eleni    holding [13, 18, 19, 42] plays the 18 
Round 6: Kangying holding [14, 15, 16, 43] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
37 38 41 44 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 6: Eugenius holding [37, 38, 41, 44] plays the 37 
Peter wins the round which contains 1 penalty points

Round 7: Peter    holding [26, 39, 49] plays the 39 
Round 7: Eleni    holding [13, 19, 42] plays the 42 
Round 7: Kangying holding [14, 16, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
38 41 44 0 0 0 0 0 0 0 

38 chah------------------------------------------------------------------------

Round 7: Eugenius holding [38, 41, 44] plays the 38 
Eleni wins the round which contains 8 penalty points

Round 8: Eleni    holding [13, 19] plays the 19 
Round 8: Kangying holding [14, 16] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
41 44 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 8: Eugenius holding [41, 44] plays the 41 
Round 8: Peter    holding [26, 49] plays the 26 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
44 0 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 9: Eugenius holding [44] plays the 44 
Round 9: Peter    holding [49] plays the 49 
Round 9: Eleni    holding [13] plays the 13 
Round 9: Kangying holding [16] plays the 16 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 3 penalty points Eugenius (dodo.c)
#1 with 3 penalty points Peter (system)
#3 with 4 penalty points Kangying (system)
#4 with 8 penalty points Eleni (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16199709 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 12, 16, 20, 29, 38, 39, 45, 46, 47]
Table position 1: Harrison: [19, 24, 26, 28, 33, 34, 35, 37, 42, 43]
Table position 2: David   : [14, 18, 22, 23, 25, 30, 36, 40, 48, 49]
Table position 3: Minh    : [10, 13, 15, 17, 21, 27, 31, 32, 41, 44]

Discards:
Eugenius [45, 46, 47]
Harrison [28, 34, 37]
David    [18, 23, 40]
Minh     [13, 21, 32]


Debug output from Eugenius
------------------------------------------------------------------------
11 12 13 16 20 21 29 32 38 39 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 13, 16, 20, 21, 29, 32, 38, 39] plays the 12 
Round 0: Harrison holding [19, 24, 26, 33, 35, 42, 43, 45, 46, 47] plays the 26 
Round 0: David    holding [14, 22, 25, 28, 30, 34, 36, 37, 48, 49] plays the 36 
Round 0: Minh     holding [10, 15, 17, 18, 23, 27, 31, 40, 41, 44] plays the 44 
Minh wins the round 

Round 1: Minh     holding [10, 15, 17, 18, 23, 27, 31, 40, 41] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 16 20 21 29 32 38 39 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 16, 20, 21, 29, 32, 38, 39] plays the 20 
Round 1: Harrison holding [19, 24, 33, 35, 42, 43, 45, 46, 47] plays the 45 
Round 1: David    holding [14, 22, 25, 28, 30, 34, 37, 48, 49] plays the 30 
Harrison wins the round 

Round 2: Harrison holding [19, 24, 33, 35, 42, 43, 46, 47] plays the 33 
Round 2: David    holding [14, 22, 25, 28, 34, 37, 48, 49] plays the 22 
Round 2: Minh     holding [10, 17, 18, 23, 27, 31, 40, 41] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 16 21 29 32 38 39 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 16, 21, 29, 32, 38, 39] plays the 21 
Harrison wins the round 

Round 3: Harrison holding [19, 24, 35, 42, 43, 46, 47] plays the 24 
Round 3: David    holding [14, 25, 28, 34, 37, 48, 49] plays the 28 
Round 3: Minh     holding [10, 17, 23, 27, 31, 40, 41] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 16 29 32 38 39 0 0 0 

16------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 16, 29, 32, 38, 39] plays the 16 
David wins the round 

Round 4: David    holding [14, 25, 34, 37, 48, 49] plays the 49 
Round 4: Minh     holding [10, 17, 23, 31, 40, 41] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 29 32 38 39 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 29, 32, 38, 39] plays the 11 
Round 4: Harrison holding [19, 35, 42, 43, 46, 47] plays the 35 
David wins the round which contains 1 penalty points

Round 5: David    holding [14, 25, 34, 37, 48] plays the 34 
Round 5: Minh     holding [17, 23, 31, 40, 41] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 32 38 39 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [13, 29, 32, 38, 39] plays the 32 
Round 5: Harrison holding [19, 42, 43, 46, 47] plays the 42 
Harrison wins the round which contains 7 penalty points

Round 6: Harrison holding [19, 43, 46, 47] plays the 47 
Round 6: David    holding [14, 25, 37, 48] plays the 37 
Round 6: Minh     holding [17, 23, 31, 41] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 38 39 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 29, 38, 39] plays the 13 
Harrison wins the round which contains 4 penalty points

Round 7: Harrison holding [19, 43, 46] plays the 46 
Round 7: David    holding [14, 25, 48] plays the 48 
Round 7: Minh     holding [17, 31, 41] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
29 38 39 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 7: Eugenius holding [29, 38, 39] plays the 38 
David wins the round which contains 1 penalty points

Round 8: David    holding [14, 25] plays the 14 
Round 8: Minh     holding [31, 41] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
29 39 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 8: Eugenius holding [29, 39] plays the 29 
Round 8: Harrison holding [19, 43] plays the 19 
David wins the round which contains 3 penalty points

Round 9: David    holding [25] plays the 25 
Round 9: Minh     holding [41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39 chah------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Round 9: Harrison holding [43] plays the 43 
David wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Minh (system)
#3 with 7 penalty points David (system)
#4 with 11 penalty points Harrison (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7014500 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Emily   : [10, 15, 26, 31, 33, 34, 36, 42, 43, 48]
Table position 1: Benjamin: [11, 12, 18, 19, 20, 23, 25, 30, 39, 44]
Table position 2: Eugenius: [16, 17, 27, 28, 37, 40, 45, 46, 47, 49]
Table position 3: Oscar   : [13, 14, 21, 22, 24, 29, 32, 35, 38, 41]

Discards:
Emily    [26, 42, 48]
Benjamin [20, 25, 39]
Eugenius [46, 47, 49]
Oscar    [29, 35, 38]

Round 0: Emily    holding [10, 15, 29, 31, 33, 34, 35, 36, 38, 43] plays the 36 
Round 0: Benjamin holding [11, 12, 18, 19, 23, 26, 30, 42, 44, 48] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 20 25 27 28 37 39 40 45 

16------------------------------------------------------------------------

Round 0: Eugenius holding [16, 17, 20, 25, 27, 28, 37, 39, 40, 45] plays the 16 
Round 0: Oscar    holding [13, 14, 21, 22, 24, 32, 41, 46, 47, 49] plays the 21 
Emily wins the round 

Round 1: Emily    holding [10, 15, 29, 31, 33, 34, 35, 38, 43] plays the 15 
Round 1: Benjamin holding [11, 12, 18, 19, 23, 26, 42, 44, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
17 20 25 27 28 37 39 40 45 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [17, 20, 25, 27, 28, 37, 39, 40, 45] plays the 20 
Round 1: Oscar    holding [13, 14, 22, 24, 32, 41, 46, 47, 49] plays the 24 
Benjamin wins the round 

Round 2: Benjamin holding [11, 12, 18, 19, 23, 26, 42, 44] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 27 28 37 39 40 45 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [17, 25, 27, 28, 37, 39, 40, 45] plays the 28 
Round 2: Oscar    holding [13, 14, 22, 32, 41, 46, 47, 49] plays the 22 
Round 2: Emily    holding [10, 29, 31, 33, 34, 35, 38, 43] plays the 38 
Emily wins the round 

Round 3: Emily    holding [10, 29, 31, 33, 34, 35, 43] plays the 33 
Round 3: Benjamin holding [11, 12, 18, 19, 23, 42, 44] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 27 37 39 40 45 0 0 0 

27------------------------------------------------------------------------

Round 3: Eugenius holding [17, 25, 27, 37, 39, 40, 45] plays the 27 
Round 3: Oscar    holding [13, 14, 32, 41, 46, 47, 49] plays the 49 
Emily wins the round 

Round 4: Emily    holding [10, 29, 31, 34, 35, 43] plays the 35 
Round 4: Benjamin holding [11, 18, 19, 23, 42, 44] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 37 39 40 45 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [17, 25, 37, 39, 40, 45] plays the 25 
Round 4: Oscar    holding [13, 14, 32, 41, 46, 47] plays the 14 
Benjamin wins the round which contains 7 penalty points

Round 5: Benjamin holding [11, 18, 19, 23, 44] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
17 37 39 40 45 0 0 0 0 0 

39------------------------------------------------------------------------

Round 5: Eugenius holding [17, 37, 39, 40, 45] plays the 39 
Round 5: Oscar    holding [13, 32, 41, 46, 47] plays the 32 
Round 5: Emily    holding [10, 29, 31, 34, 43] plays the 34 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
17 37 40 45 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 6: Eugenius holding [17, 37, 40, 45] plays the 40 
Round 6: Oscar    holding [13, 41, 46, 47] plays the 46 
Round 6: Emily    holding [10, 29, 31, 43] plays the 10 
Round 6: Benjamin holding [11, 19, 23, 44] plays the 44 
Oscar wins the round 

Round 7: Oscar    holding [13, 41, 47] plays the 13 
Round 7: Emily    holding [29, 31, 43] plays the 31 
Round 7: Benjamin holding [11, 19, 23] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
17 37 45 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 37, 45] plays the 17 
Emily wins the round which contains 4 penalty points

Round 8: Emily    holding [29, 43] plays the 29 
Round 8: Benjamin holding [11, 23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
37 45 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 8: Eugenius holding [37, 45] plays the 37 
Round 8: Oscar    holding [41, 47] plays the 47 
Oscar wins the round which contains 4 penalty points

Round 9: Oscar    holding [41] plays the 41 
Round 9: Emily    holding [43] plays the 43 
Round 9: Benjamin holding [11] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Emily wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Oscar (system)
#3 with 7 penalty points Emily (system)
#3 with 7 penalty points Benjamin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12192769 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Marc    : [13, 15, 20, 25, 30, 32, 37, 38, 41, 49]
Table position 1: Peter   : [17, 22, 26, 28, 29, 34, 35, 44, 45, 48]
Table position 2: Xue     : [12, 14, 16, 18, 23, 27, 39, 40, 43, 47]
Table position 3: Eugenius: [10, 11, 19, 21, 24, 31, 33, 36, 42, 46]

Discards:
Marc     [15, 30, 37]
Peter    [28, 44, 45]
Xue      [14, 16, 39]
Eugenius [36, 42, 46]

Round 0: Marc     holding [13, 20, 25, 32, 36, 38, 41, 42, 46, 49] plays the 36 
Round 0: Peter    holding [15, 17, 22, 26, 29, 30, 34, 35, 37, 48] plays the 26 
Round 0: Xue      holding [12, 18, 23, 27, 28, 40, 43, 44, 45, 47] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 14 16 19 21 24 31 33 39 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 14, 16, 19, 21, 24, 31, 33, 39] plays the 10 
Marc wins the round 

Round 1: Marc     holding [13, 20, 25, 32, 38, 41, 42, 46, 49] plays the 46 
Round 1: Peter    holding [15, 17, 22, 29, 30, 34, 35, 37, 48] plays the 48 
Round 1: Xue      holding [12, 18, 23, 28, 40, 43, 44, 45, 47] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 16 19 21 24 31 33 39 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [11, 14, 16, 19, 21, 24, 31, 33, 39] plays the 14 
Peter wins the round 

Round 2: Peter    holding [15, 17, 22, 29, 30, 34, 35, 37] plays the 22 
Round 2: Xue      holding [12, 18, 23, 40, 43, 44, 45, 47] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 19 21 24 31 33 39 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [11, 16, 19, 21, 24, 31, 33, 39] plays the 16 
Round 2: Marc     holding [13, 20, 25, 32, 38, 41, 42, 49] plays the 42 
Marc wins the round which contains 7 penalty points

Round 3: Marc     holding [13, 20, 25, 32, 38, 41, 49] plays the 38 
Round 3: Peter    holding [15, 17, 29, 30, 34, 35, 37] plays the 34 
Round 3: Xue      holding [18, 23, 40, 43, 44, 45, 47] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 21 24 31 33 39 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [11, 19, 21, 24, 31, 33, 39] plays the 24 
Marc wins the round 

Round 4: Marc     holding [13, 20, 25, 32, 41, 49] plays the 49 
Round 4: Peter    holding [15, 17, 29, 30, 35, 37] plays the 35 
Round 4: Xue      holding [23, 40, 43, 44, 45, 47] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 21 31 33 39 0 0 0 0 

21------------------------------------------------------------------------

Round 4: Eugenius holding [11, 19, 21, 31, 33, 39] plays the 21 
Marc wins the round 

Round 5: Marc     holding [13, 20, 25, 32, 41] plays the 32 
Round 5: Peter    holding [15, 17, 29, 30, 37] plays the 30 
Round 5: Xue      holding [23, 40, 43, 45, 47] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 31 33 39 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 19, 31, 33, 39] plays the 11 
Xue wins the round which contains 1 penalty points

Round 6: Xue      holding [23, 43, 45, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
19 31 33 39 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 31, 33, 39] plays the 19 
Round 6: Marc     holding [13, 20, 25, 41] plays the 41 
Round 6: Peter    holding [15, 17, 29, 37] plays the 17 
Xue wins the round which contains 4 penalty points

Round 7: Xue      holding [23, 43, 45] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
31 33 39 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [31, 33, 39] plays the 31 
Round 7: Marc     holding [13, 20, 25] plays the 13 
Round 7: Peter    holding [15, 29, 37] plays the 37 
Xue wins the round which contains 4 penalty points

Round 8: Xue      holding [23, 45] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
33 39 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 8: Eugenius holding [33, 39] plays the 33 
Round 8: Marc     holding [20, 25] plays the 25 
Round 8: Peter    holding [15, 29] plays the 29 
Peter wins the round which contains 2 penalty points

Round 9: Peter    holding [15] plays the 15 
Round 9: Xue      holding [45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Round 9: Marc     holding [20] plays the 20 
Xue wins the round 


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 2 penalty points Peter (system)
#3 with 7 penalty points Marc (system)
#4 with 9 penalty points Xue (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1411254 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Connor  : [14, 15, 18, 21, 24, 26, 39, 40, 46, 47]
Table position 1: Michael : [13, 17, 20, 22, 27, 28, 30, 37, 42, 43]
Table position 2: Eugenius: [12, 16, 19, 25, 31, 32, 36, 41, 44, 49]
Table position 3: Dean    : [10, 11, 23, 29, 33, 34, 35, 38, 45, 48]

Discards:
Connor   [21, 24, 46]
Michael  [13, 20, 28]
Eugenius [41, 44, 49]
Dean     [23, 29, 38]

Round 0: Connor   holding [14, 15, 18, 23, 26, 29, 38, 39, 40, 47] plays the 26 
Round 0: Michael  holding [17, 21, 22, 24, 27, 30, 37, 42, 43, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 16 19 20 25 28 31 32 36 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 13, 16, 19, 20, 25, 28, 31, 32, 36] plays the 12 
Round 0: Dean     holding [10, 11, 33, 34, 35, 41, 44, 45, 48, 49] plays the 44 
Michael wins the round 

Round 1: Michael  holding [17, 21, 22, 24, 27, 30, 37, 42, 43] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 19 20 25 28 31 32 36 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [13, 16, 19, 20, 25, 28, 31, 32, 36] plays the 16 
Round 1: Dean     holding [10, 11, 33, 34, 35, 41, 45, 48, 49] plays the 34 
Round 1: Connor   holding [14, 15, 18, 23, 29, 38, 39, 40, 47] plays the 14 
Dean wins the round 

Round 2: Dean     holding [10, 11, 33, 35, 41, 45, 48, 49] plays the 10 
Round 2: Connor   holding [15, 18, 23, 29, 38, 39, 40, 47] plays the 18 
Round 2: Michael  holding [17, 21, 22, 27, 30, 37, 42, 43] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 20 25 28 31 32 36 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [13, 19, 20, 25, 28, 31, 32, 36] plays the 20 
Michael wins the round 

Round 3: Michael  holding [17, 21, 27, 30, 37, 42, 43] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 28 31 32 36 0 0 0 

36------------------------------------------------------------------------

Round 3: Eugenius holding [13, 19, 25, 28, 31, 32, 36] plays the 36 
Round 3: Dean     holding [11, 33, 35, 41, 45, 48, 49] plays the 45 
Round 3: Connor   holding [15, 23, 29, 38, 39, 40, 47] plays the 15 
Dean wins the round 

Round 4: Dean     holding [11, 33, 35, 41, 48, 49] plays the 35 
Round 4: Connor   holding [23, 29, 38, 39, 40, 47] plays the 40 
Round 4: Michael  holding [17, 21, 30, 37, 42, 43] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 28 31 32 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [13, 19, 25, 28, 31, 32] plays the 25 
Connor wins the round 

Round 5: Connor   holding [23, 29, 38, 39, 47] plays the 38 
Round 5: Michael  holding [17, 21, 37, 42, 43] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 28 31 32 0 0 0 0 0 

28------------------------------------------------------------------------

Round 5: Eugenius holding [13, 19, 28, 31, 32] plays the 28 
Round 5: Dean     holding [11, 33, 41, 48, 49] plays the 48 
Dean wins the round which contains 7 penalty points

Round 6: Dean     holding [11, 33, 41, 49] plays the 49 
Round 6: Connor   holding [23, 29, 39, 47] plays the 47 
Round 6: Michael  holding [17, 21, 37, 43] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 31 32 0 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 6: Eugenius holding [13, 19, 31, 32] plays the 13 
Dean wins the round which contains 2 penalty points

Round 7: Dean     holding [11, 33, 41] plays the 41 
Round 7: Connor   holding [23, 29, 39] plays the 29 
Round 7: Michael  holding [17, 37, 43] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
19 31 32 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius holding [19, 31, 32] plays the 19 
Dean wins the round which contains 4 penalty points

Round 8: Dean     holding [11, 33] plays the 11 
Round 8: Connor   holding [23, 39] plays the 23 
Round 8: Michael  holding [37, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
31 32 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 32] plays the 31 
Michael wins the round which contains 4 penalty points

Round 9: Michael  holding [37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
32 0 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 9: Eugenius holding [32] plays the 32 
Round 9: Dean     holding [33] plays the 33 
Round 9: Connor   holding [39] plays the 39 
Michael wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Connor (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 5 penalty points Michael (system)
#4 with 13 penalty points Dean (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7191016 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Oscar   : [10, 11, 20, 25, 30, 34, 35, 39, 43, 49]
Table position 1: Kane    : [12, 13, 15, 16, 17, 19, 22, 38, 41, 42]
Table position 2: Minh    : [18, 21, 24, 27, 28, 31, 32, 37, 44, 45]
Table position 3: Eugenius: [14, 23, 26, 29, 33, 36, 40, 46, 47, 48]

Discards:
Oscar    [20, 25, 35]
Kane     [16, 19, 22]
Minh     [27, 32, 45]
Eugenius [46, 47, 48]

Round 0: Oscar    holding [10, 11, 30, 34, 39, 43, 46, 47, 48, 49] plays the 39 
Round 0: Kane     holding [12, 13, 15, 17, 20, 25, 35, 38, 41, 42] plays the 15 
Round 0: Minh     holding [16, 18, 19, 21, 22, 24, 28, 31, 37, 44] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
14 23 26 27 29 32 33 36 40 45 

26------------------------------------------------------------------------

Round 0: Eugenius holding [14, 23, 26, 27, 29, 32, 33, 36, 40, 45] plays the 26 
Oscar wins the round 

Round 1: Oscar    holding [10, 11, 30, 34, 43, 46, 47, 48, 49] plays the 30 
Round 1: Kane     holding [12, 13, 17, 20, 25, 35, 38, 41, 42] plays the 42 
Round 1: Minh     holding [16, 18, 19, 22, 24, 28, 31, 37, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
14 23 27 29 32 33 36 40 45 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 23, 27, 29, 32, 33, 36, 40, 45] plays the 14 
Minh wins the round which contains 7 penalty points

Round 2: Minh     holding [16, 18, 19, 22, 24, 28, 31, 37] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
23 27 29 32 33 36 40 45 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [23, 27, 29, 32, 33, 36, 40, 45] plays the 27 
Round 2: Oscar    holding [10, 11, 34, 43, 46, 47, 48, 49] plays the 48 
Round 2: Kane     holding [12, 13, 17, 20, 25, 35, 38, 41] plays the 20 
Oscar wins the round 

Round 3: Oscar    holding [10, 11, 34, 43, 46, 47, 49] plays the 10 
Round 3: Kane     holding [12, 13, 17, 25, 35, 38, 41] plays the 35 
Round 3: Minh     holding [16, 18, 19, 22, 28, 31, 37] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 32 33 36 40 45 0 0 0 

32------------------------------------------------------------------------

Round 3: Eugenius holding [23, 29, 32, 33, 36, 40, 45] plays the 32 
Kane wins the round 

Round 4: Kane     holding [12, 13, 17, 25, 38, 41] plays the 12 
Round 4: Minh     holding [18, 19, 22, 28, 31, 37] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 33 36 40 45 0 0 0 0 

33------------------------------------------------------------------------

Round 4: Eugenius holding [23, 29, 33, 36, 40, 45] plays the 33 
Round 4: Oscar    holding [11, 34, 43, 46, 47, 49] plays the 46 
Oscar wins the round 

Round 5: Oscar    holding [11, 34, 43, 47, 49] plays the 34 
Round 5: Kane     holding [13, 17, 25, 38, 41] plays the 38 
Round 5: Minh     holding [18, 19, 22, 31, 37] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 36 40 45 0 0 0 0 0 

36------------------------------------------------------------------------

Round 5: Eugenius holding [23, 29, 36, 40, 45] plays the 36 
Kane wins the round 

Round 6: Kane     holding [13, 17, 25, 41] plays the 25 
Round 6: Minh     holding [19, 22, 31, 37] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 40 45 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 6: Eugenius holding [23, 29, 40, 45] plays the 40 
Round 6: Oscar    holding [11, 43, 47, 49] plays the 11 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
23 29 45 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius holding [23, 29, 45] plays the 23 
Round 7: Oscar    holding [43, 47, 49] plays the 47 
Round 7: Kane     holding [13, 17, 41] plays the 17 
Round 7: Minh     holding [19, 31, 37] plays the 31 
Oscar wins the round which contains 4 penalty points

Round 8: Oscar    holding [43, 49] plays the 43 
Round 8: Kane     holding [13, 41] plays the 41 
Round 8: Minh     holding [19, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
29 45 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 45] plays the 29 
Oscar wins the round which contains 4 penalty points

Round 9: Oscar    holding [49] plays the 49 
Round 9: Kane     holding [13] plays the 13 
Round 9: Minh     holding [19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45 chah------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Oscar wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Kane (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Minh (system)
#4 with 10 penalty points Oscar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15689425 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Kangying: [11, 12, 13, 16, 20, 31, 38, 39, 40, 49]
Table position 1: Sabrina : [10, 14, 27, 28, 29, 33, 35, 43, 45, 48]
Table position 2: Eugenius: [17, 21, 22, 23, 25, 26, 34, 44, 46, 47]
Table position 3: Peter   : [15, 18, 19, 24, 30, 32, 36, 37, 41, 42]

Discards:
Kangying [12, 31, 38]
Sabrina  [14, 35, 45]
Eugenius [44, 46, 47]
Peter    [15, 30, 42]

Round 0: Kangying holding [11, 13, 15, 16, 20, 30, 39, 40, 42, 49] plays the 30 
Round 0: Sabrina  holding [10, 12, 27, 28, 29, 31, 33, 38, 43, 48] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 21 22 23 25 26 34 35 45 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 17, 21, 22, 23, 25, 26, 34, 35, 45] plays the 14 
Round 0: Peter    holding [18, 19, 24, 32, 36, 37, 41, 44, 46, 47] plays the 24 
Kangying wins the round 

Round 1: Kangying holding [11, 13, 15, 16, 20, 39, 40, 42, 49] plays the 40 
Round 1: Sabrina  holding [10, 27, 28, 29, 31, 33, 38, 43, 48] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
17 21 22 23 25 26 34 35 45 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [17, 21, 22, 23, 25, 26, 34, 35, 45] plays the 22 
Round 1: Peter    holding [18, 19, 32, 36, 37, 41, 44, 46, 47] plays the 18 
Kangying wins the round 

Round 2: Kangying holding [11, 13, 15, 16, 20, 39, 42, 49] plays the 42 
Round 2: Sabrina  holding [10, 27, 29, 31, 33, 38, 43, 48] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
17 21 23 25 26 34 35 45 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [17, 21, 23, 25, 26, 34, 35, 45] plays the 21 
Round 2: Peter    holding [19, 32, 36, 37, 41, 44, 46, 47] plays the 32 
Kangying wins the round which contains 7 penalty points

Round 3: Kangying holding [11, 13, 15, 16, 20, 39, 49] plays the 39 
Round 3: Sabrina  holding [10, 27, 29, 31, 33, 43, 48] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 25 26 34 35 45 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [17, 23, 25, 26, 34, 35, 45] plays the 26 
Round 3: Peter    holding [19, 36, 37, 41, 44, 46, 47] plays the 36 
Kangying wins the round 

Round 4: Kangying holding [11, 13, 15, 16, 20, 49] plays the 15 
Round 4: Sabrina  holding [10, 27, 29, 31, 43, 48] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 25 34 35 45 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [17, 23, 25, 34, 35, 45] plays the 25 
Round 4: Peter    holding [19, 37, 41, 44, 46, 47] plays the 19 
Sabrina wins the round which contains 1 penalty points

Round 5: Sabrina  holding [10, 29, 31, 43, 48] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 34 35 45 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [17, 23, 34, 35, 45] plays the 34 
Round 5: Peter    holding [37, 41, 44, 46, 47] plays the 44 
Round 5: Kangying holding [11, 13, 16, 20, 49] plays the 16 
Peter wins the round 

Round 6: Peter    holding [37, 41, 46, 47] plays the 47 
Round 6: Kangying holding [11, 13, 20, 49] plays the 13 
Round 6: Sabrina  holding [29, 31, 43, 48] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 35 45 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 23, 35, 45] plays the 17 
Peter wins the round which contains 4 penalty points

Round 7: Peter    holding [37, 41, 46] plays the 46 
Round 7: Kangying holding [11, 20, 49] plays the 20 
Round 7: Sabrina  holding [29, 31, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
23 35 45 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 7: Eugenius holding [23, 35, 45] plays the 23 
Sabrina wins the round which contains 1 penalty points

Round 8: Sabrina  holding [29, 31] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
35 45 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 8: Eugenius holding [35, 45] plays the 35 
Round 8: Peter    holding [37, 41] plays the 37 
Round 8: Kangying holding [11, 49] plays the 11 
Peter wins the round which contains 3 penalty points

Round 9: Peter    holding [41] plays the 41 
Round 9: Kangying holding [49] plays the 49 
Round 9: Sabrina  holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Peter wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 2 penalty points Sabrina (system)
#3 with 7 penalty points Kangying (system)
#4 with 9 penalty points Peter (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7037739 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Jamal   : [11, 17, 26, 28, 29, 32, 35, 38, 42, 43]
Table position 1: Gal     : [14, 16, 24, 30, 31, 36, 37, 39, 44, 48]
Table position 2: Trung   : [18, 19, 22, 25, 27, 40, 45, 46, 47, 49]
Table position 3: Eugenius: [10, 12, 13, 15, 20, 21, 23, 33, 34, 41]

Discards:
Jamal    [11, 26, 29]
Gal      [14, 16, 39]
Trung    [19, 45, 47]
Eugenius [33, 34, 41]

Round 0: Jamal    holding [17, 28, 32, 33, 34, 35, 38, 41, 42, 43] plays the 35 
Round 0: Gal      holding [11, 24, 26, 29, 30, 31, 36, 37, 44, 48] plays the 30 
Round 0: Trung    holding [14, 16, 18, 22, 25, 27, 39, 40, 46, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 13 15 19 20 21 23 45 47 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 13, 15, 19, 20, 21, 23, 45, 47] plays the 10 
Trung wins the round 

Round 1: Trung    holding [14, 16, 18, 22, 25, 27, 39, 40, 46] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 15 19 20 21 23 45 47 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 13, 15, 19, 20, 21, 23, 45, 47] plays the 12 
Round 1: Jamal    holding [17, 28, 32, 33, 34, 38, 41, 42, 43] plays the 33 
Round 1: Gal      holding [11, 24, 26, 29, 31, 36, 37, 44, 48] plays the 26 
Jamal wins the round 

Round 2: Jamal    holding [17, 28, 32, 34, 38, 41, 42, 43] plays the 28 
Round 2: Gal      holding [11, 24, 29, 31, 36, 37, 44, 48] plays the 24 
Round 2: Trung    holding [14, 16, 22, 25, 27, 39, 40, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 19 20 21 23 45 47 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [13, 15, 19, 20, 21, 23, 45, 47] plays the 20 
Trung wins the round 

Round 3: Trung    holding [14, 16, 22, 25, 27, 39, 40] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 19 21 23 45 47 0 0 0 

13 chah------------------------------------------------------------------------

Round 3: Eugenius holding [13, 15, 19, 21, 23, 45, 47] plays the 13 
Round 3: Jamal    holding [17, 32, 34, 38, 41, 42, 43] plays the 38 
Round 3: Gal      holding [11, 29, 31, 36, 37, 44, 48] plays the 36 
Jamal wins the round which contains 1 penalty points

Round 4: Jamal    holding [17, 32, 34, 41, 42, 43] plays the 34 
Round 4: Gal      holding [11, 29, 31, 37, 44, 48] plays the 48 
Round 4: Trung    holding [14, 22, 25, 27, 39, 40] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
15 19 21 23 45 47 0 0 0 0 

15 chah------------------------------------------------------------------------

Round 4: Eugenius holding [15, 19, 21, 23, 45, 47] plays the 15 
Gal wins the round 

Round 5: Gal      holding [11, 29, 31, 37, 44] plays the 31 
Round 5: Trung    holding [22, 25, 27, 39, 40] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
19 21 23 45 47 0 0 0 0 0 

19------------------------------------------------------------------------

Round 5: Eugenius holding [19, 21, 23, 45, 47] plays the 19 
Round 5: Jamal    holding [17, 32, 41, 42, 43] plays the 17 
Gal wins the round which contains 3 penalty points

Round 6: Gal      holding [11, 29, 37, 44] plays the 11 
Round 6: Trung    holding [22, 25, 39, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
21 23 45 47 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [21, 23, 45, 47] plays the 23 
Round 6: Jamal    holding [32, 41, 42, 43] plays the 41 
Jamal wins the round which contains 3 penalty points

Round 7: Jamal    holding [32, 42, 43] plays the 42 
Round 7: Gal      holding [29, 37, 44] plays the 44 
Round 7: Trung    holding [22, 25, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
21 45 47 0 0 0 0 0 0 0 

21------------------------------------------------------------------------

Round 7: Eugenius holding [21, 45, 47] plays the 21 
Gal wins the round which contains 7 penalty points

Round 8: Gal      holding [29, 37] plays the 29 
Round 8: Trung    holding [22, 25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
45 47 0 0 0 0 0 0 0 0 

47------------------------------------------------------------------------

Round 8: Eugenius holding [45, 47] plays the 47 
Round 8: Jamal    holding [32, 43] plays the 43 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Round 9: Jamal    holding [32] plays the 32 
Round 9: Gal      holding [37] plays the 37 
Round 9: Trung    holding [22] plays the 22 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Trung (system)
#2 with 4 penalty points Jamal (system)
#2 with 4 penalty points Eugenius (dodo.c)
#4 with 10 penalty points Gal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10223409 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Finbar  : [10, 12, 16, 19, 23, 25, 28, 33, 42, 47]
Table position 1: Braedon : [13, 15, 17, 18, 22, 26, 27, 30, 34, 36]
Table position 2: Eugenius: [11, 21, 24, 31, 32, 37, 38, 44, 46, 48]
Table position 3: Alex    : [14, 20, 29, 35, 39, 40, 41, 43, 45, 49]

Discards:
Finbar   [16, 23, 42]
Braedon  [15, 22, 30]
Eugenius [44, 46, 48]
Alex     [35, 39, 43]

Round 0: Finbar   holding [10, 12, 19, 25, 28, 33, 35, 39, 43, 47] plays the 28 
Round 0: Braedon  holding [13, 16, 17, 18, 23, 26, 27, 34, 36, 42] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 21 22 24 30 31 32 37 38 

21------------------------------------------------------------------------

Round 0: Eugenius holding [11, 15, 21, 22, 24, 30, 31, 32, 37, 38] plays the 21 
Round 0: Alex     holding [14, 20, 29, 40, 41, 44, 45, 46, 48, 49] plays the 40 
Alex wins the round 

Round 1: Alex     holding [14, 20, 29, 41, 44, 45, 46, 48, 49] plays the 49 
Round 1: Finbar   holding [10, 12, 19, 25, 33, 35, 39, 43, 47] plays the 35 
Round 1: Braedon  holding [13, 16, 17, 18, 23, 27, 34, 36, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 22 24 30 31 32 37 38 0 

11 chah------------------------------------------------------------------------

Round 1: Eugenius holding [11, 15, 22, 24, 30, 31, 32, 37, 38] plays the 11 
Alex wins the round which contains 8 penalty points

Round 2: Alex     holding [14, 20, 29, 41, 44, 45, 46, 48] plays the 44 
Round 2: Finbar   holding [10, 12, 19, 25, 33, 39, 43, 47] plays the 33 
Round 2: Braedon  holding [13, 16, 17, 18, 23, 27, 34, 36] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
15 22 24 30 31 32 37 38 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [15, 22, 24, 30, 31, 32, 37, 38] plays the 22 
Alex wins the round 

Round 3: Alex     holding [14, 20, 29, 41, 45, 46, 48] plays the 46 
Round 3: Finbar   holding [10, 12, 19, 25, 39, 43, 47] plays the 10 
Round 3: Braedon  holding [13, 17, 18, 23, 27, 34, 36] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
15 24 30 31 32 37 38 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [15, 24, 30, 31, 32, 37, 38] plays the 24 
Alex wins the round 

Round 4: Alex     holding [14, 20, 29, 41, 45, 48] plays the 20 
Round 4: Finbar   holding [12, 19, 25, 39, 43, 47] plays the 25 
Round 4: Braedon  holding [13, 17, 18, 23, 27, 34] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
15 30 31 32 37 38 0 0 0 0 

15------------------------------------------------------------------------

Round 4: Eugenius holding [15, 30, 31, 32, 37, 38] plays the 15 
Finbar wins the round 

Round 5: Finbar   holding [12, 19, 39, 43, 47] plays the 12 
Round 5: Braedon  holding [13, 17, 23, 27, 34] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
30 31 32 37 38 0 0 0 0 0 

30------------------------------------------------------------------------

Round 5: Eugenius holding [30, 31, 32, 37, 38] plays the 30 
Round 5: Alex     holding [14, 29, 41, 45, 48] plays the 14 
Braedon wins the round 

Round 6: Braedon  holding [13, 17, 23, 27] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
31 32 37 38 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 6: Eugenius holding [31, 32, 37, 38] plays the 31 
Round 6: Alex     holding [29, 41, 45, 48] plays the 29 
Round 6: Finbar   holding [19, 39, 43, 47] plays the 19 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
32 37 38 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 7: Eugenius holding [32, 37, 38] plays the 32 
Round 7: Alex     holding [41, 45, 48] plays the 48 
Round 7: Finbar   holding [39, 43, 47] plays the 43 
Round 7: Braedon  holding [17, 23, 27] plays the 23 
Alex wins the round which contains 2 penalty points

Round 8: Alex     holding [41, 45] plays the 41 
Round 8: Finbar   holding [39, 47] plays the 47 
Round 8: Braedon  holding [17, 27] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
37 38 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 8: Eugenius holding [37, 38] plays the 37 
Finbar wins the round which contains 4 penalty points

Round 9: Finbar   holding [39] plays the 39 
Round 9: Braedon  holding [27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38 chah------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Round 9: Alex     holding [45] plays the 45 
Alex wins the round 


Finishing Positions

#1 with 0 penalty points Braedon (system)
#2 with 4 penalty points Finbar (system)
#2 with 4 penalty points Eugenius (dodo.c)
#4 with 10 penalty points Alex (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 458305 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Jamal   : [10, 12, 16, 19, 30, 31, 32, 33, 34, 49]
Table position 1: Emily   : [15, 21, 22, 23, 24, 26, 27, 36, 45, 46]
Table position 2: Eugenius: [13, 20, 28, 29, 35, 38, 40, 41, 43, 48]
Table position 3: David   : [11, 14, 17, 18, 25, 37, 39, 42, 44, 47]

Discards:
Jamal    [31, 34, 49]
Emily    [26, 27, 45]
Eugenius [41, 43, 48]
David    [39, 42, 47]

Round 0: Jamal    holding [10, 12, 16, 19, 30, 32, 33, 39, 42, 47] plays the 30 
Round 0: Emily    holding [15, 21, 22, 23, 24, 31, 34, 36, 46, 49] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
13 20 26 27 28 29 35 38 40 45 

20------------------------------------------------------------------------

Round 0: Eugenius holding [13, 20, 26, 27, 28, 29, 35, 38, 40, 45] plays the 20 
Round 0: David    holding [11, 14, 17, 18, 25, 37, 41, 43, 44, 48] plays the 25 
Jamal wins the round 

Round 1: Jamal    holding [10, 12, 16, 19, 32, 33, 39, 42, 47] plays the 16 
Round 1: Emily    holding [15, 22, 23, 24, 31, 34, 36, 46, 49] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 26 27 28 29 35 38 40 45 0 

26------------------------------------------------------------------------

Round 1: Eugenius holding [13, 26, 27, 28, 29, 35, 38, 40, 45] plays the 26 
Round 1: David    holding [11, 14, 17, 18, 37, 41, 43, 44, 48] plays the 44 
David wins the round 

Round 2: David    holding [11, 14, 17, 18, 37, 41, 43, 48] plays the 18 
Round 2: Jamal    holding [10, 12, 19, 32, 33, 39, 42, 47] plays the 12 
Round 2: Emily    holding [15, 22, 23, 24, 31, 36, 46, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
13 27 28 29 35 38 40 45 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [13, 27, 28, 29, 35, 38, 40, 45] plays the 27 
Emily wins the round 

Round 3: Emily    holding [15, 22, 23, 24, 31, 36, 49] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 28 29 35 38 40 45 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [13, 28, 29, 35, 38, 40, 45] plays the 28 
Round 3: David    holding [11, 14, 17, 37, 41, 43, 48] plays the 48 
Round 3: Jamal    holding [10, 19, 32, 33, 39, 42, 47] plays the 32 
David wins the round 

Round 4: David    holding [11, 14, 17, 37, 41, 43] plays the 14 
Round 4: Jamal    holding [10, 19, 33, 39, 42, 47] plays the 10 
Round 4: Emily    holding [15, 23, 24, 31, 36, 49] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 35 38 40 45 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [13, 29, 35, 38, 40, 45] plays the 35 
Emily wins the round 

Round 5: Emily    holding [15, 23, 24, 31, 49] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 38 40 45 0 0 0 0 0 

38------------------------------------------------------------------------

Round 5: Eugenius holding [13, 29, 38, 40, 45] plays the 38 
Round 5: David    holding [11, 17, 37, 41, 43] plays the 11 
Round 5: Jamal    holding [19, 33, 39, 42, 47] plays the 42 
Jamal wins the round which contains 8 penalty points

Round 6: Jamal    holding [19, 33, 39, 47] plays the 47 
Round 6: Emily    holding [15, 23, 31, 49] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 40 45 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 29, 40, 45] plays the 13 
Round 6: David    holding [17, 37, 41, 43] plays the 17 
Jamal wins the round which contains 4 penalty points

Round 7: Jamal    holding [19, 33, 39] plays the 19 
Round 7: Emily    holding [15, 31, 49] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
29 40 45 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 40, 45] plays the 29 
Round 7: David    holding [37, 41, 43] plays the 41 
David wins the round which contains 4 penalty points

Round 8: David    holding [37, 43] plays the 43 
Round 8: Jamal    holding [33, 39] plays the 33 
Round 8: Emily    holding [15, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
40 45 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 8: Eugenius holding [40, 45] plays the 40 
David wins the round which contains 1 penalty points

Round 9: David    holding [37] plays the 37 
Round 9: Jamal    holding [39] plays the 39 
Round 9: Emily    holding [49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
David wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Emily (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 6 penalty points David (system)
#4 with 12 penalty points Jamal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9450482 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Aydin    : [12, 15, 16, 17, 27, 28, 31, 36, 44, 46]
Table position 1: Elizabeth: [13, 14, 20, 21, 22, 23, 34, 35, 42, 49]
Table position 2: Benjamin : [10, 11, 18, 24, 30, 32, 37, 39, 43, 48]
Table position 3: Eugenius : [19, 25, 26, 29, 33, 38, 40, 41, 45, 47]

Discards:
Aydin     [28, 31, 36]
Elizabeth [14, 23, 49]
Benjamin  [18, 30, 37]
Eugenius  [41, 45, 47]

Round 0: Aydin     holding [12, 15, 16, 17, 27, 41, 44, 45, 46, 47] plays the 45 
Round 0: Elizabeth holding [13, 20, 21, 22, 28, 31, 34, 35, 36, 42] plays the 42 
Round 0: Benjamin  holding [10, 11, 14, 23, 24, 32, 39, 43, 48, 49] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
18 19 25 26 29 30 33 37 38 40 

18------------------------------------------------------------------------

Round 0: Eugenius  holding [18, 19, 25, 26, 29, 30, 33, 37, 38, 40] plays the 18 
Aydin wins the round which contains 7 penalty points

Round 1: Aydin     holding [12, 15, 16, 17, 27, 41, 44, 46, 47] plays the 16 
Round 1: Elizabeth holding [13, 20, 21, 22, 28, 31, 34, 35, 36] plays the 22 
Round 1: Benjamin  holding [10, 11, 14, 23, 24, 32, 43, 48, 49] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
19 25 26 29 30 33 37 38 40 0 

26------------------------------------------------------------------------

Round 1: Eugenius  holding [19, 25, 26, 29, 30, 33, 37, 38, 40] plays the 26 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
19 25 29 30 33 37 38 40 0 0 

25------------------------------------------------------------------------

Round 2: Eugenius  holding [19, 25, 29, 30, 33, 37, 38, 40] plays the 25 
Round 2: Aydin     holding [12, 15, 17, 27, 41, 44, 46, 47] plays the 15 
Round 2: Elizabeth holding [13, 20, 21, 28, 31, 34, 35, 36] plays the 35 
Round 2: Benjamin  holding [11, 14, 23, 24, 32, 43, 48, 49] plays the 48 
Elizabeth wins the round 

Round 3: Elizabeth holding [13, 20, 21, 28, 31, 34, 36] plays the 20 
Round 3: Benjamin  holding [11, 14, 23, 24, 32, 43, 49] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 30 33 37 38 40 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius  holding [19, 29, 30, 33, 37, 38, 40] plays the 30 
Round 3: Aydin     holding [12, 17, 27, 41, 44, 46, 47] plays the 12 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
19 29 33 37 38 40 0 0 0 0 

33------------------------------------------------------------------------

Round 4: Eugenius  holding [19, 29, 33, 37, 38, 40] plays the 33 
Round 4: Aydin     holding [17, 27, 41, 44, 46, 47] plays the 44 
Round 4: Elizabeth holding [13, 21, 28, 31, 34, 36] plays the 36 
Round 4: Benjamin  holding [11, 14, 23, 32, 43, 49] plays the 49 
Aydin wins the round 

Round 5: Aydin     holding [17, 27, 41, 46, 47] plays the 46 
Round 5: Elizabeth holding [13, 21, 28, 31, 34] plays the 34 
Round 5: Benjamin  holding [11, 14, 23, 32, 43] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 37 38 40 0 0 0 0 0 

38------------------------------------------------------------------------

Round 5: Eugenius  holding [19, 29, 37, 38, 40] plays the 38 
Aydin wins the round 

Round 6: Aydin     holding [17, 27, 41, 47] plays the 27 
Round 6: Elizabeth holding [13, 21, 28, 31] plays the 21 
Round 6: Benjamin  holding [11, 23, 32, 43] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 37 40 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 6: Eugenius  holding [19, 29, 37, 40] plays the 19 
Aydin wins the round which contains 1 penalty points

Round 7: Aydin     holding [17, 41, 47] plays the 41 
Round 7: Elizabeth holding [13, 28, 31] plays the 13 
Round 7: Benjamin  holding [11, 23, 43] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
29 37 40 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius  holding [29, 37, 40] plays the 29 
Aydin wins the round which contains 4 penalty points

Round 8: Aydin     holding [17, 47] plays the 17 
Round 8: Elizabeth holding [28, 31] plays the 31 
Round 8: Benjamin  holding [23, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
37 40 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 8: Eugenius  holding [37, 40] plays the 37 
Benjamin wins the round which contains 4 penalty points

Round 9: Benjamin  holding [23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 9: Eugenius  holding [40] plays the 40 
Round 9: Aydin     holding [47] plays the 47 
Round 9: Elizabeth holding [28] plays the 28 
Aydin wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Elizabeth (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Benjamin (system)
#4 with 14 penalty points Aydin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 874851 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [13, 16, 20, 29, 30, 37, 40, 44, 45, 48]
Table position 1: Sabrina : [15, 19, 23, 25, 27, 35, 38, 41, 47, 49]
Table position 2: Harrison: [10, 12, 14, 17, 21, 24, 26, 42, 43, 46]
Table position 3: Benjamin: [11, 18, 22, 28, 31, 32, 33, 34, 36, 39]

Discards:
Eugenius [44, 45, 48]
Sabrina  [19, 41, 47]
Harrison [24, 43, 46]
Benjamin [34, 36, 39]


Debug output from Eugenius
------------------------------------------------------------------------
13 16 20 29 30 34 36 37 39 40 

16------------------------------------------------------------------------

Round 0: Eugenius holding [13, 16, 20, 29, 30, 34, 36, 37, 39, 40] plays the 16 
Round 0: Sabrina  holding [15, 23, 25, 27, 35, 38, 44, 45, 48, 49] plays the 44 
Round 0: Harrison holding [10, 12, 14, 17, 19, 21, 26, 41, 42, 47] plays the 10 
Round 0: Benjamin holding [11, 18, 22, 24, 28, 31, 32, 33, 43, 46] plays the 46 
Benjamin wins the round 

Round 1: Benjamin holding [11, 18, 22, 24, 28, 31, 32, 33, 43] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
13 20 29 30 34 36 37 39 40 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [13, 20, 29, 30, 34, 36, 37, 39, 40] plays the 20 
Round 1: Sabrina  holding [15, 23, 25, 27, 35, 38, 45, 48, 49] plays the 27 
Round 1: Harrison holding [12, 14, 17, 19, 21, 26, 41, 42, 47] plays the 42 
Harrison wins the round which contains 7 penalty points

Round 2: Harrison holding [12, 14, 17, 19, 21, 26, 41, 47] plays the 14 
Round 2: Benjamin holding [11, 22, 24, 28, 31, 32, 33, 43] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 30 34 36 37 39 40 0 0 

30------------------------------------------------------------------------

Round 2: Eugenius holding [13, 29, 30, 34, 36, 37, 39, 40] plays the 30 
Round 2: Sabrina  holding [15, 23, 25, 35, 38, 45, 48, 49] plays the 35 
Sabrina wins the round 

Round 3: Sabrina  holding [15, 23, 25, 38, 45, 48, 49] plays the 48 
Round 3: Harrison holding [12, 17, 19, 21, 26, 41, 47] plays the 12 
Round 3: Benjamin holding [11, 22, 24, 31, 32, 33, 43] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 34 36 37 39 40 0 0 0 

34------------------------------------------------------------------------

Round 3: Eugenius holding [13, 29, 34, 36, 37, 39, 40] plays the 34 
Sabrina wins the round 

Round 4: Sabrina  holding [15, 23, 25, 38, 45, 49] plays the 49 
Round 4: Harrison holding [17, 19, 21, 26, 41, 47] plays the 21 
Round 4: Benjamin holding [11, 22, 24, 31, 32, 43] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 36 37 39 40 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 4: Eugenius holding [13, 29, 36, 37, 39, 40] plays the 13 
Sabrina wins the round which contains 2 penalty points

Round 5: Sabrina  holding [15, 23, 25, 38, 45] plays the 23 
Round 5: Harrison holding [17, 19, 26, 41, 47] plays the 47 
Round 5: Benjamin holding [22, 24, 31, 32, 43] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
29 36 37 39 40 0 0 0 0 0 

29------------------------------------------------------------------------

Round 5: Eugenius holding [29, 36, 37, 39, 40] plays the 29 
Harrison wins the round which contains 4 penalty points

Round 6: Harrison holding [17, 19, 26, 41] plays the 19 
Round 6: Benjamin holding [22, 24, 32, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
36 37 39 40 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 6: Eugenius holding [36, 37, 39, 40] plays the 37 
Round 6: Sabrina  holding [15, 25, 38, 45] plays the 38 
Benjamin wins the round which contains 3 penalty points

Round 7: Benjamin holding [22, 24, 32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
36 39 40 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 7: Eugenius holding [36, 39, 40] plays the 36 
Round 7: Sabrina  holding [15, 25, 45] plays the 45 
Round 7: Harrison holding [17, 26, 41] plays the 26 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
39 40 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 8: Eugenius holding [39, 40] plays the 39 
Round 8: Sabrina  holding [15, 25] plays the 15 
Round 8: Harrison holding [17, 41] plays the 41 
Round 8: Benjamin holding [22, 24] plays the 24 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 9: Eugenius holding [40] plays the 40 
Round 9: Sabrina  holding [25] plays the 25 
Round 9: Harrison holding [17] plays the 17 
Round 9: Benjamin holding [22] plays the 22 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 2 penalty points Eugenius (dodo.c)
#1 with 2 penalty points Sabrina (system)
#3 with 3 penalty points Benjamin (system)
#4 with 11 penalty points Harrison (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14304671 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Stephen : [17, 25, 29, 30, 34, 36, 37, 39, 40, 43]
Table position 1: Eugenius: [12, 14, 26, 28, 31, 32, 41, 42, 44, 45]
Table position 2: Mitchell: [11, 15, 16, 18, 22, 23, 38, 46, 48, 49]
Table position 3: Kangying: [10, 13, 19, 20, 21, 24, 27, 33, 35, 47]

Discards:
Stephen  [29, 36, 43]
Eugenius [42, 44, 45]
Mitchell [18, 23, 49]
Kangying [13, 21, 33]

Round 0: Stephen  holding [13, 17, 21, 25, 30, 33, 34, 37, 39, 40] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 26 28 29 31 32 36 41 43 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 14, 26, 28, 29, 31, 32, 36, 41, 43] plays the 12 
Round 0: Mitchell holding [11, 15, 16, 22, 38, 42, 44, 45, 46, 48] plays the 48 
Round 0: Kangying holding [10, 18, 19, 20, 23, 24, 27, 35, 47, 49] plays the 49 
Kangying wins the round 

Round 1: Kangying holding [10, 18, 19, 20, 23, 24, 27, 35, 47] plays the 24 
Round 1: Stephen  holding [13, 17, 25, 30, 33, 34, 37, 39, 40] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
14 26 28 29 31 32 36 41 43 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 26, 28, 29, 31, 32, 36, 41, 43] plays the 14 
Round 1: Mitchell holding [11, 15, 16, 22, 38, 42, 44, 45, 46] plays the 44 
Mitchell wins the round 

Round 2: Mitchell holding [11, 15, 16, 22, 38, 42, 45, 46] plays the 42 
Round 2: Kangying holding [10, 18, 19, 20, 23, 27, 35, 47] plays the 20 
Round 2: Stephen  holding [13, 17, 25, 30, 33, 37, 39, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
26 28 29 31 32 36 41 43 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [26, 28, 29, 31, 32, 36, 41, 43] plays the 26 
Mitchell wins the round which contains 7 penalty points

Round 3: Mitchell holding [11, 15, 16, 22, 38, 45, 46] plays the 16 
Round 3: Kangying holding [10, 18, 19, 23, 27, 35, 47] plays the 10 
Round 3: Stephen  holding [13, 17, 25, 30, 33, 37, 39] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
28 29 31 32 36 41 43 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [28, 29, 31, 32, 36, 41, 43] plays the 28 
Stephen wins the round 

Round 4: Stephen  holding [13, 17, 25, 33, 37, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 32 36 41 43 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius holding [29, 31, 32, 36, 41, 43] plays the 36 
Round 4: Mitchell holding [11, 15, 22, 38, 45, 46] plays the 15 
Round 4: Kangying holding [18, 19, 23, 27, 35, 47] plays the 18 
Stephen wins the round 

Round 5: Stephen  holding [13, 17, 25, 33, 37] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 32 41 43 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 5: Eugenius holding [29, 31, 32, 41, 43] plays the 29 
Round 5: Mitchell holding [11, 22, 38, 45, 46] plays the 22 
Round 5: Kangying holding [19, 23, 27, 35, 47] plays the 27 
Stephen wins the round which contains 1 penalty points

Round 6: Stephen  holding [13, 17, 25, 37] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
31 32 41 43 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 6: Eugenius holding [31, 32, 41, 43] plays the 31 
Round 6: Mitchell holding [11, 38, 45, 46] plays the 11 
Round 6: Kangying holding [19, 23, 35, 47] plays the 19 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
32 41 43 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 7: Eugenius holding [32, 41, 43] plays the 32 
Round 7: Mitchell holding [38, 45, 46] plays the 38 
Round 7: Kangying holding [23, 35, 47] plays the 35 
Round 7: Stephen  holding [13, 25, 37] plays the 37 
Mitchell wins the round which contains 1 penalty points

Round 8: Mitchell holding [45, 46] plays the 45 
Round 8: Kangying holding [23, 47] plays the 47 
Round 8: Stephen  holding [13, 25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
41 43 0 0 0 0 0 0 0 0 

41 chah------------------------------------------------------------------------

Round 8: Eugenius holding [41, 43] plays the 41 
Mitchell wins the round which contains 2 penalty points

Round 9: Mitchell holding [46] plays the 46 
Round 9: Kangying holding [23] plays the 23 
Round 9: Stephen  holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43 chah------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Mitchell wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Kangying (system)
#2 with 1 penalty points Stephen (system)
#3 with 4 penalty points Eugenius (dodo.c)
#4 with 13 penalty points Mitchell (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3230631 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 14, 15, 18, 21, 24, 28, 34, 41, 45]
Table position 1: Vincent : [11, 12, 22, 25, 31, 36, 42, 46, 47, 49]
Table position 2: Mitchell: [19, 20, 23, 26, 32, 33, 37, 39, 43, 48]
Table position 3: Oscar   : [13, 16, 17, 27, 29, 30, 35, 38, 40, 44]

Discards:
Eugenius [34, 41, 45]
Vincent  [25, 46, 47]
Mitchell [20, 26, 37]
Oscar    [17, 30, 35]


Debug output from Eugenius
------------------------------------------------------------------------
10 14 15 17 18 21 24 28 30 35 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 14, 15, 17, 18, 21, 24, 28, 30, 35] plays the 10 
Round 0: Vincent  holding [11, 12, 22, 31, 34, 36, 41, 42, 45, 49] plays the 45 
Round 0: Mitchell holding [19, 23, 25, 32, 33, 39, 43, 46, 47, 48] plays the 25 
Round 0: Oscar    holding [13, 16, 20, 26, 27, 29, 37, 38, 40, 44] plays the 20 
Vincent wins the round 

Round 1: Vincent  holding [11, 12, 22, 31, 34, 36, 41, 42, 49] plays the 12 
Round 1: Mitchell holding [19, 23, 32, 33, 39, 43, 46, 47, 48] plays the 32 
Round 1: Oscar    holding [13, 16, 26, 27, 29, 37, 38, 40, 44] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
14 15 17 18 21 24 28 30 35 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 15, 17, 18, 21, 24, 28, 30, 35] plays the 14 
Mitchell wins the round 

Round 2: Mitchell holding [19, 23, 33, 39, 43, 46, 47, 48] plays the 46 
Round 2: Oscar    holding [13, 26, 27, 29, 37, 38, 40, 44] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
15 17 18 21 24 28 30 35 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [15, 17, 18, 21, 24, 28, 30, 35] plays the 18 
Round 2: Vincent  holding [11, 22, 31, 34, 36, 41, 42, 49] plays the 34 
Mitchell wins the round 

Round 3: Mitchell holding [19, 23, 33, 39, 43, 47, 48] plays the 39 
Round 3: Oscar    holding [13, 26, 27, 29, 37, 38, 44] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
15 17 21 24 28 30 35 0 0 0 

15------------------------------------------------------------------------

Round 3: Eugenius holding [15, 17, 21, 24, 28, 30, 35] plays the 15 
Round 3: Vincent  holding [11, 22, 31, 36, 41, 42, 49] plays the 36 
Mitchell wins the round 

Round 4: Mitchell holding [19, 23, 33, 43, 47, 48] plays the 33 
Round 4: Oscar    holding [13, 27, 29, 37, 38, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
17 21 24 28 30 35 0 0 0 0 

21------------------------------------------------------------------------

Round 4: Eugenius holding [17, 21, 24, 28, 30, 35] plays the 21 
Round 4: Vincent  holding [11, 22, 31, 41, 42, 49] plays the 42 
Oscar wins the round which contains 7 penalty points

Round 5: Oscar    holding [13, 27, 29, 37, 38] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
17 24 28 30 35 0 0 0 0 0 

24------------------------------------------------------------------------

Round 5: Eugenius holding [17, 24, 28, 30, 35] plays the 24 
Round 5: Vincent  holding [11, 22, 31, 41, 49] plays the 31 
Round 5: Mitchell holding [19, 23, 43, 47, 48] plays the 48 
Mitchell wins the round which contains 1 penalty points

Round 6: Mitchell holding [19, 23, 43, 47] plays the 47 
Round 6: Oscar    holding [13, 29, 37, 38] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
17 28 30 35 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 28, 30, 35] plays the 17 
Round 6: Vincent  holding [11, 22, 41, 49] plays the 41 
Mitchell wins the round which contains 4 penalty points

Round 7: Mitchell holding [19, 23, 43] plays the 23 
Round 7: Oscar    holding [13, 29, 38] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
28 30 35 0 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 7: Eugenius holding [28, 30, 35] plays the 28 
Round 7: Vincent  holding [11, 22, 49] plays the 11 
Oscar wins the round which contains 3 penalty points

Round 8: Oscar    holding [13, 38] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
30 35 0 0 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 8: Eugenius holding [30, 35] plays the 30 
Round 8: Vincent  holding [22, 49] plays the 49 
Round 8: Mitchell holding [19, 43] plays the 43 
Mitchell wins the round which contains 2 penalty points

Round 9: Mitchell holding [19] plays the 19 
Round 9: Oscar    holding [38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Round 9: Vincent  holding [22] plays the 22 
Mitchell wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Vincent (system)
#3 with 8 penalty points Mitchell (system)
#4 with 10 penalty points Oscar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9874717 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Dean    : [22, 27, 28, 29, 31, 33, 35, 36, 39, 40]
Table position 1: Eugenius: [12, 14, 21, 23, 25, 38, 43, 46, 48, 49]
Table position 2: Minh    : [10, 11, 15, 18, 19, 26, 32, 37, 44, 47]
Table position 3: Connor  : [13, 16, 17, 20, 24, 30, 34, 41, 42, 45]

Discards:
Dean     [22, 28, 39]
Eugenius [46, 48, 49]
Minh     [19, 26, 37]
Connor   [13, 30, 42]

Round 0: Dean     holding [13, 27, 29, 30, 31, 33, 35, 36, 40, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 21 22 23 25 28 38 39 43 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 14, 21, 22, 23, 25, 28, 38, 39, 43] plays the 12 
Round 0: Minh     holding [10, 11, 15, 18, 32, 44, 46, 47, 48, 49] plays the 18 
Round 0: Connor   holding [16, 17, 19, 20, 24, 26, 34, 37, 41, 45] plays the 26 
Dean wins the round which contains 7 penalty points

Round 1: Dean     holding [13, 27, 29, 30, 31, 33, 35, 36, 40] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
14 21 22 23 25 28 38 39 43 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 21, 22, 23, 25, 28, 38, 39, 43] plays the 14 
Round 1: Minh     holding [10, 11, 15, 32, 44, 46, 47, 48, 49] plays the 32 
Round 1: Connor   holding [16, 17, 19, 20, 24, 34, 37, 41, 45] plays the 45 
Connor wins the round 

Round 2: Connor   holding [16, 17, 19, 20, 24, 34, 37, 41] plays the 20 
Round 2: Dean     holding [13, 27, 29, 31, 33, 35, 36, 40] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
21 22 23 25 28 38 39 43 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [21, 22, 23, 25, 28, 38, 39, 43] plays the 22 
Round 2: Minh     holding [10, 11, 15, 44, 46, 47, 48, 49] plays the 10 
Dean wins the round 

Round 3: Dean     holding [13, 27, 29, 31, 33, 36, 40] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
21 23 25 28 38 39 43 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [21, 23, 25, 28, 38, 39, 43] plays the 21 
Round 3: Minh     holding [11, 15, 44, 46, 47, 48, 49] plays the 48 
Round 3: Connor   holding [16, 17, 19, 24, 34, 37, 41] plays the 24 
Minh wins the round 

Round 4: Minh     holding [11, 15, 44, 46, 47, 49] plays the 15 
Round 4: Connor   holding [16, 17, 19, 34, 37, 41] plays the 41 
Round 4: Dean     holding [13, 29, 31, 33, 36, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 28 38 39 43 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [23, 25, 28, 38, 39, 43] plays the 25 
Dean wins the round which contains 1 penalty points

Round 5: Dean     holding [13, 29, 31, 33, 36] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
23 28 38 39 43 0 0 0 0 0 

28------------------------------------------------------------------------

Round 5: Eugenius holding [23, 28, 38, 39, 43] plays the 28 
Round 5: Minh     holding [11, 44, 46, 47, 49] plays the 44 
Round 5: Connor   holding [16, 17, 19, 34, 37] plays the 16 
Minh wins the round 

Round 6: Minh     holding [11, 46, 47, 49] plays the 47 
Round 6: Connor   holding [17, 19, 34, 37] plays the 17 
Round 6: Dean     holding [13, 29, 31, 33] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
23 38 39 43 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 38, 39, 43] plays the 23 
Minh wins the round which contains 4 penalty points

Round 7: Minh     holding [11, 46, 49] plays the 11 
Round 7: Connor   holding [19, 34, 37] plays the 19 
Round 7: Dean     holding [13, 29, 33] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
38 39 43 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 7: Eugenius holding [38, 39, 43] plays the 43 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
38 39 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [38, 39] plays the 38 
Round 8: Minh     holding [46, 49] plays the 46 
Round 8: Connor   holding [34, 37] plays the 34 
Round 8: Dean     holding [13, 33] plays the 33 
Minh wins the round 

Round 9: Minh     holding [49] plays the 49 
Round 9: Connor   holding [37] plays the 37 
Round 9: Dean     holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39 chah------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Minh wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Connor (system)
#2 with 4 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Minh (system)
#4 with 8 penalty points Dean (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3039174 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Aydin   : [14, 21, 22, 26, 27, 30, 31, 32, 40, 47]
Table position 1: Eugenius: [10, 18, 20, 25, 28, 33, 39, 43, 48, 49]
Table position 2: Trung   : [12, 13, 15, 19, 36, 37, 38, 42, 44, 46]
Table position 3: Heather : [11, 16, 17, 23, 24, 29, 34, 35, 41, 45]

Discards:
Aydin    [21, 30, 40]
Eugenius [43, 48, 49]
Trung    [13, 19, 36]
Heather  [17, 35, 45]

Round 0: Aydin    holding [14, 17, 22, 26, 27, 31, 32, 35, 45, 47] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
10 18 20 21 25 28 30 33 39 40 

18------------------------------------------------------------------------

Round 0: Eugenius holding [10, 18, 20, 21, 25, 28, 30, 33, 39, 40] plays the 18 
Round 0: Trung    holding [12, 15, 37, 38, 42, 43, 44, 46, 48, 49] plays the 15 
Round 0: Heather  holding [11, 13, 16, 19, 23, 24, 29, 34, 36, 41] plays the 36 
Heather wins the round 

Round 1: Heather  holding [11, 13, 16, 19, 23, 24, 29, 34, 41] plays the 34 
Round 1: Aydin    holding [14, 17, 22, 26, 31, 32, 35, 45, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
10 20 21 25 28 30 33 39 40 0 

10------------------------------------------------------------------------

Round 1: Eugenius holding [10, 20, 21, 25, 28, 30, 33, 39, 40] plays the 10 
Round 1: Trung    holding [12, 37, 38, 42, 43, 44, 46, 48, 49] plays the 46 
Trung wins the round 

Round 2: Trung    holding [12, 37, 38, 42, 43, 44, 48, 49] plays the 38 
Round 2: Heather  holding [11, 13, 16, 19, 23, 24, 29, 41] plays the 16 
Round 2: Aydin    holding [14, 17, 22, 31, 32, 35, 45, 47] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
20 21 25 28 30 33 39 40 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [20, 21, 25, 28, 30, 33, 39, 40] plays the 20 
Trung wins the round 

Round 3: Trung    holding [12, 37, 42, 43, 44, 48, 49] plays the 48 
Round 3: Heather  holding [11, 13, 19, 23, 24, 29, 41] plays the 24 
Round 3: Aydin    holding [14, 17, 22, 31, 35, 45, 47] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
21 25 28 30 33 39 40 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [21, 25, 28, 30, 33, 39, 40] plays the 21 
Trung wins the round 

Round 4: Trung    holding [12, 37, 42, 43, 44, 49] plays the 42 
Round 4: Heather  holding [11, 13, 19, 23, 29, 41] plays the 29 
Round 4: Aydin    holding [14, 17, 31, 35, 45, 47] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
25 28 30 33 39 40 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [25, 28, 30, 33, 39, 40] plays the 28 
Trung wins the round which contains 8 penalty points

Round 5: Trung    holding [12, 37, 43, 44, 49] plays the 43 
Round 5: Heather  holding [11, 13, 19, 23, 41] plays the 23 
Round 5: Aydin    holding [14, 17, 31, 45, 47] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
25 30 33 39 40 0 0 0 0 0 

25------------------------------------------------------------------------

Round 5: Eugenius holding [25, 30, 33, 39, 40] plays the 25 
Trung wins the round which contains 3 penalty points

Round 6: Trung    holding [12, 37, 44, 49] plays the 12 
Round 6: Heather  holding [11, 13, 19, 41] plays the 13 
Round 6: Aydin    holding [14, 17, 45, 47] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
30 33 39 40 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 6: Eugenius holding [30, 33, 39, 40] plays the 30 
Aydin wins the round which contains 1 penalty points

Round 7: Aydin    holding [14, 17, 47] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
33 39 40 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 7: Eugenius holding [33, 39, 40] plays the 33 
Round 7: Trung    holding [37, 44, 49] plays the 37 
Round 7: Heather  holding [11, 19, 41] plays the 19 
Trung wins the round which contains 3 penalty points

Round 8: Trung    holding [44, 49] plays the 49 
Round 8: Heather  holding [11, 41] plays the 41 
Round 8: Aydin    holding [14, 47] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
39 40 0 0 0 0 0 0 0 0 

39 chah------------------------------------------------------------------------

Round 8: Eugenius holding [39, 40] plays the 39 
Trung wins the round which contains 1 penalty points

Round 9: Trung    holding [44] plays the 44 
Round 9: Heather  holding [11] plays the 11 
Round 9: Aydin    holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 9: Eugenius holding [40] plays the 40 
Trung wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Heather (system)
#3 with 1 penalty points Aydin (system)
#4 with 17 penalty points Trung (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2224364 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: George  : [10, 15, 23, 25, 27, 32, 36, 37, 40, 42]
Table position 1: Eugenius: [11, 13, 16, 18, 21, 31, 38, 39, 44, 46]
Table position 2: Dean    : [14, 20, 24, 26, 29, 30, 34, 35, 41, 48]
Table position 3: Michael : [12, 17, 19, 22, 28, 33, 43, 45, 47, 49]

Discards:
George   [10, 25, 36]
Eugenius [39, 44, 46]
Dean     [14, 20, 30]
Michael  [22, 28, 33]

Round 0: George   holding [15, 22, 23, 27, 28, 32, 33, 37, 40, 42] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 13 16 18 21 25 31 36 38 

18------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 13, 16, 18, 21, 25, 31, 36, 38] plays the 18 
Round 0: Dean     holding [24, 26, 29, 34, 35, 39, 41, 44, 46, 48] plays the 39 
Round 0: Michael  holding [12, 14, 17, 19, 20, 30, 43, 45, 47, 49] plays the 45 
Michael wins the round 

Round 1: Michael  holding [12, 14, 17, 19, 20, 30, 43, 47, 49] plays the 20 
Round 1: George   holding [15, 22, 23, 28, 32, 33, 37, 40, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 13 16 21 25 31 36 38 0 

10------------------------------------------------------------------------

Round 1: Eugenius holding [10, 11, 13, 16, 21, 25, 31, 36, 38] plays the 10 
Round 1: Dean     holding [24, 26, 29, 34, 35, 41, 44, 46, 48] plays the 48 
Dean wins the round which contains 7 penalty points

Round 2: Dean     holding [24, 26, 29, 34, 35, 41, 44, 46] plays the 24 
Round 2: Michael  holding [12, 14, 17, 19, 30, 43, 47, 49] plays the 30 
Round 2: George   holding [15, 22, 23, 28, 32, 33, 37, 40] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 16 21 25 31 36 38 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 16, 21, 25, 31, 36, 38] plays the 16 
Michael wins the round 

Round 3: Michael  holding [12, 14, 17, 19, 43, 47, 49] plays the 49 
Round 3: George   holding [15, 22, 23, 32, 33, 37, 40] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 21 25 31 36 38 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 21, 25, 31, 36, 38] plays the 21 
Round 3: Dean     holding [26, 29, 34, 35, 41, 44, 46] plays the 35 
Michael wins the round 

Round 4: Michael  holding [12, 14, 17, 19, 43, 47] plays the 12 
Round 4: George   holding [15, 22, 23, 33, 37, 40] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 25 31 36 38 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 25, 31, 36, 38] plays the 36 
Round 4: Dean     holding [26, 29, 34, 41, 44, 46] plays the 26 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 13 25 31 38 0 0 0 0 0 

25------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 25, 31, 38] plays the 25 
Round 5: Dean     holding [29, 34, 41, 44, 46] plays the 29 
Round 5: Michael  holding [14, 17, 19, 43, 47] plays the 14 
Round 5: George   holding [15, 23, 33, 37, 40] plays the 15 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
11 13 31 38 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 13, 31, 38] plays the 11 
Round 6: Dean     holding [34, 41, 44, 46] plays the 41 
Round 6: Michael  holding [17, 19, 43, 47] plays the 43 
Round 6: George   holding [23, 33, 37, 40] plays the 23 
Michael wins the round which contains 4 penalty points

Round 7: Michael  holding [17, 19, 47] plays the 17 
Round 7: George   holding [33, 37, 40] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
13 31 38 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 31, 38] plays the 13 
Round 7: Dean     holding [34, 44, 46] plays the 34 
George wins the round which contains 3 penalty points

Round 8: George   holding [33, 40] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
31 38 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius holding [31, 38] plays the 31 
Round 8: Dean     holding [44, 46] plays the 44 
Round 8: Michael  holding [19, 47] plays the 47 
Dean wins the round which contains 2 penalty points

Round 9: Dean     holding [46] plays the 46 
Round 9: Michael  holding [19] plays the 19 
Round 9: George   holding [40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Dean wins the round which contains 1 penalty points


Finishing Positions

#1 with 1 penalty points Eugenius (dodo.c)
#2 with 3 penalty points George (system)
#3 with 4 penalty points Michael (system)
#4 with 10 penalty points Dean (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15335340 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Peter   : [10, 12, 18, 19, 31, 36, 43, 45, 48, 49]
Table position 1: Marc    : [11, 14, 17, 22, 29, 30, 34, 37, 42, 46]
Table position 2: Mitchell: [15, 20, 21, 28, 33, 35, 38, 40, 41, 44]
Table position 3: Eugenius: [13, 16, 23, 24, 25, 26, 27, 32, 39, 47]

Discards:
Peter    [18, 36, 48]
Marc     [14, 29, 34]
Mitchell [28, 33, 38]
Eugenius [32, 39, 47]

Round 0: Peter    holding [10, 12, 19, 31, 32, 39, 43, 45, 47, 49] plays the 45 
Round 0: Marc     holding [11, 17, 18, 22, 30, 36, 37, 42, 46, 48] plays the 18 
Round 0: Mitchell holding [14, 15, 20, 21, 29, 34, 35, 40, 41, 44] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 23 24 25 26 27 28 33 38 

24------------------------------------------------------------------------

Round 0: Eugenius holding [13, 16, 23, 24, 25, 26, 27, 28, 33, 38] plays the 24 
Peter wins the round 

Round 1: Peter    holding [10, 12, 19, 31, 32, 39, 43, 47, 49] plays the 12 
Round 1: Marc     holding [11, 17, 22, 30, 36, 37, 42, 46, 48] plays the 46 
Round 1: Mitchell holding [14, 15, 20, 29, 34, 35, 40, 41, 44] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 23 25 26 27 28 33 38 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [13, 16, 23, 25, 26, 27, 28, 33, 38] plays the 16 
Marc wins the round 

Round 2: Marc     holding [11, 17, 22, 30, 36, 37, 42, 48] plays the 48 
Round 2: Mitchell holding [14, 15, 29, 34, 35, 40, 41, 44] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 25 26 27 28 33 38 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [13, 23, 25, 26, 27, 28, 33, 38] plays the 26 
Round 2: Peter    holding [10, 19, 31, 32, 39, 43, 47, 49] plays the 39 
Marc wins the round 

Round 3: Marc     holding [11, 17, 22, 30, 36, 37, 42] plays the 42 
Round 3: Mitchell holding [15, 29, 34, 35, 40, 41, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 25 27 28 33 38 0 0 0 

27------------------------------------------------------------------------

Round 3: Eugenius holding [13, 23, 25, 27, 28, 33, 38] plays the 27 
Round 3: Peter    holding [10, 19, 31, 32, 43, 47, 49] plays the 49 
Peter wins the round which contains 7 penalty points

Round 4: Peter    holding [10, 19, 31, 32, 43, 47] plays the 32 
Round 4: Marc     holding [11, 17, 22, 30, 36, 37] plays the 22 
Round 4: Mitchell holding [15, 29, 34, 35, 40, 41] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 25 28 33 38 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [13, 23, 25, 28, 33, 38] plays the 28 
Mitchell wins the round 

Round 5: Mitchell holding [15, 29, 34, 35, 41] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 25 33 38 0 0 0 0 0 

38------------------------------------------------------------------------

Round 5: Eugenius holding [13, 23, 25, 33, 38] plays the 38 
Round 5: Peter    holding [10, 19, 31, 43, 47] plays the 10 
Round 5: Marc     holding [11, 17, 30, 36, 37] plays the 36 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 23 25 33 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 6: Eugenius holding [13, 23, 25, 33] plays the 25 
Round 6: Peter    holding [19, 31, 43, 47] plays the 43 
Round 6: Marc     holding [11, 17, 30, 37] plays the 30 
Round 6: Mitchell holding [15, 29, 35, 41] plays the 35 
Mitchell wins the round which contains 1 penalty points

Round 7: Mitchell holding [15, 29, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 33 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 23, 33] plays the 13 
Round 7: Peter    holding [19, 31, 47] plays the 31 
Round 7: Marc     holding [11, 17, 37] plays the 37 
Mitchell wins the round which contains 4 penalty points

Round 8: Mitchell holding [15, 29] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
23 33 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 8: Eugenius holding [23, 33] plays the 23 
Round 8: Peter    holding [19, 47] plays the 47 
Round 8: Marc     holding [11, 17] plays the 11 
Peter wins the round which contains 4 penalty points

Round 9: Peter    holding [19] plays the 19 
Round 9: Marc     holding [17] plays the 17 
Round 9: Mitchell holding [15] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
33 0 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 9: Eugenius holding [33] plays the 33 
Peter wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Marc (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 5 penalty points Mitchell (system)
#4 with 13 penalty points Peter (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11702782 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Xue     : [12, 15, 23, 32, 33, 34, 35, 36, 38, 41]
Table position 1: Peter   : [13, 16, 17, 18, 19, 25, 29, 39, 40, 46]
Table position 2: Eugenius: [11, 14, 20, 21, 22, 24, 26, 37, 48, 49]
Table position 3: Sabrina : [10, 27, 28, 30, 31, 42, 43, 44, 45, 47]

Discards:
Xue      [15, 23, 33]
Peter    [17, 25, 39]
Eugenius [37, 48, 49]
Sabrina  [28, 31, 44]

Round 0: Xue      holding [12, 28, 31, 32, 34, 35, 36, 38, 41, 44] plays the 44 
Round 0: Peter    holding [13, 15, 16, 18, 19, 23, 29, 33, 40, 46] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 17 20 21 22 24 25 26 39 

14------------------------------------------------------------------------

Round 0: Eugenius holding [11, 14, 17, 20, 21, 22, 24, 25, 26, 39] plays the 14 
Round 0: Sabrina  holding [10, 27, 30, 37, 42, 43, 45, 47, 48, 49] plays the 10 
Xue wins the round 

Round 1: Xue      holding [12, 28, 31, 32, 34, 35, 36, 38, 41] plays the 34 
Round 1: Peter    holding [13, 15, 16, 19, 23, 29, 33, 40, 46] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 20 21 22 24 25 26 39 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [11, 17, 20, 21, 22, 24, 25, 26, 39] plays the 20 
Round 1: Sabrina  holding [27, 30, 37, 42, 43, 45, 47, 48, 49] plays the 42 
Sabrina wins the round which contains 7 penalty points

Round 2: Sabrina  holding [27, 30, 37, 43, 45, 47, 48, 49] plays the 49 
Round 2: Xue      holding [12, 28, 31, 32, 35, 36, 38, 41] plays the 35 
Round 2: Peter    holding [13, 15, 16, 19, 23, 29, 33, 46] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 21 22 24 25 26 39 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [11, 17, 21, 22, 24, 25, 26, 39] plays the 21 
Sabrina wins the round which contains 1 penalty points

Round 3: Sabrina  holding [27, 30, 37, 43, 45, 47, 48] plays the 47 
Round 3: Xue      holding [12, 28, 31, 32, 36, 38, 41] plays the 31 
Round 3: Peter    holding [13, 15, 16, 19, 23, 33, 46] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 22 24 25 26 39 0 0 0 

11------------------------------------------------------------------------

Round 3: Eugenius holding [11, 17, 22, 24, 25, 26, 39] plays the 11 
Sabrina wins the round which contains 4 penalty points

Round 4: Sabrina  holding [27, 30, 37, 43, 45, 48] plays the 48 
Round 4: Xue      holding [12, 28, 32, 36, 38, 41] plays the 32 
Round 4: Peter    holding [13, 15, 16, 23, 33, 46] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 24 25 26 39 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius holding [17, 22, 24, 25, 26, 39] plays the 22 
Sabrina wins the round 

Round 5: Sabrina  holding [27, 30, 37, 43, 45] plays the 37 
Round 5: Xue      holding [12, 28, 36, 38, 41] plays the 41 
Round 5: Peter    holding [13, 15, 23, 33, 46] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
17 24 25 26 39 0 0 0 0 0 

17------------------------------------------------------------------------

Round 5: Eugenius holding [17, 24, 25, 26, 39] plays the 17 
Xue wins the round which contains 4 penalty points

Round 6: Xue      holding [12, 28, 36, 38] plays the 38 
Round 6: Peter    holding [13, 15, 33, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
24 25 26 39 0 0 0 0 0 0 

24------------------------------------------------------------------------

Round 6: Eugenius holding [24, 25, 26, 39] plays the 24 
Round 6: Sabrina  holding [27, 30, 43, 45] plays the 30 
Peter wins the round 

Round 7: Peter    holding [13, 15, 33] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
25 26 39 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 7: Eugenius holding [25, 26, 39] plays the 25 
Round 7: Sabrina  holding [27, 43, 45] plays the 27 
Round 7: Xue      holding [12, 28, 36] plays the 36 
Xue wins the round 

Round 8: Xue      holding [12, 28] plays the 28 
Round 8: Peter    holding [13, 33] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
26 39 0 0 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 8: Eugenius holding [26, 39] plays the 26 
Round 8: Sabrina  holding [43, 45] plays the 45 
Xue wins the round 

Round 9: Xue      holding [12] plays the 12 
Round 9: Peter    holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Round 9: Sabrina  holding [43] plays the 43 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Peter (system)
#2 with 2 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Xue (system)
#4 with 12 penalty points Sabrina (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16682891 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Matthew : [16, 17, 25, 31, 35, 37, 39, 42, 46, 49]
Table position 1: Finbar  : [10, 11, 12, 18, 21, 26, 33, 44, 47, 48]
Table position 2: Emily   : [14, 23, 24, 27, 28, 30, 36, 40, 41, 45]
Table position 3: Eugenius: [13, 15, 19, 20, 22, 29, 32, 34, 38, 43]

Discards:
Matthew  [37, 42, 49]
Finbar   [10, 11, 18]
Emily    [14, 27, 40]
Eugenius [34, 38, 43]

Round 0: Matthew  holding [16, 17, 25, 31, 34, 35, 38, 39, 43, 46] plays the 34 
Round 0: Finbar   holding [12, 21, 26, 33, 37, 42, 44, 47, 48, 49] plays the 42 
Round 0: Emily    holding [10, 11, 18, 23, 24, 28, 30, 36, 41, 45] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
13 14 15 19 20 22 27 29 32 40 

14------------------------------------------------------------------------

Round 0: Eugenius holding [13, 14, 15, 19, 20, 22, 27, 29, 32, 40] plays the 14 
Finbar wins the round which contains 7 penalty points

Round 1: Finbar   holding [12, 21, 26, 33, 37, 44, 47, 48, 49] plays the 44 
Round 1: Emily    holding [10, 11, 23, 24, 28, 30, 36, 41, 45] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 19 20 22 27 29 32 40 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [13, 15, 19, 20, 22, 27, 29, 32, 40] plays the 20 
Round 1: Matthew  holding [16, 17, 25, 31, 35, 38, 39, 43, 46] plays the 16 
Finbar wins the round 

Round 2: Finbar   holding [12, 21, 26, 33, 37, 47, 48, 49] plays the 26 
Round 2: Emily    holding [10, 11, 23, 28, 30, 36, 41, 45] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 19 22 27 29 32 40 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [13, 15, 19, 22, 27, 29, 32, 40] plays the 22 
Round 2: Matthew  holding [17, 25, 31, 35, 38, 39, 43, 46] plays the 38 
Matthew wins the round 

Round 3: Matthew  holding [17, 25, 31, 35, 39, 43, 46] plays the 35 
Round 3: Finbar   holding [12, 21, 33, 37, 47, 48, 49] plays the 21 
Round 3: Emily    holding [10, 11, 23, 28, 36, 41, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 19 27 29 32 40 0 0 0 

15------------------------------------------------------------------------

Round 3: Eugenius holding [13, 15, 19, 27, 29, 32, 40] plays the 15 
Emily wins the round 

Round 4: Emily    holding [10, 11, 23, 28, 36, 41] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 27 29 32 40 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [13, 19, 27, 29, 32, 40] plays the 32 
Round 4: Matthew  holding [17, 25, 31, 39, 43, 46] plays the 25 
Round 4: Finbar   holding [12, 33, 37, 47, 48, 49] plays the 48 
Finbar wins the round 

Round 5: Finbar   holding [12, 33, 37, 47, 49] plays the 49 
Round 5: Emily    holding [11, 23, 28, 36, 41] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 27 29 40 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 5: Eugenius holding [13, 19, 27, 29, 40] plays the 13 
Round 5: Matthew  holding [17, 31, 39, 43, 46] plays the 17 
Finbar wins the round which contains 2 penalty points

Round 6: Finbar   holding [12, 33, 37, 47] plays the 37 
Round 6: Emily    holding [11, 23, 36, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
19 27 29 40 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 27, 29, 40] plays the 19 
Round 6: Matthew  holding [31, 39, 43, 46] plays the 31 
Emily wins the round which contains 4 penalty points

Round 7: Emily    holding [11, 23, 36] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 40 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [27, 29, 40] plays the 29 
Round 7: Matthew  holding [39, 43, 46] plays the 43 
Round 7: Finbar   holding [12, 33, 47] plays the 47 
Finbar wins the round which contains 4 penalty points

Round 8: Finbar   holding [12, 33] plays the 12 
Round 8: Emily    holding [11, 36] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
27 40 0 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 8: Eugenius holding [27, 40] plays the 27 
Round 8: Matthew  holding [39, 46] plays the 39 
Matthew wins the round 

Round 9: Matthew  holding [46] plays the 46 
Round 9: Finbar   holding [33] plays the 33 
Round 9: Emily    holding [11] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 9: Eugenius holding [40] plays the 40 
Matthew wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Matthew (system)
#3 with 4 penalty points Emily (system)
#4 with 13 penalty points Finbar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3260083 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: George  : [19, 20, 21, 24, 25, 28, 34, 41, 43, 49]
Table position 1: Mitchell: [13, 14, 17, 23, 26, 27, 39, 40, 44, 48]
Table position 2: Andrew  : [10, 11, 15, 18, 22, 30, 33, 35, 38, 46]
Table position 3: Eugenius: [12, 16, 29, 31, 32, 36, 37, 42, 45, 47]

Discards:
George   [19, 24, 49]
Mitchell [39, 40, 44]
Andrew   [10, 33, 38]
Eugenius [42, 45, 47]

Round 0: George   holding [20, 21, 25, 28, 34, 41, 42, 43, 45, 47] plays the 20 
Round 0: Mitchell holding [13, 14, 17, 19, 23, 24, 26, 27, 48, 49] plays the 24 
Round 0: Andrew   holding [11, 15, 18, 22, 30, 35, 39, 40, 44, 46] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 16 29 31 32 33 36 37 38 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 16, 29, 31, 32, 33, 36, 37, 38] plays the 10 
Mitchell wins the round 

Round 1: Mitchell holding [13, 14, 17, 19, 23, 26, 27, 48, 49] plays the 49 
Round 1: Andrew   holding [11, 15, 22, 30, 35, 39, 40, 44, 46] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
12 16 29 31 32 33 36 37 38 0 

12 chah------------------------------------------------------------------------

Round 1: Eugenius holding [12, 16, 29, 31, 32, 33, 36, 37, 38] plays the 12 
Round 1: George   holding [21, 25, 28, 34, 41, 42, 43, 45, 47] plays the 21 
Mitchell wins the round 

Round 2: Mitchell holding [13, 14, 17, 19, 23, 26, 27, 48] plays the 26 
Round 2: Andrew   holding [11, 15, 22, 30, 39, 40, 44, 46] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
16 29 31 32 33 36 37 38 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [16, 29, 31, 32, 33, 36, 37, 38] plays the 16 
Round 2: George   holding [25, 28, 34, 41, 42, 43, 45, 47] plays the 28 
Andrew wins the round 

Round 3: Andrew   holding [11, 15, 22, 39, 40, 44, 46] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 32 33 36 37 38 0 0 0 

32------------------------------------------------------------------------

Round 3: Eugenius holding [29, 31, 32, 33, 36, 37, 38] plays the 32 
Round 3: George   holding [25, 34, 41, 42, 43, 45, 47] plays the 34 
Round 3: Mitchell holding [13, 14, 17, 19, 23, 27, 48] plays the 14 
Andrew wins the round 

Round 4: Andrew   holding [11, 15, 22, 39, 40, 46] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 33 36 37 38 0 0 0 0 

33------------------------------------------------------------------------

Round 4: Eugenius holding [29, 31, 33, 36, 37, 38] plays the 33 
Round 4: George   holding [25, 41, 42, 43, 45, 47] plays the 42 
Round 4: Mitchell holding [13, 17, 19, 23, 27, 48] plays the 48 
Mitchell wins the round which contains 7 penalty points

Round 5: Mitchell holding [13, 17, 19, 23, 27] plays the 27 
Round 5: Andrew   holding [11, 15, 39, 40, 46] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 36 37 38 0 0 0 0 0 

36------------------------------------------------------------------------

Round 5: Eugenius holding [29, 31, 36, 37, 38] plays the 36 
Round 5: George   holding [25, 41, 43, 45, 47] plays the 45 
George wins the round 

Round 6: George   holding [25, 41, 43, 47] plays the 25 
Round 6: Mitchell holding [13, 17, 19, 23] plays the 17 
Round 6: Andrew   holding [11, 15, 40, 46] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 37 38 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 6: Eugenius holding [29, 31, 37, 38] plays the 29 
George wins the round which contains 2 penalty points

Round 7: George   holding [41, 43, 47] plays the 47 
Round 7: Mitchell holding [13, 19, 23] plays the 13 
Round 7: Andrew   holding [11, 40, 46] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 38 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [31, 37, 38] plays the 31 
George wins the round which contains 4 penalty points

Round 8: George   holding [41, 43] plays the 43 
Round 8: Mitchell holding [19, 23] plays the 19 
Round 8: Andrew   holding [40, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
37 38 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 8: Eugenius holding [37, 38] plays the 37 
George wins the round which contains 3 penalty points

Round 9: George   holding [41] plays the 41 
Round 9: Mitchell holding [23] plays the 23 
Round 9: Andrew   holding [40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
George wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Andrew (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Mitchell (system)
#4 with 11 penalty points George (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6885549 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Xue     : [11, 12, 22, 26, 30, 34, 37, 38, 40, 45]
Table position 1: Eugenius: [10, 13, 15, 16, 25, 31, 39, 41, 48, 49]
Table position 2: Kane    : [17, 19, 23, 24, 27, 28, 29, 32, 42, 44]
Table position 3: Livia   : [14, 18, 20, 21, 33, 35, 36, 43, 46, 47]

Discards:
Xue      [11, 12, 45]
Eugenius [41, 48, 49]
Kane     [23, 24, 44]
Livia    [14, 18, 46]

Round 0: Xue      holding [14, 18, 22, 26, 30, 34, 37, 38, 40, 46] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 12 13 15 16 25 31 39 45 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 12, 13, 15, 16, 25, 31, 39, 45] plays the 10 
Round 0: Kane     holding [17, 19, 27, 28, 29, 32, 41, 42, 48, 49] plays the 48 
Round 0: Livia    holding [20, 21, 23, 24, 33, 35, 36, 43, 44, 47] plays the 24 
Kane wins the round 

Round 1: Kane     holding [17, 19, 27, 28, 29, 32, 41, 42, 49] plays the 28 
Round 1: Livia    holding [20, 21, 23, 33, 35, 36, 43, 44, 47] plays the 20 
Round 1: Xue      holding [14, 18, 26, 30, 34, 37, 38, 40, 46] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 13 15 16 25 31 39 45 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [11, 12, 13, 15, 16, 25, 31, 39, 45] plays the 12 
Xue wins the round 

Round 2: Xue      holding [14, 18, 26, 34, 37, 38, 40, 46] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 15 16 25 31 39 45 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 15, 16, 25, 31, 39, 45] plays the 15 
Round 2: Kane     holding [17, 19, 27, 29, 32, 41, 42, 49] plays the 42 
Round 2: Livia    holding [21, 23, 33, 35, 36, 43, 44, 47] plays the 36 
Kane wins the round which contains 7 penalty points

Round 3: Kane     holding [17, 19, 27, 29, 32, 41, 49] plays the 32 
Round 3: Livia    holding [21, 23, 33, 35, 43, 44, 47] plays the 44 
Round 3: Xue      holding [14, 18, 26, 34, 37, 38, 46] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 16 25 31 39 45 0 0 0 

16------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 16, 25, 31, 39, 45] plays the 16 
Livia wins the round 

Round 4: Livia    holding [21, 23, 33, 35, 43, 47] plays the 33 
Round 4: Xue      holding [14, 18, 34, 37, 38, 46] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 25 31 39 45 0 0 0 0 

39------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 25, 31, 39, 45] plays the 39 
Round 4: Kane     holding [17, 19, 27, 29, 41, 49] plays the 27 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 13 25 31 45 0 0 0 0 0 

25------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 25, 31, 45] plays the 25 
Round 5: Kane     holding [17, 19, 29, 41, 49] plays the 49 
Round 5: Livia    holding [21, 23, 35, 43, 47] plays the 35 
Round 5: Xue      holding [14, 34, 37, 38, 46] plays the 37 
Livia wins the round which contains 1 penalty points

Round 6: Livia    holding [21, 23, 43, 47] plays the 23 
Round 6: Xue      holding [14, 34, 38, 46] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 31 45 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 13, 31, 45] plays the 11 
Round 6: Kane     holding [17, 19, 29, 41] plays the 41 
Kane wins the round which contains 3 penalty points

Round 7: Kane     holding [17, 19, 29] plays the 29 
Round 7: Livia    holding [21, 43, 47] plays the 43 
Round 7: Xue      holding [14, 38, 46] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
13 31 45 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 31, 45] plays the 13 
Livia wins the round which contains 3 penalty points

Round 8: Livia    holding [21, 47] plays the 47 
Round 8: Xue      holding [38, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
31 45 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 45] plays the 31 
Round 8: Kane     holding [17, 19] plays the 17 
Livia wins the round which contains 3 penalty points

Round 9: Livia    holding [21] plays the 21 
Round 9: Xue      holding [38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Round 9: Kane     holding [19] plays the 19 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Xue (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Livia (system)
#4 with 10 penalty points Kane (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2388796 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 13, 21, 35, 36, 38, 40, 41, 43, 45]
Table position 1: David   : [12, 17, 24, 26, 30, 32, 37, 42, 44, 47]
Table position 2: Livia   : [10, 14, 19, 22, 25, 29, 33, 34, 46, 49]
Table position 3: Matthew : [15, 16, 18, 20, 23, 27, 28, 31, 39, 48]

Discards:
Eugenius [41, 43, 45]
David    [12, 24, 37]
Livia    [19, 22, 25]
Matthew  [27, 31, 39]


Debug output from Eugenius
------------------------------------------------------------------------
11 13 21 27 31 35 36 38 39 40 

21------------------------------------------------------------------------

Round 0: Eugenius holding [11, 13, 21, 27, 31, 35, 36, 38, 39, 40] plays the 21 
Round 0: David    holding [17, 26, 30, 32, 41, 42, 43, 44, 45, 47] plays the 45 
Round 0: Livia    holding [10, 12, 14, 24, 29, 33, 34, 37, 46, 49] plays the 49 
Round 0: Matthew  holding [15, 16, 18, 19, 20, 22, 23, 25, 28, 48] plays the 18 
Livia wins the round 

Round 1: Livia    holding [10, 12, 14, 24, 29, 33, 34, 37, 46] plays the 33 
Round 1: Matthew  holding [15, 16, 19, 20, 22, 23, 25, 28, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 27 31 35 36 38 39 40 0 

27------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 27, 31, 35, 36, 38, 39, 40] plays the 27 
Round 1: David    holding [17, 26, 30, 32, 41, 42, 43, 44, 47] plays the 30 
Matthew wins the round 

Round 2: Matthew  holding [15, 16, 19, 20, 22, 23, 25, 28] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 31 35 36 38 39 40 0 0 

35------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 31, 35, 36, 38, 39, 40] plays the 35 
Round 2: David    holding [17, 26, 32, 41, 42, 43, 44, 47] plays the 32 
Round 2: Livia    holding [10, 12, 14, 24, 29, 34, 37, 46] plays the 34 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 13 31 36 38 39 40 0 0 0 

36------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 31, 36, 38, 39, 40] plays the 36 
Round 3: David    holding [17, 26, 41, 42, 43, 44, 47] plays the 42 
Round 3: Livia    holding [10, 12, 14, 24, 29, 37, 46] plays the 12 
Round 3: Matthew  holding [15, 16, 19, 22, 23, 25, 28] plays the 15 
David wins the round which contains 7 penalty points

Round 4: David    holding [17, 26, 41, 43, 44, 47] plays the 44 
Round 4: Livia    holding [10, 14, 24, 29, 37, 46] plays the 46 
Round 4: Matthew  holding [16, 19, 22, 23, 25, 28] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 31 38 39 40 0 0 0 0 

38------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 31, 38, 39, 40] plays the 38 
Livia wins the round 

Round 5: Livia    holding [10, 14, 24, 29, 37] plays the 10 
Round 5: Matthew  holding [16, 19, 22, 23, 25] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 31 39 40 0 0 0 0 0 

40------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 31, 39, 40] plays the 40 
Round 5: David    holding [17, 26, 41, 43, 47] plays the 26 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 13 31 39 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 6: Eugenius holding [11, 13, 31, 39] plays the 39 
Round 6: David    holding [17, 41, 43, 47] plays the 43 
Round 6: Livia    holding [14, 24, 29, 37] plays the 24 
Round 6: Matthew  holding [19, 22, 23, 25] plays the 19 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
11 13 31 0 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 7: Eugenius holding [11, 13, 31] plays the 11 
Round 7: David    holding [17, 41, 47] plays the 17 
Round 7: Livia    holding [14, 29, 37] plays the 29 
Round 7: Matthew  holding [22, 23, 25] plays the 23 
Livia wins the round which contains 4 penalty points

Round 8: Livia    holding [14, 37] plays the 14 
Round 8: Matthew  holding [22, 25] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 31 0 0 0 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 8: Eugenius holding [13, 31] plays the 13 
Round 8: David    holding [41, 47] plays the 41 
Matthew wins the round which contains 2 penalty points

Round 9: Matthew  holding [25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Round 9: David    holding [47] plays the 47 
Round 9: Livia    holding [37] plays the 37 
Matthew wins the round which contains 3 penalty points


Finishing Positions

#1 with 2 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Livia (system)
#3 with 5 penalty points Matthew (system)
#4 with 7 penalty points David (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13779220 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Reede   : [11, 30, 31, 37, 38, 39, 43, 46, 48, 49]
Table position 1: Andrew  : [13, 14, 15, 19, 20, 25, 26, 28, 45, 47]
Table position 2: Eugenius: [17, 21, 22, 23, 24, 29, 33, 34, 36, 44]
Table position 3: Peter   : [10, 12, 16, 18, 27, 32, 35, 40, 41, 42]

Discards:
Reede    [30, 37, 43]
Andrew   [13, 25, 28]
Eugenius [34, 36, 44]
Peter    [10, 18, 35]

Round 0: Reede    holding [10, 11, 18, 31, 35, 38, 39, 46, 48, 49] plays the 18 
Round 0: Andrew   holding [14, 15, 19, 20, 26, 30, 37, 43, 45, 47] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 21 22 23 24 25 28 29 33 

21------------------------------------------------------------------------

Round 0: Eugenius holding [13, 17, 21, 22, 23, 24, 25, 28, 29, 33] plays the 21 
Round 0: Peter    holding [12, 16, 27, 32, 34, 36, 40, 41, 42, 44] plays the 12 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 17 22 23 24 25 28 29 33 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [13, 17, 22, 23, 24, 25, 28, 29, 33] plays the 22 
Round 1: Peter    holding [16, 27, 32, 34, 36, 40, 41, 42, 44] plays the 16 
Round 1: Reede    holding [10, 11, 31, 35, 38, 39, 46, 48, 49] plays the 46 
Round 1: Andrew   holding [14, 19, 20, 26, 30, 37, 43, 45, 47] plays the 14 
Reede wins the round 

Round 2: Reede    holding [10, 11, 31, 35, 38, 39, 48, 49] plays the 49 
Round 2: Andrew   holding [19, 20, 26, 30, 37, 43, 45, 47] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 24 25 28 29 33 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 23, 24, 25, 28, 29, 33] plays the 28 
Round 2: Peter    holding [27, 32, 34, 36, 40, 41, 42, 44] plays the 42 
Reede wins the round which contains 8 penalty points

Round 3: Reede    holding [10, 11, 31, 35, 38, 39, 48] plays the 10 
Round 3: Andrew   holding [20, 26, 30, 37, 43, 45, 47] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 24 25 29 33 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 23, 24, 25, 29, 33] plays the 24 
Round 3: Peter    holding [27, 32, 34, 36, 40, 41, 44] plays the 32 
Peter wins the round 

Round 4: Peter    holding [27, 34, 36, 40, 41, 44] plays the 34 
Round 4: Reede    holding [11, 31, 35, 38, 39, 48] plays the 48 
Round 4: Andrew   holding [20, 26, 37, 43, 45, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 25 29 33 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 23, 25, 29, 33] plays the 13 
Reede wins the round which contains 1 penalty points

Round 5: Reede    holding [11, 31, 35, 38, 39] plays the 39 
Round 5: Andrew   holding [20, 37, 43, 45, 47] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 25 29 33 0 0 0 0 0 

33------------------------------------------------------------------------

Round 5: Eugenius holding [17, 23, 25, 29, 33] plays the 33 
Round 5: Peter    holding [27, 36, 40, 41, 44] plays the 36 
Andrew wins the round 

Round 6: Andrew   holding [20, 37, 43, 47] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 25 29 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 23, 25, 29] plays the 17 
Round 6: Peter    holding [27, 40, 41, 44] plays the 41 
Round 6: Reede    holding [11, 31, 35, 38] plays the 31 
Peter wins the round which contains 4 penalty points

Round 7: Peter    holding [27, 40, 44] plays the 40 
Round 7: Reede    holding [11, 35, 38] plays the 38 
Round 7: Andrew   holding [20, 43, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 29 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 7: Eugenius holding [23, 25, 29] plays the 25 
Peter wins the round 

Round 8: Peter    holding [27, 44] plays the 44 
Round 8: Reede    holding [11, 35] plays the 11 
Round 8: Andrew   holding [43, 47] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 0 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 8: Eugenius holding [23, 29] plays the 23 
Peter wins the round which contains 3 penalty points

Round 9: Peter    holding [27] plays the 27 
Round 9: Reede    holding [35] plays the 35 
Round 9: Andrew   holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
29 0 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 9: Eugenius holding [29] plays the 29 
Peter wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Andrew (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 9 penalty points Reede (system)
#3 with 9 penalty points Peter (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12454433 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Kane    : [10, 17, 19, 22, 25, 26, 35, 39, 40, 46]
Table position 1: Eugenius: [13, 16, 18, 20, 27, 32, 38, 41, 43, 44]
Table position 2: Gal     : [14, 24, 28, 29, 30, 33, 34, 37, 47, 49]
Table position 3: Kangying: [11, 12, 15, 21, 23, 31, 36, 42, 45, 48]

Discards:
Kane     [22, 25, 26]
Eugenius [41, 43, 44]
Gal      [34, 37, 49]
Kangying [21, 31, 45]

Round 0: Kane     holding [10, 17, 19, 21, 31, 35, 39, 40, 45, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 18 20 22 25 26 27 32 38 

16------------------------------------------------------------------------

Round 0: Eugenius holding [13, 16, 18, 20, 22, 25, 26, 27, 32, 38] plays the 16 
Round 0: Gal      holding [14, 24, 28, 29, 30, 33, 41, 43, 44, 47] plays the 24 
Round 0: Kangying holding [11, 12, 15, 23, 34, 36, 37, 42, 48, 49] plays the 42 
Kane wins the round which contains 7 penalty points

Round 1: Kane     holding [10, 17, 19, 21, 31, 35, 39, 40, 45] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
13 18 20 22 25 26 27 32 38 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [13, 18, 20, 22, 25, 26, 27, 32, 38] plays the 18 
Round 1: Gal      holding [14, 28, 29, 30, 33, 41, 43, 44, 47] plays the 30 
Round 1: Kangying holding [11, 12, 15, 23, 34, 36, 37, 48, 49] plays the 15 
Gal wins the round 

Round 2: Gal      holding [14, 28, 29, 33, 41, 43, 44, 47] plays the 28 
Round 2: Kangying holding [11, 12, 23, 34, 36, 37, 48, 49] plays the 48 
Round 2: Kane     holding [17, 19, 21, 31, 35, 39, 40, 45] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
13 20 22 25 26 27 32 38 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [13, 20, 22, 25, 26, 27, 32, 38] plays the 20 
Kangying wins the round 

Round 3: Kangying holding [11, 12, 23, 34, 36, 37, 49] plays the 12 
Round 3: Kane     holding [17, 19, 31, 35, 39, 40, 45] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
13 22 25 26 27 32 38 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [13, 22, 25, 26, 27, 32, 38] plays the 22 
Round 3: Gal      holding [14, 29, 33, 41, 43, 44, 47] plays the 44 
Gal wins the round 

Round 4: Gal      holding [14, 29, 33, 41, 43, 47] plays the 33 
Round 4: Kangying holding [11, 23, 34, 36, 37, 49] plays the 36 
Round 4: Kane     holding [17, 19, 31, 35, 40, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
13 25 26 27 32 38 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [13, 25, 26, 27, 32, 38] plays the 27 
Kane wins the round 

Round 5: Kane     holding [17, 19, 31, 35, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
13 25 26 32 38 0 0 0 0 0 

25------------------------------------------------------------------------

Round 5: Eugenius holding [13, 25, 26, 32, 38] plays the 25 
Round 5: Gal      holding [14, 29, 41, 43, 47] plays the 14 
Round 5: Kangying holding [11, 23, 34, 37, 49] plays the 34 
Kane wins the round 

Round 6: Kane     holding [17, 19, 31, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
13 26 32 38 0 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 6: Eugenius holding [13, 26, 32, 38] plays the 13 
Round 6: Gal      holding [29, 41, 43, 47] plays the 43 
Round 6: Kangying holding [11, 23, 37, 49] plays the 49 
Kangying wins the round which contains 2 penalty points

Round 7: Kangying holding [11, 23, 37] plays the 37 
Round 7: Kane     holding [17, 19, 31] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
26 32 38 0 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 7: Eugenius holding [26, 32, 38] plays the 26 
Round 7: Gal      holding [29, 41, 47] plays the 41 
Gal wins the round which contains 3 penalty points

Round 8: Gal      holding [29, 47] plays the 29 
Round 8: Kangying holding [11, 23] plays the 23 
Round 8: Kane     holding [17, 31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
32 38 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 8: Eugenius holding [32, 38] plays the 32 
Kane wins the round which contains 3 penalty points

Round 9: Kane     holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Round 9: Gal      holding [47] plays the 47 
Round 9: Kangying holding [11] plays the 11 
Gal wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 2 penalty points Kangying (system)
#3 with 6 penalty points Gal (system)
#4 with 10 penalty points Kane (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 4549933 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Elizabeth: [10, 11, 13, 17, 22, 30, 31, 32, 42, 44]
Table position 1: Gal      : [15, 18, 20, 21, 24, 25, 29, 36, 41, 46]
Table position 2: Connor   : [12, 14, 23, 26, 33, 34, 35, 40, 47, 49]
Table position 3: Eugenius : [16, 19, 27, 28, 37, 38, 39, 43, 45, 48]

Discards:
Elizabeth [17, 31, 32]
Gal       [18, 20, 41]
Connor    [12, 23, 35]
Eugenius  [43, 45, 48]

Round 0: Elizabeth holding [10, 11, 13, 22, 30, 42, 43, 44, 45, 48] plays the 42 
Round 0: Gal       holding [15, 17, 21, 24, 25, 29, 31, 32, 36, 46] plays the 32 
Round 0: Connor    holding [14, 18, 20, 26, 33, 34, 40, 41, 47, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
12 16 19 23 27 28 35 37 38 39 

12------------------------------------------------------------------------

Round 0: Eugenius  holding [12, 16, 19, 23, 27, 28, 35, 37, 38, 39] plays the 12 
Connor wins the round which contains 7 penalty points

Round 1: Connor    holding [14, 18, 20, 26, 33, 34, 40, 41, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
16 19 23 27 28 35 37 38 39 0 

27------------------------------------------------------------------------

Round 1: Eugenius  holding [16, 19, 23, 27, 28, 35, 37, 38, 39] plays the 27 
Round 1: Elizabeth holding [10, 11, 13, 22, 30, 43, 44, 45, 48] plays the 45 
Round 1: Gal       holding [15, 17, 21, 24, 25, 29, 31, 36, 46] plays the 15 
Elizabeth wins the round 

Round 2: Elizabeth holding [10, 11, 13, 22, 30, 43, 44, 48] plays the 48 
Round 2: Gal       holding [17, 21, 24, 25, 29, 31, 36, 46] plays the 46 
Round 2: Connor    holding [14, 18, 20, 26, 34, 40, 41, 47] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
16 19 23 28 35 37 38 39 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius  holding [16, 19, 23, 28, 35, 37, 38, 39] plays the 16 
Elizabeth wins the round 

Round 3: Elizabeth holding [10, 11, 13, 22, 30, 43, 44] plays the 22 
Round 3: Gal       holding [17, 21, 24, 25, 29, 31, 36] plays the 36 
Round 3: Connor    holding [14, 18, 20, 26, 40, 41, 47] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 28 35 37 38 39 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius  holding [19, 23, 28, 35, 37, 38, 39] plays the 28 
Gal wins the round 

Round 4: Gal       holding [17, 21, 24, 25, 29, 31] plays the 24 
Round 4: Connor    holding [14, 20, 26, 40, 41, 47] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 35 37 38 39 0 0 0 0 

38------------------------------------------------------------------------

Round 4: Eugenius  holding [19, 23, 35, 37, 38, 39] plays the 38 
Round 4: Elizabeth holding [10, 11, 13, 30, 43, 44] plays the 30 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
19 23 35 37 39 0 0 0 0 0 

35------------------------------------------------------------------------

Round 5: Eugenius  holding [19, 23, 35, 37, 39] plays the 35 
Round 5: Elizabeth holding [10, 11, 13, 43, 44] plays the 10 
Round 5: Gal       holding [17, 21, 25, 29, 31] plays the 21 
Round 5: Connor    holding [20, 26, 40, 41, 47] plays the 20 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
19 23 37 39 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 6: Eugenius  holding [19, 23, 37, 39] plays the 39 
Round 6: Elizabeth holding [11, 13, 43, 44] plays the 11 
Round 6: Gal       holding [17, 25, 29, 31] plays the 17 
Round 6: Connor    holding [26, 40, 41, 47] plays the 26 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
19 23 37 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius  holding [19, 23, 37] plays the 19 
Round 7: Elizabeth holding [13, 43, 44] plays the 43 
Round 7: Gal       holding [25, 29, 31] plays the 29 
Round 7: Connor    holding [40, 41, 47] plays the 47 
Connor wins the round which contains 4 penalty points

Round 8: Connor    holding [40, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
23 37 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 8: Eugenius  holding [23, 37] plays the 23 
Round 8: Elizabeth holding [13, 44] plays the 13 
Round 8: Gal       holding [25, 31] plays the 31 
Connor wins the round which contains 4 penalty points

Round 9: Connor    holding [40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 9: Eugenius  holding [37] plays the 37 
Round 9: Elizabeth holding [44] plays the 44 
Round 9: Gal       holding [25] plays the 25 
Elizabeth wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Gal (system)
#2 with 1 penalty points Elizabeth (system)
#3 with 2 penalty points Eugenius (dodo.c)
#4 with 15 penalty points Connor (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7387743 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Elizabeth: [16, 19, 24, 31, 37, 43, 44, 45, 47, 49]
Table position 1: Eugenius : [17, 20, 21, 26, 28, 29, 30, 35, 36, 42]
Table position 2: Kangying : [10, 12, 13, 15, 23, 25, 32, 33, 38, 41]
Table position 3: Benjamin : [11, 14, 18, 22, 27, 34, 39, 40, 46, 48]

Discards:
Elizabeth [19, 37, 44]
Eugenius  [35, 36, 42]
Kangying  [12, 15, 33]
Benjamin  [39, 46, 48]

Round 0: Elizabeth holding [16, 24, 31, 39, 43, 45, 46, 47, 48, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 20 21 26 28 29 30 37 44 

20------------------------------------------------------------------------

Round 0: Eugenius  holding [17, 19, 20, 21, 26, 28, 29, 30, 37, 44] plays the 20 
Round 0: Kangying  holding [10, 13, 23, 25, 32, 35, 36, 38, 41, 42] plays the 10 
Round 0: Benjamin  holding [11, 12, 14, 15, 18, 22, 27, 33, 34, 40] plays the 14 
Elizabeth wins the round 

Round 1: Elizabeth holding [16, 24, 31, 39, 43, 45, 47, 48, 49] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 21 26 28 29 30 37 44 0 

21------------------------------------------------------------------------

Round 1: Eugenius  holding [17, 19, 21, 26, 28, 29, 30, 37, 44] plays the 21 
Round 1: Kangying  holding [13, 23, 25, 32, 35, 36, 38, 41, 42] plays the 42 
Round 1: Benjamin  holding [11, 12, 15, 18, 22, 27, 33, 34, 40] plays the 33 
Elizabeth wins the round which contains 7 penalty points

Round 2: Elizabeth holding [16, 24, 31, 39, 43, 45, 47, 49] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 26 28 29 30 37 44 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius  holding [17, 19, 26, 28, 29, 30, 37, 44] plays the 26 
Round 2: Kangying  holding [13, 23, 25, 32, 35, 36, 38, 41] plays the 32 
Round 2: Benjamin  holding [11, 12, 15, 18, 22, 27, 34, 40] plays the 12 
Kangying wins the round 

Round 3: Kangying  holding [13, 23, 25, 35, 36, 38, 41] plays the 25 
Round 3: Benjamin  holding [11, 15, 18, 22, 27, 34, 40] plays the 40 
Round 3: Elizabeth holding [24, 31, 39, 43, 45, 47, 49] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 28 29 30 37 44 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius  holding [17, 19, 28, 29, 30, 37, 44] plays the 30 
Elizabeth wins the round 

Round 4: Elizabeth holding [24, 31, 39, 43, 47, 49] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 28 29 37 44 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius  holding [17, 19, 28, 29, 37, 44] plays the 28 
Round 4: Kangying  holding [13, 23, 35, 36, 38, 41] plays the 38 
Round 4: Benjamin  holding [11, 15, 18, 22, 27, 34] plays the 18 
Kangying wins the round 

Round 5: Kangying  holding [13, 23, 35, 36, 41] plays the 36 
Round 5: Benjamin  holding [11, 15, 22, 27, 34] plays the 27 
Round 5: Elizabeth holding [31, 39, 43, 47, 49] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 37 44 0 0 0 0 0 

44------------------------------------------------------------------------

Round 5: Eugenius  holding [17, 19, 29, 37, 44] plays the 44 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 37 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius  holding [17, 19, 29, 37] plays the 17 
Round 6: Kangying  holding [13, 23, 35, 41] plays the 23 
Round 6: Benjamin  holding [11, 15, 22, 34] plays the 11 
Round 6: Elizabeth holding [31, 43, 47, 49] plays the 43 
Elizabeth wins the round which contains 4 penalty points

Round 7: Elizabeth holding [31, 47, 49] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 37 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius  holding [19, 29, 37] plays the 19 
Round 7: Kangying  holding [13, 35, 41] plays the 13 
Round 7: Benjamin  holding [15, 22, 34] plays the 22 
Elizabeth wins the round which contains 3 penalty points

Round 8: Elizabeth holding [31, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
29 37 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 8: Eugenius  holding [29, 37] plays the 29 
Round 8: Kangying  holding [35, 41] plays the 35 
Round 8: Benjamin  holding [15, 34] plays the 15 
Elizabeth wins the round which contains 1 penalty points

Round 9: Elizabeth holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius  holding [37] plays the 37 
Round 9: Kangying  holding [41] plays the 41 
Round 9: Benjamin  holding [34] plays the 34 
Kangying wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Benjamin (system)
#3 with 3 penalty points Kangying (system)
#4 with 15 penalty points Elizabeth (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10036512 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Vincent : [19, 20, 25, 26, 35, 37, 39, 41, 42, 43]
Table position 1: Gal     : [13, 15, 16, 17, 23, 24, 29, 32, 36, 46]
Table position 2: Eugenius: [10, 11, 12, 22, 27, 31, 34, 40, 48, 49]
Table position 3: Aydin   : [14, 18, 21, 28, 30, 33, 38, 44, 45, 47]

Discards:
Vincent  [25, 26, 37]
Gal      [16, 17, 29]
Eugenius [40, 48, 49]
Aydin    [14, 28, 33]

Round 0: Vincent  holding [14, 19, 20, 28, 33, 35, 39, 41, 42, 43] plays the 28 
Round 0: Gal      holding [13, 15, 23, 24, 25, 26, 32, 36, 37, 46] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 12 16 17 22 27 29 31 34 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 12, 16, 17, 22, 27, 29, 31, 34] plays the 10 
Round 0: Aydin    holding [18, 21, 30, 38, 40, 44, 45, 47, 48, 49] plays the 40 
Aydin wins the round 

Round 1: Aydin    holding [18, 21, 30, 38, 44, 45, 47, 48, 49] plays the 49 
Round 1: Vincent  holding [14, 19, 20, 33, 35, 39, 41, 42, 43] plays the 42 
Round 1: Gal      holding [13, 15, 23, 24, 25, 26, 36, 37, 46] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 16 17 22 27 29 31 34 0 

11 chah------------------------------------------------------------------------

Round 1: Eugenius holding [11, 12, 16, 17, 22, 27, 29, 31, 34] plays the 11 
Aydin wins the round which contains 8 penalty points

Round 2: Aydin    holding [18, 21, 30, 38, 44, 45, 47, 48] plays the 45 
Round 2: Vincent  holding [14, 19, 20, 33, 35, 39, 41, 43] plays the 35 
Round 2: Gal      holding [13, 15, 23, 24, 25, 26, 37, 46] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
12 16 17 22 27 29 31 34 0 0 

12------------------------------------------------------------------------

Round 2: Eugenius holding [12, 16, 17, 22, 27, 29, 31, 34] plays the 12 
Aydin wins the round 

Round 3: Aydin    holding [18, 21, 30, 38, 44, 47, 48] plays the 48 
Round 3: Vincent  holding [14, 19, 20, 33, 39, 41, 43] plays the 33 
Round 3: Gal      holding [13, 15, 23, 24, 26, 37, 46] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 22 27 29 31 34 0 0 0 

16------------------------------------------------------------------------

Round 3: Eugenius holding [16, 17, 22, 27, 29, 31, 34] plays the 16 
Aydin wins the round 

Round 4: Aydin    holding [18, 21, 30, 38, 44, 47] plays the 18 
Round 4: Vincent  holding [14, 19, 20, 39, 41, 43] plays the 39 
Round 4: Gal      holding [13, 15, 23, 24, 37, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 27 29 31 34 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius holding [17, 22, 27, 29, 31, 34] plays the 22 
Gal wins the round 

Round 5: Gal      holding [13, 15, 23, 24, 37] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 29 31 34 0 0 0 0 0 

17------------------------------------------------------------------------

Round 5: Eugenius holding [17, 27, 29, 31, 34] plays the 17 
Round 5: Aydin    holding [21, 30, 38, 44, 47] plays the 47 
Round 5: Vincent  holding [14, 19, 20, 41, 43] plays the 19 
Aydin wins the round which contains 4 penalty points

Round 6: Aydin    holding [21, 30, 38, 44] plays the 21 
Round 6: Vincent  holding [14, 20, 41, 43] plays the 14 
Round 6: Gal      holding [15, 23, 24, 37] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 31 34 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 6: Eugenius holding [27, 29, 31, 34] plays the 27 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
29 31 34 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 34] plays the 29 
Round 7: Aydin    holding [30, 38, 44] plays the 30 
Round 7: Vincent  holding [20, 41, 43] plays the 43 
Round 7: Gal      holding [23, 24, 37] plays the 23 
Vincent wins the round which contains 3 penalty points

Round 8: Vincent  holding [20, 41] plays the 20 
Round 8: Gal      holding [24, 37] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
31 34 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 8: Eugenius holding [31, 34] plays the 34 
Round 8: Aydin    holding [38, 44] plays the 44 
Aydin wins the round 

Round 9: Aydin    holding [38] plays the 38 
Round 9: Vincent  holding [41] plays the 41 
Round 9: Gal      holding [37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Aydin wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Gal (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 3 penalty points Vincent (system)
#4 with 15 penalty points Aydin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14374501 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Oscar   : [16, 17, 26, 34, 41, 42, 43, 44, 45, 47]
Table position 1: Eugenius: [10, 12, 15, 21, 24, 30, 31, 38, 39, 40]
Table position 2: Reede   : [11, 13, 19, 25, 27, 29, 32, 33, 37, 46]
Table position 3: Zachary : [14, 18, 20, 22, 23, 28, 35, 36, 48, 49]

Discards:
Oscar    [17, 44, 45]
Eugenius [38, 39, 40]
Reede    [13, 27, 32]
Zachary  [22, 35, 48]

Round 0: Oscar    holding [16, 22, 26, 34, 35, 41, 42, 43, 47, 48] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 15 17 21 24 30 31 44 45 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 15, 17, 21, 24, 30, 31, 44, 45] plays the 10 
Round 0: Reede    holding [11, 19, 25, 29, 33, 37, 38, 39, 40, 46] plays the 46 
Round 0: Zachary  holding [13, 14, 18, 20, 23, 27, 28, 32, 36, 49] plays the 32 
Reede wins the round 

Round 1: Reede    holding [11, 19, 25, 29, 33, 37, 38, 39, 40] plays the 39 
Round 1: Zachary  holding [13, 14, 18, 20, 23, 27, 28, 36, 49] plays the 36 
Round 1: Oscar    holding [16, 26, 34, 35, 41, 42, 43, 47, 48] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
12 15 17 21 24 30 31 44 45 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 15, 17, 21, 24, 30, 31, 44, 45] plays the 12 
Reede wins the round 

Round 2: Reede    holding [11, 19, 25, 29, 33, 37, 38, 40] plays the 38 
Round 2: Zachary  holding [13, 14, 18, 20, 23, 27, 28, 49] plays the 18 
Round 2: Oscar    holding [16, 34, 35, 41, 42, 43, 47, 48] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
15 17 21 24 30 31 44 45 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [15, 17, 21, 24, 30, 31, 44, 45] plays the 24 
Reede wins the round 

Round 3: Reede    holding [11, 19, 25, 29, 33, 37, 40] plays the 25 
Round 3: Zachary  holding [13, 14, 20, 23, 27, 28, 49] plays the 20 
Round 3: Oscar    holding [34, 35, 41, 42, 43, 47, 48] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
15 17 21 30 31 44 45 0 0 0 

15------------------------------------------------------------------------

Round 3: Eugenius holding [15, 17, 21, 30, 31, 44, 45] plays the 15 
Oscar wins the round 

Round 4: Oscar    holding [34, 41, 42, 43, 47, 48] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
17 21 30 31 44 45 0 0 0 0 

21------------------------------------------------------------------------

Round 4: Eugenius holding [17, 21, 30, 31, 44, 45] plays the 21 
Round 4: Reede    holding [11, 19, 29, 33, 37, 40] plays the 40 
Round 4: Zachary  holding [13, 14, 23, 27, 28, 49] plays the 28 
Oscar wins the round which contains 7 penalty points

Round 5: Oscar    holding [34, 41, 43, 47, 48] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
17 30 31 44 45 0 0 0 0 0 

30------------------------------------------------------------------------

Round 5: Eugenius holding [17, 30, 31, 44, 45] plays the 30 
Round 5: Reede    holding [11, 19, 29, 33, 37] plays the 19 
Round 5: Zachary  holding [13, 14, 23, 27, 49] plays the 14 
Oscar wins the round which contains 1 penalty points

Round 6: Oscar    holding [41, 43, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 44 45 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 6: Eugenius holding [17, 31, 44, 45] plays the 44 
Round 6: Reede    holding [11, 29, 33, 37] plays the 33 
Round 6: Zachary  holding [13, 23, 27, 49] plays the 27 
Oscar wins the round 

Round 7: Oscar    holding [41, 43, 47] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 45 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 31, 45] plays the 17 
Round 7: Reede    holding [11, 29, 37] plays the 29 
Round 7: Zachary  holding [13, 23, 49] plays the 23 
Oscar wins the round which contains 4 penalty points

Round 8: Oscar    holding [41, 47] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
31 45 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 45] plays the 31 
Round 8: Reede    holding [11, 37] plays the 37 
Round 8: Zachary  holding [13, 49] plays the 13 
Oscar wins the round which contains 4 penalty points

Round 9: Oscar    holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Round 9: Reede    holding [11] plays the 11 
Round 9: Zachary  holding [49] plays the 49 
Oscar wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Reede (system)
#1 with 0 penalty points Zachary (system)
#4 with 18 penalty points Oscar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11879539 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Kane    : [12, 17, 18, 19, 25, 32, 38, 40, 42, 47]
Table position 1: Sabrina : [16, 22, 26, 29, 33, 36, 37, 46, 48, 49]
Table position 2: Trung   : [10, 13, 15, 21, 23, 24, 27, 39, 44, 45]
Table position 3: Eugenius: [11, 14, 20, 28, 30, 31, 34, 35, 41, 43]

Discards:
Kane     [12, 38, 42]
Sabrina  [22, 33, 48]
Trung    [27, 39, 45]
Eugenius [35, 41, 43]

Round 0: Kane     holding [17, 18, 19, 25, 32, 35, 40, 41, 43, 47] plays the 32 
Round 0: Sabrina  holding [12, 16, 26, 29, 36, 37, 38, 42, 46, 49] plays the 42 
Round 0: Trung    holding [10, 13, 15, 21, 22, 23, 24, 33, 44, 48] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 20 27 28 30 31 34 39 45 

14------------------------------------------------------------------------

Round 0: Eugenius holding [11, 14, 20, 27, 28, 30, 31, 34, 39, 45] plays the 14 
Sabrina wins the round which contains 7 penalty points

Round 1: Sabrina  holding [12, 16, 26, 29, 36, 37, 38, 46, 49] plays the 12 
Round 1: Trung    holding [10, 13, 15, 21, 22, 23, 33, 44, 48] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
11 20 27 28 30 31 34 39 45 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [11, 20, 27, 28, 30, 31, 34, 39, 45] plays the 20 
Round 1: Kane     holding [17, 18, 19, 25, 35, 40, 41, 43, 47] plays the 40 
Trung wins the round 

Round 2: Trung    holding [10, 13, 15, 21, 22, 23, 33, 48] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
11 27 28 30 31 34 39 45 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [11, 27, 28, 30, 31, 34, 39, 45] plays the 27 
Round 2: Kane     holding [17, 18, 19, 25, 35, 41, 43, 47] plays the 35 
Round 2: Sabrina  holding [16, 26, 29, 36, 37, 38, 46, 49] plays the 49 
Sabrina wins the round 

Round 3: Sabrina  holding [16, 26, 29, 36, 37, 38, 46] plays the 26 
Round 3: Trung    holding [10, 13, 15, 22, 23, 33, 48] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 28 30 31 34 39 45 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [11, 28, 30, 31, 34, 39, 45] plays the 28 
Round 3: Kane     holding [17, 18, 19, 25, 41, 43, 47] plays the 18 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 30 31 34 39 45 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [11, 30, 31, 34, 39, 45] plays the 30 
Round 4: Kane     holding [17, 19, 25, 41, 43, 47] plays the 25 
Round 4: Sabrina  holding [16, 29, 36, 37, 38, 46] plays the 46 
Round 4: Trung    holding [13, 15, 22, 23, 33, 48] plays the 22 
Sabrina wins the round 

Round 5: Sabrina  holding [16, 29, 36, 37, 38] plays the 16 
Round 5: Trung    holding [13, 15, 23, 33, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
11 31 34 39 45 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [11, 31, 34, 39, 45] plays the 34 
Round 5: Kane     holding [17, 19, 41, 43, 47] plays the 41 
Trung wins the round which contains 1 penalty points

Round 6: Trung    holding [13, 15, 23, 33] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
11 31 39 45 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 31, 39, 45] plays the 11 
Round 6: Kane     holding [17, 19, 43, 47] plays the 43 
Round 6: Sabrina  holding [29, 36, 37, 38] plays the 29 
Kane wins the round which contains 4 penalty points

Round 7: Kane     holding [17, 19, 47] plays the 17 
Round 7: Sabrina  holding [36, 37, 38] plays the 37 
Round 7: Trung    holding [13, 15, 33] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
31 39 45 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [31, 39, 45] plays the 31 
Sabrina wins the round which contains 4 penalty points

Round 8: Sabrina  holding [36, 38] plays the 36 
Round 8: Trung    holding [15, 33] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
39 45 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 8: Eugenius holding [39, 45] plays the 39 
Round 8: Kane     holding [19, 47] plays the 19 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Round 9: Kane     holding [47] plays the 47 
Round 9: Sabrina  holding [38] plays the 38 
Round 9: Trung    holding [33] plays the 33 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 1 penalty points Trung (system)
#2 with 2 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Kane (system)
#4 with 11 penalty points Sabrina (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9378971 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: David   : [11, 17, 21, 27, 30, 31, 35, 41, 45, 48]
Table position 1: Eugenius: [14, 15, 16, 19, 20, 26, 28, 37, 46, 49]
Table position 2: Mitchell: [10, 12, 13, 22, 25, 32, 34, 36, 38, 40]
Table position 3: Trung   : [18, 23, 24, 29, 33, 39, 42, 43, 44, 47]

Discards:
David    [21, 27, 35]
Eugenius [37, 46, 49]
Mitchell [34, 38, 40]
Trung    [33, 42, 47]

Round 0: David    holding [11, 17, 30, 31, 33, 41, 42, 45, 47, 48] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
14 15 16 19 20 21 26 27 28 35 

15------------------------------------------------------------------------

Round 0: Eugenius holding [14, 15, 16, 19, 20, 21, 26, 27, 28, 35] plays the 15 
Round 0: Mitchell holding [10, 12, 13, 22, 25, 32, 36, 37, 46, 49] plays the 12 
Round 0: Trung    holding [18, 23, 24, 29, 34, 38, 39, 40, 43, 44] plays the 24 
David wins the round 

Round 1: David    holding [11, 17, 30, 31, 41, 42, 45, 47, 48] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 19 20 21 26 27 28 35 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 16, 19, 20, 21, 26, 27, 28, 35] plays the 14 
Round 1: Mitchell holding [10, 13, 22, 25, 32, 36, 37, 46, 49] plays the 22 
Round 1: Trung    holding [18, 23, 29, 34, 38, 39, 40, 43, 44] plays the 40 
Trung wins the round 

Round 2: Trung    holding [18, 23, 29, 34, 38, 39, 43, 44] plays the 44 
Round 2: David    holding [11, 17, 31, 41, 42, 45, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
16 19 20 21 26 27 28 35 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [16, 19, 20, 21, 26, 27, 28, 35] plays the 16 
Round 2: Mitchell holding [10, 13, 25, 32, 36, 37, 46, 49] plays the 36 
David wins the round 

Round 3: David    holding [11, 17, 31, 41, 42, 45, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
19 20 21 26 27 28 35 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [19, 20, 21, 26, 27, 28, 35] plays the 20 
Round 3: Mitchell holding [10, 13, 25, 32, 37, 46, 49] plays the 32 
Round 3: Trung    holding [18, 23, 29, 34, 38, 39, 43] plays the 18 
David wins the round which contains 7 penalty points

Round 4: David    holding [11, 17, 31, 41, 45, 47] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
19 21 26 27 28 35 0 0 0 0 

21------------------------------------------------------------------------

Round 4: Eugenius holding [19, 21, 26, 27, 28, 35] plays the 21 
Round 4: Mitchell holding [10, 13, 25, 37, 46, 49] plays the 25 
Round 4: Trung    holding [23, 29, 34, 38, 39, 43] plays the 39 
David wins the round 

Round 5: David    holding [11, 17, 31, 41, 47] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
19 26 27 28 35 0 0 0 0 0 

19------------------------------------------------------------------------

Round 5: Eugenius holding [19, 26, 27, 28, 35] plays the 19 
Round 5: Mitchell holding [10, 13, 37, 46, 49] plays the 37 
Round 5: Trung    holding [23, 29, 34, 38, 43] plays the 43 
Trung wins the round which contains 4 penalty points

Round 6: Trung    holding [23, 29, 34, 38] plays the 38 
Round 6: David    holding [11, 17, 31, 47] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
26 27 28 35 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 6: Eugenius holding [26, 27, 28, 35] plays the 26 
Round 6: Mitchell holding [10, 13, 46, 49] plays the 10 
Trung wins the round which contains 1 penalty points

Round 7: Trung    holding [23, 29, 34] plays the 29 
Round 7: David    holding [11, 17, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
27 28 35 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [27, 28, 35] plays the 27 
Round 7: Mitchell holding [13, 46, 49] plays the 13 
David wins the round which contains 3 penalty points

Round 8: David    holding [11, 17] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
28 35 0 0 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 8: Eugenius holding [28, 35] plays the 28 
Round 8: Mitchell holding [46, 49] plays the 46 
Round 8: Trung    holding [23, 34] plays the 23 
Trung wins the round which contains 2 penalty points

Round 9: Trung    holding [34] plays the 34 
Round 9: David    holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35 chah------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Round 9: Mitchell holding [49] plays the 49 
Trung wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Mitchell (system)
#3 with 8 penalty points Trung (system)
#4 with 10 penalty points David (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15354501 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [17, 19, 22, 29, 34, 37, 38, 46, 47, 49]
Table position 1: Dylan   : [11, 12, 13, 18, 26, 27, 28, 33, 42, 45]
Table position 2: Stephen : [14, 20, 21, 23, 31, 36, 39, 40, 41, 43]
Table position 3: Michael : [10, 15, 16, 24, 25, 30, 32, 35, 44, 48]

Discards:
Eugenius [46, 47, 49]
Dylan    [13, 27, 28]
Stephen  [14, 31, 36]
Michael  [10, 16, 35]


Debug output from Eugenius
------------------------------------------------------------------------
10 16 17 19 22 29 34 35 37 38 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 16, 17, 19, 22, 29, 34, 35, 37, 38] plays the 10 
Round 0: Dylan    holding [11, 12, 18, 26, 33, 42, 45, 46, 47, 49] plays the 18 
Round 0: Stephen  holding [13, 20, 21, 23, 27, 28, 39, 40, 41, 43] plays the 40 
Round 0: Michael  holding [14, 15, 24, 25, 30, 31, 32, 36, 44, 48] plays the 36 
Stephen wins the round 

Round 1: Stephen  holding [13, 20, 21, 23, 27, 28, 39, 41, 43] plays the 27 
Round 1: Michael  holding [14, 15, 24, 25, 30, 31, 32, 44, 48] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 19 22 29 34 35 37 38 0 

16 chah------------------------------------------------------------------------

Round 1: Eugenius holding [16, 17, 19, 22, 29, 34, 35, 37, 38] plays the 16 
Round 1: Dylan    holding [11, 12, 26, 33, 42, 45, 46, 47, 49] plays the 45 
Dylan wins the round 

Round 2: Dylan    holding [11, 12, 26, 33, 42, 46, 47, 49] plays the 33 
Round 2: Stephen  holding [13, 20, 21, 23, 28, 39, 41, 43] plays the 21 
Round 2: Michael  holding [14, 15, 25, 30, 31, 32, 44, 48] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 22 29 34 35 37 38 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [17, 19, 22, 29, 34, 35, 37, 38] plays the 22 
Dylan wins the round 

Round 3: Dylan    holding [11, 12, 26, 42, 46, 47, 49] plays the 42 
Round 3: Stephen  holding [13, 20, 23, 28, 39, 41, 43] plays the 28 
Round 3: Michael  holding [14, 25, 30, 31, 32, 44, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 34 35 37 38 0 0 0 

34------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 29, 34, 35, 37, 38] plays the 34 
Michael wins the round which contains 7 penalty points

Round 4: Michael  holding [14, 25, 30, 31, 32, 44] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 35 37 38 0 0 0 0 

38------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 29, 35, 37, 38] plays the 38 
Round 4: Dylan    holding [11, 12, 26, 46, 47, 49] plays the 26 
Round 4: Stephen  holding [13, 20, 23, 39, 41, 43] plays the 20 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 35 37 0 0 0 0 0 

35------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 29, 35, 37] plays the 35 
Round 5: Dylan    holding [11, 12, 46, 47, 49] plays the 49 
Round 5: Stephen  holding [13, 23, 39, 41, 43] plays the 41 
Round 5: Michael  holding [14, 25, 30, 31, 44] plays the 25 
Dylan wins the round which contains 1 penalty points

Round 6: Dylan    holding [11, 12, 46, 47] plays the 47 
Round 6: Stephen  holding [13, 23, 39, 43] plays the 13 
Round 6: Michael  holding [14, 30, 31, 44] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 37 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 19, 29, 37] plays the 17 
Dylan wins the round which contains 4 penalty points

Round 7: Dylan    holding [11, 12, 46] plays the 11 
Round 7: Stephen  holding [23, 39, 43] plays the 23 
Round 7: Michael  holding [14, 30, 44] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 37 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius holding [19, 29, 37] plays the 19 
Stephen wins the round which contains 3 penalty points

Round 8: Stephen  holding [39, 43] plays the 39 
Round 8: Michael  holding [14, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
29 37 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 8: Eugenius holding [29, 37] plays the 29 
Round 8: Dylan    holding [12, 46] plays the 12 
Stephen wins the round which contains 1 penalty points

Round 9: Stephen  holding [43] plays the 43 
Round 9: Michael  holding [14] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Dylan    holding [46] plays the 46 
Stephen wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 5 penalty points Dylan (system)
#3 with 6 penalty points Stephen (system)
#4 with 7 penalty points Michael (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1431673 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Alex    : [15, 18, 24, 26, 33, 37, 40, 42, 45, 49]
Table position 1: Eugenius: [11, 12, 16, 20, 21, 23, 28, 29, 46, 48]
Table position 2: Benjamin: [10, 14, 19, 27, 30, 31, 32, 34, 36, 43]
Table position 3: Aydin   : [13, 17, 22, 25, 35, 38, 39, 41, 44, 47]

Discards:
Alex     [42, 45, 49]
Eugenius [29, 46, 48]
Benjamin [14, 27, 36]
Aydin    [35, 39, 44]

Round 0: Alex     holding [15, 18, 24, 26, 33, 35, 37, 39, 40, 44] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 16 20 21 23 28 42 45 49 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 16, 20, 21, 23, 28, 42, 45, 49] plays the 12 
Round 0: Benjamin holding [10, 19, 29, 30, 31, 32, 34, 43, 46, 48] plays the 30 
Round 0: Aydin    holding [13, 14, 17, 22, 25, 27, 36, 38, 41, 47] plays the 27 
Alex wins the round 

Round 1: Alex     holding [15, 18, 24, 26, 35, 37, 39, 40, 44] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 20 21 23 28 42 45 49 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [11, 16, 20, 21, 23, 28, 42, 45, 49] plays the 16 
Round 1: Benjamin holding [10, 19, 29, 31, 32, 34, 43, 46, 48] plays the 34 
Round 1: Aydin    holding [13, 14, 17, 22, 25, 36, 38, 41, 47] plays the 22 
Alex wins the round 

Round 2: Alex     holding [15, 18, 24, 26, 35, 37, 39, 44] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
11 20 21 23 28 42 45 49 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [11, 20, 21, 23, 28, 42, 45, 49] plays the 20 
Round 2: Benjamin holding [10, 19, 29, 31, 32, 43, 46, 48] plays the 10 
Round 2: Aydin    holding [13, 14, 17, 25, 36, 38, 41, 47] plays the 14 
Alex wins the round 

Round 3: Alex     holding [15, 18, 26, 35, 37, 39, 44] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 21 23 28 42 45 49 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [11, 21, 23, 28, 42, 45, 49] plays the 21 
Round 3: Benjamin holding [19, 29, 31, 32, 43, 46, 48] plays the 48 
Round 3: Aydin    holding [13, 17, 25, 36, 38, 41, 47] plays the 36 
Benjamin wins the round 

Round 4: Benjamin holding [19, 29, 31, 32, 43, 46] plays the 32 
Round 4: Aydin    holding [13, 17, 25, 38, 41, 47] plays the 38 
Round 4: Alex     holding [18, 26, 35, 37, 39, 44] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 28 42 45 49 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [11, 23, 28, 42, 45, 49] plays the 28 
Aydin wins the round 

Round 5: Aydin    holding [13, 17, 25, 41, 47] plays the 25 
Round 5: Alex     holding [18, 35, 37, 39, 44] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 42 45 49 0 0 0 0 0 

45------------------------------------------------------------------------

Round 5: Eugenius holding [11, 23, 42, 45, 49] plays the 45 
Round 5: Benjamin holding [19, 29, 31, 43, 46] plays the 29 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
11 23 42 49 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 23, 42, 49] plays the 11 
Round 6: Benjamin holding [19, 31, 43, 46] plays the 43 
Round 6: Aydin    holding [13, 17, 41, 47] plays the 17 
Round 6: Alex     holding [18, 37, 39, 44] plays the 37 
Benjamin wins the round which contains 4 penalty points

Round 7: Benjamin holding [19, 31, 46] plays the 46 
Round 7: Aydin    holding [13, 41, 47] plays the 13 
Round 7: Alex     holding [18, 39, 44] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
23 42 49 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 7: Eugenius holding [23, 42, 49] plays the 42 
Benjamin wins the round which contains 8 penalty points

Round 8: Benjamin holding [19, 31] plays the 31 
Round 8: Aydin    holding [41, 47] plays the 47 
Round 8: Alex     holding [39, 44] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
23 49 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 8: Eugenius holding [23, 49] plays the 23 
Aydin wins the round which contains 3 penalty points

Round 9: Aydin    holding [41] plays the 41 
Round 9: Alex     holding [44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 9: Eugenius holding [49] plays the 49 
Round 9: Benjamin holding [19] plays the 19 
Aydin wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Alex (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 5 penalty points Aydin (system)
#4 with 12 penalty points Benjamin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9221202 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Zachary : [11, 15, 20, 21, 28, 29, 31, 34, 36, 47]
Table position 1: Eugenius: [13, 14, 18, 26, 27, 33, 39, 42, 44, 46]
Table position 2: Dean    : [10, 17, 25, 30, 35, 37, 38, 40, 41, 48]
Table position 3: Jamal   : [12, 16, 19, 22, 23, 24, 32, 43, 45, 49]

Discards:
Zachary  [20, 28, 36]
Eugenius [42, 44, 46]
Dean     [25, 30, 38]
Jamal    [12, 22, 32]

Round 0: Zachary  holding [11, 12, 15, 21, 22, 29, 31, 32, 34, 47] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 14 18 20 26 27 28 33 36 39 

14------------------------------------------------------------------------

Round 0: Eugenius holding [13, 14, 18, 20, 26, 27, 28, 33, 36, 39] plays the 14 
Round 0: Dean     holding [10, 17, 35, 37, 40, 41, 42, 44, 46, 48] plays the 46 
Round 0: Jamal    holding [16, 19, 23, 24, 25, 30, 38, 43, 45, 49] plays the 24 
Dean wins the round 

Round 1: Dean     holding [10, 17, 35, 37, 40, 41, 42, 44, 48] plays the 48 
Round 1: Jamal    holding [16, 19, 23, 25, 30, 38, 43, 45, 49] plays the 45 
Round 1: Zachary  holding [11, 12, 15, 21, 29, 31, 32, 34, 47] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
13 18 20 26 27 28 33 36 39 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [13, 18, 20, 26, 27, 28, 33, 36, 39] plays the 18 
Dean wins the round 

Round 2: Dean     holding [10, 17, 35, 37, 40, 41, 42, 44] plays the 40 
Round 2: Jamal    holding [16, 19, 23, 25, 30, 38, 43, 49] plays the 38 
Round 2: Zachary  holding [11, 12, 21, 29, 31, 32, 34, 47] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
13 20 26 27 28 33 36 39 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [13, 20, 26, 27, 28, 33, 36, 39] plays the 20 
Dean wins the round 

Round 3: Dean     holding [10, 17, 35, 37, 41, 42, 44] plays the 44 
Round 3: Jamal    holding [16, 19, 23, 25, 30, 43, 49] plays the 30 
Round 3: Zachary  holding [11, 21, 29, 31, 32, 34, 47] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
13 26 27 28 33 36 39 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [13, 26, 27, 28, 33, 36, 39] plays the 26 
Dean wins the round 

Round 4: Dean     holding [10, 17, 35, 37, 41, 42] plays the 42 
Round 4: Jamal    holding [16, 19, 23, 25, 43, 49] plays the 49 
Round 4: Zachary  holding [11, 21, 29, 31, 34, 47] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 27 28 33 36 39 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [13, 27, 28, 33, 36, 39] plays the 27 
Jamal wins the round which contains 7 penalty points

Round 5: Jamal    holding [16, 19, 23, 25, 43] plays the 25 
Round 5: Zachary  holding [11, 21, 29, 31, 47] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
13 28 33 36 39 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 5: Eugenius holding [13, 28, 33, 36, 39] plays the 13 
Round 5: Dean     holding [10, 17, 35, 37, 41] plays the 35 
Dean wins the round which contains 2 penalty points

Round 6: Dean     holding [10, 17, 37, 41] plays the 37 
Round 6: Jamal    holding [16, 19, 23, 43] plays the 43 
Round 6: Zachary  holding [11, 21, 29, 47] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
28 33 36 39 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 6: Eugenius holding [28, 33, 36, 39] plays the 28 
Jamal wins the round which contains 3 penalty points

Round 7: Jamal    holding [16, 19, 23] plays the 19 
Round 7: Zachary  holding [11, 21, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
33 36 39 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 7: Eugenius holding [33, 36, 39] plays the 33 
Round 7: Dean     holding [10, 17, 41] plays the 17 
Zachary wins the round which contains 3 penalty points

Round 8: Zachary  holding [11, 21] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
36 39 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [36, 39] plays the 36 
Round 8: Dean     holding [10, 41] plays the 41 
Round 8: Jamal    holding [16, 23] plays the 23 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Round 9: Dean     holding [10] plays the 10 
Round 9: Jamal    holding [16] plays the 16 
Round 9: Zachary  holding [11] plays the 11 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 2 penalty points Dean (system)
#2 with 3 penalty points Zachary (system)
#2 with 3 penalty points Eugenius (dodo.c)
#4 with 10 penalty points Jamal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7569334 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Claire  : [14, 16, 18, 21, 23, 25, 42, 43, 47, 48]
Table position 1: Kangying: [11, 17, 24, 26, 28, 30, 36, 41, 44, 45]
Table position 2: David   : [10, 12, 15, 19, 22, 33, 35, 38, 39, 46]
Table position 3: Eugenius: [13, 20, 27, 29, 31, 32, 34, 37, 40, 49]

Discards:
Claire   [14, 18, 48]
Kangying [26, 30, 44]
David    [35, 39, 46]
Eugenius [37, 40, 49]

Round 0: Claire   holding [16, 21, 23, 25, 37, 40, 42, 43, 47, 49] plays the 40 
Round 0: Kangying holding [11, 14, 17, 18, 24, 28, 36, 41, 45, 48] plays the 48 
Round 0: David    holding [10, 12, 15, 19, 22, 26, 30, 33, 38, 44] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
13 20 27 29 31 32 34 35 39 46 

20------------------------------------------------------------------------

Round 0: Eugenius holding [13, 20, 27, 29, 31, 32, 34, 35, 39, 46] plays the 20 
Kangying wins the round 

Round 1: Kangying holding [11, 14, 17, 18, 24, 28, 36, 41, 45] plays the 24 
Round 1: David    holding [10, 15, 19, 22, 26, 30, 33, 38, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
13 27 29 31 32 34 35 39 46 0 

27------------------------------------------------------------------------

Round 1: Eugenius holding [13, 27, 29, 31, 32, 34, 35, 39, 46] plays the 27 
Round 1: Claire   holding [16, 21, 23, 25, 37, 42, 43, 47, 49] plays the 21 
David wins the round 

Round 2: David    holding [10, 15, 19, 22, 26, 30, 33, 38] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 31 32 34 35 39 46 0 0 

32------------------------------------------------------------------------

Round 2: Eugenius holding [13, 29, 31, 32, 34, 35, 39, 46] plays the 32 
Round 2: Claire   holding [16, 23, 25, 37, 42, 43, 47, 49] plays the 42 
Round 2: Kangying holding [11, 14, 17, 18, 28, 36, 41, 45] plays the 28 
Claire wins the round which contains 7 penalty points

Round 3: Claire   holding [16, 23, 25, 37, 43, 47, 49] plays the 25 
Round 3: Kangying holding [11, 14, 17, 18, 36, 41, 45] plays the 45 
Round 3: David    holding [15, 19, 22, 26, 30, 33, 38] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 31 34 35 39 46 0 0 0 

35------------------------------------------------------------------------

Round 3: Eugenius holding [13, 29, 31, 34, 35, 39, 46] plays the 35 
Kangying wins the round 

Round 4: Kangying holding [11, 14, 17, 18, 36, 41] plays the 14 
Round 4: David    holding [19, 22, 26, 30, 33, 38] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 31 34 39 46 0 0 0 0 

34------------------------------------------------------------------------

Round 4: Eugenius holding [13, 29, 31, 34, 39, 46] plays the 34 
Round 4: Claire   holding [16, 23, 37, 43, 47, 49] plays the 16 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 29 31 39 46 0 0 0 0 0 

39------------------------------------------------------------------------

Round 5: Eugenius holding [13, 29, 31, 39, 46] plays the 39 
Round 5: Claire   holding [23, 37, 43, 47, 49] plays the 47 
Round 5: Kangying holding [11, 17, 18, 36, 41] plays the 18 
Round 5: David    holding [19, 22, 30, 33, 38] plays the 30 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 29 31 46 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 29, 31, 46] plays the 13 
Round 6: Claire   holding [23, 37, 43, 49] plays the 23 
Round 6: Kangying holding [11, 17, 36, 41] plays the 11 
Round 6: David    holding [19, 22, 33, 38] plays the 19 
Claire wins the round which contains 4 penalty points

Round 7: Claire   holding [37, 43, 49] plays the 49 
Round 7: Kangying holding [17, 36, 41] plays the 17 
Round 7: David    holding [22, 33, 38] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 46 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 46] plays the 29 
Claire wins the round which contains 2 penalty points

Round 8: Claire   holding [37, 43] plays the 43 
Round 8: Kangying holding [36, 41] plays the 41 
Round 8: David    holding [33, 38] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
31 46 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 46] plays the 31 
Claire wins the round which contains 3 penalty points

Round 9: Claire   holding [37] plays the 37 
Round 9: Kangying holding [36] plays the 36 
Round 9: David    holding [38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
46 0 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 9: Eugenius holding [46] plays the 46 
Claire wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Kangying (system)
#1 with 0 penalty points David (system)
#3 with 1 penalty points Eugenius (dodo.c)
#4 with 17 penalty points Claire (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2328698 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Gal     : [12, 21, 22, 25, 29, 36, 38, 39, 45, 48]
Table position 1: David   : [11, 17, 19, 23, 26, 32, 34, 35, 37, 42]
Table position 2: Eugenius: [14, 15, 16, 18, 27, 30, 40, 43, 44, 47]
Table position 3: Oscar   : [10, 13, 20, 24, 28, 31, 33, 41, 46, 49]

Discards:
Gal      [12, 36, 48]
David    [17, 26, 37]
Eugenius [43, 44, 47]
Oscar    [13, 31, 49]

Round 0: Gal      holding [13, 21, 22, 25, 29, 31, 38, 39, 45, 49] plays the 39 
Round 0: David    holding [11, 12, 19, 23, 32, 34, 35, 36, 42, 48] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
14 15 16 17 18 26 27 30 37 40 

15------------------------------------------------------------------------

Round 0: Eugenius holding [14, 15, 16, 17, 18, 26, 27, 30, 37, 40] plays the 15 
Round 0: Oscar    holding [10, 20, 24, 28, 33, 41, 43, 44, 46, 47] plays the 24 
David wins the round which contains 7 penalty points

Round 1: David    holding [11, 12, 19, 23, 32, 34, 35, 36, 48] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 17 18 26 27 30 37 40 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 16, 17, 18, 26, 27, 30, 37, 40] plays the 14 
Round 1: Oscar    holding [10, 20, 28, 33, 41, 43, 44, 46, 47] plays the 10 
Round 1: Gal      holding [13, 21, 22, 25, 29, 31, 38, 45, 49] plays the 25 
David wins the round 

Round 2: David    holding [11, 12, 19, 23, 32, 34, 36, 48] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 18 26 27 30 37 40 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [16, 17, 18, 26, 27, 30, 37, 40] plays the 16 
Round 2: Oscar    holding [20, 28, 33, 41, 43, 44, 46, 47] plays the 44 
Round 2: Gal      holding [13, 21, 22, 29, 31, 38, 45, 49] plays the 38 
Oscar wins the round 

Round 3: Oscar    holding [20, 28, 33, 41, 43, 46, 47] plays the 28 
Round 3: Gal      holding [13, 21, 22, 29, 31, 45, 49] plays the 21 
Round 3: David    holding [11, 12, 19, 23, 32, 34, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
17 18 26 27 30 37 40 0 0 0 

18------------------------------------------------------------------------

Round 3: Eugenius holding [17, 18, 26, 27, 30, 37, 40] plays the 18 
David wins the round 

Round 4: David    holding [11, 12, 19, 23, 32, 34] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
17 26 27 30 37 40 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [17, 26, 27, 30, 37, 40] plays the 26 
Round 4: Oscar    holding [20, 33, 41, 43, 46, 47] plays the 20 
Round 4: Gal      holding [13, 22, 29, 31, 45, 49] plays the 22 
David wins the round 

Round 5: David    holding [11, 12, 19, 23, 32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 30 37 40 0 0 0 0 0 

30------------------------------------------------------------------------

Round 5: Eugenius holding [17, 27, 30, 37, 40] plays the 30 
Round 5: Oscar    holding [33, 41, 43, 46, 47] plays the 46 
Round 5: Gal      holding [13, 29, 31, 45, 49] plays the 31 
Oscar wins the round which contains 1 penalty points

Round 6: Oscar    holding [33, 41, 43, 47] plays the 43 
Round 6: Gal      holding [13, 29, 45, 49] plays the 13 
Round 6: David    holding [11, 12, 19, 23] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 37 40 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 27, 37, 40] plays the 17 
Oscar wins the round which contains 4 penalty points

Round 7: Oscar    holding [33, 41, 47] plays the 47 
Round 7: Gal      holding [29, 45, 49] plays the 29 
Round 7: David    holding [12, 19, 23] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
27 37 40 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 7: Eugenius holding [27, 37, 40] plays the 37 
Oscar wins the round which contains 4 penalty points

Round 8: Oscar    holding [33, 41] plays the 41 
Round 8: Gal      holding [45, 49] plays the 49 
Round 8: David    holding [12, 23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
27 40 0 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 8: Eugenius holding [27, 40] plays the 27 
Oscar wins the round which contains 2 penalty points

Round 9: Oscar    holding [33] plays the 33 
Round 9: Gal      holding [45] plays the 45 
Round 9: David    holding [12] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40 chah------------------------------------------------------------------------

Round 9: Eugenius holding [40] plays the 40 
Gal wins the round 


Finishing Positions

#1 with 0 penalty points Gal (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 7 penalty points David (system)
#4 with 11 penalty points Oscar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16250525 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [16, 17, 21, 24, 32, 39, 41, 43, 45, 47]
Table position 1: Kangying: [10, 13, 14, 19, 25, 34, 37, 38, 42, 48]
Table position 2: Harrison: [18, 22, 26, 27, 28, 29, 36, 40, 44, 46]
Table position 3: Peter   : [11, 12, 15, 20, 23, 30, 31, 33, 35, 49]

Discards:
Eugenius [43, 45, 47]
Kangying [10, 13, 38]
Harrison [26, 29, 36]
Peter    [20, 33, 35]


Debug output from Eugenius
------------------------------------------------------------------------
16 17 20 21 24 32 33 35 39 41 

16------------------------------------------------------------------------

Round 0: Eugenius holding [16, 17, 20, 21, 24, 32, 33, 35, 39, 41] plays the 16 
Round 0: Kangying holding [14, 19, 25, 34, 37, 42, 43, 45, 47, 48] plays the 42 
Round 0: Harrison holding [10, 13, 18, 22, 27, 28, 38, 40, 44, 46] plays the 44 
Round 0: Peter    holding [11, 12, 15, 23, 26, 29, 30, 31, 36, 49] plays the 26 
Harrison wins the round which contains 7 penalty points

Round 1: Harrison holding [10, 13, 18, 22, 27, 28, 38, 40, 46] plays the 46 
Round 1: Peter    holding [11, 12, 15, 23, 29, 30, 31, 36, 49] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
17 20 21 24 32 33 35 39 41 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [17, 20, 21, 24, 32, 33, 35, 39, 41] plays the 20 
Round 1: Kangying holding [14, 19, 25, 34, 37, 43, 45, 47, 48] plays the 48 
Kangying wins the round 

Round 2: Kangying holding [14, 19, 25, 34, 37, 43, 45, 47] plays the 14 
Round 2: Harrison holding [10, 13, 18, 22, 27, 28, 38, 40] plays the 22 
Round 2: Peter    holding [11, 12, 15, 23, 29, 31, 36, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
17 21 24 32 33 35 39 41 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [17, 21, 24, 32, 33, 35, 39, 41] plays the 21 
Peter wins the round 

Round 3: Peter    holding [11, 12, 15, 23, 29, 31, 36] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
17 24 32 33 35 39 41 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [17, 24, 32, 33, 35, 39, 41] plays the 24 
Round 3: Kangying holding [19, 25, 34, 37, 43, 45, 47] plays the 45 
Round 3: Harrison holding [10, 13, 18, 27, 28, 38, 40] plays the 40 
Kangying wins the round 

Round 4: Kangying holding [19, 25, 34, 37, 43, 47] plays the 25 
Round 4: Harrison holding [10, 13, 18, 27, 28, 38] plays the 10 
Round 4: Peter    holding [11, 12, 23, 29, 31, 36] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
17 32 33 35 39 41 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [17, 32, 33, 35, 39, 41] plays the 35 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
17 32 33 39 41 0 0 0 0 0 

17------------------------------------------------------------------------

Round 5: Eugenius holding [17, 32, 33, 39, 41] plays the 17 
Round 5: Kangying holding [19, 34, 37, 43, 47] plays the 47 
Round 5: Harrison holding [13, 18, 27, 28, 38] plays the 13 
Round 5: Peter    holding [12, 23, 29, 31, 36] plays the 23 
Kangying wins the round which contains 4 penalty points

Round 6: Kangying holding [19, 34, 37, 43] plays the 43 
Round 6: Harrison holding [18, 27, 28, 38] plays the 28 
Round 6: Peter    holding [12, 29, 31, 36] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
32 33 39 41 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 6: Eugenius holding [32, 33, 39, 41] plays the 41 
Kangying wins the round which contains 3 penalty points

Round 7: Kangying holding [19, 34, 37] plays the 34 
Round 7: Harrison holding [18, 27, 38] plays the 18 
Round 7: Peter    holding [12, 29, 36] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
32 33 39 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 7: Eugenius holding [32, 33, 39] plays the 32 
Kangying wins the round 

Round 8: Kangying holding [19, 37] plays the 37 
Round 8: Harrison holding [27, 38] plays the 38 
Round 8: Peter    holding [29, 36] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
33 39 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 8: Eugenius holding [33, 39] plays the 33 
Kangying wins the round which contains 2 penalty points

Round 9: Kangying holding [19] plays the 19 
Round 9: Harrison holding [27] plays the 27 
Round 9: Peter    holding [36] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Kangying wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Peter (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Harrison (system)
#4 with 10 penalty points Kangying (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12879348 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Xue     : [12, 19, 21, 22, 25, 28, 29, 31, 32, 48]
Table position 1: Stephen : [10, 13, 20, 23, 24, 26, 38, 41, 42, 43]
Table position 2: Jamal   : [15, 18, 27, 33, 35, 36, 37, 39, 44, 47]
Table position 3: Eugenius: [11, 14, 16, 17, 30, 34, 40, 45, 46, 49]

Discards:
Xue      [12, 19, 25]
Stephen  [20, 24, 26]
Jamal    [15, 33, 47]
Eugenius [45, 46, 49]

Round 0: Xue      holding [21, 22, 28, 29, 31, 32, 45, 46, 48, 49] plays the 32 
Round 0: Stephen  holding [10, 12, 13, 19, 23, 25, 38, 41, 42, 43] plays the 42 
Round 0: Jamal    holding [18, 20, 24, 26, 27, 35, 36, 37, 39, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 15 16 17 30 33 34 40 47 

14------------------------------------------------------------------------

Round 0: Eugenius holding [11, 14, 15, 16, 17, 30, 33, 34, 40, 47] plays the 14 
Jamal wins the round which contains 7 penalty points

Round 1: Jamal    holding [18, 20, 24, 26, 27, 35, 36, 37, 39] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 16 17 30 33 34 40 47 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [11, 15, 16, 17, 30, 33, 34, 40, 47] plays the 15 
Round 1: Xue      holding [21, 22, 28, 29, 31, 45, 46, 48, 49] plays the 48 
Round 1: Stephen  holding [10, 12, 13, 19, 23, 25, 38, 41, 43] plays the 12 
Xue wins the round 

Round 2: Xue      holding [21, 22, 28, 29, 31, 45, 46, 49] plays the 45 
Round 2: Stephen  holding [10, 13, 19, 23, 25, 38, 41, 43] plays the 25 
Round 2: Jamal    holding [18, 20, 24, 26, 35, 36, 37, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 17 30 33 34 40 47 0 0 

30------------------------------------------------------------------------

Round 2: Eugenius holding [11, 16, 17, 30, 33, 34, 40, 47] plays the 30 
Xue wins the round 

Round 3: Xue      holding [21, 22, 28, 29, 31, 46, 49] plays the 22 
Round 3: Stephen  holding [10, 13, 19, 23, 38, 41, 43] plays the 10 
Round 3: Jamal    holding [18, 20, 24, 26, 35, 36, 37] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 17 33 34 40 47 0 0 0 

16------------------------------------------------------------------------

Round 3: Eugenius holding [11, 16, 17, 33, 34, 40, 47] plays the 16 
Xue wins the round 

Round 4: Xue      holding [21, 28, 29, 31, 46, 49] plays the 49 
Round 4: Stephen  holding [13, 19, 23, 38, 41, 43] plays the 41 
Round 4: Jamal    holding [18, 24, 26, 35, 36, 37] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 33 34 40 47 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 4: Eugenius holding [11, 17, 33, 34, 40, 47] plays the 11 
Xue wins the round which contains 2 penalty points

Round 5: Xue      holding [21, 28, 29, 31, 46] plays the 31 
Round 5: Stephen  holding [13, 19, 23, 38, 43] plays the 43 
Round 5: Jamal    holding [18, 24, 26, 36, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
17 33 34 40 47 0 0 0 0 0 

17------------------------------------------------------------------------

Round 5: Eugenius holding [17, 33, 34, 40, 47] plays the 17 
Stephen wins the round which contains 4 penalty points

Round 6: Stephen  holding [13, 19, 23, 38] plays the 23 
Round 6: Jamal    holding [18, 24, 26, 36] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
33 34 40 47 0 0 0 0 0 0 

47------------------------------------------------------------------------

Round 6: Eugenius holding [33, 34, 40, 47] plays the 47 
Round 6: Xue      holding [21, 28, 29, 46] plays the 29 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
33 34 40 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 7: Eugenius holding [33, 34, 40] plays the 33 
Round 7: Xue      holding [21, 28, 46] plays the 21 
Round 7: Stephen  holding [13, 19, 38] plays the 38 
Round 7: Jamal    holding [24, 26, 36] plays the 24 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
34 40 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 8: Eugenius holding [34, 40] plays the 34 
Round 8: Xue      holding [28, 46] plays the 46 
Round 8: Stephen  holding [13, 19] plays the 19 
Round 8: Jamal    holding [26, 36] plays the 26 
Xue wins the round which contains 1 penalty points

Round 9: Xue      holding [28] plays the 28 
Round 9: Stephen  holding [13] plays the 13 
Round 9: Jamal    holding [36] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 9: Eugenius holding [40] plays the 40 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 3 penalty points Xue (system)
#2 with 4 penalty points Stephen (system)
#2 with 4 penalty points Eugenius (dodo.c)
#4 with 7 penalty points Jamal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13840206 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Kangying: [11, 14, 24, 26, 27, 29, 37, 38, 47, 49]
Table position 1: Eugenius: [16, 20, 21, 32, 33, 39, 40, 42, 43, 45]
Table position 2: Xue     : [12, 15, 18, 23, 25, 28, 30, 34, 35, 44]
Table position 3: Eleni   : [10, 13, 17, 19, 22, 31, 36, 41, 46, 48]

Discards:
Kangying [24, 27, 29]
Eugenius [42, 43, 45]
Xue      [15, 18, 28]
Eleni    [17, 36, 46]

Round 0: Kangying holding [11, 14, 17, 26, 36, 37, 38, 46, 47, 49] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
16 20 21 24 27 29 32 33 39 40 

16------------------------------------------------------------------------

Round 0: Eugenius holding [16, 20, 21, 24, 27, 29, 32, 33, 39, 40] plays the 16 
Round 0: Xue      holding [12, 23, 25, 30, 34, 35, 42, 43, 44, 45] plays the 12 
Round 0: Eleni    holding [10, 13, 15, 18, 19, 22, 28, 31, 41, 48] plays the 18 
Kangying wins the round 

Round 1: Kangying holding [11, 14, 17, 26, 37, 38, 46, 47, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
20 21 24 27 29 32 33 39 40 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [20, 21, 24, 27, 29, 32, 33, 39, 40] plays the 20 
Round 1: Xue      holding [23, 25, 30, 34, 35, 42, 43, 44, 45] plays the 30 
Round 1: Eleni    holding [10, 13, 15, 19, 22, 28, 31, 41, 48] plays the 48 
Eleni wins the round 

Round 2: Eleni    holding [10, 13, 15, 19, 22, 28, 31, 41] plays the 22 
Round 2: Kangying holding [11, 14, 17, 26, 37, 38, 47, 49] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
21 24 27 29 32 33 39 40 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [21, 24, 27, 29, 32, 33, 39, 40] plays the 24 
Round 2: Xue      holding [23, 25, 34, 35, 42, 43, 44, 45] plays the 44 
Xue wins the round 

Round 3: Xue      holding [23, 25, 34, 35, 42, 43, 45] plays the 45 
Round 3: Eleni    holding [10, 13, 15, 19, 28, 31, 41] plays the 15 
Round 3: Kangying holding [11, 14, 17, 26, 37, 47, 49] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
21 27 29 32 33 39 40 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [21, 27, 29, 32, 33, 39, 40] plays the 21 
Xue wins the round which contains 1 penalty points

Round 4: Xue      holding [23, 25, 34, 35, 42, 43] plays the 43 
Round 4: Eleni    holding [10, 13, 19, 28, 31, 41] plays the 13 
Round 4: Kangying holding [11, 14, 26, 37, 47, 49] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 32 33 39 40 0 0 0 0 

29------------------------------------------------------------------------

Round 4: Eugenius holding [27, 29, 32, 33, 39, 40] plays the 29 
Xue wins the round which contains 4 penalty points

Round 5: Xue      holding [23, 25, 34, 35, 42] plays the 23 
Round 5: Eleni    holding [10, 19, 28, 31, 41] plays the 31 
Round 5: Kangying holding [11, 14, 26, 47, 49] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
27 32 33 39 40 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius holding [27, 32, 33, 39, 40] plays the 27 
Eleni wins the round which contains 3 penalty points

Round 6: Eleni    holding [10, 19, 28, 41] plays the 41 
Round 6: Kangying holding [14, 26, 47, 49] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
32 33 39 40 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 6: Eugenius holding [32, 33, 39, 40] plays the 32 
Round 6: Xue      holding [25, 34, 35, 42] plays the 34 
Kangying wins the round which contains 2 penalty points

Round 7: Kangying holding [14, 26, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
33 39 40 0 0 0 0 0 0 0 

33 chah------------------------------------------------------------------------

Round 7: Eugenius holding [33, 39, 40] plays the 33 
Round 7: Xue      holding [25, 35, 42] plays the 35 
Round 7: Eleni    holding [10, 19, 28] plays the 28 
Kangying wins the round 

Round 8: Kangying holding [14, 26] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
39 40 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 8: Eugenius holding [39, 40] plays the 40 
Round 8: Xue      holding [25, 42] plays the 42 
Round 8: Eleni    holding [10, 19] plays the 10 
Xue wins the round which contains 7 penalty points

Round 9: Xue      holding [25] plays the 25 
Round 9: Eleni    holding [19] plays the 19 
Round 9: Kangying holding [26] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39 chah------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Xue wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 2 penalty points Kangying (system)
#3 with 3 penalty points Eleni (system)
#4 with 13 penalty points Xue (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14062244 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [13, 17, 23, 24, 26, 27, 34, 36, 40, 47]
Table position 1: Dylan   : [10, 11, 15, 16, 20, 21, 28, 31, 39, 46]
Table position 2: Michael : [14, 18, 22, 25, 29, 30, 37, 43, 44, 49]
Table position 3: Vincent : [12, 19, 32, 33, 35, 38, 41, 42, 45, 48]

Discards:
Eugenius [36, 40, 47]
Dylan    [11, 39, 46]
Michael  [25, 29, 43]
Vincent  [19, 35, 38]


Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 23 24 26 27 34 35 38 

24------------------------------------------------------------------------

Round 0: Eugenius holding [13, 17, 19, 23, 24, 26, 27, 34, 35, 38] plays the 24 
Round 0: Dylan    holding [10, 15, 16, 20, 21, 28, 31, 36, 40, 47] plays the 40 
Round 0: Michael  holding [11, 14, 18, 22, 30, 37, 39, 44, 46, 49] plays the 46 
Round 0: Vincent  holding [12, 25, 29, 32, 33, 41, 42, 43, 45, 48] plays the 48 
Vincent wins the round 

Round 1: Vincent  holding [12, 25, 29, 32, 33, 41, 42, 43, 45] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 23 26 27 34 35 38 0 

26------------------------------------------------------------------------

Round 1: Eugenius holding [13, 17, 19, 23, 26, 27, 34, 35, 38] plays the 26 
Round 1: Dylan    holding [10, 15, 16, 20, 21, 28, 31, 36, 47] plays the 16 
Round 1: Michael  holding [11, 14, 18, 22, 30, 37, 39, 44, 49] plays the 39 
Vincent wins the round which contains 7 penalty points

Round 2: Vincent  holding [12, 25, 29, 32, 33, 41, 43, 45] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 23 27 34 35 38 0 0 

35------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 19, 23, 27, 34, 35, 38] plays the 35 
Round 2: Dylan    holding [10, 15, 20, 21, 28, 31, 36, 47] plays the 10 
Round 2: Michael  holding [11, 14, 18, 22, 30, 37, 44, 49] plays the 30 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 23 27 34 38 0 0 0 

27------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 19, 23, 27, 34, 38] plays the 27 
Round 3: Dylan    holding [15, 20, 21, 28, 31, 36, 47] plays the 15 
Round 3: Michael  holding [11, 14, 18, 22, 37, 44, 49] plays the 18 
Round 3: Vincent  holding [12, 29, 32, 33, 41, 43, 45] plays the 33 
Vincent wins the round 

Round 4: Vincent  holding [12, 29, 32, 41, 43, 45] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 23 34 38 0 0 0 0 

34------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 19, 23, 34, 38] plays the 34 
Round 4: Dylan    holding [20, 21, 28, 31, 36, 47] plays the 20 
Round 4: Michael  holding [11, 14, 22, 37, 44, 49] plays the 14 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 23 38 0 0 0 0 0 

38------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 19, 23, 38] plays the 38 
Round 5: Dylan    holding [21, 28, 31, 36, 47] plays the 36 
Round 5: Michael  holding [11, 22, 37, 44, 49] plays the 22 
Round 5: Vincent  holding [12, 29, 41, 43, 45] plays the 12 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 23 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 17, 19, 23] plays the 13 
Round 6: Dylan    holding [21, 28, 31, 47] plays the 47 
Round 6: Michael  holding [11, 37, 44, 49] plays the 11 
Round 6: Vincent  holding [29, 41, 43, 45] plays the 41 
Dylan wins the round which contains 4 penalty points

Round 7: Dylan    holding [21, 28, 31] plays the 31 
Round 7: Michael  holding [37, 44, 49] plays the 37 
Round 7: Vincent  holding [29, 43, 45] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 19, 23] plays the 17 
Vincent wins the round which contains 4 penalty points

Round 8: Vincent  holding [29, 45] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 0 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 8: Eugenius holding [19, 23] plays the 19 
Round 8: Dylan    holding [21, 28] plays the 21 
Round 8: Michael  holding [44, 49] plays the 44 
Vincent wins the round which contains 2 penalty points

Round 9: Vincent  holding [45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
23 0 0 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 9: Eugenius holding [23] plays the 23 
Round 9: Dylan    holding [28] plays the 28 
Round 9: Michael  holding [49] plays the 49 
Vincent wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Michael (system)
#3 with 4 penalty points Dylan (system)
#4 with 14 penalty points Vincent (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11001676 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Alex    : [15, 17, 18, 24, 25, 28, 29, 33, 38, 49]
Table position 1: Eleni   : [10, 13, 14, 16, 20, 32, 34, 44, 46, 47]
Table position 2: Kangying: [12, 19, 21, 26, 30, 31, 35, 37, 43, 48]
Table position 3: Eugenius: [11, 22, 23, 27, 36, 39, 40, 41, 42, 45]

Discards:
Alex     [15, 25, 33]
Eleni    [10, 16, 20]
Kangying [12, 26, 35]
Eugenius [41, 42, 45]

Round 0: Alex     holding [17, 18, 24, 28, 29, 38, 41, 42, 45, 49] plays the 18 
Round 0: Eleni    holding [13, 14, 15, 25, 32, 33, 34, 44, 46, 47] plays the 14 
Round 0: Kangying holding [10, 16, 19, 20, 21, 30, 31, 37, 43, 48] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 22 23 26 27 35 36 39 40 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 22, 23, 26, 27, 35, 36, 39, 40] plays the 12 
Kangying wins the round 

Round 1: Kangying holding [10, 16, 19, 20, 30, 31, 37, 43, 48] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
11 22 23 26 27 35 36 39 40 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [11, 22, 23, 26, 27, 35, 36, 39, 40] plays the 22 
Round 1: Alex     holding [17, 24, 28, 29, 38, 41, 42, 45, 49] plays the 28 
Round 1: Eleni    holding [13, 15, 25, 32, 33, 34, 44, 46, 47] plays the 44 
Eleni wins the round 

Round 2: Eleni    holding [13, 15, 25, 32, 33, 34, 46, 47] plays the 15 
Round 2: Kangying holding [10, 19, 20, 30, 31, 37, 43, 48] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 26 27 35 36 39 40 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [11, 23, 26, 27, 35, 36, 39, 40] plays the 27 
Round 2: Alex     holding [17, 24, 29, 38, 41, 42, 45, 49] plays the 42 
Alex wins the round which contains 7 penalty points

Round 3: Alex     holding [17, 24, 29, 38, 41, 45, 49] plays the 38 
Round 3: Eleni    holding [13, 25, 32, 33, 34, 46, 47] plays the 32 
Round 3: Kangying holding [10, 19, 30, 31, 37, 43, 48] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 26 35 36 39 40 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [11, 23, 26, 35, 36, 39, 40] plays the 26 
Alex wins the round 

Round 4: Alex     holding [17, 24, 29, 41, 45, 49] plays the 45 
Round 4: Eleni    holding [13, 25, 33, 34, 46, 47] plays the 25 
Round 4: Kangying holding [10, 19, 31, 37, 43, 48] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 35 36 39 40 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [11, 23, 35, 36, 39, 40] plays the 35 
Alex wins the round 

Round 5: Alex     holding [17, 24, 29, 41, 49] plays the 24 
Round 5: Eleni    holding [13, 33, 34, 46, 47] plays the 34 
Round 5: Kangying holding [19, 31, 37, 43, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 36 39 40 0 0 0 0 0 

36------------------------------------------------------------------------

Round 5: Eugenius holding [11, 23, 36, 39, 40] plays the 36 
Kangying wins the round 

Round 6: Kangying holding [19, 31, 37, 43] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 39 40 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 23, 39, 40] plays the 11 
Round 6: Alex     holding [17, 29, 41, 49] plays the 17 
Round 6: Eleni    holding [13, 33, 46, 47] plays the 13 
Kangying wins the round which contains 4 penalty points

Round 7: Kangying holding [19, 31, 43] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
23 39 40 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius holding [23, 39, 40] plays the 23 
Round 7: Alex     holding [29, 41, 49] plays the 41 
Round 7: Eleni    holding [33, 46, 47] plays the 47 
Eleni wins the round which contains 4 penalty points

Round 8: Eleni    holding [33, 46] plays the 33 
Round 8: Kangying holding [31, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
39 40 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 8: Eugenius holding [39, 40] plays the 39 
Round 8: Alex     holding [29, 49] plays the 29 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 9: Eugenius holding [40] plays the 40 
Round 9: Alex     holding [49] plays the 49 
Round 9: Eleni    holding [46] plays the 46 
Round 9: Kangying holding [31] plays the 31 
Eleni wins the round which contains 1 penalty points


Finishing Positions

#1 with 2 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Kangying (system)
#3 with 5 penalty points Eleni (system)
#4 with 7 penalty points Alex (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2786898 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Nathan  : [12, 14, 16, 18, 20, 23, 25, 30, 33, 37]
Table position 1: Eleni   : [10, 17, 22, 24, 27, 34, 36, 39, 42, 46]
Table position 2: Eugenius: [11, 13, 26, 31, 35, 38, 41, 44, 48, 49]
Table position 3: Xue     : [15, 19, 21, 28, 29, 32, 40, 43, 45, 47]

Discards:
Nathan   [23, 25, 37]
Eleni    [10, 39, 46]
Eugenius [44, 48, 49]
Xue      [28, 40, 43]

Round 0: Nathan   holding [12, 14, 16, 18, 20, 28, 30, 33, 40, 43] plays the 28 
Round 0: Eleni    holding [17, 22, 23, 24, 25, 27, 34, 36, 37, 42] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 13 26 31 35 38 39 41 46 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 13, 26, 31, 35, 38, 39, 41, 46] plays the 10 
Round 0: Xue      holding [15, 19, 21, 29, 32, 44, 45, 47, 48, 49] plays the 49 
Xue wins the round 

Round 1: Xue      holding [15, 19, 21, 29, 32, 44, 45, 47, 48] plays the 15 
Round 1: Nathan   holding [12, 14, 16, 18, 20, 30, 33, 40, 43] plays the 30 
Round 1: Eleni    holding [17, 22, 23, 24, 25, 27, 36, 37, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 26 31 35 38 39 41 46 0 

35------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 26, 31, 35, 38, 39, 41, 46] plays the 35 
Eleni wins the round which contains 7 penalty points

Round 2: Eleni    holding [17, 22, 23, 24, 25, 27, 36, 37] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 26 31 38 39 41 46 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 26, 31, 38, 39, 41, 46] plays the 26 
Round 2: Xue      holding [19, 21, 29, 32, 44, 45, 47, 48] plays the 21 
Round 2: Nathan   holding [12, 14, 16, 18, 20, 33, 40, 43] plays the 12 
Eleni wins the round 

Round 3: Eleni    holding [17, 22, 23, 24, 25, 27, 37] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 31 38 39 41 46 0 0 0 

11 chah------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 31, 38, 39, 41, 46] plays the 11 
Round 3: Xue      holding [19, 29, 32, 44, 45, 47, 48] plays the 45 
Round 3: Nathan   holding [14, 16, 18, 20, 33, 40, 43] plays the 40 
Xue wins the round which contains 1 penalty points

Round 4: Xue      holding [19, 29, 32, 44, 47, 48] plays the 19 
Round 4: Nathan   holding [14, 16, 18, 20, 33, 43] plays the 43 
Round 4: Eleni    holding [17, 22, 23, 24, 27, 37] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
13 31 38 39 41 46 0 0 0 0 

13------------------------------------------------------------------------

Round 4: Eugenius holding [13, 31, 38, 39, 41, 46] plays the 13 
Nathan wins the round which contains 4 penalty points

Round 5: Nathan   holding [14, 16, 18, 20, 33] plays the 16 
Round 5: Eleni    holding [22, 23, 24, 27, 37] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
31 38 39 41 46 0 0 0 0 0 

38------------------------------------------------------------------------

Round 5: Eugenius holding [31, 38, 39, 41, 46] plays the 38 
Round 5: Xue      holding [29, 32, 44, 47, 48] plays the 32 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
31 39 41 46 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 6: Eugenius holding [31, 39, 41, 46] plays the 31 
Round 6: Xue      holding [29, 44, 47, 48] plays the 47 
Round 6: Nathan   holding [14, 18, 20, 33] plays the 33 
Round 6: Eleni    holding [23, 24, 27, 37] plays the 37 
Xue wins the round which contains 3 penalty points

Round 7: Xue      holding [29, 44, 48] plays the 29 
Round 7: Nathan   holding [14, 18, 20] plays the 18 
Round 7: Eleni    holding [23, 24, 27] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
39 41 46 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 7: Eugenius holding [39, 41, 46] plays the 41 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
39 46 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 8: Eugenius holding [39, 46] plays the 39 
Round 8: Xue      holding [44, 48] plays the 48 
Round 8: Nathan   holding [14, 20] plays the 20 
Round 8: Eleni    holding [24, 27] plays the 27 
Xue wins the round 

Round 9: Xue      holding [44] plays the 44 
Round 9: Nathan   holding [14] plays the 14 
Round 9: Eleni    holding [24] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
46 0 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 9: Eugenius holding [46] plays the 46 
Eugenius wins the round 


Finishing Positions

#1 with 3 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Nathan (system)
#2 with 4 penalty points Xue (system)
#4 with 7 penalty points Eleni (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9619527 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Harrison: [10, 14, 16, 17, 20, 25, 37, 41, 45, 47]
Table position 1: Dylan   : [12, 21, 22, 23, 29, 30, 43, 46, 48, 49]
Table position 2: Reede   : [11, 24, 26, 31, 35, 36, 38, 40, 42, 44]
Table position 3: Eugenius: [13, 15, 18, 19, 27, 28, 32, 33, 34, 39]

Discards:
Harrison [10, 17, 25]
Dylan    [21, 22, 23]
Reede    [11, 36, 42]
Eugenius [33, 34, 39]

Round 0: Harrison holding [14, 16, 20, 33, 34, 37, 39, 41, 45, 47] plays the 20 
Round 0: Dylan    holding [10, 12, 17, 25, 29, 30, 43, 46, 48, 49] plays the 10 
Round 0: Reede    holding [21, 22, 23, 24, 26, 31, 35, 38, 40, 44] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 15 18 19 27 28 32 36 42 

15------------------------------------------------------------------------

Round 0: Eugenius holding [11, 13, 15, 18, 19, 27, 28, 32, 36, 42] plays the 15 
Reede wins the round 

Round 1: Reede    holding [21, 22, 23, 24, 31, 35, 38, 40, 44] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 18 19 27 28 32 36 42 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 18, 19, 27, 28, 32, 36, 42] plays the 18 
Round 1: Harrison holding [14, 16, 33, 34, 37, 39, 41, 45, 47] plays the 14 
Round 1: Dylan    holding [12, 17, 25, 29, 30, 43, 46, 48, 49] plays the 12 
Reede wins the round 

Round 2: Reede    holding [22, 23, 24, 31, 35, 38, 40, 44] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 27 28 32 36 42 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 19, 27, 28, 32, 36, 42] plays the 28 
Round 2: Harrison holding [16, 33, 34, 37, 39, 41, 45, 47] plays the 16 
Round 2: Dylan    holding [17, 25, 29, 30, 43, 46, 48, 49] plays the 30 
Dylan wins the round 

Round 3: Dylan    holding [17, 25, 29, 43, 46, 48, 49] plays the 48 
Round 3: Reede    holding [23, 24, 31, 35, 38, 40, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 27 32 36 42 0 0 0 

27------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 19, 27, 32, 36, 42] plays the 27 
Round 3: Harrison holding [33, 34, 37, 39, 41, 45, 47] plays the 34 
Dylan wins the round 

Round 4: Dylan    holding [17, 25, 29, 43, 46, 49] plays the 46 
Round 4: Reede    holding [23, 24, 31, 35, 38, 40] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 32 36 42 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 19, 32, 36, 42] plays the 32 
Round 4: Harrison holding [33, 37, 39, 41, 45, 47] plays the 47 
Dylan wins the round which contains 1 penalty points

Round 5: Dylan    holding [17, 25, 29, 43, 49] plays the 25 
Round 5: Reede    holding [23, 24, 31, 35, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 36 42 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 19, 36, 42] plays the 11 
Round 5: Harrison holding [33, 37, 39, 41, 45] plays the 45 
Harrison wins the round which contains 1 penalty points

Round 6: Harrison holding [33, 37, 39, 41] plays the 37 
Round 6: Dylan    holding [17, 29, 43, 49] plays the 43 
Round 6: Reede    holding [23, 24, 31, 35] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 36 42 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 19, 36, 42] plays the 13 
Dylan wins the round which contains 4 penalty points

Round 7: Dylan    holding [17, 29, 49] plays the 17 
Round 7: Reede    holding [23, 24, 35] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
19 36 42 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius holding [19, 36, 42] plays the 19 
Round 7: Harrison holding [33, 39, 41] plays the 41 
Harrison wins the round which contains 4 penalty points

Round 8: Harrison holding [33, 39] plays the 33 
Round 8: Dylan    holding [29, 49] plays the 49 
Round 8: Reede    holding [24, 35] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
36 42 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [36, 42] plays the 36 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
42 0 0 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 9: Eugenius holding [42] plays the 42 
Round 9: Harrison holding [39] plays the 39 
Round 9: Dylan    holding [29] plays the 29 
Round 9: Reede    holding [35] plays the 35 
Eugenius wins the round which contains 8 penalty points


Finishing Positions

#1 with 0 penalty points Reede (system)
#2 with 5 penalty points Harrison (system)
#2 with 5 penalty points Dylan (system)
#4 with 8 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15890980 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [14, 15, 20, 27, 29, 31, 33, 45, 47, 48]
Table position 1: Kane    : [11, 16, 17, 18, 21, 23, 28, 34, 38, 44]
Table position 2: Kangying: [13, 24, 25, 26, 30, 39, 41, 43, 46, 49]
Table position 3: Costa   : [10, 12, 19, 22, 32, 35, 36, 37, 40, 42]

Discards:
Eugenius [45, 47, 48]
Kane     [16, 28, 44]
Kangying [24, 30, 39]
Costa    [12, 22, 37]


Debug output from Eugenius
------------------------------------------------------------------------
12 14 15 20 22 27 29 31 33 37 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 14, 15, 20, 22, 27, 29, 31, 33, 37] plays the 12 
Round 0: Kane     holding [11, 17, 18, 21, 23, 34, 38, 45, 47, 48] plays the 18 
Round 0: Kangying holding [13, 16, 25, 26, 28, 41, 43, 44, 46, 49] plays the 46 
Round 0: Costa    holding [10, 19, 24, 30, 32, 35, 36, 39, 40, 42] plays the 36 
Kangying wins the round 

Round 1: Kangying holding [13, 16, 25, 26, 28, 41, 43, 44, 49] plays the 16 
Round 1: Costa    holding [10, 19, 24, 30, 32, 35, 39, 40, 42] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
14 15 20 22 27 29 31 33 37 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 15, 20, 22, 27, 29, 31, 33, 37] plays the 14 
Round 1: Kane     holding [11, 17, 21, 23, 34, 38, 45, 47, 48] plays the 48 
Kane wins the round 

Round 2: Kane     holding [11, 17, 21, 23, 34, 38, 45, 47] plays the 21 
Round 2: Kangying holding [13, 25, 26, 28, 41, 43, 44, 49] plays the 49 
Round 2: Costa    holding [19, 24, 30, 32, 35, 39, 40, 42] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
15 20 22 27 29 31 33 37 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius holding [15, 20, 22, 27, 29, 31, 33, 37] plays the 15 
Kangying wins the round 

Round 3: Kangying holding [13, 25, 26, 28, 41, 43, 44] plays the 44 
Round 3: Costa    holding [19, 30, 32, 35, 39, 40, 42] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
20 22 27 29 31 33 37 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [20, 22, 27, 29, 31, 33, 37] plays the 20 
Round 3: Kane     holding [11, 17, 23, 34, 38, 45, 47] plays the 34 
Kangying wins the round 

Round 4: Kangying holding [13, 25, 26, 28, 41, 43] plays the 25 
Round 4: Costa    holding [19, 30, 32, 35, 39, 42] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
22 27 29 31 33 37 0 0 0 0 

22 chah------------------------------------------------------------------------

Round 4: Eugenius holding [22, 27, 29, 31, 33, 37] plays the 22 
Round 4: Kane     holding [11, 17, 23, 38, 45, 47] plays the 45 
Kane wins the round 

Round 5: Kane     holding [11, 17, 23, 38, 47] plays the 38 
Round 5: Kangying holding [13, 26, 28, 41, 43] plays the 26 
Round 5: Costa    holding [19, 32, 35, 39, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 31 33 37 0 0 0 0 0 

27 chah------------------------------------------------------------------------

Round 5: Eugenius holding [27, 29, 31, 33, 37] plays the 27 
Costa wins the round which contains 7 penalty points

Round 6: Costa    holding [19, 32, 35, 39] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 33 37 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 6: Eugenius holding [29, 31, 33, 37] plays the 29 
Round 6: Kane     holding [11, 17, 23, 47] plays the 17 
Round 6: Kangying holding [13, 28, 41, 43] plays the 28 
Costa wins the round which contains 2 penalty points

Round 7: Costa    holding [19, 35, 39] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
31 33 37 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 7: Eugenius holding [31, 33, 37] plays the 31 
Round 7: Kane     holding [11, 23, 47] plays the 23 
Round 7: Kangying holding [13, 41, 43] plays the 43 
Costa wins the round which contains 3 penalty points

Round 8: Costa    holding [19, 39] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
33 37 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 8: Eugenius holding [33, 37] plays the 37 
Round 8: Kane     holding [11, 47] plays the 11 
Round 8: Kangying holding [13, 41] plays the 13 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
33 0 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 9: Eugenius holding [33] plays the 33 
Round 9: Kane     holding [47] plays the 47 
Round 9: Kangying holding [41] plays the 41 
Round 9: Costa    holding [39] plays the 39 
Costa wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Kane (system)
#1 with 0 penalty points Kangying (system)
#3 with 4 penalty points Eugenius (dodo.c)
#4 with 14 penalty points Costa (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9896153 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Andrew  : [11, 15, 20, 24, 27, 29, 35, 37, 40, 49]
Table position 1: Vincent : [10, 12, 16, 19, 21, 25, 28, 36, 39, 47]
Table position 2: Dean    : [13, 14, 17, 18, 22, 30, 32, 41, 43, 46]
Table position 3: Eugenius: [23, 26, 31, 33, 34, 38, 42, 44, 45, 48]

Discards:
Andrew   [11, 27, 35]
Vincent  [19, 28, 36]
Dean     [14, 17, 43]
Eugenius [44, 45, 48]

Round 0: Andrew   holding [15, 20, 24, 29, 37, 40, 44, 45, 48, 49] plays the 20 
Round 0: Vincent  holding [10, 11, 12, 16, 21, 25, 27, 35, 39, 47] plays the 12 
Round 0: Dean     holding [13, 18, 19, 22, 28, 30, 32, 36, 41, 46] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 23 26 31 33 34 38 42 43 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 17, 23, 26, 31, 33, 34, 38, 42, 43] plays the 14 
Dean wins the round 

Round 1: Dean     holding [13, 18, 19, 22, 28, 32, 36, 41, 46] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 26 31 33 34 38 42 43 0 

26------------------------------------------------------------------------

Round 1: Eugenius holding [17, 23, 26, 31, 33, 34, 38, 42, 43] plays the 26 
Round 1: Andrew   holding [15, 24, 29, 37, 40, 44, 45, 48, 49] plays the 44 
Round 1: Vincent  holding [10, 11, 16, 21, 25, 27, 35, 39, 47] plays the 16 
Andrew wins the round 

Round 2: Andrew   holding [15, 24, 29, 37, 40, 45, 48, 49] plays the 40 
Round 2: Vincent  holding [10, 11, 21, 25, 27, 35, 39, 47] plays the 25 
Round 2: Dean     holding [13, 18, 19, 22, 32, 36, 41, 46] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 31 33 34 38 42 43 0 0 

34------------------------------------------------------------------------

Round 2: Eugenius holding [17, 23, 31, 33, 34, 38, 42, 43] plays the 34 
Andrew wins the round 

Round 3: Andrew   holding [15, 24, 29, 37, 45, 48, 49] plays the 15 
Round 3: Vincent  holding [10, 11, 21, 27, 35, 39, 47] plays the 21 
Round 3: Dean     holding [13, 18, 19, 22, 36, 41, 46] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 31 33 38 42 43 0 0 0 

33------------------------------------------------------------------------

Round 3: Eugenius holding [17, 23, 31, 33, 38, 42, 43] plays the 33 
Dean wins the round 

Round 4: Dean     holding [13, 18, 19, 22, 41, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 31 38 42 43 0 0 0 0 

38------------------------------------------------------------------------

Round 4: Eugenius holding [17, 23, 31, 38, 42, 43] plays the 38 
Round 4: Andrew   holding [24, 29, 37, 45, 48, 49] plays the 24 
Round 4: Vincent  holding [10, 11, 27, 35, 39, 47] plays the 10 
Dean wins the round 

Round 5: Dean     holding [13, 18, 19, 22, 41] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 31 42 43 0 0 0 0 0 

42------------------------------------------------------------------------

Round 5: Eugenius holding [17, 23, 31, 42, 43] plays the 42 
Round 5: Andrew   holding [29, 37, 45, 48, 49] plays the 45 
Round 5: Vincent  holding [11, 27, 35, 39, 47] plays the 27 
Andrew wins the round which contains 7 penalty points

Round 6: Andrew   holding [29, 37, 48, 49] plays the 49 
Round 6: Vincent  holding [11, 35, 39, 47] plays the 35 
Round 6: Dean     holding [13, 19, 22, 41] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 31 43 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 6: Eugenius holding [17, 23, 31, 43] plays the 17 
Andrew wins the round which contains 2 penalty points

Round 7: Andrew   holding [29, 37, 48] plays the 37 
Round 7: Vincent  holding [11, 39, 47] plays the 11 
Round 7: Dean     holding [13, 22, 41] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 43 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius holding [23, 31, 43] plays the 23 
Andrew wins the round which contains 4 penalty points

Round 8: Andrew   holding [29, 48] plays the 29 
Round 8: Vincent  holding [39, 47] plays the 47 
Round 8: Dean     holding [22, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
31 43 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 43] plays the 31 
Vincent wins the round which contains 4 penalty points

Round 9: Vincent  holding [39] plays the 39 
Round 9: Dean     holding [22] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43 chah------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Round 9: Andrew   holding [48] plays the 48 
Andrew wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Dean (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Vincent (system)
#4 with 14 penalty points Andrew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10578836 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 11, 24, 25, 27, 29, 30, 33, 42, 46]
Table position 1: Stephen : [13, 14, 15, 21, 28, 35, 38, 45, 48, 49]
Table position 2: Xue     : [17, 20, 22, 31, 37, 40, 41, 43, 44, 47]
Table position 3: Kangying: [12, 16, 18, 19, 23, 26, 32, 34, 36, 39]

Discards:
Eugenius [33, 42, 46]
Stephen  [13, 35, 49]
Xue      [17, 22, 44]
Kangying [23, 34, 36]


Debug output from Eugenius
------------------------------------------------------------------------
10 11 23 24 25 27 29 30 34 36 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 23, 24, 25, 27, 29, 30, 34, 36] plays the 10 
Round 0: Stephen  holding [14, 15, 21, 28, 33, 38, 42, 45, 46, 48] plays the 42 
Round 0: Xue      holding [13, 20, 31, 35, 37, 40, 41, 43, 47, 49] plays the 35 
Round 0: Kangying holding [12, 16, 17, 18, 19, 22, 26, 32, 39, 44] plays the 12 
Stephen wins the round which contains 7 penalty points

Round 1: Stephen  holding [14, 15, 21, 28, 33, 38, 45, 46, 48] plays the 33 
Round 1: Xue      holding [13, 20, 31, 37, 40, 41, 43, 47, 49] plays the 13 
Round 1: Kangying holding [16, 17, 18, 19, 22, 26, 32, 39, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 24 25 27 29 30 34 36 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [11, 23, 24, 25, 27, 29, 30, 34, 36] plays the 24 
Kangying wins the round which contains 1 penalty points

Round 2: Kangying holding [16, 17, 18, 19, 22, 26, 32, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 25 27 29 30 34 36 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [11, 23, 25, 27, 29, 30, 34, 36] plays the 27 
Round 2: Stephen  holding [14, 15, 21, 28, 38, 45, 46, 48] plays the 48 
Round 2: Xue      holding [20, 31, 37, 40, 41, 43, 47, 49] plays the 20 
Stephen wins the round 

Round 3: Stephen  holding [14, 15, 21, 28, 38, 45, 46] plays the 45 
Round 3: Xue      holding [31, 37, 40, 41, 43, 47, 49] plays the 40 
Round 3: Kangying holding [16, 17, 18, 19, 22, 26, 32] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 25 29 30 34 36 0 0 0 

25------------------------------------------------------------------------

Round 3: Eugenius holding [11, 23, 25, 29, 30, 34, 36] plays the 25 
Stephen wins the round 

Round 4: Stephen  holding [14, 15, 21, 28, 38, 46] plays the 14 
Round 4: Xue      holding [31, 37, 41, 43, 47, 49] plays the 49 
Round 4: Kangying holding [16, 17, 19, 22, 26, 32] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 29 30 34 36 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [11, 23, 29, 30, 34, 36] plays the 30 
Xue wins the round 

Round 5: Xue      holding [31, 37, 41, 43, 47] plays the 47 
Round 5: Kangying holding [17, 19, 22, 26, 32] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 29 34 36 0 0 0 0 0 

11------------------------------------------------------------------------

Round 5: Eugenius holding [11, 23, 29, 34, 36] plays the 11 
Round 5: Stephen  holding [15, 21, 28, 38, 46] plays the 46 
Xue wins the round which contains 3 penalty points

Round 6: Xue      holding [31, 37, 41, 43] plays the 41 
Round 6: Kangying holding [19, 22, 26, 32] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 34 36 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 29, 34, 36] plays the 23 
Round 6: Stephen  holding [15, 21, 28, 38] plays the 28 
Xue wins the round which contains 3 penalty points

Round 7: Xue      holding [31, 37, 43] plays the 37 
Round 7: Kangying holding [22, 26, 32] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
29 34 36 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 34, 36] plays the 29 
Round 7: Stephen  holding [15, 21, 38] plays the 38 
Xue wins the round which contains 2 penalty points

Round 8: Xue      holding [31, 43] plays the 31 
Round 8: Kangying holding [26, 32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
34 36 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 8: Eugenius holding [34, 36] plays the 34 
Round 8: Stephen  holding [15, 21] plays the 21 
Xue wins the round which contains 1 penalty points

Round 9: Xue      holding [43] plays the 43 
Round 9: Kangying holding [26] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
36 0 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 9: Eugenius holding [36] plays the 36 
Round 9: Stephen  holding [15] plays the 15 
Xue wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Kangying (system)
#3 with 7 penalty points Stephen (system)
#4 with 10 penalty points Xue (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5848810 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Dylan   : [15, 18, 21, 25, 26, 28, 30, 31, 32, 35]
Table position 1: Finbar  : [11, 22, 23, 27, 29, 33, 36, 39, 47, 49]
Table position 2: Eleni   : [10, 13, 17, 19, 24, 37, 38, 41, 45, 46]
Table position 3: Eugenius: [12, 14, 16, 20, 34, 40, 42, 43, 44, 48]

Discards:
Dylan    [21, 25, 28]
Finbar   [22, 27, 49]
Eleni    [10, 45, 46]
Eugenius [43, 44, 48]

Round 0: Dylan    holding [15, 18, 26, 30, 31, 32, 35, 43, 44, 48] plays the 35 
Round 0: Finbar   holding [11, 21, 23, 25, 28, 29, 33, 36, 39, 47] plays the 28 
Round 0: Eleni    holding [13, 17, 19, 22, 24, 27, 37, 38, 41, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 14 16 20 34 40 42 45 46 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 14, 16, 20, 34, 40, 42, 45, 46] plays the 10 
Eleni wins the round 

Round 1: Eleni    holding [13, 17, 19, 22, 24, 27, 37, 38, 41] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 16 20 34 40 42 45 46 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 14, 16, 20, 34, 40, 42, 45, 46] plays the 12 
Round 1: Dylan    holding [15, 18, 26, 30, 31, 32, 43, 44, 48] plays the 26 
Round 1: Finbar   holding [11, 21, 23, 25, 29, 33, 36, 39, 47] plays the 36 
Finbar wins the round 

Round 2: Finbar   holding [11, 21, 23, 25, 29, 33, 39, 47] plays the 25 
Round 2: Eleni    holding [13, 17, 19, 24, 27, 37, 38, 41] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 20 34 40 42 45 46 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [14, 16, 20, 34, 40, 42, 45, 46] plays the 20 
Round 2: Dylan    holding [15, 18, 30, 31, 32, 43, 44, 48] plays the 30 
Dylan wins the round 

Round 3: Dylan    holding [15, 18, 31, 32, 43, 44, 48] plays the 18 
Round 3: Finbar   holding [11, 21, 23, 29, 33, 39, 47] plays the 21 
Round 3: Eleni    holding [13, 17, 19, 24, 37, 38, 41] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 34 40 42 45 46 0 0 0 

14------------------------------------------------------------------------

Round 3: Eugenius holding [14, 16, 34, 40, 42, 45, 46] plays the 14 
Eleni wins the round 

Round 4: Eleni    holding [13, 17, 19, 37, 38, 41] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
16 34 40 42 45 46 0 0 0 0 

16------------------------------------------------------------------------

Round 4: Eugenius holding [16, 34, 40, 42, 45, 46] plays the 16 
Round 4: Dylan    holding [15, 31, 32, 43, 44, 48] plays the 44 
Round 4: Finbar   holding [11, 23, 29, 33, 39, 47] plays the 23 
Dylan wins the round which contains 1 penalty points

Round 5: Dylan    holding [15, 31, 32, 43, 48] plays the 32 
Round 5: Finbar   holding [11, 29, 33, 39, 47] plays the 39 
Round 5: Eleni    holding [13, 17, 19, 37, 41] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
34 40 42 45 46 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [34, 40, 42, 45, 46] plays the 34 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
40 42 45 46 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 6: Eugenius holding [40, 42, 45, 46] plays the 40 
Round 6: Dylan    holding [15, 31, 43, 48] plays the 48 
Round 6: Finbar   holding [11, 29, 33, 47] plays the 29 
Round 6: Eleni    holding [13, 19, 37, 41] plays the 41 
Dylan wins the round which contains 2 penalty points

Round 7: Dylan    holding [15, 31, 43] plays the 43 
Round 7: Finbar   holding [11, 33, 47] plays the 47 
Round 7: Eleni    holding [13, 19, 37] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
42 45 46 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 7: Eugenius holding [42, 45, 46] plays the 42 
Finbar wins the round which contains 10 penalty points

Round 8: Finbar   holding [11, 33] plays the 33 
Round 8: Eleni    holding [13, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
45 46 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 8: Eugenius holding [45, 46] plays the 45 
Round 8: Dylan    holding [15, 31] plays the 15 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
46 0 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 9: Eugenius holding [46] plays the 46 
Round 9: Dylan    holding [31] plays the 31 
Round 9: Finbar   holding [11] plays the 11 
Round 9: Eleni    holding [13] plays the 13 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eleni (system)
#2 with 3 penalty points Dylan (system)
#3 with 5 penalty points Eugenius (dodo.c)
#4 with 10 penalty points Finbar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10547358 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Benjamin: [13, 15, 16, 17, 25, 35, 37, 39, 47, 49]
Table position 1: Sabrina : [19, 23, 26, 30, 32, 34, 36, 38, 40, 41]
Table position 2: Emily   : [10, 11, 20, 22, 24, 28, 42, 43, 45, 48]
Table position 3: Eugenius: [12, 14, 18, 21, 27, 29, 31, 33, 44, 46]

Discards:
Benjamin [17, 35, 47]
Sabrina  [23, 32, 40]
Emily    [20, 42, 48]
Eugenius [33, 44, 46]

Round 0: Benjamin holding [13, 15, 16, 25, 33, 37, 39, 44, 46, 49] plays the 25 
Round 0: Sabrina  holding [17, 19, 26, 30, 34, 35, 36, 38, 41, 47] plays the 35 
Round 0: Emily    holding [10, 11, 22, 23, 24, 28, 32, 40, 43, 45] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 18 20 21 27 29 31 42 48 

20------------------------------------------------------------------------

Round 0: Eugenius holding [12, 14, 18, 20, 21, 27, 29, 31, 42, 48] plays the 20 
Sabrina wins the round 

Round 1: Sabrina  holding [17, 19, 26, 30, 34, 36, 38, 41, 47] plays the 38 
Round 1: Emily    holding [11, 22, 23, 24, 28, 32, 40, 43, 45] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 18 21 27 29 31 42 48 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 14, 18, 21, 27, 29, 31, 42, 48] plays the 12 
Round 1: Benjamin holding [13, 15, 16, 33, 37, 39, 44, 46, 49] plays the 44 
Benjamin wins the round 

Round 2: Benjamin holding [13, 15, 16, 33, 37, 39, 46, 49] plays the 15 
Round 2: Sabrina  holding [17, 19, 26, 30, 34, 36, 41, 47] plays the 36 
Round 2: Emily    holding [11, 22, 23, 24, 28, 32, 43, 45] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
14 18 21 27 29 31 42 48 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [14, 18, 21, 27, 29, 31, 42, 48] plays the 18 
Sabrina wins the round 

Round 3: Sabrina  holding [17, 19, 26, 30, 34, 41, 47] plays the 30 
Round 3: Emily    holding [11, 22, 23, 28, 32, 43, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
14 21 27 29 31 42 48 0 0 0 

14------------------------------------------------------------------------

Round 3: Eugenius holding [14, 21, 27, 29, 31, 42, 48] plays the 14 
Round 3: Benjamin holding [13, 16, 33, 37, 39, 46, 49] plays the 33 
Emily wins the round 

Round 4: Emily    holding [11, 22, 23, 28, 32, 43] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
21 27 29 31 42 48 0 0 0 0 

42------------------------------------------------------------------------

Round 4: Eugenius holding [21, 27, 29, 31, 42, 48] plays the 42 
Round 4: Benjamin holding [13, 16, 37, 39, 46, 49] plays the 16 
Round 4: Sabrina  holding [17, 19, 26, 34, 41, 47] plays the 34 
Eugenius wins the round which contains 7 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
21 27 29 31 48 0 0 0 0 0 

21------------------------------------------------------------------------

Round 5: Eugenius holding [21, 27, 29, 31, 48] plays the 21 
Round 5: Benjamin holding [13, 37, 39, 46, 49] plays the 49 
Round 5: Sabrina  holding [17, 19, 26, 41, 47] plays the 19 
Round 5: Emily    holding [11, 22, 23, 28, 43] plays the 28 
Benjamin wins the round which contains 1 penalty points

Round 6: Benjamin holding [13, 37, 39, 46] plays the 39 
Round 6: Sabrina  holding [17, 26, 41, 47] plays the 26 
Round 6: Emily    holding [11, 22, 23, 43] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 31 48 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 6: Eugenius holding [27, 29, 31, 48] plays the 27 
Benjamin wins the round 

Round 7: Benjamin holding [13, 37, 46] plays the 46 
Round 7: Sabrina  holding [17, 41, 47] plays the 17 
Round 7: Emily    holding [11, 23, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 48 0 0 0 0 0 0 0 

48------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 48] plays the 48 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
29 31 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 31] plays the 29 
Round 8: Benjamin holding [13, 37] plays the 13 
Round 8: Sabrina  holding [41, 47] plays the 47 
Round 8: Emily    holding [11, 23] plays the 23 
Sabrina wins the round which contains 4 penalty points

Round 9: Sabrina  holding [41] plays the 41 
Round 9: Emily    holding [11] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Round 9: Benjamin holding [37] plays the 37 
Sabrina wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Emily (system)
#2 with 1 penalty points Benjamin (system)
#3 with 8 penalty points Sabrina (system)
#4 with 9 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2658294 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Dylan   : [10, 14, 31, 32, 33, 34, 36, 39, 41, 47]
Table position 1: Oscar   : [15, 16, 17, 18, 19, 22, 23, 24, 42, 43]
Table position 2: Connor  : [11, 12, 25, 26, 27, 37, 38, 44, 45, 48]
Table position 3: Eugenius: [13, 20, 21, 28, 29, 30, 35, 40, 46, 49]

Discards:
Dylan    [34, 36, 41]
Oscar    [15, 22, 23]
Connor   [25, 26, 27]
Eugenius [40, 46, 49]

Round 0: Dylan    holding [10, 14, 31, 32, 33, 39, 40, 46, 47, 49] plays the 46 
Round 0: Oscar    holding [16, 17, 18, 19, 24, 34, 36, 41, 42, 43] plays the 18 
Round 0: Connor   holding [11, 12, 15, 22, 23, 37, 38, 44, 45, 48] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
13 20 21 25 26 27 28 29 30 35 

20------------------------------------------------------------------------

Round 0: Eugenius holding [13, 20, 21, 25, 26, 27, 28, 29, 30, 35] plays the 20 
Dylan wins the round 

Round 1: Dylan    holding [10, 14, 31, 32, 33, 39, 40, 47, 49] plays the 32 
Round 1: Oscar    holding [16, 17, 19, 24, 34, 36, 41, 42, 43] plays the 16 
Round 1: Connor   holding [11, 15, 22, 23, 37, 38, 44, 45, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
13 21 25 26 27 28 29 30 35 0 

26------------------------------------------------------------------------

Round 1: Eugenius holding [13, 21, 25, 26, 27, 28, 29, 30, 35] plays the 26 
Connor wins the round 

Round 2: Connor   holding [11, 15, 22, 23, 37, 38, 44, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
13 21 25 27 28 29 30 35 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [13, 21, 25, 27, 28, 29, 30, 35] plays the 21 
Round 2: Dylan    holding [10, 14, 31, 33, 39, 40, 47, 49] plays the 39 
Round 2: Oscar    holding [17, 19, 24, 34, 36, 41, 42, 43] plays the 36 
Connor wins the round 

Round 3: Connor   holding [11, 15, 22, 23, 37, 38, 44] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
13 25 27 28 29 30 35 0 0 0 

25------------------------------------------------------------------------

Round 3: Eugenius holding [13, 25, 27, 28, 29, 30, 35] plays the 25 
Round 3: Dylan    holding [10, 14, 31, 33, 40, 47, 49] plays the 40 
Round 3: Oscar    holding [17, 19, 24, 34, 41, 42, 43] plays the 24 
Dylan wins the round 

Round 4: Dylan    holding [10, 14, 31, 33, 47, 49] plays the 33 
Round 4: Oscar    holding [17, 19, 34, 41, 42, 43] plays the 42 
Round 4: Connor   holding [11, 22, 23, 37, 38, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
13 27 28 29 30 35 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [13, 27, 28, 29, 30, 35] plays the 27 
Connor wins the round which contains 7 penalty points

Round 5: Connor   holding [11, 22, 23, 37, 38] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 28 29 30 35 0 0 0 0 0 

28------------------------------------------------------------------------

Round 5: Eugenius holding [13, 28, 29, 30, 35] plays the 28 
Round 5: Dylan    holding [10, 14, 31, 47, 49] plays the 10 
Round 5: Oscar    holding [17, 19, 34, 41, 43] plays the 34 
Oscar wins the round 

Round 6: Oscar    holding [17, 19, 41, 43] plays the 43 
Round 6: Connor   holding [11, 23, 37, 38] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 30 35 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 29, 30, 35] plays the 13 
Round 6: Dylan    holding [14, 31, 47, 49] plays the 47 
Dylan wins the round which contains 4 penalty points

Round 7: Dylan    holding [14, 31, 49] plays the 31 
Round 7: Oscar    holding [17, 19, 41] plays the 41 
Round 7: Connor   holding [11, 37, 38] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
29 30 35 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 30, 35] plays the 29 
Oscar wins the round which contains 4 penalty points

Round 8: Oscar    holding [17, 19] plays the 17 
Round 8: Connor   holding [37, 38] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
30 35 0 0 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 8: Eugenius holding [30, 35] plays the 30 
Round 8: Dylan    holding [14, 49] plays the 14 
Connor wins the round which contains 2 penalty points

Round 9: Connor   holding [38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35 chah------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Round 9: Dylan    holding [49] plays the 49 
Round 9: Oscar    holding [19] plays the 19 
Connor wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Dylan (system)
#2 with 4 penalty points Oscar (system)
#4 with 10 penalty points Connor (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7750172 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Michael : [15, 17, 20, 27, 29, 42, 45, 47, 48, 49]
Table position 1: Dean    : [12, 13, 23, 24, 25, 38, 39, 40, 44, 46]
Table position 2: Kangying: [14, 16, 18, 22, 26, 30, 32, 34, 36, 37]
Table position 3: Eugenius: [10, 11, 19, 21, 28, 31, 33, 35, 41, 43]

Discards:
Michael  [15, 42, 49]
Dean     [24, 25, 38]
Kangying [18, 26, 34]
Eugenius [35, 41, 43]

Round 0: Michael  holding [17, 20, 27, 29, 35, 41, 43, 45, 47, 48] plays the 27 
Round 0: Dean     holding [12, 13, 15, 23, 39, 40, 42, 44, 46, 49] plays the 39 
Round 0: Kangying holding [14, 16, 22, 24, 25, 30, 32, 36, 37, 38] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 18 19 21 26 28 31 33 34 

18------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 18, 19, 21, 26, 28, 31, 33, 34] plays the 18 
Dean wins the round 

Round 1: Dean     holding [12, 13, 15, 23, 40, 42, 44, 46, 49] plays the 42 
Round 1: Kangying holding [14, 16, 22, 24, 25, 32, 36, 37, 38] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 19 21 26 28 31 33 34 0 

10------------------------------------------------------------------------

Round 1: Eugenius holding [10, 11, 19, 21, 26, 28, 31, 33, 34] plays the 10 
Round 1: Michael  holding [17, 20, 29, 35, 41, 43, 45, 47, 48] plays the 45 
Michael wins the round which contains 7 penalty points

Round 2: Michael  holding [17, 20, 29, 35, 41, 43, 47, 48] plays the 35 
Round 2: Dean     holding [12, 13, 15, 23, 40, 44, 46, 49] plays the 49 
Round 2: Kangying holding [14, 16, 22, 24, 25, 32, 37, 38] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 21 26 28 31 33 34 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [11, 19, 21, 26, 28, 31, 33, 34] plays the 21 
Dean wins the round 

Round 3: Dean     holding [12, 13, 15, 23, 40, 44, 46] plays the 15 
Round 3: Kangying holding [14, 16, 22, 24, 32, 37, 38] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 26 28 31 33 34 0 0 0 

33------------------------------------------------------------------------

Round 3: Eugenius holding [11, 19, 26, 28, 31, 33, 34] plays the 33 
Round 3: Michael  holding [17, 20, 29, 41, 43, 47, 48] plays the 20 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 19 26 28 31 34 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [11, 19, 26, 28, 31, 34] plays the 26 
Round 4: Michael  holding [17, 29, 41, 43, 47, 48] plays the 48 
Round 4: Dean     holding [12, 13, 23, 40, 44, 46] plays the 46 
Round 4: Kangying holding [14, 16, 22, 32, 37, 38] plays the 38 
Michael wins the round 

Round 5: Michael  holding [17, 29, 41, 43, 47] plays the 47 
Round 5: Dean     holding [12, 13, 23, 40, 44] plays the 13 
Round 5: Kangying holding [14, 16, 22, 32, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 28 31 34 0 0 0 0 0 

11------------------------------------------------------------------------

Round 5: Eugenius holding [11, 19, 28, 31, 34] plays the 11 
Michael wins the round which contains 4 penalty points

Round 6: Michael  holding [17, 29, 41, 43] plays the 41 
Round 6: Dean     holding [12, 23, 40, 44] plays the 23 
Round 6: Kangying holding [14, 16, 22, 32] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
19 28 31 34 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 28, 31, 34] plays the 19 
Michael wins the round which contains 3 penalty points

Round 7: Michael  holding [17, 29, 43] plays the 29 
Round 7: Dean     holding [12, 40, 44] plays the 44 
Round 7: Kangying holding [16, 22, 32] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
28 31 34 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [28, 31, 34] plays the 31 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
28 34 0 0 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 8: Eugenius holding [28, 34] plays the 28 
Round 8: Michael  holding [17, 43] plays the 43 
Round 8: Dean     holding [12, 40] plays the 12 
Round 8: Kangying holding [22, 32] plays the 22 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
34 0 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 9: Eugenius holding [34] plays the 34 
Round 9: Michael  holding [17] plays the 17 
Round 9: Dean     holding [40] plays the 40 
Round 9: Kangying holding [32] plays the 32 
Dean wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Kangying (system)
#2 with 1 penalty points Dean (system)
#3 with 3 penalty points Eugenius (dodo.c)
#4 with 14 penalty points Michael (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16756548 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Gal     : [13, 22, 23, 36, 39, 40, 42, 43, 44, 48]
Table position 1: Stephen : [15, 16, 17, 18, 20, 24, 29, 34, 45, 47]
Table position 2: Eugenius: [12, 19, 21, 25, 27, 28, 35, 37, 41, 49]
Table position 3: Xue     : [10, 11, 14, 26, 30, 31, 32, 33, 38, 46]

Discards:
Gal      [40, 43, 48]
Stephen  [17, 24, 47]
Eugenius [37, 41, 49]
Xue      [11, 31, 33]

Round 0: Gal      holding [11, 13, 22, 23, 31, 33, 36, 39, 42, 44] plays the 22 
Round 0: Stephen  holding [15, 16, 18, 20, 29, 34, 40, 43, 45, 48] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
12 17 19 21 24 25 27 28 35 47 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 17, 19, 21, 24, 25, 27, 28, 35, 47] plays the 12 
Round 0: Xue      holding [10, 14, 26, 30, 32, 37, 38, 41, 46, 49] plays the 38 
Xue wins the round 

Round 1: Xue      holding [10, 14, 26, 30, 32, 37, 41, 46, 49] plays the 14 
Round 1: Gal      holding [11, 13, 23, 31, 33, 36, 39, 42, 44] plays the 42 
Round 1: Stephen  holding [15, 16, 20, 29, 34, 40, 43, 45, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 21 24 25 27 28 35 47 0 

21------------------------------------------------------------------------

Round 1: Eugenius holding [17, 19, 21, 24, 25, 27, 28, 35, 47] plays the 21 
Stephen wins the round which contains 7 penalty points

Round 2: Stephen  holding [15, 16, 20, 29, 34, 40, 43, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 24 25 27 28 35 47 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [17, 19, 24, 25, 27, 28, 35, 47] plays the 24 
Round 2: Xue      holding [10, 26, 30, 32, 37, 41, 46, 49] plays the 10 
Round 2: Gal      holding [11, 13, 23, 31, 33, 36, 39, 44] plays the 36 
Stephen wins the round 

Round 3: Stephen  holding [15, 16, 20, 29, 34, 40, 43] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 25 27 28 35 47 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 25, 27, 28, 35, 47] plays the 28 
Round 3: Xue      holding [26, 30, 32, 37, 41, 46, 49] plays the 26 
Round 3: Gal      holding [11, 13, 23, 31, 33, 39, 44] plays the 44 
Gal wins the round 

Round 4: Gal      holding [11, 13, 23, 31, 33, 39] plays the 39 
Round 4: Stephen  holding [15, 16, 20, 29, 40, 43] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 25 27 35 47 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 25, 27, 35, 47] plays the 27 
Round 4: Xue      holding [30, 32, 37, 41, 46, 49] plays the 30 
Gal wins the round 

Round 5: Gal      holding [11, 13, 23, 31, 33] plays the 33 
Round 5: Stephen  holding [16, 20, 29, 40, 43] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 25 35 47 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 25, 35, 47] plays the 17 
Round 5: Xue      holding [32, 37, 41, 46, 49] plays the 32 
Gal wins the round which contains 1 penalty points

Round 6: Gal      holding [11, 13, 23, 31] plays the 31 
Round 6: Stephen  holding [16, 20, 29, 43] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
19 25 35 47 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 25, 35, 47] plays the 19 
Round 6: Xue      holding [37, 41, 46, 49] plays the 37 
Xue wins the round which contains 4 penalty points

Round 7: Xue      holding [41, 46, 49] plays the 46 
Round 7: Gal      holding [11, 13, 23] plays the 13 
Round 7: Stephen  holding [16, 20, 43] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
25 35 47 0 0 0 0 0 0 0 

25 chah------------------------------------------------------------------------

Round 7: Eugenius holding [25, 35, 47] plays the 25 
Xue wins the round which contains 1 penalty points

Round 8: Xue      holding [41, 49] plays the 41 
Round 8: Gal      holding [11, 23] plays the 23 
Round 8: Stephen  holding [20, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
35 47 0 0 0 0 0 0 0 0 

47------------------------------------------------------------------------

Round 8: Eugenius holding [35, 47] plays the 47 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Round 9: Xue      holding [49] plays the 49 
Round 9: Gal      holding [11] plays the 11 
Round 9: Stephen  holding [20] plays the 20 
Xue wins the round which contains 1 penalty points


Finishing Positions

#1 with 1 penalty points Gal (system)
#2 with 4 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Xue (system)
#4 with 7 penalty points Stephen (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 4787184 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Matthew : [12, 15, 16, 22, 35, 39, 42, 44, 45, 46]
Table position 1: Eugenius: [17, 20, 21, 25, 28, 31, 37, 38, 40, 43]
Table position 2: Alex    : [10, 11, 13, 18, 19, 24, 30, 32, 41, 49]
Table position 3: Jamal   : [14, 23, 26, 27, 29, 33, 34, 36, 47, 48]

Discards:
Matthew  [16, 22, 44]
Eugenius [38, 40, 43]
Alex     [24, 30, 32]
Jamal    [26, 29, 36]

Round 0: Matthew  holding [12, 15, 26, 29, 35, 36, 39, 42, 45, 46] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 20 21 22 25 28 31 37 44 

21------------------------------------------------------------------------

Round 0: Eugenius holding [16, 17, 20, 21, 22, 25, 28, 31, 37, 44] plays the 21 
Round 0: Alex     holding [10, 11, 13, 18, 19, 38, 40, 41, 43, 49] plays the 18 
Round 0: Jamal    holding [14, 23, 24, 27, 30, 32, 33, 34, 47, 48] plays the 30 
Matthew wins the round 

Round 1: Matthew  holding [12, 15, 26, 29, 35, 36, 42, 45, 46] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 20 22 25 28 31 37 44 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 17, 20, 22, 25, 28, 31, 37, 44] plays the 16 
Round 1: Alex     holding [10, 11, 13, 19, 38, 40, 41, 43, 49] plays the 40 
Round 1: Jamal    holding [14, 23, 24, 27, 32, 33, 34, 47, 48] plays the 24 
Matthew wins the round which contains 7 penalty points

Round 2: Matthew  holding [12, 15, 26, 29, 35, 36, 45, 46] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
17 20 22 25 28 31 37 44 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [17, 20, 22, 25, 28, 31, 37, 44] plays the 20 
Round 2: Alex     holding [10, 11, 13, 19, 38, 41, 43, 49] plays the 10 
Round 2: Jamal    holding [14, 23, 27, 32, 33, 34, 47, 48] plays the 48 
Jamal wins the round 

Round 3: Jamal    holding [14, 23, 27, 32, 33, 34, 47] plays the 33 
Round 3: Matthew  holding [12, 15, 29, 35, 36, 45, 46] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 25 28 31 37 44 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [17, 22, 25, 28, 31, 37, 44] plays the 22 
Round 3: Alex     holding [11, 13, 19, 38, 41, 43, 49] plays the 43 
Matthew wins the round which contains 1 penalty points

Round 4: Matthew  holding [12, 15, 29, 35, 45, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 28 31 37 44 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [17, 25, 28, 31, 37, 44] plays the 28 
Round 4: Alex     holding [11, 13, 19, 38, 41, 49] plays the 38 
Round 4: Jamal    holding [14, 23, 27, 32, 34, 47] plays the 34 
Matthew wins the round 

Round 5: Matthew  holding [12, 15, 29, 35, 45] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 31 37 44 0 0 0 0 0 

17------------------------------------------------------------------------

Round 5: Eugenius holding [17, 25, 31, 37, 44] plays the 17 
Round 5: Alex     holding [11, 13, 19, 41, 49] plays the 19 
Round 5: Jamal    holding [14, 23, 27, 32, 47] plays the 47 
Jamal wins the round which contains 4 penalty points

Round 6: Jamal    holding [14, 23, 27, 32] plays the 23 
Round 6: Matthew  holding [12, 15, 35, 45] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
25 31 37 44 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 6: Eugenius holding [25, 31, 37, 44] plays the 31 
Round 6: Alex     holding [11, 13, 41, 49] plays the 13 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
25 37 44 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 7: Eugenius holding [25, 37, 44] plays the 25 
Round 7: Alex     holding [11, 41, 49] plays the 41 
Round 7: Jamal    holding [14, 27, 32] plays the 27 
Round 7: Matthew  holding [15, 35, 45] plays the 15 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
37 44 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 8: Eugenius holding [37, 44] plays the 37 
Round 8: Alex     holding [11, 49] plays the 11 
Round 8: Jamal    holding [14, 32] plays the 32 
Round 8: Matthew  holding [35, 45] plays the 45 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
44 0 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 9: Eugenius holding [44] plays the 44 
Round 9: Alex     holding [49] plays the 49 
Round 9: Jamal    holding [14] plays the 14 
Round 9: Matthew  holding [35] plays the 35 
Eugenius wins the round 


Finishing Positions

#1 with 0 penalty points Alex (system)
#2 with 4 penalty points Jamal (system)
#3 with 6 penalty points Eugenius (dodo.c)
#4 with 8 penalty points Matthew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2475460 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: David   : [21, 23, 24, 28, 31, 34, 36, 39, 43, 48]
Table position 1: Kangying: [10, 12, 14, 16, 27, 35, 37, 45, 46, 47]
Table position 2: Braedon : [11, 15, 17, 18, 19, 20, 22, 33, 38, 49]
Table position 3: Eugenius: [13, 25, 26, 29, 30, 32, 40, 41, 42, 44]

Discards:
David    [23, 28, 36]
Kangying [10, 14, 47]
Braedon  [11, 17, 49]
Eugenius [41, 42, 44]

Round 0: David    holding [21, 24, 31, 34, 39, 41, 42, 43, 44, 48] plays the 24 
Round 0: Kangying holding [12, 16, 23, 27, 28, 35, 36, 37, 45, 46] plays the 46 
Round 0: Braedon  holding [10, 14, 15, 18, 19, 20, 22, 33, 38, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 25 26 29 30 32 40 49 

26------------------------------------------------------------------------

Round 0: Eugenius holding [11, 13, 17, 25, 26, 29, 30, 32, 40, 49] plays the 26 
Kangying wins the round 

Round 1: Kangying holding [12, 16, 23, 27, 28, 35, 36, 37, 45] plays the 35 
Round 1: Braedon  holding [10, 14, 15, 18, 19, 20, 22, 38, 47] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 25 29 30 32 40 49 0 

25------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 17, 25, 29, 30, 32, 40, 49] plays the 25 
Round 1: David    holding [21, 31, 34, 39, 41, 42, 43, 44, 48] plays the 42 
David wins the round which contains 7 penalty points

Round 2: David    holding [21, 31, 34, 39, 41, 43, 44, 48] plays the 39 
Round 2: Kangying holding [12, 16, 23, 27, 28, 36, 37, 45] plays the 27 
Round 2: Braedon  holding [10, 15, 18, 19, 20, 22, 38, 47] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 29 30 32 40 49 0 0 

30------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 17, 29, 30, 32, 40, 49] plays the 30 
David wins the round 

Round 3: David    holding [21, 31, 34, 41, 43, 44, 48] plays the 21 
Round 3: Kangying holding [12, 16, 23, 28, 36, 37, 45] plays the 12 
Round 3: Braedon  holding [10, 15, 19, 20, 22, 38, 47] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 29 32 40 49 0 0 0 

49------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 17, 29, 32, 40, 49] plays the 49 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 29 32 40 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 17, 29, 32, 40] plays the 32 
Round 4: David    holding [31, 34, 41, 43, 44, 48] plays the 44 
Round 4: Kangying holding [16, 23, 28, 36, 37, 45] plays the 28 
Round 4: Braedon  holding [10, 19, 20, 22, 38, 47] plays the 20 
David wins the round 

Round 5: David    holding [31, 34, 41, 43, 48] plays the 48 
Round 5: Kangying holding [16, 23, 36, 37, 45] plays the 16 
Round 5: Braedon  holding [10, 19, 22, 38, 47] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 29 40 0 0 0 0 0 

40------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 17, 29, 40] plays the 40 
David wins the round 

Round 6: David    holding [31, 34, 41, 43] plays the 34 
Round 6: Kangying holding [23, 36, 37, 45] plays the 36 
Round 6: Braedon  holding [10, 19, 22, 47] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 29 0 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 6: Eugenius holding [11, 13, 17, 29] plays the 11 
Kangying wins the round which contains 1 penalty points

Round 7: Kangying holding [23, 37, 45] plays the 37 
Round 7: Braedon  holding [19, 22, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 29 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 17, 29] plays the 13 
Round 7: David    holding [31, 41, 43] plays the 41 
Braedon wins the round which contains 4 penalty points

Round 8: Braedon  holding [19, 22] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 0 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 8: Eugenius holding [17, 29] plays the 17 
Round 8: David    holding [31, 43] plays the 43 
Round 8: Kangying holding [23, 45] plays the 23 
David wins the round which contains 4 penalty points

Round 9: David    holding [31] plays the 31 
Round 9: Kangying holding [45] plays the 45 
Round 9: Braedon  holding [22] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
29 0 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 9: Eugenius holding [29] plays the 29 
David wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Kangying (system)
#3 with 4 penalty points Braedon (system)
#4 with 13 penalty points David (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11716653 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Zachary : [13, 20, 22, 26, 28, 30, 37, 40, 45, 46]
Table position 1: Eugenius: [14, 16, 19, 23, 29, 31, 38, 39, 42, 48]
Table position 2: Andrew  : [11, 12, 18, 21, 27, 34, 35, 41, 44, 47]
Table position 3: Harrison: [10, 15, 17, 24, 25, 32, 33, 36, 43, 49]

Discards:
Zachary  [26, 30, 37]
Eugenius [39, 42, 48]
Andrew   [12, 44, 47]
Harrison [10, 15, 33]

Round 0: Zachary  holding [10, 13, 15, 20, 22, 28, 33, 40, 45, 46] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 19 23 26 29 30 31 37 38 

30------------------------------------------------------------------------

Round 0: Eugenius holding [14, 16, 19, 23, 26, 29, 30, 31, 37, 38] plays the 30 
Round 0: Andrew   holding [11, 18, 21, 27, 34, 35, 39, 41, 42, 48] plays the 42 
Round 0: Harrison holding [12, 17, 24, 25, 32, 36, 43, 44, 47, 49] plays the 24 
Andrew wins the round which contains 7 penalty points

Round 1: Andrew   holding [11, 18, 21, 27, 34, 35, 39, 41, 48] plays the 18 
Round 1: Harrison holding [12, 17, 25, 32, 36, 43, 44, 47, 49] plays the 44 
Round 1: Zachary  holding [10, 13, 20, 22, 28, 33, 40, 45, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 19 23 26 29 31 37 38 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 16, 19, 23, 26, 29, 31, 37, 38] plays the 14 
Zachary wins the round 

Round 2: Zachary  holding [10, 13, 20, 22, 28, 33, 40, 45] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
16 19 23 26 29 31 37 38 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [16, 19, 23, 26, 29, 31, 37, 38] plays the 16 
Round 2: Andrew   holding [11, 21, 27, 34, 35, 39, 41, 48] plays the 48 
Round 2: Harrison holding [12, 17, 25, 32, 36, 43, 47, 49] plays the 12 
Andrew wins the round 

Round 3: Andrew   holding [11, 21, 27, 34, 35, 39, 41] plays the 39 
Round 3: Harrison holding [17, 25, 32, 36, 43, 47, 49] plays the 36 
Round 3: Zachary  holding [10, 13, 20, 22, 28, 33, 45] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 26 29 31 37 38 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [19, 23, 26, 29, 31, 37, 38] plays the 26 
Andrew wins the round 

Round 4: Andrew   holding [11, 21, 27, 34, 35, 41] plays the 35 
Round 4: Harrison holding [17, 25, 32, 43, 47, 49] plays the 49 
Round 4: Zachary  holding [10, 13, 20, 22, 28, 45] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 29 31 37 38 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 4: Eugenius holding [19, 23, 29, 31, 37, 38] plays the 19 
Harrison wins the round which contains 1 penalty points

Round 5: Harrison holding [17, 25, 32, 43, 47] plays the 17 
Round 5: Zachary  holding [10, 13, 20, 22, 45] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 31 37 38 0 0 0 0 0 

23------------------------------------------------------------------------

Round 5: Eugenius holding [23, 29, 31, 37, 38] plays the 23 
Round 5: Andrew   holding [11, 21, 27, 34, 41] plays the 11 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
29 31 37 38 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 6: Eugenius holding [29, 31, 37, 38] plays the 29 
Round 6: Andrew   holding [21, 27, 34, 41] plays the 41 
Round 6: Harrison holding [25, 32, 43, 47] plays the 47 
Round 6: Zachary  holding [10, 20, 22, 45] plays the 20 
Harrison wins the round which contains 3 penalty points

Round 7: Harrison holding [25, 32, 43] plays the 43 
Round 7: Zachary  holding [10, 22, 45] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 38 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [31, 37, 38] plays the 31 
Round 7: Andrew   holding [21, 27, 34] plays the 34 
Harrison wins the round which contains 2 penalty points

Round 8: Harrison holding [25, 32] plays the 25 
Round 8: Zachary  holding [22, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
37 38 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 8: Eugenius holding [37, 38] plays the 37 
Round 8: Andrew   holding [21, 27] plays the 27 
Zachary wins the round which contains 1 penalty points

Round 9: Zachary  holding [22] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Round 9: Andrew   holding [21] plays the 21 
Round 9: Harrison holding [32] plays the 32 
Eugenius wins the round 


Finishing Positions

#1 with 1 penalty points Zachary (system)
#2 with 4 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Harrison (system)
#4 with 7 penalty points Andrew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10022101 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Connor  : [10, 15, 16, 22, 32, 36, 39, 44, 46, 48]
Table position 1: Reede   : [19, 20, 26, 27, 28, 30, 33, 40, 41, 47]
Table position 2: Eugenius: [11, 13, 14, 17, 21, 23, 29, 31, 37, 49]
Table position 3: Eleni   : [12, 18, 24, 25, 34, 35, 38, 42, 43, 45]

Discards:
Connor   [10, 22, 48]
Reede    [19, 33, 40]
Eugenius [31, 37, 49]
Eleni    [12, 25, 43]

Round 0: Connor   holding [12, 15, 16, 25, 32, 36, 39, 43, 44, 46] plays the 15 
Round 0: Reede    holding [10, 20, 22, 26, 27, 28, 30, 41, 47, 48] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 14 17 19 21 23 29 33 40 

21------------------------------------------------------------------------

Round 0: Eugenius holding [11, 13, 14, 17, 19, 21, 23, 29, 33, 40] plays the 21 
Round 0: Eleni    holding [18, 24, 31, 34, 35, 37, 38, 42, 45, 49] plays the 18 
Reede wins the round 

Round 1: Reede    holding [10, 20, 22, 26, 28, 30, 41, 47, 48] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 14 17 19 23 29 33 40 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 14, 17, 19, 23, 29, 33, 40] plays the 14 
Round 1: Eleni    holding [24, 31, 34, 35, 37, 38, 42, 45, 49] plays the 38 
Round 1: Connor   holding [12, 16, 25, 32, 36, 39, 43, 44, 46] plays the 32 
Eleni wins the round 

Round 2: Eleni    holding [24, 31, 34, 35, 37, 42, 45, 49] plays the 34 
Round 2: Connor   holding [12, 16, 25, 36, 39, 43, 44, 46] plays the 36 
Round 2: Reede    holding [10, 20, 26, 28, 30, 41, 47, 48] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 19 23 29 33 40 0 0 

40------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 17, 19, 23, 29, 33, 40] plays the 40 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 19 23 29 33 0 0 0 

33------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 17, 19, 23, 29, 33] plays the 33 
Round 3: Eleni    holding [24, 31, 35, 37, 42, 45, 49] plays the 42 
Round 3: Connor   holding [12, 16, 25, 39, 43, 44, 46] plays the 12 
Round 3: Reede    holding [10, 20, 28, 30, 41, 47, 48] plays the 48 
Reede wins the round which contains 7 penalty points

Round 4: Reede    holding [10, 20, 28, 30, 41, 47] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 19 23 29 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 17, 19, 23, 29] plays the 11 
Round 4: Eleni    holding [24, 31, 35, 37, 45, 49] plays the 24 
Round 4: Connor   holding [16, 25, 39, 43, 44, 46] plays the 46 
Connor wins the round which contains 1 penalty points

Round 5: Connor   holding [16, 25, 39, 43, 44] plays the 25 
Round 5: Reede    holding [10, 20, 30, 41, 47] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 23 29 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 19, 23, 29] plays the 13 
Round 5: Eleni    holding [31, 35, 37, 45, 49] plays the 45 
Eleni wins the round which contains 1 penalty points

Round 6: Eleni    holding [31, 35, 37, 49] plays the 49 
Round 6: Connor   holding [16, 39, 43, 44] plays the 44 
Round 6: Reede    holding [20, 30, 41, 47] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 29 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 6: Eugenius holding [17, 19, 23, 29] plays the 17 
Eleni wins the round which contains 1 penalty points

Round 7: Eleni    holding [31, 35, 37] plays the 37 
Round 7: Connor   holding [16, 39, 43] plays the 43 
Round 7: Reede    holding [20, 41, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 29 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius holding [19, 23, 29] plays the 19 
Reede wins the round which contains 4 penalty points

Round 8: Reede    holding [20, 41] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 0 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 8: Eugenius holding [23, 29] plays the 23 
Round 8: Eleni    holding [31, 35] plays the 35 
Round 8: Connor   holding [16, 39] plays the 16 
Eleni wins the round which contains 1 penalty points

Round 9: Eleni    holding [31] plays the 31 
Round 9: Connor   holding [39] plays the 39 
Round 9: Reede    holding [41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
29 0 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 9: Eugenius holding [29] plays the 29 
Reede wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Connor (system)
#3 with 3 penalty points Eleni (system)
#4 with 14 penalty points Reede (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13867448 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Andrew  : [19, 20, 22, 23, 32, 33, 35, 43, 46, 47]
Table position 1: Costa   : [10, 11, 12, 18, 28, 31, 34, 37, 44, 45]
Table position 2: Sabrina : [13, 15, 21, 24, 25, 29, 38, 40, 41, 49]
Table position 3: Eugenius: [14, 16, 17, 26, 27, 30, 36, 39, 42, 48]

Discards:
Andrew   [23, 43, 47]
Costa    [10, 28, 37]
Sabrina  [24, 25, 38]
Eugenius [39, 42, 48]

Round 0: Andrew   holding [19, 20, 22, 32, 33, 35, 39, 42, 46, 48] plays the 20 
Round 0: Costa    holding [11, 12, 18, 23, 31, 34, 43, 44, 45, 47] plays the 34 
Round 0: Sabrina  holding [10, 13, 15, 21, 28, 29, 37, 40, 41, 49] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 17 24 25 26 27 30 36 38 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 16, 17, 24, 25, 26, 27, 30, 36, 38] plays the 14 
Costa wins the round 

Round 1: Costa    holding [11, 12, 18, 23, 31, 43, 44, 45, 47] plays the 44 
Round 1: Sabrina  holding [13, 15, 21, 28, 29, 37, 40, 41, 49] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 24 25 26 27 30 36 38 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 17, 24, 25, 26, 27, 30, 36, 38] plays the 16 
Round 1: Andrew   holding [19, 22, 32, 33, 35, 39, 42, 46, 48] plays the 22 
Costa wins the round 

Round 2: Costa    holding [11, 12, 18, 23, 31, 43, 45, 47] plays the 45 
Round 2: Sabrina  holding [13, 15, 21, 29, 37, 40, 41, 49] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
17 24 25 26 27 30 36 38 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [17, 24, 25, 26, 27, 30, 36, 38] plays the 24 
Round 2: Andrew   holding [19, 32, 33, 35, 39, 42, 46, 48] plays the 33 
Costa wins the round 

Round 3: Costa    holding [11, 12, 18, 23, 31, 43, 47] plays the 12 
Round 3: Sabrina  holding [13, 15, 29, 37, 40, 41, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 26 27 30 36 38 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [17, 25, 26, 27, 30, 36, 38] plays the 26 
Round 3: Andrew   holding [19, 32, 35, 39, 42, 46, 48] plays the 46 
Andrew wins the round 

Round 4: Andrew   holding [19, 32, 35, 39, 42, 48] plays the 42 
Round 4: Costa    holding [11, 18, 23, 31, 43, 47] plays the 18 
Round 4: Sabrina  holding [13, 29, 37, 40, 41, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 27 30 36 38 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [17, 25, 27, 30, 36, 38] plays the 27 
Sabrina wins the round which contains 7 penalty points

Round 5: Sabrina  holding [13, 29, 37, 40, 41] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 30 36 38 0 0 0 0 0 

25------------------------------------------------------------------------

Round 5: Eugenius holding [17, 25, 30, 36, 38] plays the 25 
Round 5: Andrew   holding [19, 32, 35, 39, 48] plays the 48 
Round 5: Costa    holding [11, 23, 31, 43, 47] plays the 47 
Andrew wins the round which contains 1 penalty points

Round 6: Andrew   holding [19, 32, 35, 39] plays the 32 
Round 6: Costa    holding [11, 23, 31, 43] plays the 43 
Round 6: Sabrina  holding [13, 29, 37, 41] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
17 30 36 38 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 6: Eugenius holding [17, 30, 36, 38] plays the 30 
Andrew wins the round which contains 2 penalty points

Round 7: Andrew   holding [19, 35, 39] plays the 35 
Round 7: Costa    holding [11, 23, 31] plays the 23 
Round 7: Sabrina  holding [29, 37, 41] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
17 36 38 0 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 7: Eugenius holding [17, 36, 38] plays the 17 
Andrew wins the round which contains 3 penalty points

Round 8: Andrew   holding [19, 39] plays the 39 
Round 8: Costa    holding [11, 31] plays the 11 
Round 8: Sabrina  holding [37, 41] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
36 38 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [36, 38] plays the 36 
Andrew wins the round which contains 2 penalty points

Round 9: Andrew   holding [19] plays the 19 
Round 9: Costa    holding [31] plays the 31 
Round 9: Sabrina  holding [41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Sabrina wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Costa (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 8 penalty points Andrew (system)
#4 with 10 penalty points Sabrina (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11286435 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Alex    : [11, 14, 15, 23, 24, 26, 28, 36, 45, 47]
Table position 1: Vincent : [12, 13, 21, 27, 30, 31, 32, 35, 39, 44]
Table position 2: Eugenius: [16, 17, 18, 25, 29, 33, 38, 43, 48, 49]
Table position 3: Marc    : [10, 19, 20, 22, 34, 37, 40, 41, 42, 46]

Discards:
Alex     [11, 28, 45]
Vincent  [21, 30, 39]
Eugenius [43, 48, 49]
Marc     [37, 40, 46]

Round 0: Alex     holding [14, 15, 23, 24, 26, 36, 37, 40, 46, 47] plays the 24 
Round 0: Vincent  holding [11, 12, 13, 27, 28, 31, 32, 35, 44, 45] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 18 21 25 29 30 33 38 39 

16------------------------------------------------------------------------

Round 0: Eugenius holding [16, 17, 18, 21, 25, 29, 30, 33, 38, 39] plays the 16 
Round 0: Marc     holding [10, 19, 20, 22, 34, 41, 42, 43, 48, 49] plays the 48 
Marc wins the round 

Round 1: Marc     holding [10, 19, 20, 22, 34, 41, 42, 43, 49] plays the 42 
Round 1: Alex     holding [14, 15, 23, 26, 36, 37, 40, 46, 47] plays the 40 
Round 1: Vincent  holding [11, 12, 13, 28, 31, 32, 35, 44, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
17 18 21 25 29 30 33 38 39 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [17, 18, 21, 25, 29, 30, 33, 38, 39] plays the 18 
Vincent wins the round which contains 7 penalty points

Round 2: Vincent  holding [11, 12, 13, 28, 31, 32, 35, 44] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
17 21 25 29 30 33 38 39 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [17, 21, 25, 29, 30, 33, 38, 39] plays the 21 
Round 2: Marc     holding [10, 19, 20, 22, 34, 41, 43, 49] plays the 10 
Round 2: Alex     holding [14, 15, 23, 26, 36, 37, 46, 47] plays the 36 
Alex wins the round 

Round 3: Alex     holding [14, 15, 23, 26, 37, 46, 47] plays the 46 
Round 3: Vincent  holding [11, 12, 13, 31, 32, 35, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 29 30 33 38 39 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [17, 25, 29, 30, 33, 38, 39] plays the 30 
Round 3: Marc     holding [19, 20, 22, 34, 41, 43, 49] plays the 20 
Alex wins the round 

Round 4: Alex     holding [14, 15, 23, 26, 37, 47] plays the 15 
Round 4: Vincent  holding [11, 12, 13, 31, 32, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 29 33 38 39 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [17, 25, 29, 33, 38, 39] plays the 25 
Round 4: Marc     holding [19, 22, 34, 41, 43, 49] plays the 49 
Vincent wins the round 

Round 5: Vincent  holding [11, 12, 13, 31, 32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 33 38 39 0 0 0 0 0 

38------------------------------------------------------------------------

Round 5: Eugenius holding [17, 29, 33, 38, 39] plays the 38 
Round 5: Marc     holding [19, 22, 34, 41, 43] plays the 22 
Round 5: Alex     holding [14, 23, 26, 37, 47] plays the 14 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
17 29 33 39 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 6: Eugenius holding [17, 29, 33, 39] plays the 33 
Round 6: Marc     holding [19, 34, 41, 43] plays the 43 
Round 6: Alex     holding [23, 26, 37, 47] plays the 37 
Round 6: Vincent  holding [11, 12, 13, 31] plays the 12 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
17 29 39 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 29, 39] plays the 17 
Round 7: Marc     holding [19, 34, 41] plays the 19 
Round 7: Alex     holding [23, 26, 47] plays the 23 
Round 7: Vincent  holding [11, 13, 31] plays the 31 
Vincent wins the round which contains 4 penalty points

Round 8: Vincent  holding [11, 13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
29 39 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 39] plays the 29 
Round 8: Marc     holding [34, 41] plays the 41 
Round 8: Alex     holding [26, 47] plays the 47 
Alex wins the round which contains 4 penalty points

Round 9: Alex     holding [26] plays the 26 
Round 9: Vincent  holding [11] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Round 9: Marc     holding [34] plays the 34 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Marc (system)
#2 with 3 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Alex (system)
#4 with 11 penalty points Vincent (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3980078 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Elizabeth: [12, 13, 19, 20, 35, 36, 37, 39, 41, 46]
Table position 1: Benjamin : [14, 15, 16, 18, 21, 27, 28, 29, 32, 44]
Table position 2: Oscar    : [11, 22, 24, 25, 34, 40, 42, 47, 48, 49]
Table position 3: Eugenius : [10, 17, 23, 26, 30, 31, 33, 38, 43, 45]

Discards:
Elizabeth [19, 36, 41]
Benjamin  [18, 28, 32]
Oscar     [11, 24, 40]
Eugenius  [38, 43, 45]

Round 0: Elizabeth holding [12, 13, 20, 35, 37, 38, 39, 43, 45, 46] plays the 12 
Round 0: Benjamin  holding [14, 15, 16, 19, 21, 27, 29, 36, 41, 44] plays the 27 
Round 0: Oscar     holding [18, 22, 25, 28, 32, 34, 42, 47, 48, 49] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 17 23 24 26 30 31 33 40 

10------------------------------------------------------------------------

Round 0: Eugenius  holding [10, 11, 17, 23, 24, 26, 30, 31, 33, 40] plays the 10 
Oscar wins the round 

Round 1: Oscar     holding [18, 22, 25, 28, 32, 42, 47, 48, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 23 24 26 30 31 33 40 0 

11 chah------------------------------------------------------------------------

Round 1: Eugenius  holding [11, 17, 23, 24, 26, 30, 31, 33, 40] plays the 11 
Round 1: Elizabeth holding [13, 20, 35, 37, 38, 39, 43, 45, 46] plays the 35 
Round 1: Benjamin  holding [14, 15, 16, 19, 21, 29, 36, 41, 44] plays the 14 
Oscar wins the round which contains 1 penalty points

Round 2: Oscar     holding [18, 22, 25, 28, 32, 42, 47, 48] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 24 26 30 31 33 40 0 0 

17------------------------------------------------------------------------

Round 2: Eugenius  holding [17, 23, 24, 26, 30, 31, 33, 40] plays the 17 
Round 2: Elizabeth holding [13, 20, 37, 38, 39, 43, 45, 46] plays the 37 
Round 2: Benjamin  holding [15, 16, 19, 21, 29, 36, 41, 44] plays the 29 
Oscar wins the round which contains 4 penalty points

Round 3: Oscar     holding [18, 22, 25, 28, 32, 42, 48] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
23 24 26 30 31 33 40 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius  holding [23, 24, 26, 30, 31, 33, 40] plays the 24 
Round 3: Elizabeth holding [13, 20, 38, 39, 43, 45, 46] plays the 20 
Round 3: Benjamin  holding [15, 16, 19, 21, 36, 41, 44] plays the 15 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
23 26 30 31 33 40 0 0 0 0 

23------------------------------------------------------------------------

Round 4: Eugenius  holding [23, 26, 30, 31, 33, 40] plays the 23 
Round 4: Elizabeth holding [13, 38, 39, 43, 45, 46] plays the 13 
Round 4: Benjamin  holding [16, 19, 21, 36, 41, 44] plays the 19 
Round 4: Oscar     holding [22, 25, 28, 32, 42, 48] plays the 48 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
26 30 31 33 40 0 0 0 0 0 

26------------------------------------------------------------------------

Round 5: Eugenius  holding [26, 30, 31, 33, 40] plays the 26 
Round 5: Elizabeth holding [38, 39, 43, 45, 46] plays the 46 
Round 5: Benjamin  holding [16, 21, 36, 41, 44] plays the 16 
Round 5: Oscar     holding [22, 25, 28, 32, 42] plays the 22 
Elizabeth wins the round 

Round 6: Elizabeth holding [38, 39, 43, 45] plays the 38 
Round 6: Benjamin  holding [21, 36, 41, 44] plays the 44 
Round 6: Oscar     holding [25, 28, 32, 42] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
30 31 33 40 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 6: Eugenius  holding [30, 31, 33, 40] plays the 30 
Benjamin wins the round 

Round 7: Benjamin  holding [21, 36, 41] plays the 36 
Round 7: Oscar     holding [25, 28, 42] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
31 33 40 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 7: Eugenius  holding [31, 33, 40] plays the 33 
Round 7: Elizabeth holding [39, 43, 45] plays the 45 
Elizabeth wins the round 

Round 8: Elizabeth holding [39, 43] plays the 39 
Round 8: Benjamin  holding [21, 41] plays the 21 
Round 8: Oscar     holding [25, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
31 40 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius  holding [31, 40] plays the 31 
Oscar wins the round which contains 8 penalty points

Round 9: Oscar     holding [25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 9: Eugenius  holding [40] plays the 40 
Round 9: Elizabeth holding [43] plays the 43 
Round 9: Benjamin  holding [41] plays the 41 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Elizabeth (system)
#1 with 0 penalty points Benjamin (system)
#3 with 5 penalty points Eugenius (dodo.c)
#4 with 13 penalty points Oscar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13621688 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Heather : [17, 22, 23, 24, 25, 26, 32, 33, 36, 46]
Table position 1: Eleni   : [19, 20, 29, 31, 35, 40, 41, 44, 47, 48]
Table position 2: Eugenius: [11, 12, 21, 28, 34, 37, 42, 43, 45, 49]
Table position 3: Claire  : [10, 13, 14, 15, 16, 18, 27, 30, 38, 39]

Discards:
Heather  [23, 26, 46]
Eleni    [19, 35, 48]
Eugenius [43, 45, 49]
Claire   [15, 27, 30]

Round 0: Heather  holding [15, 17, 22, 24, 25, 27, 30, 32, 33, 36] plays the 32 
Round 0: Eleni    holding [20, 23, 26, 29, 31, 40, 41, 44, 46, 47] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 19 21 28 34 35 37 42 48 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 19, 21, 28, 34, 35, 37, 42, 48] plays the 12 
Round 0: Claire   holding [10, 13, 14, 16, 18, 38, 39, 43, 45, 49] plays the 16 
Eleni wins the round 

Round 1: Eleni    holding [20, 23, 26, 29, 31, 40, 41, 46, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 21 28 34 35 37 42 48 0 

28------------------------------------------------------------------------

Round 1: Eugenius holding [11, 19, 21, 28, 34, 35, 37, 42, 48] plays the 28 
Round 1: Claire   holding [10, 13, 14, 18, 38, 39, 43, 45, 49] plays the 39 
Round 1: Heather  holding [15, 17, 22, 24, 25, 27, 30, 33, 36] plays the 22 
Claire wins the round 

Round 2: Claire   holding [10, 13, 14, 18, 38, 43, 45, 49] plays the 14 
Round 2: Heather  holding [15, 17, 24, 25, 27, 30, 33, 36] plays the 30 
Round 2: Eleni    holding [20, 23, 29, 31, 40, 41, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 21 34 35 37 42 48 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [11, 19, 21, 34, 35, 37, 42, 48] plays the 21 
Eleni wins the round 

Round 3: Eleni    holding [20, 23, 29, 31, 40, 41, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 34 35 37 42 48 0 0 0 

34------------------------------------------------------------------------

Round 3: Eugenius holding [11, 19, 34, 35, 37, 42, 48] plays the 34 
Round 3: Claire   holding [10, 13, 18, 38, 43, 45, 49] plays the 10 
Round 3: Heather  holding [15, 17, 24, 25, 27, 33, 36] plays the 24 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 19 35 37 42 48 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [11, 19, 35, 37, 42, 48] plays the 35 
Round 4: Claire   holding [13, 18, 38, 43, 45, 49] plays the 49 
Round 4: Heather  holding [15, 17, 25, 27, 33, 36] plays the 25 
Round 4: Eleni    holding [23, 29, 31, 40, 41, 47] plays the 40 
Claire wins the round 

Round 5: Claire   holding [13, 18, 38, 43, 45] plays the 18 
Round 5: Heather  holding [15, 17, 27, 33, 36] plays the 33 
Round 5: Eleni    holding [23, 29, 31, 41, 47] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 37 42 48 0 0 0 0 0 

42------------------------------------------------------------------------

Round 5: Eugenius holding [11, 19, 37, 42, 48] plays the 42 
Eugenius wins the round which contains 8 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
11 19 37 48 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 19, 37, 48] plays the 11 
Round 6: Claire   holding [13, 38, 43, 45] plays the 13 
Round 6: Heather  holding [15, 17, 27, 36] plays the 17 
Round 6: Eleni    holding [23, 31, 41, 47] plays the 23 
Eleni wins the round which contains 4 penalty points

Round 7: Eleni    holding [31, 41, 47] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
19 37 48 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius holding [19, 37, 48] plays the 19 
Round 7: Claire   holding [38, 43, 45] plays the 43 
Round 7: Heather  holding [15, 27, 36] plays the 15 
Claire wins the round which contains 3 penalty points

Round 8: Claire   holding [38, 45] plays the 38 
Round 8: Heather  holding [27, 36] plays the 36 
Round 8: Eleni    holding [31, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
37 48 0 0 0 0 0 0 0 0 

48------------------------------------------------------------------------

Round 8: Eugenius holding [37, 48] plays the 48 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Claire   holding [45] plays the 45 
Round 9: Heather  holding [27] plays the 27 
Round 9: Eleni    holding [31] plays the 31 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Heather (system)
#2 with 3 penalty points Claire (system)
#3 with 4 penalty points Eleni (system)
#4 with 11 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16767207 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 11, 19, 27, 31, 37, 38, 40, 46, 48]
Table position 1: Livia   : [13, 17, 18, 20, 32, 34, 35, 41, 42, 47]
Table position 2: Sabrina : [12, 15, 16, 23, 24, 25, 28, 36, 43, 44]
Table position 3: George  : [14, 21, 22, 26, 29, 30, 33, 39, 45, 49]

Discards:
Eugenius [40, 46, 48]
Livia    [17, 35, 47]
Sabrina  [16, 43, 44]
George   [14, 22, 29]


Debug output from Eugenius
------------------------------------------------------------------------
10 11 14 19 22 27 29 31 37 38 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 14, 19, 22, 27, 29, 31, 37, 38] plays the 10 
Round 0: Livia    holding [13, 18, 20, 32, 34, 40, 41, 42, 46, 48] plays the 18 
Round 0: Sabrina  holding [12, 15, 17, 23, 24, 25, 28, 35, 36, 47] plays the 35 
Round 0: George   holding [16, 21, 26, 30, 33, 39, 43, 44, 45, 49] plays the 45 
George wins the round 

Round 1: George   holding [16, 21, 26, 30, 33, 39, 43, 44, 49] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 19 22 27 29 31 37 38 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [11, 14, 19, 22, 27, 29, 31, 37, 38] plays the 14 
Round 1: Livia    holding [13, 20, 32, 34, 40, 41, 42, 46, 48] plays the 34 
Round 1: Sabrina  holding [12, 15, 17, 23, 24, 25, 28, 36, 47] plays the 36 
George wins the round 

Round 2: George   holding [16, 21, 26, 30, 33, 39, 43, 49] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 22 27 29 31 37 38 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [11, 19, 22, 27, 29, 31, 37, 38] plays the 27 
Round 2: Livia    holding [13, 20, 32, 40, 41, 42, 46, 48] plays the 48 
Round 2: Sabrina  holding [12, 15, 17, 23, 24, 25, 28, 47] plays the 12 
Livia wins the round 

Round 3: Livia    holding [13, 20, 32, 40, 41, 42, 46] plays the 42 
Round 3: Sabrina  holding [15, 17, 23, 24, 25, 28, 47] plays the 24 
Round 3: George   holding [16, 26, 30, 33, 39, 43, 49] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 22 29 31 37 38 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [11, 19, 22, 29, 31, 37, 38] plays the 22 
Livia wins the round which contains 7 penalty points

Round 4: Livia    holding [13, 20, 32, 40, 41, 46] plays the 32 
Round 4: Sabrina  holding [15, 17, 23, 25, 28, 47] plays the 28 
Round 4: George   holding [26, 30, 33, 39, 43, 49] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 29 31 37 38 0 0 0 0 

38------------------------------------------------------------------------

Round 4: Eugenius holding [11, 19, 29, 31, 37, 38] plays the 38 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 19 29 31 37 0 0 0 0 0 

11------------------------------------------------------------------------

Round 5: Eugenius holding [11, 19, 29, 31, 37] plays the 11 
Round 5: Livia    holding [13, 20, 40, 41, 46] plays the 41 
Round 5: Sabrina  holding [15, 17, 23, 25, 47] plays the 47 
Round 5: George   holding [26, 33, 39, 43, 49] plays the 43 
Sabrina wins the round which contains 4 penalty points

Round 6: Sabrina  holding [15, 17, 23, 25] plays the 23 
Round 6: George   holding [26, 33, 39, 49] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 31 37 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 29, 31, 37] plays the 19 
Round 6: Livia    holding [13, 20, 40, 46] plays the 13 
Sabrina wins the round which contains 3 penalty points

Round 7: Sabrina  holding [15, 17, 25] plays the 15 
Round 7: George   holding [26, 39, 49] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 37 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 37] plays the 29 
Round 7: Livia    holding [20, 40, 46] plays the 20 
George wins the round which contains 1 penalty points

Round 8: George   holding [26, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius holding [31, 37] plays the 31 
Round 8: Livia    holding [40, 46] plays the 40 
Round 8: Sabrina  holding [17, 25] plays the 25 
George wins the round which contains 1 penalty points

Round 9: George   holding [26] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Livia    holding [46] plays the 46 
Round 9: Sabrina  holding [17] plays the 17 
Livia wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 2 penalty points George (system)
#3 with 7 penalty points Sabrina (system)
#4 with 9 penalty points Livia (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10274482 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Trung   : [10, 12, 16, 18, 26, 33, 37, 41, 44, 48]
Table position 1: Mitchell: [15, 21, 29, 31, 32, 34, 36, 39, 42, 45]
Table position 2: Kane    : [13, 14, 19, 24, 27, 30, 38, 40, 46, 47]
Table position 3: Eugenius: [11, 17, 20, 22, 23, 25, 28, 35, 43, 49]

Discards:
Trung    [10, 44, 48]
Mitchell [31, 32, 45]
Kane     [13, 30, 46]
Eugenius [35, 43, 49]

Round 0: Trung    holding [12, 16, 18, 26, 33, 35, 37, 41, 43, 49] plays the 16 
Round 0: Mitchell holding [10, 15, 21, 29, 34, 36, 39, 42, 44, 48] plays the 48 
Round 0: Kane     holding [14, 19, 24, 27, 31, 32, 38, 40, 45, 47] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 20 22 23 25 28 30 46 

20------------------------------------------------------------------------

Round 0: Eugenius holding [11, 13, 17, 20, 22, 23, 25, 28, 30, 46] plays the 20 
Mitchell wins the round 

Round 1: Mitchell holding [10, 15, 21, 29, 34, 36, 39, 42, 44] plays the 39 
Round 1: Kane     holding [14, 19, 24, 27, 31, 32, 38, 45, 47] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 22 23 25 28 30 46 0 

30------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 17, 22, 23, 25, 28, 30, 46] plays the 30 
Round 1: Trung    holding [12, 18, 26, 33, 35, 37, 41, 43, 49] plays the 12 
Mitchell wins the round 

Round 2: Mitchell holding [10, 15, 21, 29, 34, 36, 42, 44] plays the 10 
Round 2: Kane     holding [14, 19, 24, 31, 32, 38, 45, 47] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 22 23 25 28 46 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 17, 22, 23, 25, 28, 46] plays the 22 
Round 2: Trung    holding [18, 26, 33, 35, 37, 41, 43, 49] plays the 35 
Trung wins the round 

Round 3: Trung    holding [18, 26, 33, 37, 41, 43, 49] plays the 33 
Round 3: Mitchell holding [15, 21, 29, 34, 36, 42, 44] plays the 21 
Round 3: Kane     holding [19, 24, 31, 32, 38, 45, 47] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 23 25 28 46 0 0 0 

11 chah------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 17, 23, 25, 28, 46] plays the 11 
Kane wins the round which contains 1 penalty points

Round 4: Kane     holding [19, 24, 31, 32, 38, 47] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 25 28 46 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 23, 25, 28, 46] plays the 28 
Round 4: Trung    holding [18, 26, 37, 41, 43, 49] plays the 18 
Round 4: Mitchell holding [15, 29, 34, 36, 42, 44] plays the 36 
Mitchell wins the round 

Round 5: Mitchell holding [15, 29, 34, 42, 44] plays the 42 
Round 5: Kane     holding [19, 24, 31, 38, 47] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 25 46 0 0 0 0 0 

46------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 23, 25, 46] plays the 46 
Round 5: Trung    holding [26, 37, 41, 43, 49] plays the 49 
Trung wins the round which contains 7 penalty points

Round 6: Trung    holding [26, 37, 41, 43] plays the 41 
Round 6: Mitchell holding [15, 29, 34, 44] plays the 29 
Round 6: Kane     holding [19, 24, 31, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 25 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 17, 23, 25] plays the 13 
Kane wins the round which contains 4 penalty points

Round 7: Kane     holding [19, 24, 31] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 25 0 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 7: Eugenius holding [17, 23, 25] plays the 17 
Round 7: Trung    holding [26, 37, 43] plays the 26 
Round 7: Mitchell holding [15, 34, 44] plays the 15 
Trung wins the round which contains 1 penalty points

Round 8: Trung    holding [37, 43] plays the 37 
Round 8: Mitchell holding [34, 44] plays the 44 
Round 8: Kane     holding [19, 31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 8: Eugenius holding [23, 25] plays the 23 
Trung wins the round which contains 3 penalty points

Round 9: Trung    holding [43] plays the 43 
Round 9: Mitchell holding [34] plays the 34 
Round 9: Kane     holding [19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
25 0 0 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 9: Eugenius holding [25] plays the 25 
Trung wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Mitchell (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 5 penalty points Kane (system)
#4 with 13 penalty points Trung (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14767369 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eleni   : [19, 20, 22, 23, 26, 28, 29, 36, 37, 43]
Table position 1: Eugenius: [10, 14, 16, 18, 24, 27, 30, 40, 41, 44]
Table position 2: Stephen : [11, 12, 13, 17, 21, 31, 33, 34, 35, 49]
Table position 3: Sabrina : [15, 25, 32, 38, 39, 42, 45, 46, 47, 48]

Discards:
Eleni    [23, 36, 43]
Eugenius [40, 41, 44]
Stephen  [11, 21, 33]
Sabrina  [25, 46, 48]

Round 0: Eleni    holding [19, 20, 22, 25, 26, 28, 29, 37, 46, 48] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
10 14 16 18 23 24 27 30 36 43 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 14, 16, 18, 23, 24, 27, 30, 36, 43] plays the 10 
Round 0: Stephen  holding [12, 13, 17, 31, 34, 35, 40, 41, 44, 49] plays the 40 
Round 0: Sabrina  holding [11, 15, 21, 32, 33, 38, 39, 42, 45, 47] plays the 38 
Eleni wins the round 

Round 1: Eleni    holding [19, 20, 22, 25, 26, 28, 29, 37, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 18 23 24 27 30 36 43 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 16, 18, 23, 24, 27, 30, 36, 43] plays the 14 
Round 1: Stephen  holding [12, 13, 17, 31, 34, 35, 41, 44, 49] plays the 44 
Round 1: Sabrina  holding [11, 15, 21, 32, 33, 39, 42, 45, 47] plays the 33 
Eleni wins the round 

Round 2: Eleni    holding [19, 20, 22, 25, 26, 28, 29, 37] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
16 18 23 24 27 30 36 43 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [16, 18, 23, 24, 27, 30, 36, 43] plays the 16 
Round 2: Stephen  holding [12, 13, 17, 31, 34, 35, 41, 49] plays the 35 
Round 2: Sabrina  holding [11, 15, 21, 32, 39, 42, 45, 47] plays the 15 
Stephen wins the round 

Round 3: Stephen  holding [12, 13, 17, 31, 34, 41, 49] plays the 34 
Round 3: Sabrina  holding [11, 21, 32, 39, 42, 45, 47] plays the 32 
Round 3: Eleni    holding [19, 22, 25, 26, 28, 29, 37] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
18 23 24 27 30 36 43 0 0 0 

18------------------------------------------------------------------------

Round 3: Eugenius holding [18, 23, 24, 27, 30, 36, 43] plays the 18 
Stephen wins the round 

Round 4: Stephen  holding [12, 13, 17, 31, 41, 49] plays the 49 
Round 4: Sabrina  holding [11, 21, 39, 42, 45, 47] plays the 42 
Round 4: Eleni    holding [19, 22, 25, 28, 29, 37] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
23 24 27 30 36 43 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 4: Eugenius holding [23, 24, 27, 30, 36, 43] plays the 23 
Stephen wins the round which contains 8 penalty points

Round 5: Stephen  holding [12, 13, 17, 31, 41] plays the 17 
Round 5: Sabrina  holding [11, 21, 39, 45, 47] plays the 47 
Round 5: Eleni    holding [19, 22, 25, 29, 37] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
24 27 30 36 43 0 0 0 0 0 

43------------------------------------------------------------------------

Round 5: Eugenius holding [24, 27, 30, 36, 43] plays the 43 
Sabrina wins the round which contains 4 penalty points

Round 6: Sabrina  holding [11, 21, 39, 45] plays the 11 
Round 6: Eleni    holding [22, 25, 29, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
24 27 30 36 0 0 0 0 0 0 

24------------------------------------------------------------------------

Round 6: Eugenius holding [24, 27, 30, 36] plays the 24 
Round 6: Stephen  holding [12, 13, 31, 41] plays the 31 
Eleni wins the round which contains 3 penalty points

Round 7: Eleni    holding [22, 25, 29] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
27 30 36 0 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 7: Eugenius holding [27, 30, 36] plays the 30 
Round 7: Stephen  holding [12, 13, 41] plays the 12 
Round 7: Sabrina  holding [21, 39, 45] plays the 21 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
27 36 0 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 8: Eugenius holding [27, 36] plays the 27 
Round 8: Stephen  holding [13, 41] plays the 13 
Round 8: Sabrina  holding [39, 45] plays the 39 
Round 8: Eleni    holding [25, 29] plays the 29 
Sabrina wins the round which contains 2 penalty points

Round 9: Sabrina  holding [45] plays the 45 
Round 9: Eleni    holding [25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
36 0 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 9: Eugenius holding [36] plays the 36 
Round 9: Stephen  holding [41] plays the 41 
Sabrina wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 3 penalty points Eleni (system)
#3 with 7 penalty points Sabrina (system)
#4 with 8 penalty points Stephen (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 4427286 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Andrew  : [18, 25, 29, 31, 34, 38, 41, 43, 47, 49]
Table position 1: Finbar  : [21, 22, 23, 24, 28, 32, 33, 37, 42, 46]
Table position 2: Eugenius: [11, 13, 14, 17, 26, 27, 35, 40, 45, 48]
Table position 3: Mitchell: [10, 12, 15, 16, 19, 20, 30, 36, 39, 44]

Discards:
Andrew   [29, 41, 47]
Finbar   [21, 22, 37]
Eugenius [40, 45, 48]
Mitchell [12, 16, 20]

Round 0: Andrew   holding [12, 16, 18, 20, 25, 31, 34, 38, 43, 49] plays the 34 
Round 0: Finbar   holding [23, 24, 28, 29, 32, 33, 41, 42, 46, 47] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 14 17 21 22 26 27 35 37 

14------------------------------------------------------------------------

Round 0: Eugenius holding [11, 13, 14, 17, 21, 22, 26, 27, 35, 37] plays the 14 
Round 0: Mitchell holding [10, 15, 19, 30, 36, 39, 40, 44, 45, 48] plays the 10 
Andrew wins the round 

Round 1: Andrew   holding [12, 16, 18, 20, 25, 31, 38, 43, 49] plays the 38 
Round 1: Finbar   holding [23, 24, 28, 29, 33, 41, 42, 46, 47] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 21 22 26 27 35 37 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 17, 21, 22, 26, 27, 35, 37] plays the 22 
Round 1: Mitchell holding [15, 19, 30, 36, 39, 40, 44, 45, 48] plays the 44 
Mitchell wins the round 

Round 2: Mitchell holding [15, 19, 30, 36, 39, 40, 45, 48] plays the 40 
Round 2: Andrew   holding [12, 16, 18, 20, 25, 31, 43, 49] plays the 16 
Round 2: Finbar   holding [23, 28, 29, 33, 41, 42, 46, 47] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 21 26 27 35 37 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 17, 21, 26, 27, 35, 37] plays the 26 
Mitchell wins the round 

Round 3: Mitchell holding [15, 19, 30, 36, 39, 45, 48] plays the 36 
Round 3: Andrew   holding [12, 18, 20, 25, 31, 43, 49] plays the 12 
Round 3: Finbar   holding [23, 29, 33, 41, 42, 46, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 21 27 35 37 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 17, 21, 27, 35, 37] plays the 21 
Finbar wins the round which contains 7 penalty points

Round 4: Finbar   holding [23, 29, 33, 41, 46, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 27 35 37 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 17, 27, 35, 37] plays the 27 
Round 4: Mitchell holding [15, 19, 30, 39, 45, 48] plays the 15 
Round 4: Andrew   holding [18, 20, 25, 31, 43, 49] plays the 18 
Finbar wins the round 

Round 5: Finbar   holding [23, 29, 41, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 35 37 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 17, 35, 37] plays the 11 
Round 5: Mitchell holding [19, 30, 39, 45, 48] plays the 48 
Round 5: Andrew   holding [20, 25, 31, 43, 49] plays the 20 
Mitchell wins the round which contains 1 penalty points

Round 6: Mitchell holding [19, 30, 39, 45] plays the 30 
Round 6: Andrew   holding [25, 31, 43, 49] plays the 25 
Round 6: Finbar   holding [23, 29, 41, 47] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 35 37 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 6: Eugenius holding [13, 17, 35, 37] plays the 35 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 17 37 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 17, 37] plays the 13 
Round 7: Mitchell holding [19, 39, 45] plays the 19 
Round 7: Andrew   holding [31, 43, 49] plays the 31 
Round 7: Finbar   holding [23, 29, 47] plays the 23 
Andrew wins the round which contains 4 penalty points

Round 8: Andrew   holding [43, 49] plays the 43 
Round 8: Finbar   holding [29, 47] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
17 37 0 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 8: Eugenius holding [17, 37] plays the 17 
Round 8: Mitchell holding [39, 45] plays the 45 
Andrew wins the round which contains 3 penalty points

Round 9: Andrew   holding [49] plays the 49 
Round 9: Finbar   holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Mitchell holding [39] plays the 39 
Andrew wins the round which contains 2 penalty points


Finishing Positions

#1 with 1 penalty points Eugenius (dodo.c)
#1 with 1 penalty points Mitchell (system)
#3 with 7 penalty points Finbar (system)
#4 with 9 penalty points Andrew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7802203 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Marc    : [13, 15, 25, 32, 33, 36, 38, 43, 47, 48]
Table position 1: Eugenius: [14, 16, 26, 27, 37, 39, 42, 44, 46, 49]
Table position 2: Costa   : [10, 12, 18, 19, 20, 24, 28, 31, 35, 40]
Table position 3: Mitchell: [11, 17, 21, 22, 23, 29, 30, 34, 41, 45]

Discards:
Marc     [36, 38, 48]
Eugenius [44, 46, 49]
Costa    [10, 28, 35]
Mitchell [17, 23, 34]

Round 0: Marc     holding [13, 15, 17, 23, 25, 32, 33, 34, 43, 47] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 26 27 36 37 38 39 42 48 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 16, 26, 27, 36, 37, 38, 39, 42, 48] plays the 14 
Round 0: Costa    holding [12, 18, 19, 20, 24, 31, 40, 44, 46, 49] plays the 44 
Round 0: Mitchell holding [10, 11, 21, 22, 28, 29, 30, 35, 41, 45] plays the 10 
Costa wins the round 

Round 1: Costa    holding [12, 18, 19, 20, 24, 31, 40, 46, 49] plays the 24 
Round 1: Mitchell holding [11, 21, 22, 28, 29, 30, 35, 41, 45] plays the 45 
Round 1: Marc     holding [13, 15, 17, 23, 25, 32, 33, 43, 47] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
16 26 27 36 37 38 39 42 48 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 26, 27, 36, 37, 38, 39, 42, 48] plays the 16 
Mitchell wins the round 

Round 2: Mitchell holding [11, 21, 22, 28, 29, 30, 35, 41] plays the 28 
Round 2: Marc     holding [13, 15, 17, 23, 25, 33, 43, 47] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
26 27 36 37 38 39 42 48 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [26, 27, 36, 37, 38, 39, 42, 48] plays the 26 
Round 2: Costa    holding [12, 18, 19, 20, 31, 40, 46, 49] plays the 12 
Mitchell wins the round 

Round 3: Mitchell holding [11, 21, 22, 29, 30, 35, 41] plays the 22 
Round 3: Marc     holding [13, 15, 17, 23, 33, 43, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
27 36 37 38 39 42 48 0 0 0 

36------------------------------------------------------------------------

Round 3: Eugenius holding [27, 36, 37, 38, 39, 42, 48] plays the 36 
Round 3: Costa    holding [18, 19, 20, 31, 40, 46, 49] plays the 40 
Costa wins the round 

Round 4: Costa    holding [18, 19, 20, 31, 46, 49] plays the 46 
Round 4: Mitchell holding [11, 21, 29, 30, 35, 41] plays the 30 
Round 4: Marc     holding [13, 15, 17, 23, 43, 47] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
27 37 38 39 42 48 0 0 0 0 

38------------------------------------------------------------------------

Round 4: Eugenius holding [27, 37, 38, 39, 42, 48] plays the 38 
Costa wins the round which contains 1 penalty points

Round 5: Costa    holding [18, 19, 20, 31, 49] plays the 18 
Round 5: Mitchell holding [11, 21, 29, 35, 41] plays the 21 
Round 5: Marc     holding [13, 15, 17, 23, 47] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
27 37 39 42 48 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius holding [27, 37, 39, 42, 48] plays the 27 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
37 39 42 48 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 6: Eugenius holding [37, 39, 42, 48] plays the 37 
Round 6: Costa    holding [19, 20, 31, 49] plays the 19 
Round 6: Mitchell holding [11, 29, 35, 41] plays the 11 
Round 6: Marc     holding [13, 17, 23, 47] plays the 17 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
39 42 48 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 7: Eugenius holding [39, 42, 48] plays the 39 
Round 7: Costa    holding [20, 31, 49] plays the 49 
Round 7: Mitchell holding [29, 35, 41] plays the 29 
Round 7: Marc     holding [13, 23, 47] plays the 23 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
42 48 0 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 8: Eugenius holding [42, 48] plays the 42 
Round 8: Costa    holding [20, 31] plays the 20 
Round 8: Mitchell holding [35, 41] plays the 35 
Round 8: Marc     holding [13, 47] plays the 47 
Eugenius wins the round which contains 8 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
48 0 0 0 0 0 0 0 0 0 

48------------------------------------------------------------------------

Round 9: Eugenius holding [48] plays the 48 
Round 9: Costa    holding [31] plays the 31 
Round 9: Mitchell holding [41] plays the 41 
Round 9: Marc     holding [13] plays the 13 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Marc (system)
#1 with 0 penalty points Mitchell (system)
#3 with 1 penalty points Costa (system)
#4 with 17 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2053958 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Oscar   : [18, 23, 24, 28, 30, 31, 35, 38, 43, 46]
Table position 1: Livia   : [10, 15, 17, 22, 29, 34, 36, 40, 44, 48]
Table position 2: Eugenius: [12, 14, 16, 20, 25, 26, 27, 33, 37, 42]
Table position 3: Finbar  : [11, 13, 19, 21, 32, 39, 41, 45, 47, 49]

Discards:
Oscar    [18, 24, 46]
Livia    [10, 34, 36]
Eugenius [33, 37, 42]
Finbar   [11, 39, 49]

Round 0: Oscar    holding [11, 23, 28, 30, 31, 35, 38, 39, 43, 49] plays the 49 
Round 0: Livia    holding [15, 17, 18, 22, 24, 29, 40, 44, 46, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 14 16 20 25 26 27 34 36 

14------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 14, 16, 20, 25, 26, 27, 34, 36] plays the 14 
Round 0: Finbar   holding [13, 19, 21, 32, 33, 37, 41, 42, 45, 47] plays the 42 
Oscar wins the round which contains 7 penalty points

Round 1: Oscar    holding [11, 23, 28, 30, 31, 35, 38, 39, 43] plays the 30 
Round 1: Livia    holding [15, 17, 18, 22, 24, 29, 40, 44, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 16 20 25 26 27 34 36 0 

10------------------------------------------------------------------------

Round 1: Eugenius holding [10, 12, 16, 20, 25, 26, 27, 34, 36] plays the 10 
Round 1: Finbar   holding [13, 19, 21, 32, 33, 37, 41, 45, 47] plays the 33 
Livia wins the round 

Round 2: Livia    holding [15, 17, 18, 22, 24, 29, 40, 44] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
12 16 20 25 26 27 34 36 0 0 

12------------------------------------------------------------------------

Round 2: Eugenius holding [12, 16, 20, 25, 26, 27, 34, 36] plays the 12 
Round 2: Finbar   holding [13, 19, 21, 32, 37, 41, 45, 47] plays the 45 
Round 2: Oscar    holding [11, 23, 28, 31, 35, 38, 39, 43] plays the 28 
Finbar wins the round 

Round 3: Finbar   holding [13, 19, 21, 32, 37, 41, 47] plays the 32 
Round 3: Oscar    holding [11, 23, 31, 35, 38, 39, 43] plays the 38 
Round 3: Livia    holding [15, 17, 18, 22, 24, 29, 44] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
16 20 25 26 27 34 36 0 0 0 

16------------------------------------------------------------------------

Round 3: Eugenius holding [16, 20, 25, 26, 27, 34, 36] plays the 16 
Oscar wins the round 

Round 4: Oscar    holding [11, 23, 31, 35, 39, 43] plays the 35 
Round 4: Livia    holding [15, 17, 18, 22, 29, 44] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
20 25 26 27 34 36 0 0 0 0 

20------------------------------------------------------------------------

Round 4: Eugenius holding [20, 25, 26, 27, 34, 36] plays the 20 
Round 4: Finbar   holding [13, 19, 21, 37, 41, 47] plays the 21 
Oscar wins the round 

Round 5: Oscar    holding [11, 23, 31, 39, 43] plays the 39 
Round 5: Livia    holding [17, 18, 22, 29, 44] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
25 26 27 34 36 0 0 0 0 0 

26------------------------------------------------------------------------

Round 5: Eugenius holding [25, 26, 27, 34, 36] plays the 26 
Round 5: Finbar   holding [13, 19, 37, 41, 47] plays the 47 
Oscar wins the round which contains 1 penalty points

Round 6: Oscar    holding [11, 23, 31, 43] plays the 31 
Round 6: Livia    holding [17, 22, 29, 44] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
25 27 34 36 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 6: Eugenius holding [25, 27, 34, 36] plays the 25 
Round 6: Finbar   holding [13, 19, 37, 41] plays the 41 
Finbar wins the round which contains 3 penalty points

Round 7: Finbar   holding [13, 19, 37] plays the 19 
Round 7: Oscar    holding [11, 23, 43] plays the 11 
Round 7: Livia    holding [17, 22, 44] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
27 34 36 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [27, 34, 36] plays the 27 
Finbar wins the round which contains 3 penalty points

Round 8: Finbar   holding [13, 37] plays the 37 
Round 8: Oscar    holding [23, 43] plays the 43 
Round 8: Livia    holding [22, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
34 36 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 8: Eugenius holding [34, 36] plays the 34 
Oscar wins the round which contains 2 penalty points

Round 9: Oscar    holding [23] plays the 23 
Round 9: Livia    holding [22] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
36 0 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 9: Eugenius holding [36] plays the 36 
Round 9: Finbar   holding [13] plays the 13 
Oscar wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Livia (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Finbar (system)
#4 with 12 penalty points Oscar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5204732 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Xue     : [13, 15, 21, 27, 36, 37, 38, 39, 43, 48]
Table position 1: Livia   : [10, 11, 14, 16, 22, 23, 32, 35, 44, 47]
Table position 2: Eugenius: [17, 19, 20, 24, 25, 29, 31, 40, 46, 49]
Table position 3: Heather : [12, 18, 26, 28, 30, 33, 34, 41, 42, 45]

Discards:
Xue      [21, 39, 48]
Livia    [16, 32, 44]
Eugenius [40, 46, 49]
Heather  [18, 34, 42]

Round 0: Xue      holding [13, 15, 18, 27, 34, 36, 37, 38, 42, 43] plays the 15 
Round 0: Livia    holding [10, 11, 14, 21, 22, 23, 35, 39, 47, 48] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 19 20 24 25 29 31 32 44 

20------------------------------------------------------------------------

Round 0: Eugenius holding [16, 17, 19, 20, 24, 25, 29, 31, 32, 44] plays the 20 
Round 0: Heather  holding [12, 26, 28, 30, 33, 40, 41, 45, 46, 49] plays the 45 
Heather wins the round 

Round 1: Heather  holding [12, 26, 28, 30, 33, 40, 41, 46, 49] plays the 46 
Round 1: Xue      holding [13, 18, 27, 34, 36, 37, 38, 42, 43] plays the 42 
Round 1: Livia    holding [10, 11, 14, 21, 22, 23, 39, 47, 48] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 19 24 25 29 31 32 44 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 17, 19, 24, 25, 29, 31, 32, 44] plays the 16 
Heather wins the round which contains 7 penalty points

Round 2: Heather  holding [12, 26, 28, 30, 33, 40, 41, 49] plays the 28 
Round 2: Xue      holding [13, 18, 27, 34, 36, 37, 38, 43] plays the 38 
Round 2: Livia    holding [10, 11, 14, 21, 23, 39, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 24 25 29 31 32 44 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [17, 19, 24, 25, 29, 31, 32, 44] plays the 24 
Livia wins the round 

Round 3: Livia    holding [10, 11, 14, 21, 23, 39, 47] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 25 29 31 32 44 0 0 0 

32------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 25, 29, 31, 32, 44] plays the 32 
Round 3: Heather  holding [12, 26, 30, 33, 40, 41, 49] plays the 49 
Round 3: Xue      holding [13, 18, 27, 34, 36, 37, 43] plays the 34 
Heather wins the round 

Round 4: Heather  holding [12, 26, 30, 33, 40, 41] plays the 30 
Round 4: Xue      holding [13, 18, 27, 36, 37, 43] plays the 36 
Round 4: Livia    holding [10, 11, 21, 23, 39, 47] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 25 29 31 44 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 25, 29, 31, 44] plays the 25 
Livia wins the round 

Round 5: Livia    holding [10, 11, 21, 23, 47] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 31 44 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 29, 31, 44] plays the 17 
Round 5: Heather  holding [12, 26, 33, 40, 41] plays the 33 
Round 5: Xue      holding [13, 18, 27, 37, 43] plays the 27 
Heather wins the round which contains 1 penalty points

Round 6: Heather  holding [12, 26, 40, 41] plays the 26 
Round 6: Xue      holding [13, 18, 37, 43] plays the 18 
Round 6: Livia    holding [10, 11, 23, 47] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 31 44 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 6: Eugenius holding [19, 29, 31, 44] plays the 44 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
19 29 31 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius holding [19, 29, 31] plays the 19 
Round 7: Heather  holding [12, 40, 41] plays the 41 
Round 7: Xue      holding [13, 37, 43] plays the 13 
Round 7: Livia    holding [11, 23, 47] plays the 47 
Livia wins the round which contains 4 penalty points

Round 8: Livia    holding [11, 23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 31] plays the 29 
Round 8: Heather  holding [12, 40] plays the 12 
Round 8: Xue      holding [37, 43] plays the 43 
Xue wins the round which contains 3 penalty points

Round 9: Xue      holding [37] plays the 37 
Round 9: Livia    holding [11] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Round 9: Heather  holding [40] plays the 40 
Xue wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Livia (system)
#3 with 6 penalty points Xue (system)
#4 with 8 penalty points Heather (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1823847 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Gal     : [16, 17, 23, 25, 28, 29, 31, 34, 39, 48]
Table position 1: Matthew : [10, 11, 13, 26, 30, 35, 41, 43, 46, 47]
Table position 2: Eugenius: [14, 15, 19, 21, 22, 27, 33, 37, 38, 44]
Table position 3: Vincent : [12, 18, 20, 24, 32, 36, 40, 42, 45, 49]

Discards:
Gal      [23, 25, 29]
Matthew  [10, 11, 30]
Eugenius [37, 38, 44]
Vincent  [36, 45, 49]

Round 0: Gal      holding [16, 17, 28, 31, 34, 36, 39, 45, 48, 49] plays the 39 
Round 0: Matthew  holding [13, 23, 25, 26, 29, 35, 41, 43, 46, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 14 15 19 21 22 27 30 33 

15------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 14, 15, 19, 21, 22, 27, 30, 33] plays the 15 
Round 0: Vincent  holding [12, 18, 20, 24, 32, 37, 38, 40, 42, 44] plays the 12 
Gal wins the round 

Round 1: Gal      holding [16, 17, 28, 31, 34, 36, 45, 48, 49] plays the 16 
Round 1: Matthew  holding [13, 23, 25, 29, 35, 41, 43, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 14 19 21 22 27 30 33 0 

10------------------------------------------------------------------------

Round 1: Eugenius holding [10, 11, 14, 19, 21, 22, 27, 30, 33] plays the 10 
Round 1: Vincent  holding [18, 20, 24, 32, 37, 38, 40, 42, 44] plays the 24 
Matthew wins the round 

Round 2: Matthew  holding [13, 23, 25, 29, 35, 41, 43, 47] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 19 21 22 27 30 33 0 0 

30------------------------------------------------------------------------

Round 2: Eugenius holding [11, 14, 19, 21, 22, 27, 30, 33] plays the 30 
Round 2: Vincent  holding [18, 20, 32, 37, 38, 40, 42, 44] plays the 20 
Round 2: Gal      holding [17, 28, 31, 34, 36, 45, 48, 49] plays the 45 
Gal wins the round 

Round 3: Gal      holding [17, 28, 31, 34, 36, 48, 49] plays the 36 
Round 3: Matthew  holding [13, 23, 29, 35, 41, 43, 47] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 19 21 22 27 33 0 0 0 

14------------------------------------------------------------------------

Round 3: Eugenius holding [11, 14, 19, 21, 22, 27, 33] plays the 14 
Round 3: Vincent  holding [18, 32, 37, 38, 40, 42, 44] plays the 40 
Vincent wins the round which contains 1 penalty points

Round 4: Vincent  holding [18, 32, 37, 38, 42, 44] plays the 18 
Round 4: Gal      holding [17, 28, 31, 34, 48, 49] plays the 34 
Round 4: Matthew  holding [13, 23, 29, 35, 43, 47] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 21 22 27 33 0 0 0 0 

21------------------------------------------------------------------------

Round 4: Eugenius holding [11, 19, 21, 22, 27, 33] plays the 21 
Gal wins the round which contains 1 penalty points

Round 5: Gal      holding [17, 28, 31, 48, 49] plays the 17 
Round 5: Matthew  holding [13, 23, 29, 35, 47] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 22 27 33 0 0 0 0 0 

11------------------------------------------------------------------------

Round 5: Eugenius holding [11, 19, 22, 27, 33] plays the 11 
Round 5: Vincent  holding [32, 37, 38, 42, 44] plays the 37 
Vincent wins the round which contains 4 penalty points

Round 6: Vincent  holding [32, 38, 42, 44] plays the 32 
Round 6: Gal      holding [28, 31, 48, 49] plays the 28 
Round 6: Matthew  holding [23, 29, 35, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 27 33 0 0 0 0 0 0 

22------------------------------------------------------------------------

Round 6: Eugenius holding [19, 22, 27, 33] plays the 22 
Vincent wins the round which contains 1 penalty points

Round 7: Vincent  holding [38, 42, 44] plays the 42 
Round 7: Gal      holding [31, 48, 49] plays the 49 
Round 7: Matthew  holding [23, 29, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
19 27 33 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [19, 27, 33] plays the 27 
Gal wins the round which contains 7 penalty points

Round 8: Gal      holding [31, 48] plays the 48 
Round 8: Matthew  holding [23, 29] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
19 33 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 8: Eugenius holding [19, 33] plays the 33 
Round 8: Vincent  holding [38, 44] plays the 38 
Gal wins the round which contains 1 penalty points

Round 9: Gal      holding [31] plays the 31 
Round 9: Matthew  holding [23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
19 0 0 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 9: Eugenius holding [19] plays the 19 
Round 9: Vincent  holding [44] plays the 44 
Gal wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Matthew (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Vincent (system)
#4 with 12 penalty points Gal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9581215 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [12, 18, 21, 22, 27, 33, 34, 38, 44, 46]
Table position 1: Costa   : [15, 19, 24, 28, 29, 30, 37, 41, 42, 49]
Table position 2: Dylan   : [11, 13, 16, 17, 25, 26, 35, 36, 39, 45]
Table position 3: Nathan  : [10, 14, 20, 23, 31, 32, 40, 43, 47, 48]

Discards:
Eugenius [38, 44, 46]
Costa    [19, 41, 49]
Dylan    [17, 26, 35]
Nathan   [10, 14, 47]


Debug output from Eugenius
------------------------------------------------------------------------
10 12 14 18 21 22 27 33 34 47 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 14, 18, 21, 22, 27, 33, 34, 47] plays the 10 
Round 0: Costa    holding [15, 24, 28, 29, 30, 37, 38, 42, 44, 46] plays the 42 
Round 0: Dylan    holding [11, 13, 16, 19, 25, 36, 39, 41, 45, 49] plays the 36 
Round 0: Nathan   holding [17, 20, 23, 26, 31, 32, 35, 40, 43, 48] plays the 26 
Costa wins the round which contains 7 penalty points

Round 1: Costa    holding [15, 24, 28, 29, 30, 37, 38, 44, 46] plays the 44 
Round 1: Dylan    holding [11, 13, 16, 19, 25, 39, 41, 45, 49] plays the 16 
Round 1: Nathan   holding [17, 20, 23, 31, 32, 35, 40, 43, 48] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 18 21 22 27 33 34 47 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 14, 18, 21, 22, 27, 33, 34, 47] plays the 12 
Costa wins the round 

Round 2: Costa    holding [15, 24, 28, 29, 30, 37, 38, 46] plays the 28 
Round 2: Dylan    holding [11, 13, 19, 25, 39, 41, 45, 49] plays the 49 
Round 2: Nathan   holding [17, 23, 31, 32, 35, 40, 43, 48] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
14 18 21 22 27 33 34 47 0 0 

14------------------------------------------------------------------------

Round 2: Eugenius holding [14, 18, 21, 22, 27, 33, 34, 47] plays the 14 
Dylan wins the round 

Round 3: Dylan    holding [11, 13, 19, 25, 39, 41, 45] plays the 39 
Round 3: Nathan   holding [17, 23, 31, 32, 35, 43, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
18 21 22 27 33 34 47 0 0 0 

18------------------------------------------------------------------------

Round 3: Eugenius holding [18, 21, 22, 27, 33, 34, 47] plays the 18 
Round 3: Costa    holding [15, 24, 29, 30, 37, 38, 46] plays the 30 
Nathan wins the round 

Round 4: Nathan   holding [17, 23, 31, 32, 35, 43] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
21 22 27 33 34 47 0 0 0 0 

21------------------------------------------------------------------------

Round 4: Eugenius holding [21, 22, 27, 33, 34, 47] plays the 21 
Round 4: Costa    holding [15, 24, 29, 37, 38, 46] plays the 15 
Round 4: Dylan    holding [11, 13, 19, 25, 41, 45] plays the 45 
Dylan wins the round 

Round 5: Dylan    holding [11, 13, 19, 25, 41] plays the 25 
Round 5: Nathan   holding [17, 23, 31, 32, 43] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
22 27 33 34 47 0 0 0 0 0 

22 chah------------------------------------------------------------------------

Round 5: Eugenius holding [22, 27, 33, 34, 47] plays the 22 
Round 5: Costa    holding [24, 29, 37, 38, 46] plays the 38 
Dylan wins the round which contains 1 penalty points

Round 6: Dylan    holding [11, 13, 19, 41] plays the 19 
Round 6: Nathan   holding [17, 23, 32, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
27 33 34 47 0 0 0 0 0 0 

47------------------------------------------------------------------------

Round 6: Eugenius holding [27, 33, 34, 47] plays the 47 
Round 6: Costa    holding [24, 29, 37, 46] plays the 29 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
27 33 34 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [27, 33, 34] plays the 27 
Round 7: Costa    holding [24, 37, 46] plays the 24 
Round 7: Dylan    holding [11, 13, 41] plays the 13 
Round 7: Nathan   holding [17, 23, 32] plays the 17 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
33 34 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 8: Eugenius holding [33, 34] plays the 33 
Round 8: Costa    holding [37, 46] plays the 46 
Round 8: Dylan    holding [11, 41] plays the 41 
Round 8: Nathan   holding [23, 32] plays the 23 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
34 0 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 9: Eugenius holding [34] plays the 34 
Round 9: Costa    holding [37] plays the 37 
Round 9: Dylan    holding [11] plays the 11 
Round 9: Nathan   holding [32] plays the 32 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Nathan (system)
#2 with 1 penalty points Dylan (system)
#3 with 7 penalty points Costa (system)
#4 with 10 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6746637 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Stephen : [15, 20, 22, 26, 27, 29, 38, 40, 43, 46]
Table position 1: Andrew  : [10, 17, 18, 23, 28, 33, 44, 45, 48, 49]
Table position 2: Mitchell: [11, 12, 13, 16, 19, 25, 31, 32, 35, 47]
Table position 3: Eugenius: [14, 21, 24, 30, 34, 36, 37, 39, 41, 42]

Discards:
Stephen  [15, 20, 26]
Andrew   [33, 44, 48]
Mitchell [25, 32, 47]
Eugenius [39, 41, 42]

Round 0: Stephen  holding [22, 27, 29, 38, 39, 40, 41, 42, 43, 46] plays the 39 
Round 0: Andrew   holding [10, 15, 17, 18, 20, 23, 26, 28, 45, 49] plays the 15 
Round 0: Mitchell holding [11, 12, 13, 16, 19, 31, 33, 35, 44, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
14 21 24 25 30 32 34 36 37 47 

21------------------------------------------------------------------------

Round 0: Eugenius holding [14, 21, 24, 25, 30, 32, 34, 36, 37, 47] plays the 21 
Mitchell wins the round 

Round 1: Mitchell holding [11, 12, 13, 16, 19, 31, 33, 35, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
14 24 25 30 32 34 36 37 47 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 24, 25, 30, 32, 34, 36, 37, 47] plays the 14 
Round 1: Stephen  holding [22, 27, 29, 38, 40, 41, 42, 43, 46] plays the 22 
Round 1: Andrew   holding [10, 17, 18, 20, 23, 26, 28, 45, 49] plays the 26 
Mitchell wins the round 

Round 2: Mitchell holding [11, 12, 13, 16, 19, 31, 33, 35] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
24 25 30 32 34 36 37 47 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [24, 25, 30, 32, 34, 36, 37, 47] plays the 24 
Round 2: Stephen  holding [27, 29, 38, 40, 41, 42, 43, 46] plays the 42 
Round 2: Andrew   holding [10, 17, 18, 20, 23, 28, 45, 49] plays the 45 
Andrew wins the round which contains 7 penalty points

Round 3: Andrew   holding [10, 17, 18, 20, 23, 28, 49] plays the 28 
Round 3: Mitchell holding [11, 12, 13, 16, 19, 31, 35] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
25 30 32 34 36 37 47 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [25, 30, 32, 34, 36, 37, 47] plays the 30 
Round 3: Stephen  holding [27, 29, 38, 40, 41, 43, 46] plays the 38 
Stephen wins the round 

Round 4: Stephen  holding [27, 29, 40, 41, 43, 46] plays the 46 
Round 4: Andrew   holding [10, 17, 18, 20, 23, 49] plays the 18 
Round 4: Mitchell holding [11, 12, 13, 19, 31, 35] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
25 32 34 36 37 47 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [25, 32, 34, 36, 37, 47] plays the 32 
Stephen wins the round 

Round 5: Stephen  holding [27, 29, 40, 41, 43] plays the 40 
Round 5: Andrew   holding [10, 17, 20, 23, 49] plays the 10 
Round 5: Mitchell holding [11, 13, 19, 31, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
25 34 36 37 47 0 0 0 0 0 

25------------------------------------------------------------------------

Round 5: Eugenius holding [25, 34, 36, 37, 47] plays the 25 
Stephen wins the round 

Round 6: Stephen  holding [27, 29, 41, 43] plays the 27 
Round 6: Andrew   holding [17, 20, 23, 49] plays the 49 
Round 6: Mitchell holding [11, 13, 19, 31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
34 36 37 47 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 6: Eugenius holding [34, 36, 37, 47] plays the 36 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
34 37 47 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 7: Eugenius holding [34, 37, 47] plays the 34 
Round 7: Stephen  holding [29, 41, 43] plays the 41 
Round 7: Andrew   holding [17, 20, 23] plays the 20 
Round 7: Mitchell holding [11, 13, 19] plays the 11 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
37 47 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 8: Eugenius holding [37, 47] plays the 37 
Round 8: Stephen  holding [29, 43] plays the 43 
Round 8: Andrew   holding [17, 23] plays the 23 
Round 8: Mitchell holding [13, 19] plays the 13 
Stephen wins the round which contains 4 penalty points

Round 9: Stephen  holding [29] plays the 29 
Round 9: Andrew   holding [17] plays the 17 
Round 9: Mitchell holding [19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
47 0 0 0 0 0 0 0 0 0 

47------------------------------------------------------------------------

Round 9: Eugenius holding [47] plays the 47 
Eugenius wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Mitchell (system)
#2 with 4 penalty points Stephen (system)
#3 with 7 penalty points Andrew (system)
#3 with 7 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11569817 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Reede   : [10, 11, 12, 30, 31, 33, 39, 45, 46, 49]
Table position 1: Eugenius: [17, 19, 24, 26, 28, 29, 34, 37, 43, 47]
Table position 2: Jamal   : [13, 14, 15, 16, 21, 22, 32, 40, 41, 44]
Table position 3: Claire  : [18, 20, 23, 25, 27, 35, 36, 38, 42, 48]

Discards:
Reede    [30, 39, 46]
Eugenius [37, 43, 47]
Jamal    [13, 22, 32]
Claire   [27, 36, 48]

Round 0: Reede    holding [10, 11, 12, 27, 31, 33, 36, 45, 48, 49] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 24 26 28 29 30 34 39 46 

24------------------------------------------------------------------------

Round 0: Eugenius holding [17, 19, 24, 26, 28, 29, 30, 34, 39, 46] plays the 24 
Round 0: Jamal    holding [14, 15, 16, 21, 37, 40, 41, 43, 44, 47] plays the 14 
Round 0: Claire   holding [13, 18, 20, 22, 23, 25, 32, 35, 38, 42] plays the 25 
Claire wins the round 

Round 1: Claire   holding [13, 18, 20, 22, 23, 32, 35, 38, 42] plays the 18 
Round 1: Reede    holding [11, 12, 27, 31, 33, 36, 45, 48, 49] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 26 28 29 30 34 39 46 0 

26------------------------------------------------------------------------

Round 1: Eugenius holding [17, 19, 26, 28, 29, 30, 34, 39, 46] plays the 26 
Round 1: Jamal    holding [15, 16, 21, 37, 40, 41, 43, 44, 47] plays the 40 
Jamal wins the round 

Round 2: Jamal    holding [15, 16, 21, 37, 41, 43, 44, 47] plays the 21 
Round 2: Claire   holding [13, 20, 22, 23, 32, 35, 38, 42] plays the 35 
Round 2: Reede    holding [11, 12, 31, 33, 36, 45, 48, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 28 29 30 34 39 46 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [17, 19, 28, 29, 30, 34, 39, 46] plays the 28 
Reede wins the round 

Round 3: Reede    holding [11, 12, 31, 33, 36, 45, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 30 34 39 46 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 29, 30, 34, 39, 46] plays the 30 
Round 3: Jamal    holding [15, 16, 37, 41, 43, 44, 47] plays the 44 
Round 3: Claire   holding [13, 20, 22, 23, 32, 38, 42] plays the 22 
Reede wins the round 

Round 4: Reede    holding [11, 12, 31, 33, 36, 45] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 34 39 46 0 0 0 0 

39------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 29, 34, 39, 46] plays the 39 
Round 4: Jamal    holding [15, 16, 37, 41, 43, 47] plays the 15 
Round 4: Claire   holding [13, 20, 23, 32, 38, 42] plays the 42 
Claire wins the round which contains 7 penalty points

Round 5: Claire   holding [13, 20, 23, 32, 38] plays the 20 
Round 5: Reede    holding [11, 12, 31, 36, 45] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 34 46 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 29, 34, 46] plays the 34 
Round 5: Jamal    holding [16, 37, 41, 43, 47] plays the 16 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 46 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 6: Eugenius holding [17, 19, 29, 46] plays the 46 
Round 6: Jamal    holding [37, 41, 43, 47] plays the 37 
Round 6: Claire   holding [13, 23, 32, 38] plays the 32 
Round 6: Reede    holding [11, 31, 36, 45] plays the 36 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 19, 29] plays the 17 
Round 7: Jamal    holding [41, 43, 47] plays the 43 
Round 7: Claire   holding [13, 23, 38] plays the 23 
Round 7: Reede    holding [11, 31, 45] plays the 31 
Jamal wins the round which contains 4 penalty points

Round 8: Jamal    holding [41, 47] plays the 41 
Round 8: Claire   holding [13, 38] plays the 13 
Round 8: Reede    holding [11, 45] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 0 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 8: Eugenius holding [19, 29] plays the 19 
Jamal wins the round which contains 4 penalty points

Round 9: Jamal    holding [47] plays the 47 
Round 9: Claire   holding [38] plays the 38 
Round 9: Reede    holding [45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
29 0 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 9: Eugenius holding [29] plays the 29 
Jamal wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Reede (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Claire (system)
#4 with 10 penalty points Jamal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 4149230 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Jamal   : [11, 19, 22, 23, 31, 32, 33, 35, 36, 41]
Table position 1: Eugenius: [12, 17, 27, 37, 39, 40, 42, 43, 46, 49]
Table position 2: Dylan   : [13, 15, 24, 25, 29, 34, 38, 45, 47, 48]
Table position 3: Braedon : [10, 14, 16, 18, 20, 21, 26, 28, 30, 44]

Discards:
Jamal    [22, 33, 41]
Eugenius [43, 46, 49]
Dylan    [13, 24, 25]
Braedon  [14, 18, 28]

Round 0: Jamal    holding [11, 14, 18, 19, 23, 28, 31, 32, 35, 36] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
12 17 22 27 33 37 39 40 41 42 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 17, 22, 27, 33, 37, 39, 40, 41, 42] plays the 12 
Round 0: Dylan    holding [15, 29, 34, 38, 43, 45, 46, 47, 48, 49] plays the 38 
Round 0: Braedon  holding [10, 13, 16, 20, 21, 24, 25, 26, 30, 44] plays the 16 
Dylan wins the round 

Round 1: Dylan    holding [15, 29, 34, 43, 45, 46, 47, 48, 49] plays the 15 
Round 1: Braedon  holding [10, 13, 20, 21, 24, 25, 26, 30, 44] plays the 24 
Round 1: Jamal    holding [11, 18, 19, 23, 28, 31, 32, 35, 36] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 27 33 37 39 40 41 42 0 

27------------------------------------------------------------------------

Round 1: Eugenius holding [17, 22, 27, 33, 37, 39, 40, 41, 42] plays the 27 
Jamal wins the round 

Round 2: Jamal    holding [11, 18, 19, 23, 28, 31, 32, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 33 37 39 40 41 42 0 0 

40------------------------------------------------------------------------

Round 2: Eugenius holding [17, 22, 33, 37, 39, 40, 41, 42] plays the 40 
Round 2: Dylan    holding [29, 34, 43, 45, 46, 47, 48, 49] plays the 49 
Round 2: Braedon  holding [10, 13, 20, 21, 25, 26, 30, 44] plays the 25 
Dylan wins the round 

Round 3: Dylan    holding [29, 34, 43, 45, 46, 47, 48] plays the 34 
Round 3: Braedon  holding [10, 13, 20, 21, 26, 30, 44] plays the 20 
Round 3: Jamal    holding [11, 18, 19, 23, 28, 31, 32] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 33 37 39 41 42 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [17, 22, 33, 37, 39, 41, 42] plays the 22 
Dylan wins the round 

Round 4: Dylan    holding [29, 43, 45, 46, 47, 48] plays the 45 
Round 4: Braedon  holding [10, 13, 21, 26, 30, 44] plays the 21 
Round 4: Jamal    holding [11, 19, 23, 28, 31, 32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
17 33 37 39 41 42 0 0 0 0 

33------------------------------------------------------------------------

Round 4: Eugenius holding [17, 33, 37, 39, 41, 42] plays the 33 
Dylan wins the round 

Round 5: Dylan    holding [29, 43, 46, 47, 48] plays the 46 
Round 5: Braedon  holding [10, 13, 26, 30, 44] plays the 10 
Round 5: Jamal    holding [11, 19, 23, 28, 31] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
17 37 39 41 42 0 0 0 0 0 

42------------------------------------------------------------------------

Round 5: Eugenius holding [17, 37, 39, 41, 42] plays the 42 
Dylan wins the round which contains 7 penalty points

Round 6: Dylan    holding [29, 43, 47, 48] plays the 48 
Round 6: Braedon  holding [13, 26, 30, 44] plays the 44 
Round 6: Jamal    holding [11, 19, 23, 31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
17 37 39 41 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 6: Eugenius holding [17, 37, 39, 41] plays the 39 
Dylan wins the round which contains 1 penalty points

Round 7: Dylan    holding [29, 43, 47] plays the 43 
Round 7: Braedon  holding [13, 26, 30] plays the 13 
Round 7: Jamal    holding [11, 19, 23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
17 37 41 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 37, 41] plays the 17 
Dylan wins the round which contains 4 penalty points

Round 8: Dylan    holding [29, 47] plays the 47 
Round 8: Braedon  holding [26, 30] plays the 30 
Round 8: Jamal    holding [11, 19] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
37 41 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 8: Eugenius holding [37, 41] plays the 37 
Dylan wins the round which contains 3 penalty points

Round 9: Dylan    holding [29] plays the 29 
Round 9: Braedon  holding [26] plays the 26 
Round 9: Jamal    holding [19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Jamal (system)
#1 with 0 penalty points Braedon (system)
#3 with 3 penalty points Eugenius (dodo.c)
#4 with 15 penalty points Dylan (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12566390 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Marc    : [11, 15, 16, 23, 24, 26, 31, 32, 33, 37]
Table position 1: Benjamin: [13, 18, 20, 22, 30, 39, 40, 43, 46, 48]
Table position 2: Eugenius: [10, 14, 17, 21, 27, 29, 35, 36, 42, 44]
Table position 3: Nathan  : [12, 19, 25, 28, 34, 38, 41, 45, 47, 49]

Discards:
Marc     [15, 23, 26]
Benjamin [30, 40, 43]
Eugenius [36, 42, 44]
Nathan   [34, 47, 49]

Round 0: Marc     holding [11, 16, 24, 31, 32, 33, 34, 37, 47, 49] plays the 33 
Round 0: Benjamin holding [13, 15, 18, 20, 22, 23, 26, 39, 46, 48] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
10 14 17 21 27 29 30 35 40 43 

21------------------------------------------------------------------------

Round 0: Eugenius holding [10, 14, 17, 21, 27, 29, 30, 35, 40, 43] plays the 21 
Round 0: Nathan   holding [12, 19, 25, 28, 36, 38, 41, 42, 44, 45] plays the 42 
Nathan wins the round which contains 7 penalty points

Round 1: Nathan   holding [12, 19, 25, 28, 36, 38, 41, 44, 45] plays the 44 
Round 1: Marc     holding [11, 16, 24, 31, 32, 34, 37, 47, 49] plays the 16 
Round 1: Benjamin holding [13, 15, 18, 20, 22, 23, 26, 46, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
10 14 17 27 29 30 35 40 43 0 

10------------------------------------------------------------------------

Round 1: Eugenius holding [10, 14, 17, 27, 29, 30, 35, 40, 43] plays the 10 
Benjamin wins the round 

Round 2: Benjamin holding [13, 15, 18, 20, 22, 23, 26, 46] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 27 29 30 35 40 43 0 0 

14------------------------------------------------------------------------

Round 2: Eugenius holding [14, 17, 27, 29, 30, 35, 40, 43] plays the 14 
Round 2: Nathan   holding [12, 19, 25, 28, 36, 38, 41, 45] plays the 36 
Round 2: Marc     holding [11, 24, 31, 32, 34, 37, 47, 49] plays the 24 
Nathan wins the round 

Round 3: Nathan   holding [12, 19, 25, 28, 38, 41, 45] plays the 25 
Round 3: Marc     holding [11, 31, 32, 34, 37, 47, 49] plays the 31 
Round 3: Benjamin holding [13, 15, 18, 22, 23, 26, 46] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 29 30 35 40 43 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [17, 27, 29, 30, 35, 40, 43] plays the 30 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
17 27 29 35 40 43 0 0 0 0 

17------------------------------------------------------------------------

Round 4: Eugenius holding [17, 27, 29, 35, 40, 43] plays the 17 
Round 4: Nathan   holding [12, 19, 28, 38, 41, 45] plays the 41 
Round 4: Marc     holding [11, 32, 34, 37, 47, 49] plays the 47 
Round 4: Benjamin holding [13, 18, 22, 23, 26, 46] plays the 13 
Marc wins the round which contains 4 penalty points

Round 5: Marc     holding [11, 32, 34, 37, 49] plays the 37 
Round 5: Benjamin holding [18, 22, 23, 26, 46] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 35 40 43 0 0 0 0 0 

29------------------------------------------------------------------------

Round 5: Eugenius holding [27, 29, 35, 40, 43] plays the 29 
Round 5: Nathan   holding [12, 19, 28, 38, 45] plays the 19 
Marc wins the round which contains 4 penalty points

Round 6: Marc     holding [11, 32, 34, 49] plays the 11 
Round 6: Benjamin holding [18, 22, 26, 46] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
27 35 40 43 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 6: Eugenius holding [27, 35, 40, 43] plays the 43 
Round 6: Nathan   holding [12, 28, 38, 45] plays the 38 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
27 35 40 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [27, 35, 40] plays the 27 
Round 7: Nathan   holding [12, 28, 45] plays the 45 
Round 7: Marc     holding [32, 34, 49] plays the 32 
Round 7: Benjamin holding [22, 26, 46] plays the 22 
Nathan wins the round 

Round 8: Nathan   holding [12, 28] plays the 12 
Round 8: Marc     holding [34, 49] plays the 34 
Round 8: Benjamin holding [26, 46] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
35 40 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 8: Eugenius holding [35, 40] plays the 40 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Round 9: Nathan   holding [28] plays the 28 
Round 9: Marc     holding [49] plays the 49 
Round 9: Benjamin holding [46] plays the 46 
Marc wins the round 


Finishing Positions

#1 with 0 penalty points Benjamin (system)
#2 with 3 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Nathan (system)
#4 with 8 penalty points Marc (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12341381 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Andrew  : [15, 17, 27, 28, 33, 37, 41, 46, 48, 49]
Table position 1: Oscar   : [14, 16, 25, 26, 29, 31, 34, 35, 38, 44]
Table position 2: Gal     : [12, 13, 21, 23, 32, 36, 39, 40, 43, 47]
Table position 3: Eugenius: [10, 11, 18, 19, 20, 22, 24, 30, 42, 45]

Discards:
Andrew   [27, 28, 41]
Oscar    [26, 31, 34]
Gal      [13, 39, 47]
Eugenius [30, 42, 45]

Round 0: Andrew   holding [15, 17, 30, 33, 37, 42, 45, 46, 48, 49] plays the 33 
Round 0: Oscar    holding [14, 16, 25, 27, 28, 29, 35, 38, 41, 44] plays the 44 
Round 0: Gal      holding [12, 21, 23, 26, 31, 32, 34, 36, 40, 43] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 13 18 19 20 22 24 39 47 

18------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 13, 18, 19, 20, 22, 24, 39, 47] plays the 18 
Oscar wins the round 

Round 1: Oscar    holding [14, 16, 25, 27, 28, 29, 35, 38, 41] plays the 38 
Round 1: Gal      holding [12, 21, 23, 26, 31, 32, 34, 40, 43] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 13 19 20 22 24 39 47 0 

10------------------------------------------------------------------------

Round 1: Eugenius holding [10, 11, 13, 19, 20, 22, 24, 39, 47] plays the 10 
Round 1: Andrew   holding [15, 17, 30, 37, 42, 45, 46, 48, 49] plays the 48 
Andrew wins the round 

Round 2: Andrew   holding [15, 17, 30, 37, 42, 45, 46, 49] plays the 45 
Round 2: Oscar    holding [14, 16, 25, 27, 28, 29, 35, 41] plays the 35 
Round 2: Gal      holding [21, 23, 26, 31, 32, 34, 40, 43] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 20 22 24 39 47 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 19, 20, 22, 24, 39, 47] plays the 20 
Andrew wins the round 

Round 3: Andrew   holding [15, 17, 30, 37, 42, 46, 49] plays the 46 
Round 3: Oscar    holding [14, 16, 25, 27, 28, 29, 41] plays the 14 
Round 3: Gal      holding [23, 26, 31, 32, 34, 40, 43] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 22 24 39 47 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 19, 22, 24, 39, 47] plays the 22 
Andrew wins the round 

Round 4: Andrew   holding [15, 17, 30, 37, 42, 49] plays the 49 
Round 4: Oscar    holding [16, 25, 27, 28, 29, 41] plays the 28 
Round 4: Gal      holding [23, 26, 31, 34, 40, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 24 39 47 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 19, 24, 39, 47] plays the 11 
Andrew wins the round which contains 2 penalty points

Round 5: Andrew   holding [15, 17, 30, 37, 42] plays the 30 
Round 5: Oscar    holding [16, 25, 27, 29, 41] plays the 16 
Round 5: Gal      holding [23, 26, 31, 34, 40] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 24 39 47 0 0 0 0 0 

24------------------------------------------------------------------------

Round 5: Eugenius holding [13, 19, 24, 39, 47] plays the 24 
Andrew wins the round 

Round 6: Andrew   holding [15, 17, 37, 42] plays the 17 
Round 6: Oscar    holding [25, 27, 29, 41] plays the 41 
Round 6: Gal      holding [23, 31, 34, 40] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 39 47 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 19, 39, 47] plays the 13 
Oscar wins the round which contains 4 penalty points

Round 7: Oscar    holding [25, 27, 29] plays the 27 
Round 7: Gal      holding [23, 34, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
19 39 47 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 7: Eugenius holding [19, 39, 47] plays the 39 
Round 7: Andrew   holding [15, 37, 42] plays the 42 
Andrew wins the round which contains 7 penalty points

Round 8: Andrew   holding [15, 37] plays the 15 
Round 8: Oscar    holding [25, 29] plays the 25 
Round 8: Gal      holding [23, 34] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
19 47 0 0 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 8: Eugenius holding [19, 47] plays the 19 
Oscar wins the round which contains 2 penalty points

Round 9: Oscar    holding [29] plays the 29 
Round 9: Gal      holding [34] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
47 0 0 0 0 0 0 0 0 0 

47------------------------------------------------------------------------

Round 9: Eugenius holding [47] plays the 47 
Round 9: Andrew   holding [37] plays the 37 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Gal (system)
#2 with 3 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Oscar (system)
#4 with 9 penalty points Andrew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10552170 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Andrew  : [12, 16, 22, 25, 29, 31, 32, 33, 38, 42]
Table position 1: Eugenius: [15, 21, 24, 27, 30, 35, 36, 40, 41, 43]
Table position 2: Harrison: [13, 17, 18, 20, 23, 26, 34, 37, 46, 49]
Table position 3: Oscar   : [10, 11, 14, 19, 28, 39, 44, 45, 47, 48]

Discards:
Andrew   [12, 32, 42]
Eugenius [40, 41, 43]
Harrison [23, 46, 49]
Oscar    [14, 19, 44]

Round 0: Andrew   holding [14, 16, 19, 22, 25, 29, 31, 33, 38, 44] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
12 15 21 24 27 30 32 35 36 42 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 15, 21, 24, 27, 30, 32, 35, 36, 42] plays the 12 
Round 0: Harrison holding [13, 17, 18, 20, 26, 34, 37, 40, 41, 43] plays the 18 
Round 0: Oscar    holding [10, 11, 23, 28, 39, 45, 46, 47, 48, 49] plays the 48 
Oscar wins the round 

Round 1: Oscar    holding [10, 11, 23, 28, 39, 45, 46, 47, 49] plays the 28 
Round 1: Andrew   holding [14, 16, 19, 22, 25, 29, 31, 38, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
15 21 24 27 30 32 35 36 42 0 

21------------------------------------------------------------------------

Round 1: Eugenius holding [15, 21, 24, 27, 30, 32, 35, 36, 42] plays the 21 
Round 1: Harrison holding [13, 17, 20, 26, 34, 37, 40, 41, 43] plays the 34 
Andrew wins the round 

Round 2: Andrew   holding [14, 16, 19, 22, 25, 29, 31, 38] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
15 24 27 30 32 35 36 42 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [15, 24, 27, 30, 32, 35, 36, 42] plays the 24 
Round 2: Harrison holding [13, 17, 20, 26, 37, 40, 41, 43] plays the 26 
Round 2: Oscar    holding [10, 11, 23, 39, 45, 46, 47, 49] plays the 49 
Oscar wins the round 

Round 3: Oscar    holding [10, 11, 23, 39, 45, 46, 47] plays the 46 
Round 3: Andrew   holding [16, 19, 22, 25, 29, 31, 38] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
15 27 30 32 35 36 42 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [15, 27, 30, 32, 35, 36, 42] plays the 30 
Round 3: Harrison holding [13, 17, 20, 37, 40, 41, 43] plays the 40 
Oscar wins the round 

Round 4: Oscar    holding [10, 11, 23, 39, 45, 47] plays the 45 
Round 4: Andrew   holding [16, 19, 25, 29, 31, 38] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
15 27 32 35 36 42 0 0 0 0 

15------------------------------------------------------------------------

Round 4: Eugenius holding [15, 27, 32, 35, 36, 42] plays the 15 
Round 4: Harrison holding [13, 17, 20, 37, 41, 43] plays the 20 
Oscar wins the round 

Round 5: Oscar    holding [10, 11, 23, 39, 47] plays the 39 
Round 5: Andrew   holding [16, 19, 29, 31, 38] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
27 32 35 36 42 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius holding [27, 32, 35, 36, 42] plays the 27 
Round 5: Harrison holding [13, 17, 37, 41, 43] plays the 41 
Oscar wins the round which contains 2 penalty points

Round 6: Oscar    holding [10, 11, 23, 47] plays the 10 
Round 6: Andrew   holding [16, 19, 29, 38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
32 35 36 42 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 6: Eugenius holding [32, 35, 36, 42] plays the 32 
Round 6: Harrison holding [13, 17, 37, 43] plays the 17 
Andrew wins the round which contains 1 penalty points

Round 7: Andrew   holding [16, 19, 29] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
35 36 42 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 7: Eugenius holding [35, 36, 42] plays the 35 
Round 7: Harrison holding [13, 37, 43] plays the 13 
Round 7: Oscar    holding [11, 23, 47] plays the 23 
Andrew wins the round which contains 3 penalty points

Round 8: Andrew   holding [16, 19] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
36 42 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [36, 42] plays the 36 
Round 8: Harrison holding [37, 43] plays the 43 
Round 8: Oscar    holding [11, 47] plays the 47 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
42 0 0 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 9: Eugenius holding [42] plays the 42 
Round 9: Harrison holding [37] plays the 37 
Round 9: Oscar    holding [11] plays the 11 
Round 9: Andrew   holding [19] plays the 19 
Eugenius wins the round which contains 10 penalty points


Finishing Positions

#1 with 0 penalty points Harrison (system)
#2 with 2 penalty points Oscar (system)
#3 with 4 penalty points Andrew (system)
#4 with 12 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13505493 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Michael : [10, 12, 13, 15, 23, 26, 32, 34, 42, 48]
Table position 1: Finbar  : [11, 14, 18, 22, 27, 35, 36, 37, 41, 49]
Table position 2: Eugenius: [17, 20, 21, 25, 30, 31, 33, 39, 40, 45]
Table position 3: Livia   : [16, 19, 24, 28, 29, 38, 43, 44, 46, 47]

Discards:
Michael  [10, 23, 34]
Finbar   [11, 35, 49]
Eugenius [39, 40, 45]
Livia    [16, 29, 38]

Round 0: Michael  holding [12, 13, 15, 16, 26, 29, 32, 38, 42, 48] plays the 48 
Round 0: Finbar   holding [10, 14, 18, 22, 23, 27, 34, 36, 37, 41] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 20 21 25 30 31 33 35 49 

20------------------------------------------------------------------------

Round 0: Eugenius holding [11, 17, 20, 21, 25, 30, 31, 33, 35, 49] plays the 20 
Round 0: Livia    holding [19, 24, 28, 39, 40, 43, 44, 45, 46, 47] plays the 44 
Michael wins the round 

Round 1: Michael  holding [12, 13, 15, 16, 26, 29, 32, 38, 42] plays the 12 
Round 1: Finbar   holding [10, 18, 22, 23, 27, 34, 36, 37, 41] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 21 25 30 31 33 35 49 0 

21------------------------------------------------------------------------

Round 1: Eugenius holding [11, 17, 21, 25, 30, 31, 33, 35, 49] plays the 21 
Round 1: Livia    holding [19, 24, 28, 39, 40, 43, 45, 46, 47] plays the 39 
Livia wins the round 

Round 2: Livia    holding [19, 24, 28, 40, 43, 45, 46, 47] plays the 28 
Round 2: Michael  holding [13, 15, 16, 26, 29, 32, 38, 42] plays the 38 
Round 2: Finbar   holding [10, 18, 22, 23, 27, 36, 37, 41] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 25 30 31 33 35 49 0 0 

30------------------------------------------------------------------------

Round 2: Eugenius holding [11, 17, 25, 30, 31, 33, 35, 49] plays the 30 
Michael wins the round 

Round 3: Michael  holding [13, 15, 16, 26, 29, 32, 42] plays the 32 
Round 3: Finbar   holding [10, 18, 23, 27, 36, 37, 41] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 25 31 33 35 49 0 0 0 

11 chah------------------------------------------------------------------------

Round 3: Eugenius holding [11, 17, 25, 31, 33, 35, 49] plays the 11 
Round 3: Livia    holding [19, 24, 40, 43, 45, 46, 47] plays the 46 
Livia wins the round which contains 1 penalty points

Round 4: Livia    holding [19, 24, 40, 43, 45, 47] plays the 43 
Round 4: Michael  holding [13, 15, 16, 26, 29, 42] plays the 29 
Round 4: Finbar   holding [18, 23, 27, 36, 37, 41] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 31 33 35 49 0 0 0 0 

17------------------------------------------------------------------------

Round 4: Eugenius holding [17, 25, 31, 33, 35, 49] plays the 17 
Livia wins the round which contains 4 penalty points

Round 5: Livia    holding [19, 24, 40, 45, 47] plays the 45 
Round 5: Michael  holding [13, 15, 16, 26, 42] plays the 15 
Round 5: Finbar   holding [18, 23, 27, 36, 41] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
25 31 33 35 49 0 0 0 0 0 

25------------------------------------------------------------------------

Round 5: Eugenius holding [25, 31, 33, 35, 49] plays the 25 
Livia wins the round 

Round 6: Livia    holding [19, 24, 40, 47] plays the 47 
Round 6: Michael  holding [13, 16, 26, 42] plays the 13 
Round 6: Finbar   holding [18, 23, 36, 41] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
31 33 35 49 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 6: Eugenius holding [31, 33, 35, 49] plays the 31 
Livia wins the round which contains 4 penalty points

Round 7: Livia    holding [19, 24, 40] plays the 19 
Round 7: Michael  holding [16, 26, 42] plays the 26 
Round 7: Finbar   holding [18, 36, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
33 35 49 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 7: Eugenius holding [33, 35, 49] plays the 33 
Finbar wins the round which contains 2 penalty points

Round 8: Finbar   holding [18, 36] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
35 49 0 0 0 0 0 0 0 0 

35 chah------------------------------------------------------------------------

Round 8: Eugenius holding [35, 49] plays the 35 
Round 8: Livia    holding [24, 40] plays the 40 
Round 8: Michael  holding [16, 42] plays the 16 
Livia wins the round 

Round 9: Livia    holding [24] plays the 24 
Round 9: Michael  holding [42] plays the 42 
Round 9: Finbar   holding [18] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49 chah------------------------------------------------------------------------

Round 9: Eugenius holding [49] plays the 49 
Michael wins the round which contains 7 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 2 penalty points Finbar (system)
#3 with 7 penalty points Michael (system)
#4 with 9 penalty points Livia (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11755087 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Trung   : [10, 11, 20, 23, 25, 26, 44, 45, 47, 49]
Table position 1: Sabrina : [13, 18, 24, 27, 29, 32, 38, 39, 43, 48]
Table position 2: Mitchell: [16, 17, 19, 21, 22, 28, 30, 34, 37, 42]
Table position 3: Eugenius: [12, 14, 15, 31, 33, 35, 36, 40, 41, 46]

Discards:
Trung    [26, 45, 49]
Sabrina  [29, 32, 38]
Mitchell [19, 21, 28]
Eugenius [40, 41, 46]

Round 0: Trung    holding [10, 11, 20, 23, 25, 40, 41, 44, 46, 47] plays the 46 
Round 0: Sabrina  holding [13, 18, 24, 26, 27, 39, 43, 45, 48, 49] plays the 48 
Round 0: Mitchell holding [16, 17, 22, 29, 30, 32, 34, 37, 38, 42] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 15 19 21 28 31 33 35 36 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 14, 15, 19, 21, 28, 31, 33, 35, 36] plays the 12 
Sabrina wins the round 

Round 1: Sabrina  holding [13, 18, 24, 26, 27, 39, 43, 45, 49] plays the 49 
Round 1: Mitchell holding [16, 17, 29, 30, 32, 34, 37, 38, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
14 15 19 21 28 31 33 35 36 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 15, 19, 21, 28, 31, 33, 35, 36] plays the 14 
Round 1: Trung    holding [10, 11, 20, 23, 25, 40, 41, 44, 47] plays the 47 
Sabrina wins the round which contains 8 penalty points

Round 2: Sabrina  holding [13, 18, 24, 26, 27, 39, 43, 45] plays the 26 
Round 2: Mitchell holding [16, 17, 29, 30, 32, 34, 37, 38] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
15 19 21 28 31 33 35 36 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [15, 19, 21, 28, 31, 33, 35, 36] plays the 28 
Round 2: Trung    holding [10, 11, 20, 23, 25, 40, 41, 44] plays the 20 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
15 19 21 31 33 35 36 0 0 0 

15------------------------------------------------------------------------

Round 3: Eugenius holding [15, 19, 21, 31, 33, 35, 36] plays the 15 
Round 3: Trung    holding [10, 11, 23, 25, 40, 41, 44] plays the 40 
Round 3: Sabrina  holding [13, 18, 24, 27, 39, 43, 45] plays the 24 
Round 3: Mitchell holding [17, 29, 30, 32, 34, 37, 38] plays the 30 
Trung wins the round 

Round 4: Trung    holding [10, 11, 23, 25, 41, 44] plays the 41 
Round 4: Sabrina  holding [13, 18, 27, 39, 43, 45] plays the 43 
Round 4: Mitchell holding [17, 29, 32, 34, 37, 38] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
19 21 31 33 35 36 0 0 0 0 

19------------------------------------------------------------------------

Round 4: Eugenius holding [19, 21, 31, 33, 35, 36] plays the 19 
Sabrina wins the round which contains 4 penalty points

Round 5: Sabrina  holding [13, 18, 27, 39, 45] plays the 39 
Round 5: Mitchell holding [17, 32, 34, 37, 38] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
21 31 33 35 36 0 0 0 0 0 

21------------------------------------------------------------------------

Round 5: Eugenius holding [21, 31, 33, 35, 36] plays the 21 
Round 5: Trung    holding [10, 11, 23, 25, 44] plays the 11 
Sabrina wins the round which contains 1 penalty points

Round 6: Sabrina  holding [13, 18, 27, 45] plays the 27 
Round 6: Mitchell holding [17, 34, 37, 38] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
31 33 35 36 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 6: Eugenius holding [31, 33, 35, 36] plays the 33 
Round 6: Trung    holding [10, 23, 25, 44] plays the 44 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
31 35 36 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [31, 35, 36] plays the 31 
Round 7: Trung    holding [10, 23, 25] plays the 23 
Round 7: Sabrina  holding [13, 18, 45] plays the 13 
Round 7: Mitchell holding [34, 37, 38] plays the 37 
Mitchell wins the round which contains 4 penalty points

Round 8: Mitchell holding [34, 38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
35 36 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [35, 36] plays the 36 
Round 8: Trung    holding [10, 25] plays the 10 
Round 8: Sabrina  holding [18, 45] plays the 18 
Mitchell wins the round 

Round 9: Mitchell holding [34] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35 chah------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Round 9: Trung    holding [25] plays the 25 
Round 9: Sabrina  holding [45] plays the 45 
Mitchell wins the round 


Finishing Positions

#1 with 0 penalty points Trung (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Mitchell (system)
#4 with 13 penalty points Sabrina (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1979974 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Zachary : [13, 15, 19, 34, 35, 36, 39, 43, 46, 49]
Table position 1: Eugenius: [14, 20, 24, 25, 26, 29, 31, 33, 40, 48]
Table position 2: Emily   : [12, 16, 17, 23, 27, 38, 41, 42, 44, 47]
Table position 3: Marc    : [10, 11, 18, 21, 22, 28, 30, 32, 37, 45]

Discards:
Zachary  [19, 39, 43]
Eugenius [33, 40, 48]
Emily    [16, 17, 23]
Marc     [18, 32, 37]

Round 0: Zachary  holding [13, 15, 18, 32, 34, 35, 36, 37, 46, 49] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
14 19 20 24 25 26 29 31 39 43 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 19, 20, 24, 25, 26, 29, 31, 39, 43] plays the 14 
Round 0: Emily    holding [12, 27, 33, 38, 40, 41, 42, 44, 47, 48] plays the 48 
Round 0: Marc     holding [10, 11, 16, 17, 21, 22, 23, 28, 30, 45] plays the 22 
Emily wins the round 

Round 1: Emily    holding [12, 27, 33, 38, 40, 41, 42, 44, 47] plays the 40 
Round 1: Marc     holding [10, 11, 16, 17, 21, 23, 28, 30, 45] plays the 16 
Round 1: Zachary  holding [13, 15, 32, 34, 35, 36, 37, 46, 49] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
19 20 24 25 26 29 31 39 43 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [19, 20, 24, 25, 26, 29, 31, 39, 43] plays the 20 
Emily wins the round 

Round 2: Emily    holding [12, 27, 33, 38, 41, 42, 44, 47] plays the 42 
Round 2: Marc     holding [10, 11, 17, 21, 23, 28, 30, 45] plays the 30 
Round 2: Zachary  holding [13, 15, 32, 34, 35, 37, 46, 49] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
19 24 25 26 29 31 39 43 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [19, 24, 25, 26, 29, 31, 39, 43] plays the 24 
Emily wins the round which contains 7 penalty points

Round 3: Emily    holding [12, 27, 33, 38, 41, 44, 47] plays the 12 
Round 3: Marc     holding [10, 11, 17, 21, 23, 28, 45] plays the 21 
Round 3: Zachary  holding [13, 15, 32, 34, 37, 46, 49] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
19 25 26 29 31 39 43 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [19, 25, 26, 29, 31, 39, 43] plays the 26 
Zachary wins the round 

Round 4: Zachary  holding [13, 15, 34, 37, 46, 49] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
19 25 29 31 39 43 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 4: Eugenius holding [19, 25, 29, 31, 39, 43] plays the 19 
Round 4: Emily    holding [27, 33, 38, 41, 44, 47] plays the 38 
Round 4: Marc     holding [10, 11, 17, 23, 28, 45] plays the 28 
Emily wins the round which contains 1 penalty points

Round 5: Emily    holding [27, 33, 41, 44, 47] plays the 47 
Round 5: Marc     holding [10, 11, 17, 23, 45] plays the 17 
Round 5: Zachary  holding [13, 15, 37, 46, 49] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 31 39 43 0 0 0 0 0 

29------------------------------------------------------------------------

Round 5: Eugenius holding [25, 29, 31, 39, 43] plays the 29 
Emily wins the round which contains 4 penalty points

Round 6: Emily    holding [27, 33, 41, 44] plays the 41 
Round 6: Marc     holding [10, 11, 23, 45] plays the 11 
Round 6: Zachary  holding [15, 37, 46, 49] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
25 31 39 43 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 6: Eugenius holding [25, 31, 39, 43] plays the 31 
Emily wins the round which contains 4 penalty points

Round 7: Emily    holding [27, 33, 44] plays the 44 
Round 7: Marc     holding [10, 23, 45] plays the 10 
Round 7: Zachary  holding [15, 46, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
25 39 43 0 0 0 0 0 0 0 

25 chah------------------------------------------------------------------------

Round 7: Eugenius holding [25, 39, 43] plays the 25 
Zachary wins the round 

Round 8: Zachary  holding [15, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
39 43 0 0 0 0 0 0 0 0 

39 chah------------------------------------------------------------------------

Round 8: Eugenius holding [39, 43] plays the 39 
Round 8: Emily    holding [27, 33] plays the 27 
Round 8: Marc     holding [23, 45] plays the 45 
Zachary wins the round 

Round 9: Zachary  holding [15] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43 chah------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Round 9: Emily    holding [33] plays the 33 
Round 9: Marc     holding [23] plays the 23 
Emily wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Zachary (system)
#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Marc (system)
#4 with 18 penalty points Emily (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 8953098 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 20, 22, 24, 27, 29, 31, 32, 41, 44]
Table position 1: Nathan  : [14, 21, 23, 25, 33, 35, 39, 42, 47, 48]
Table position 2: George  : [12, 13, 15, 16, 17, 18, 28, 30, 37, 46]
Table position 3: Emily   : [10, 19, 26, 34, 36, 38, 40, 43, 45, 49]

Discards:
Eugenius [32, 41, 44]
Nathan   [14, 21, 35]
George   [15, 30, 46]
Emily    [43, 45, 49]


Debug output from Eugenius
------------------------------------------------------------------------
11 20 22 24 27 29 31 43 45 49 

20------------------------------------------------------------------------

Round 0: Eugenius holding [11, 20, 22, 24, 27, 29, 31, 43, 45, 49] plays the 20 
Round 0: Nathan   holding [23, 25, 32, 33, 39, 41, 42, 44, 47, 48] plays the 32 
Round 0: George   holding [12, 13, 14, 16, 17, 18, 21, 28, 35, 37] plays the 12 
Round 0: Emily    holding [10, 15, 19, 26, 30, 34, 36, 38, 40, 46] plays the 40 
Emily wins the round 

Round 1: Emily    holding [10, 15, 19, 26, 30, 34, 36, 38, 46] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 22 24 27 29 31 43 45 49 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [11, 22, 24, 27, 29, 31, 43, 45, 49] plays the 22 
Round 1: Nathan   holding [23, 25, 33, 39, 41, 42, 44, 47, 48] plays the 44 
Round 1: George   holding [13, 14, 16, 17, 18, 21, 28, 35, 37] plays the 28 
Nathan wins the round 

Round 2: Nathan   holding [23, 25, 33, 39, 41, 42, 47, 48] plays the 25 
Round 2: George   holding [13, 14, 16, 17, 18, 21, 35, 37] plays the 35 
Round 2: Emily    holding [10, 15, 19, 30, 34, 36, 38, 46] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
11 24 27 29 31 43 45 49 0 0 

45------------------------------------------------------------------------

Round 2: Eugenius holding [11, 24, 27, 29, 31, 43, 45, 49] plays the 45 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 24 27 29 31 43 49 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [11, 24, 27, 29, 31, 43, 49] plays the 24 
Round 3: Nathan   holding [23, 33, 39, 41, 42, 47, 48] plays the 39 
Round 3: George   holding [13, 14, 16, 17, 18, 21, 37] plays the 21 
Round 3: Emily    holding [10, 15, 19, 34, 36, 38, 46] plays the 38 
Nathan wins the round 

Round 4: Nathan   holding [23, 33, 41, 42, 47, 48] plays the 33 
Round 4: George   holding [13, 14, 16, 17, 18, 37] plays the 18 
Round 4: Emily    holding [10, 15, 19, 34, 36, 46] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 27 29 31 43 49 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [11, 27, 29, 31, 43, 49] plays the 27 
Nathan wins the round 

Round 5: Nathan   holding [23, 41, 42, 47, 48] plays the 48 
Round 5: George   holding [13, 14, 16, 17, 37] plays the 16 
Round 5: Emily    holding [10, 19, 34, 36, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 29 31 43 49 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 29, 31, 43, 49] plays the 11 
Nathan wins the round which contains 1 penalty points

Round 6: Nathan   holding [23, 41, 42, 47] plays the 42 
Round 6: George   holding [13, 14, 17, 37] plays the 14 
Round 6: Emily    holding [10, 19, 34, 36] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 43 49 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 6: Eugenius holding [29, 31, 43, 49] plays the 49 
Eugenius wins the round which contains 7 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
29 31 43 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 43] plays the 29 
Round 7: Nathan   holding [23, 41, 47] plays the 41 
Round 7: George   holding [13, 17, 37] plays the 13 
Round 7: Emily    holding [19, 34, 36] plays the 19 
Nathan wins the round which contains 4 penalty points

Round 8: Nathan   holding [23, 47] plays the 23 
Round 8: George   holding [17, 37] plays the 17 
Round 8: Emily    holding [34, 36] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
31 43 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 43] plays the 31 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Round 9: Nathan   holding [47] plays the 47 
Round 9: George   holding [37] plays the 37 
Round 9: Emily    holding [36] plays the 36 
Nathan wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points George (system)
#1 with 0 penalty points Emily (system)
#3 with 8 penalty points Nathan (system)
#4 with 10 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3937195 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Minh    : [10, 13, 15, 24, 27, 37, 39, 42, 44, 47]
Table position 1: Dean    : [12, 19, 20, 21, 28, 31, 35, 41, 45, 49]
Table position 2: Nicholas: [17, 18, 25, 26, 29, 32, 34, 38, 46, 48]
Table position 3: Eugenius: [11, 14, 16, 22, 23, 30, 33, 36, 40, 43]

Discards:
Minh     [15, 37, 47]
Dean     [20, 28, 35]
Nicholas [34, 38, 48]
Eugenius [36, 40, 43]

Round 0: Minh     holding [10, 13, 24, 27, 36, 39, 40, 42, 43, 44] plays the 42 
Round 0: Dean     holding [12, 15, 19, 21, 31, 37, 41, 45, 47, 49] plays the 12 
Round 0: Nicholas holding [17, 18, 20, 25, 26, 28, 29, 32, 35, 46] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 16 22 23 30 33 34 38 48 

14------------------------------------------------------------------------

Round 0: Eugenius holding [11, 14, 16, 22, 23, 30, 33, 34, 38, 48] plays the 14 
Minh wins the round which contains 7 penalty points

Round 1: Minh     holding [10, 13, 24, 27, 36, 39, 40, 43, 44] plays the 24 
Round 1: Dean     holding [15, 19, 21, 31, 37, 41, 45, 47, 49] plays the 21 
Round 1: Nicholas holding [17, 20, 25, 26, 28, 29, 32, 35, 46] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 22 23 30 33 34 38 48 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [11, 16, 22, 23, 30, 33, 34, 38, 48] plays the 16 
Nicholas wins the round 

Round 2: Nicholas holding [17, 20, 25, 26, 29, 32, 35, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 22 23 30 33 34 38 48 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [11, 22, 23, 30, 33, 34, 38, 48] plays the 22 
Round 2: Minh     holding [10, 13, 27, 36, 39, 40, 43, 44] plays the 10 
Round 2: Dean     holding [15, 19, 31, 37, 41, 45, 47, 49] plays the 15 
Nicholas wins the round 

Round 3: Nicholas holding [17, 20, 25, 26, 29, 32, 35] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 30 33 34 38 48 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [11, 23, 30, 33, 34, 38, 48] plays the 30 
Round 3: Minh     holding [13, 27, 36, 39, 40, 43, 44] plays the 40 
Round 3: Dean     holding [19, 31, 37, 41, 45, 47, 49] plays the 45 
Dean wins the round 

Round 4: Dean     holding [19, 31, 37, 41, 47, 49] plays the 49 
Round 4: Nicholas holding [17, 20, 26, 29, 32, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 33 34 38 48 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 4: Eugenius holding [11, 23, 33, 34, 38, 48] plays the 11 
Round 4: Minh     holding [13, 27, 36, 39, 43, 44] plays the 13 
Dean wins the round which contains 2 penalty points

Round 5: Dean     holding [19, 31, 37, 41, 47] plays the 19 
Round 5: Nicholas holding [17, 20, 26, 29, 32] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
23 33 34 38 48 0 0 0 0 0 

23------------------------------------------------------------------------

Round 5: Eugenius holding [23, 33, 34, 38, 48] plays the 23 
Round 5: Minh     holding [27, 36, 39, 43, 44] plays the 43 
Minh wins the round which contains 4 penalty points

Round 6: Minh     holding [27, 36, 39, 44] plays the 39 
Round 6: Dean     holding [31, 37, 41, 47] plays the 31 
Round 6: Nicholas holding [20, 26, 29, 32] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
33 34 38 48 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 6: Eugenius holding [33, 34, 38, 48] plays the 33 
Minh wins the round which contains 1 penalty points

Round 7: Minh     holding [27, 36, 44] plays the 27 
Round 7: Dean     holding [37, 41, 47] plays the 47 
Round 7: Nicholas holding [20, 29, 32] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
34 38 48 0 0 0 0 0 0 0 

48------------------------------------------------------------------------

Round 7: Eugenius holding [34, 38, 48] plays the 48 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
34 38 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 8: Eugenius holding [34, 38] plays the 34 
Round 8: Minh     holding [36, 44] plays the 44 
Round 8: Dean     holding [37, 41] plays the 37 
Round 8: Nicholas holding [20, 32] plays the 32 
Minh wins the round which contains 1 penalty points

Round 9: Minh     holding [36] plays the 36 
Round 9: Dean     holding [41] plays the 41 
Round 9: Nicholas holding [20] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Nicholas (system)
#2 with 2 penalty points Dean (system)
#3 with 3 penalty points Eugenius (dodo.c)
#4 with 13 penalty points Minh (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5669561 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Vincent  : [10, 14, 21, 24, 27, 32, 36, 37, 38, 41]
Table position 1: Gal      : [17, 18, 29, 30, 34, 43, 45, 46, 47, 48]
Table position 2: Elizabeth: [11, 13, 16, 19, 20, 22, 25, 28, 33, 44]
Table position 3: Eugenius : [12, 15, 23, 26, 31, 35, 39, 40, 42, 49]

Discards:
Vincent   [14, 21, 36]
Gal       [18, 46, 48]
Elizabeth [13, 19, 28]
Eugenius  [40, 42, 49]

Round 0: Vincent   holding [10, 24, 27, 32, 37, 38, 40, 41, 42, 49] plays the 10 
Round 0: Gal       holding [14, 17, 21, 29, 30, 34, 36, 43, 45, 47] plays the 34 
Round 0: Elizabeth holding [11, 16, 18, 20, 22, 25, 33, 44, 46, 48] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 15 19 23 26 28 31 35 39 

12------------------------------------------------------------------------

Round 0: Eugenius  holding [12, 13, 15, 19, 23, 26, 28, 31, 35, 39] plays the 12 
Gal wins the round 

Round 1: Gal       holding [14, 17, 21, 29, 30, 36, 43, 45, 47] plays the 45 
Round 1: Elizabeth holding [11, 16, 18, 20, 25, 33, 44, 46, 48] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 19 23 26 28 31 35 39 0 

15------------------------------------------------------------------------

Round 1: Eugenius  holding [13, 15, 19, 23, 26, 28, 31, 35, 39] plays the 15 
Round 1: Vincent   holding [24, 27, 32, 37, 38, 40, 41, 42, 49] plays the 40 
Gal wins the round 

Round 2: Gal       holding [14, 17, 21, 29, 30, 36, 43, 47] plays the 30 
Round 2: Elizabeth holding [11, 16, 18, 20, 33, 44, 46, 48] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 23 26 28 31 35 39 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius  holding [13, 19, 23, 26, 28, 31, 35, 39] plays the 26 
Round 2: Vincent   holding [24, 27, 32, 37, 38, 41, 42, 49] plays the 42 
Vincent wins the round which contains 7 penalty points

Round 3: Vincent   holding [24, 27, 32, 37, 38, 41, 49] plays the 27 
Round 3: Gal       holding [14, 17, 21, 29, 36, 43, 47] plays the 36 
Round 3: Elizabeth holding [11, 16, 18, 33, 44, 46, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 23 28 31 35 39 0 0 0 

39------------------------------------------------------------------------

Round 3: Eugenius  holding [13, 19, 23, 28, 31, 35, 39] plays the 39 
Elizabeth wins the round 

Round 4: Elizabeth holding [11, 16, 18, 33, 44, 46] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 23 28 31 35 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 4: Eugenius  holding [13, 19, 23, 28, 31, 35] plays the 13 
Round 4: Vincent   holding [24, 32, 37, 38, 41, 49] plays the 24 
Round 4: Gal       holding [14, 17, 21, 29, 43, 47] plays the 21 
Elizabeth wins the round which contains 1 penalty points

Round 5: Elizabeth holding [11, 16, 18, 44, 46] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 28 31 35 0 0 0 0 0 

28------------------------------------------------------------------------

Round 5: Eugenius  holding [19, 23, 28, 31, 35] plays the 28 
Round 5: Vincent   holding [32, 37, 38, 41, 49] plays the 38 
Round 5: Gal       holding [14, 17, 29, 43, 47] plays the 14 
Vincent wins the round 

Round 6: Vincent   holding [32, 37, 41, 49] plays the 41 
Round 6: Gal       holding [17, 29, 43, 47] plays the 43 
Round 6: Elizabeth holding [11, 16, 44, 46] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 31 35 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius  holding [19, 23, 31, 35] plays the 19 
Gal wins the round which contains 4 penalty points

Round 7: Gal       holding [17, 29, 47] plays the 47 
Round 7: Elizabeth holding [16, 44, 46] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 35 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius  holding [23, 31, 35] plays the 23 
Round 7: Vincent   holding [32, 37, 49] plays the 37 
Gal wins the round which contains 3 penalty points

Round 8: Gal       holding [17, 29] plays the 29 
Round 8: Elizabeth holding [44, 46] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
31 35 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius  holding [31, 35] plays the 31 
Round 8: Vincent   holding [32, 49] plays the 49 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 9: Eugenius  holding [35] plays the 35 
Round 9: Vincent   holding [32] plays the 32 
Round 9: Gal       holding [17] plays the 17 
Round 9: Elizabeth holding [46] plays the 46 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 1 penalty points Elizabeth (system)
#2 with 3 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Vincent (system)
#3 with 7 penalty points Gal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7935282 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: David   : [10, 24, 30, 31, 35, 39, 43, 46, 47, 48]
Table position 1: Finbar  : [15, 16, 17, 18, 23, 26, 36, 41, 44, 49]
Table position 2: Matthew : [12, 14, 22, 25, 28, 29, 34, 37, 38, 40]
Table position 3: Eugenius: [11, 13, 19, 20, 21, 27, 32, 33, 42, 45]

Discards:
David    [24, 30, 47]
Finbar   [15, 18, 49]
Matthew  [12, 28, 40]
Eugenius [33, 42, 45]

Round 0: David    holding [10, 31, 33, 35, 39, 42, 43, 45, 46, 48] plays the 35 
Round 0: Finbar   holding [16, 17, 23, 24, 26, 30, 36, 41, 44, 47] plays the 30 
Round 0: Matthew  holding [14, 15, 18, 22, 25, 29, 34, 37, 38, 49] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 13 19 20 21 27 28 32 40 

20------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 13, 19, 20, 21, 27, 28, 32, 40] plays the 20 
David wins the round 

Round 1: David    holding [10, 31, 33, 39, 42, 43, 45, 46, 48] plays the 42 
Round 1: Finbar   holding [16, 17, 23, 24, 26, 36, 41, 44, 47] plays the 26 
Round 1: Matthew  holding [14, 15, 18, 22, 29, 34, 37, 38, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 13 19 21 27 28 32 40 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [11, 12, 13, 19, 21, 27, 28, 32, 40] plays the 12 
David wins the round which contains 7 penalty points

Round 2: David    holding [10, 31, 33, 39, 43, 45, 46, 48] plays the 33 
Round 2: Finbar   holding [16, 17, 23, 24, 36, 41, 44, 47] plays the 24 
Round 2: Matthew  holding [14, 18, 22, 29, 34, 37, 38, 49] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 21 27 28 32 40 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 19, 21, 27, 28, 32, 40] plays the 21 
David wins the round 

Round 3: David    holding [10, 31, 39, 43, 45, 46, 48] plays the 45 
Round 3: Finbar   holding [16, 17, 23, 36, 41, 44, 47] plays the 36 
Round 3: Matthew  holding [14, 18, 29, 34, 37, 38, 49] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 27 28 32 40 0 0 0 

27------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 19, 27, 28, 32, 40] plays the 27 
David wins the round 

Round 4: David    holding [10, 31, 39, 43, 46, 48] plays the 48 
Round 4: Finbar   holding [16, 17, 23, 41, 44, 47] plays the 16 
Round 4: Matthew  holding [14, 29, 34, 37, 38, 49] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 28 32 40 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 19, 28, 32, 40] plays the 28 
David wins the round 

Round 5: David    holding [10, 31, 39, 43, 46] plays the 39 
Round 5: Finbar   holding [17, 23, 41, 44, 47] plays the 23 
Round 5: Matthew  holding [14, 29, 37, 38, 49] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 32 40 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 19, 32, 40] plays the 11 
David wins the round which contains 3 penalty points

Round 6: David    holding [10, 31, 43, 46] plays the 43 
Round 6: Finbar   holding [17, 41, 44, 47] plays the 41 
Round 6: Matthew  holding [14, 29, 38, 49] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 32 40 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 19, 32, 40] plays the 13 
David wins the round which contains 4 penalty points

Round 7: David    holding [10, 31, 46] plays the 46 
Round 7: Finbar   holding [17, 44, 47] plays the 44 
Round 7: Matthew  holding [14, 38, 49] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
19 32 40 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 7: Eugenius holding [19, 32, 40] plays the 32 
David wins the round 

Round 8: David    holding [10, 31] plays the 31 
Round 8: Finbar   holding [17, 47] plays the 17 
Round 8: Matthew  holding [38, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
19 40 0 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 8: Eugenius holding [19, 40] plays the 19 
David wins the round which contains 3 penalty points

Round 9: David    holding [10] plays the 10 
Round 9: Finbar   holding [47] plays the 47 
Round 9: Matthew  holding [38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 9: Eugenius holding [40] plays the 40 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Finbar (system)
#1 with 0 penalty points Matthew (system)
#3 with 1 penalty points Eugenius (dodo.c)
#4 with 17 penalty points David (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14017684 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Jamal   : [13, 14, 16, 17, 22, 23, 31, 41, 43, 46]
Table position 1: Heather : [18, 19, 21, 27, 28, 33, 35, 36, 39, 45]
Table position 2: Eugenius: [12, 25, 29, 30, 37, 42, 44, 47, 48, 49]
Table position 3: Sabrina : [10, 11, 15, 20, 24, 26, 32, 34, 38, 40]

Discards:
Jamal    [16, 22, 41]
Heather  [18, 28, 36]
Eugenius [47, 48, 49]
Sabrina  [32, 34, 38]

Round 0: Jamal    holding [13, 14, 17, 23, 31, 32, 34, 38, 43, 46] plays the 14 
Round 0: Heather  holding [16, 19, 21, 22, 27, 33, 35, 39, 41, 45] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
12 18 25 28 29 30 36 37 42 44 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 18, 25, 28, 29, 30, 36, 37, 42, 44] plays the 12 
Round 0: Sabrina  holding [10, 11, 15, 20, 24, 26, 40, 47, 48, 49] plays the 10 
Heather wins the round 

Round 1: Heather  holding [16, 19, 21, 27, 33, 35, 39, 41, 45] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
18 25 28 29 30 36 37 42 44 0 

25------------------------------------------------------------------------

Round 1: Eugenius holding [18, 25, 28, 29, 30, 36, 37, 42, 44] plays the 25 
Round 1: Sabrina  holding [11, 15, 20, 24, 26, 40, 47, 48, 49] plays the 49 
Round 1: Jamal    holding [13, 17, 23, 31, 32, 34, 38, 43, 46] plays the 23 
Sabrina wins the round which contains 1 penalty points

Round 2: Sabrina  holding [11, 15, 20, 24, 26, 40, 47, 48] plays the 47 
Round 2: Jamal    holding [13, 17, 31, 32, 34, 38, 43, 46] plays the 43 
Round 2: Heather  holding [16, 19, 21, 27, 33, 39, 41, 45] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
18 28 29 30 36 37 42 44 0 0 

29------------------------------------------------------------------------

Round 2: Eugenius holding [18, 28, 29, 30, 36, 37, 42, 44] plays the 29 
Sabrina wins the round which contains 4 penalty points

Round 3: Sabrina  holding [11, 15, 20, 24, 26, 40, 48] plays the 20 
Round 3: Jamal    holding [13, 17, 31, 32, 34, 38, 46] plays the 38 
Round 3: Heather  holding [16, 21, 27, 33, 39, 41, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
18 28 30 36 37 42 44 0 0 0 

18------------------------------------------------------------------------

Round 3: Eugenius holding [18, 28, 30, 36, 37, 42, 44] plays the 18 
Heather wins the round 

Round 4: Heather  holding [16, 21, 27, 33, 39, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
28 30 36 37 42 44 0 0 0 0 

37------------------------------------------------------------------------

Round 4: Eugenius holding [28, 30, 36, 37, 42, 44] plays the 37 
Round 4: Sabrina  holding [11, 15, 24, 26, 40, 48] plays the 11 
Round 4: Jamal    holding [13, 17, 31, 32, 34, 46] plays the 17 
Heather wins the round which contains 4 penalty points

Round 5: Heather  holding [16, 21, 27, 33, 39] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
28 30 36 42 44 0 0 0 0 0 

30------------------------------------------------------------------------

Round 5: Eugenius holding [28, 30, 36, 42, 44] plays the 30 
Round 5: Sabrina  holding [15, 24, 26, 40, 48] plays the 48 
Round 5: Jamal    holding [13, 31, 32, 34, 46] plays the 46 
Sabrina wins the round 

Round 6: Sabrina  holding [15, 24, 26, 40] plays the 26 
Round 6: Jamal    holding [13, 31, 32, 34] plays the 32 
Round 6: Heather  holding [16, 21, 27, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
28 36 42 44 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 6: Eugenius holding [28, 36, 42, 44] plays the 28 
Heather wins the round 

Round 7: Heather  holding [16, 21, 27] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
36 42 44 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 7: Eugenius holding [36, 42, 44] plays the 36 
Round 7: Sabrina  holding [15, 24, 40] plays the 40 
Round 7: Jamal    holding [13, 31, 34] plays the 34 
Sabrina wins the round 

Round 8: Sabrina  holding [15, 24] plays the 24 
Round 8: Jamal    holding [13, 31] plays the 31 
Round 8: Heather  holding [21, 27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
42 44 0 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 8: Eugenius holding [42, 44] plays the 42 
Eugenius wins the round which contains 8 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
44 0 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 9: Eugenius holding [44] plays the 44 
Round 9: Sabrina  holding [15] plays the 15 
Round 9: Jamal    holding [13] plays the 13 
Round 9: Heather  holding [21] plays the 21 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Jamal (system)
#2 with 4 penalty points Heather (system)
#3 with 5 penalty points Sabrina (system)
#4 with 9 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3186144 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 14, 16, 18, 24, 29, 32, 40, 41, 44]
Table position 1: Zachary : [11, 15, 19, 20, 21, 25, 27, 33, 42, 48]
Table position 2: Costa   : [12, 17, 23, 30, 31, 35, 39, 46, 47, 49]
Table position 3: Heather : [13, 22, 26, 28, 34, 36, 37, 38, 43, 45]

Discards:
Eugenius [40, 41, 44]
Zachary  [11, 21, 27]
Costa    [17, 35, 47]
Heather  [13, 38, 43]


Debug output from Eugenius
------------------------------------------------------------------------
10 13 14 16 18 24 29 32 38 43 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 13, 14, 16, 18, 24, 29, 32, 38, 43] plays the 10 
Round 0: Zachary  holding [15, 19, 20, 25, 33, 40, 41, 42, 44, 48] plays the 25 
Round 0: Costa    holding [11, 12, 21, 23, 27, 30, 31, 39, 46, 49] plays the 12 
Round 0: Heather  holding [17, 22, 26, 28, 34, 35, 36, 37, 45, 47] plays the 45 
Heather wins the round 

Round 1: Heather  holding [17, 22, 26, 28, 34, 35, 36, 37, 47] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
13 14 16 18 24 29 32 38 43 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [13, 14, 16, 18, 24, 29, 32, 38, 43] plays the 14 
Round 1: Zachary  holding [15, 19, 20, 33, 40, 41, 42, 44, 48] plays the 15 
Round 1: Costa    holding [11, 21, 23, 27, 30, 31, 39, 46, 49] plays the 49 
Costa wins the round 

Round 2: Costa    holding [11, 21, 23, 27, 30, 31, 39, 46] plays the 46 
Round 2: Heather  holding [17, 22, 26, 28, 34, 36, 37, 47] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 18 24 29 32 38 43 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [13, 16, 18, 24, 29, 32, 38, 43] plays the 16 
Round 2: Zachary  holding [19, 20, 33, 40, 41, 42, 44, 48] plays the 48 
Zachary wins the round 

Round 3: Zachary  holding [19, 20, 33, 40, 41, 42, 44] plays the 40 
Round 3: Costa    holding [11, 21, 23, 27, 30, 31, 39] plays the 30 
Round 3: Heather  holding [17, 26, 28, 34, 36, 37, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
13 18 24 29 32 38 43 0 0 0 

18------------------------------------------------------------------------

Round 3: Eugenius holding [13, 18, 24, 29, 32, 38, 43] plays the 18 
Zachary wins the round 

Round 4: Zachary  holding [19, 20, 33, 41, 42, 44] plays the 33 
Round 4: Costa    holding [11, 21, 23, 27, 31, 39] plays the 27 
Round 4: Heather  holding [17, 28, 34, 36, 37, 47] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
13 24 29 32 38 43 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius holding [13, 24, 29, 32, 38, 43] plays the 24 
Heather wins the round 

Round 5: Heather  holding [17, 28, 34, 37, 47] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 32 38 43 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [13, 29, 32, 38, 43] plays the 32 
Round 5: Zachary  holding [19, 20, 41, 42, 44] plays the 42 
Round 5: Costa    holding [11, 21, 23, 31, 39] plays the 39 
Zachary wins the round which contains 7 penalty points

Round 6: Zachary  holding [19, 20, 41, 44] plays the 20 
Round 6: Costa    holding [11, 21, 23, 31] plays the 23 
Round 6: Heather  holding [17, 28, 37, 47] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 38 43 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 6: Eugenius holding [13, 29, 38, 43] plays the 38 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 29 43 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 29, 43] plays the 13 
Round 7: Zachary  holding [19, 41, 44] plays the 41 
Round 7: Costa    holding [11, 21, 31] plays the 11 
Round 7: Heather  holding [17, 37, 47] plays the 37 
Zachary wins the round which contains 4 penalty points

Round 8: Zachary  holding [19, 44] plays the 44 
Round 8: Costa    holding [21, 31] plays the 21 
Round 8: Heather  holding [17, 47] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
29 43 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 8: Eugenius holding [29, 43] plays the 29 
Zachary wins the round which contains 2 penalty points

Round 9: Zachary  holding [19] plays the 19 
Round 9: Costa    holding [31] plays the 31 
Round 9: Heather  holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Heather wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Costa (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Heather (system)
#4 with 13 penalty points Zachary (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16701804 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Emily   : [10, 11, 14, 15, 25, 32, 40, 44, 47, 48]
Table position 1: Stephen : [17, 18, 20, 21, 23, 24, 27, 34, 41, 49]
Table position 2: Eugenius: [13, 19, 22, 26, 28, 30, 31, 33, 37, 46]
Table position 3: Vincent : [12, 16, 29, 35, 36, 38, 39, 42, 43, 45]

Discards:
Emily    [15, 47, 48]
Stephen  [18, 24, 34]
Eugenius [33, 37, 46]
Vincent  [39, 42, 45]

Round 0: Emily    holding [10, 11, 14, 25, 32, 39, 40, 42, 44, 45] plays the 40 
Round 0: Stephen  holding [15, 17, 20, 21, 23, 27, 41, 47, 48, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
13 18 19 22 24 26 28 30 31 34 

18------------------------------------------------------------------------

Round 0: Eugenius holding [13, 18, 19, 22, 24, 26, 28, 30, 31, 34] plays the 18 
Round 0: Vincent  holding [12, 16, 29, 33, 35, 36, 37, 38, 43, 46] plays the 16 
Emily wins the round 

Round 1: Emily    holding [10, 11, 14, 25, 32, 39, 42, 44, 45] plays the 25 
Round 1: Stephen  holding [17, 20, 21, 23, 27, 41, 47, 48, 49] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 22 24 26 28 30 31 34 0 

30------------------------------------------------------------------------

Round 1: Eugenius holding [13, 19, 22, 24, 26, 28, 30, 31, 34] plays the 30 
Round 1: Vincent  holding [12, 29, 33, 35, 36, 37, 38, 43, 46] plays the 35 
Vincent wins the round 

Round 2: Vincent  holding [12, 29, 33, 36, 37, 38, 43, 46] plays the 33 
Round 2: Emily    holding [10, 11, 14, 32, 39, 42, 44, 45] plays the 45 
Round 2: Stephen  holding [17, 21, 23, 27, 41, 47, 48, 49] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 22 24 26 28 31 34 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [13, 19, 22, 24, 26, 28, 31, 34] plays the 22 
Emily wins the round 

Round 3: Emily    holding [10, 11, 14, 32, 39, 42, 44] plays the 42 
Round 3: Stephen  holding [17, 21, 23, 41, 47, 48, 49] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 24 26 28 31 34 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [13, 19, 24, 26, 28, 31, 34] plays the 24 
Round 3: Vincent  holding [12, 29, 36, 37, 38, 43, 46] plays the 12 
Emily wins the round which contains 7 penalty points

Round 4: Emily    holding [10, 11, 14, 32, 39, 44] plays the 10 
Round 4: Stephen  holding [17, 23, 41, 47, 48, 49] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 26 28 31 34 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [13, 19, 26, 28, 31, 34] plays the 26 
Round 4: Vincent  holding [29, 36, 37, 38, 43, 46] plays the 36 
Stephen wins the round 

Round 5: Stephen  holding [17, 23, 41, 47, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 28 31 34 0 0 0 0 0 

28------------------------------------------------------------------------

Round 5: Eugenius holding [13, 19, 28, 31, 34] plays the 28 
Round 5: Vincent  holding [29, 37, 38, 43, 46] plays the 37 
Round 5: Emily    holding [11, 14, 32, 39, 44] plays the 14 
Stephen wins the round which contains 1 penalty points

Round 6: Stephen  holding [17, 23, 41, 47] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 31 34 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 19, 31, 34] plays the 13 
Round 6: Vincent  holding [29, 38, 43, 46] plays the 29 
Round 6: Emily    holding [11, 32, 39, 44] plays the 11 
Stephen wins the round which contains 4 penalty points

Round 7: Stephen  holding [17, 23, 47] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
19 31 34 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius holding [19, 31, 34] plays the 19 
Round 7: Vincent  holding [38, 43, 46] plays the 43 
Round 7: Emily    holding [32, 39, 44] plays the 32 
Vincent wins the round which contains 3 penalty points

Round 8: Vincent  holding [38, 46] plays the 46 
Round 8: Emily    holding [39, 44] plays the 44 
Round 8: Stephen  holding [23, 47] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
31 34 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 8: Eugenius holding [31, 34] plays the 34 
Vincent wins the round which contains 1 penalty points

Round 9: Vincent  holding [38] plays the 38 
Round 9: Emily    holding [39] plays the 39 
Round 9: Stephen  holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Vincent wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 5 penalty points Stephen (system)
#3 with 6 penalty points Vincent (system)
#4 with 7 penalty points Emily (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10706363 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Trung   : [13, 17, 18, 26, 27, 31, 33, 34, 36, 49]
Table position 1: Sabrina : [11, 14, 15, 19, 32, 38, 39, 40, 43, 44]
Table position 2: Eugenius: [10, 12, 21, 23, 25, 29, 37, 41, 45, 46]
Table position 3: Braedon : [16, 20, 22, 24, 28, 30, 35, 42, 47, 48]

Discards:
Trung    [13, 33, 36]
Sabrina  [14, 15, 32]
Eugenius [41, 45, 46]
Braedon  [16, 20, 42]

Round 0: Trung    holding [16, 17, 18, 20, 26, 27, 31, 34, 42, 49] plays the 34 
Round 0: Sabrina  holding [11, 13, 19, 33, 36, 38, 39, 40, 43, 44] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 14 15 21 23 25 29 32 37 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 14, 15, 21, 23, 25, 29, 32, 37] plays the 10 
Round 0: Braedon  holding [22, 24, 28, 30, 35, 41, 45, 46, 47, 48] plays the 24 
Sabrina wins the round 

Round 1: Sabrina  holding [11, 13, 19, 33, 36, 39, 40, 43, 44] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 15 21 23 25 29 32 37 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 14, 15, 21, 23, 25, 29, 32, 37] plays the 12 
Round 1: Braedon  holding [22, 28, 30, 35, 41, 45, 46, 47, 48] plays the 48 
Round 1: Trung    holding [16, 17, 18, 20, 26, 27, 31, 42, 49] plays the 16 
Braedon wins the round 

Round 2: Braedon  holding [22, 28, 30, 35, 41, 45, 46, 47] plays the 22 
Round 2: Trung    holding [17, 18, 20, 26, 27, 31, 42, 49] plays the 26 
Round 2: Sabrina  holding [11, 13, 19, 33, 36, 39, 43, 44] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
14 15 21 23 25 29 32 37 0 0 

14------------------------------------------------------------------------

Round 2: Eugenius holding [14, 15, 21, 23, 25, 29, 32, 37] plays the 14 
Sabrina wins the round 

Round 3: Sabrina  holding [11, 13, 19, 36, 39, 43, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
15 21 23 25 29 32 37 0 0 0 

32------------------------------------------------------------------------

Round 3: Eugenius holding [15, 21, 23, 25, 29, 32, 37] plays the 32 
Round 3: Braedon  holding [28, 30, 35, 41, 45, 46, 47] plays the 28 
Round 3: Trung    holding [17, 18, 20, 27, 31, 42, 49] plays the 42 
Sabrina wins the round which contains 7 penalty points

Round 4: Sabrina  holding [11, 13, 19, 36, 39, 43] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
15 21 23 25 29 37 0 0 0 0 

15------------------------------------------------------------------------

Round 4: Eugenius holding [15, 21, 23, 25, 29, 37] plays the 15 
Round 4: Braedon  holding [30, 35, 41, 45, 46, 47] plays the 46 
Round 4: Trung    holding [17, 18, 20, 27, 31, 49] plays the 27 
Braedon wins the round 

Round 5: Braedon  holding [30, 35, 41, 45, 47] plays the 30 
Round 5: Trung    holding [17, 18, 20, 31, 49] plays the 20 
Round 5: Sabrina  holding [11, 13, 19, 39, 43] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
21 23 25 29 37 0 0 0 0 0 

21------------------------------------------------------------------------

Round 5: Eugenius holding [21, 23, 25, 29, 37] plays the 21 
Sabrina wins the round 

Round 6: Sabrina  holding [11, 13, 19, 43] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 29 37 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 25, 29, 37] plays the 23 
Round 6: Braedon  holding [35, 41, 45, 47] plays the 47 
Round 6: Trung    holding [17, 18, 31, 49] plays the 17 
Braedon wins the round which contains 4 penalty points

Round 7: Braedon  holding [35, 41, 45] plays the 41 
Round 7: Trung    holding [18, 31, 49] plays the 31 
Round 7: Sabrina  holding [11, 13, 43] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 37 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [25, 29, 37] plays the 29 
Braedon wins the round which contains 4 penalty points

Round 8: Braedon  holding [35, 45] plays the 35 
Round 8: Trung    holding [18, 49] plays the 49 
Round 8: Sabrina  holding [13, 43] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
25 37 0 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 8: Eugenius holding [25, 37] plays the 25 
Trung wins the round which contains 1 penalty points

Round 9: Trung    holding [18] plays the 18 
Round 9: Sabrina  holding [43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Braedon  holding [45] plays the 45 
Braedon wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Trung (system)
#3 with 7 penalty points Sabrina (system)
#4 with 10 penalty points Braedon (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11763351 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Nathan  : [10, 15, 17, 21, 26, 30, 32, 36, 39, 49]
Table position 1: Eugenius: [13, 19, 20, 22, 25, 28, 29, 31, 38, 42]
Table position 2: Gal     : [11, 12, 18, 33, 34, 37, 41, 46, 47, 48]
Table position 3: Kangying: [14, 16, 23, 24, 27, 35, 40, 43, 44, 45]

Discards:
Nathan   [21, 26, 32]
Eugenius [31, 38, 42]
Gal      [33, 41, 47]
Kangying [27, 40, 43]

Round 0: Nathan   holding [10, 15, 17, 27, 30, 36, 39, 40, 43, 49] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 20 21 22 25 26 28 29 32 

20------------------------------------------------------------------------

Round 0: Eugenius holding [13, 19, 20, 21, 22, 25, 26, 28, 29, 32] plays the 20 
Round 0: Gal      holding [11, 12, 18, 31, 34, 37, 38, 42, 46, 48] plays the 34 
Round 0: Kangying holding [14, 16, 23, 24, 33, 35, 41, 44, 45, 47] plays the 45 
Kangying wins the round 

Round 1: Kangying holding [14, 16, 23, 24, 33, 35, 41, 44, 47] plays the 44 
Round 1: Nathan   holding [10, 15, 17, 27, 30, 36, 39, 43, 49] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 21 22 25 26 28 29 32 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [13, 19, 21, 22, 25, 26, 28, 29, 32] plays the 22 
Round 1: Gal      holding [11, 12, 18, 31, 37, 38, 42, 46, 48] plays the 18 
Kangying wins the round 

Round 2: Kangying holding [14, 16, 23, 24, 33, 35, 41, 47] plays the 14 
Round 2: Nathan   holding [10, 15, 17, 27, 30, 39, 43, 49] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 21 25 26 28 29 32 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [13, 19, 21, 25, 26, 28, 29, 32] plays the 21 
Round 2: Gal      holding [11, 12, 31, 37, 38, 42, 46, 48] plays the 42 
Gal wins the round which contains 7 penalty points

Round 3: Gal      holding [11, 12, 31, 37, 38, 46, 48] plays the 38 
Round 3: Kangying holding [16, 23, 24, 33, 35, 41, 47] plays the 16 
Round 3: Nathan   holding [10, 15, 17, 27, 39, 43, 49] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 26 28 29 32 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [13, 19, 25, 26, 28, 29, 32] plays the 26 
Gal wins the round 

Round 4: Gal      holding [11, 12, 31, 37, 46, 48] plays the 12 
Round 4: Kangying holding [23, 24, 33, 35, 41, 47] plays the 24 
Round 4: Nathan   holding [15, 17, 27, 39, 43, 49] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 28 29 32 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [13, 19, 25, 28, 29, 32] plays the 28 
Nathan wins the round 

Round 5: Nathan   holding [15, 17, 27, 43, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 29 32 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 5: Eugenius holding [13, 19, 25, 29, 32] plays the 13 
Round 5: Gal      holding [11, 31, 37, 46, 48] plays the 46 
Round 5: Kangying holding [23, 33, 35, 41, 47] plays the 35 
Nathan wins the round which contains 1 penalty points

Round 6: Nathan   holding [15, 17, 27, 43] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
19 25 29 32 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 25, 29, 32] plays the 19 
Round 6: Gal      holding [11, 31, 37, 48] plays the 31 
Round 6: Kangying holding [23, 33, 41, 47] plays the 41 
Kangying wins the round which contains 4 penalty points

Round 7: Kangying holding [23, 33, 47] plays the 33 
Round 7: Nathan   holding [15, 27, 43] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 32 0 0 0 0 0 0 0 

25 chah------------------------------------------------------------------------

Round 7: Eugenius holding [25, 29, 32] plays the 25 
Round 7: Gal      holding [11, 37, 48] plays the 48 
Gal wins the round 

Round 8: Gal      holding [11, 37] plays the 37 
Round 8: Kangying holding [23, 47] plays the 47 
Round 8: Nathan   holding [27, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
29 32 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 32] plays the 29 
Kangying wins the round which contains 4 penalty points

Round 9: Kangying holding [23] plays the 23 
Round 9: Nathan   holding [27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
32 0 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 9: Eugenius holding [32] plays the 32 
Round 9: Gal      holding [11] plays the 11 
Kangying wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Nathan (system)
#3 with 7 penalty points Gal (system)
#4 with 10 penalty points Kangying (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10115758 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Andrew  : [10, 14, 15, 19, 23, 24, 27, 31, 36, 41]
Table position 1: David   : [11, 12, 13, 20, 26, 33, 37, 42, 48, 49]
Table position 2: Dylan   : [16, 17, 18, 25, 28, 32, 34, 39, 46, 47]
Table position 3: Eugenius: [21, 22, 29, 30, 35, 38, 40, 43, 44, 45]

Discards:
Andrew   [24, 31, 36]
David    [33, 48, 49]
Dylan    [18, 32, 34]
Eugenius [43, 44, 45]

Round 0: Andrew   holding [10, 14, 15, 19, 23, 27, 41, 43, 44, 45] plays the 45 
Round 0: David    holding [11, 12, 13, 20, 24, 26, 31, 36, 37, 42] plays the 36 
Round 0: Dylan    holding [16, 17, 25, 28, 33, 39, 46, 47, 48, 49] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
18 21 22 29 30 32 34 35 38 40 

18------------------------------------------------------------------------

Round 0: Eugenius holding [18, 21, 22, 29, 30, 32, 34, 35, 38, 40] plays the 18 
Andrew wins the round 

Round 1: Andrew   holding [10, 14, 15, 19, 23, 27, 41, 43, 44] plays the 14 
Round 1: David    holding [11, 12, 13, 20, 24, 26, 31, 37, 42] plays the 20 
Round 1: Dylan    holding [16, 17, 28, 33, 39, 46, 47, 48, 49] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
21 22 29 30 32 34 35 38 40 0 

21------------------------------------------------------------------------

Round 1: Eugenius holding [21, 22, 29, 30, 32, 34, 35, 38, 40] plays the 21 
Dylan wins the round 

Round 2: Dylan    holding [16, 17, 33, 39, 46, 47, 48, 49] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
22 29 30 32 34 35 38 40 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [22, 29, 30, 32, 34, 35, 38, 40] plays the 22 
Round 2: Andrew   holding [10, 15, 19, 23, 27, 41, 43, 44] plays the 44 
Round 2: David    holding [11, 12, 13, 24, 26, 31, 37, 42] plays the 12 
Andrew wins the round 

Round 3: Andrew   holding [10, 15, 19, 23, 27, 41, 43] plays the 27 
Round 3: David    holding [11, 13, 24, 26, 31, 37, 42] plays the 24 
Round 3: Dylan    holding [17, 33, 39, 46, 47, 48, 49] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
29 30 32 34 35 38 40 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [29, 30, 32, 34, 35, 38, 40] plays the 30 
Dylan wins the round 

Round 4: Dylan    holding [17, 33, 46, 47, 48, 49] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
29 32 34 35 38 40 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [29, 32, 34, 35, 38, 40] plays the 32 
Round 4: Andrew   holding [10, 15, 19, 23, 41, 43] plays the 15 
Round 4: David    holding [11, 13, 26, 31, 37, 42] plays the 26 
Dylan wins the round 

Round 5: Dylan    holding [17, 33, 46, 47, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
29 34 35 38 40 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [29, 34, 35, 38, 40] plays the 34 
Round 5: Andrew   holding [10, 19, 23, 41, 43] plays the 10 
Round 5: David    holding [11, 13, 31, 37, 42] plays the 42 
Dylan wins the round which contains 7 penalty points

Round 6: Dylan    holding [17, 33, 47, 49] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
29 35 38 40 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 6: Eugenius holding [29, 35, 38, 40] plays the 29 
Round 6: Andrew   holding [19, 23, 41, 43] plays the 43 
Round 6: David    holding [11, 13, 31, 37] plays the 31 
Dylan wins the round which contains 3 penalty points

Round 7: Dylan    holding [17, 47, 49] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
35 38 40 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 7: Eugenius holding [35, 38, 40] plays the 35 
Round 7: Andrew   holding [19, 23, 41] plays the 41 
Round 7: David    holding [11, 13, 37] plays the 11 
Andrew wins the round which contains 3 penalty points

Round 8: Andrew   holding [19, 23] plays the 23 
Round 8: David    holding [13, 37] plays the 13 
Round 8: Dylan    holding [47, 49] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
38 40 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [38, 40] plays the 38 
Dylan wins the round which contains 3 penalty points

Round 9: Dylan    holding [49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40 chah------------------------------------------------------------------------

Round 9: Eugenius holding [40] plays the 40 
Round 9: Andrew   holding [19] plays the 19 
Round 9: David    holding [37] plays the 37 
Dylan wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points David (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 3 penalty points Andrew (system)
#4 with 15 penalty points Dylan (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15172656 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Sabrina : [11, 13, 29, 38, 40, 41, 42, 46, 47, 48]
Table position 1: Eugenius: [12, 14, 17, 22, 25, 26, 30, 31, 34, 35]
Table position 2: Peter   : [16, 18, 23, 24, 28, 32, 36, 37, 45, 49]
Table position 3: Reede   : [10, 15, 19, 20, 21, 27, 33, 39, 43, 44]

Discards:
Sabrina  [29, 42, 47]
Eugenius [31, 34, 35]
Peter    [18, 24, 49]
Reede    [20, 33, 39]

Round 0: Sabrina  holding [11, 13, 20, 33, 38, 39, 40, 41, 46, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 17 22 25 26 29 30 42 47 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 14, 17, 22, 25, 26, 29, 30, 42, 47] plays the 12 
Round 0: Peter    holding [16, 23, 28, 31, 32, 34, 35, 36, 37, 45] plays the 28 
Round 0: Reede    holding [10, 15, 18, 19, 21, 24, 27, 43, 44, 49] plays the 18 
Sabrina wins the round 

Round 1: Sabrina  holding [11, 13, 20, 33, 38, 39, 40, 41, 46] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 22 25 26 29 30 42 47 0 

26------------------------------------------------------------------------

Round 1: Eugenius holding [14, 17, 22, 25, 26, 29, 30, 42, 47] plays the 26 
Round 1: Peter    holding [16, 23, 31, 32, 34, 35, 36, 37, 45] plays the 45 
Round 1: Reede    holding [10, 15, 19, 21, 24, 27, 43, 44, 49] plays the 24 
Peter wins the round 

Round 2: Peter    holding [16, 23, 31, 32, 34, 35, 36, 37] plays the 34 
Round 2: Reede    holding [10, 15, 19, 21, 27, 43, 44, 49] plays the 44 
Round 2: Sabrina  holding [11, 13, 20, 33, 38, 40, 41, 46] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 22 25 29 30 42 47 0 0 

14------------------------------------------------------------------------

Round 2: Eugenius holding [14, 17, 22, 25, 29, 30, 42, 47] plays the 14 
Reede wins the round 

Round 3: Reede    holding [10, 15, 19, 21, 27, 43, 49] plays the 10 
Round 3: Sabrina  holding [11, 13, 20, 33, 38, 41, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 25 29 30 42 47 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [17, 22, 25, 29, 30, 42, 47] plays the 22 
Round 3: Peter    holding [16, 23, 31, 32, 35, 36, 37] plays the 35 
Sabrina wins the round 

Round 4: Sabrina  holding [11, 13, 20, 33, 38, 41] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 29 30 42 47 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [17, 25, 29, 30, 42, 47] plays the 30 
Round 4: Peter    holding [16, 23, 31, 32, 36, 37] plays the 36 
Round 4: Reede    holding [15, 19, 21, 27, 43, 49] plays the 21 
Peter wins the round 

Round 5: Peter    holding [16, 23, 31, 32, 37] plays the 32 
Round 5: Reede    holding [15, 19, 27, 43, 49] plays the 19 
Round 5: Sabrina  holding [11, 13, 20, 38, 41] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 29 42 47 0 0 0 0 0 

42------------------------------------------------------------------------

Round 5: Eugenius holding [17, 25, 29, 42, 47] plays the 42 
Eugenius wins the round which contains 8 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
17 25 29 47 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 25, 29, 47] plays the 17 
Round 6: Peter    holding [16, 23, 31, 37] plays the 37 
Round 6: Reede    holding [15, 27, 43, 49] plays the 43 
Round 6: Sabrina  holding [11, 13, 38, 41] plays the 41 
Reede wins the round which contains 4 penalty points

Round 7: Reede    holding [15, 27, 49] plays the 15 
Round 7: Sabrina  holding [11, 13, 38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 47 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 7: Eugenius holding [25, 29, 47] plays the 25 
Round 7: Peter    holding [16, 23, 31] plays the 23 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
29 47 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 47] plays the 29 
Round 8: Peter    holding [16, 31] plays the 31 
Round 8: Reede    holding [27, 49] plays the 49 
Round 8: Sabrina  holding [11, 13] plays the 13 
Peter wins the round which contains 3 penalty points

Round 9: Peter    holding [16] plays the 16 
Round 9: Reede    holding [27] plays the 27 
Round 9: Sabrina  holding [11] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
47 0 0 0 0 0 0 0 0 0 

47 chah------------------------------------------------------------------------

Round 9: Eugenius holding [47] plays the 47 
Peter wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Sabrina (system)
#2 with 4 penalty points Reede (system)
#3 with 5 penalty points Peter (system)
#4 with 9 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2821528 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 21, 26, 29, 35, 37, 38, 39, 46, 48]
Table position 1: George  : [12, 13, 19, 30, 31, 32, 36, 40, 41, 43]
Table position 2: Jamal   : [10, 15, 16, 17, 23, 24, 28, 34, 45, 49]
Table position 3: Alex    : [14, 18, 20, 22, 25, 27, 33, 42, 44, 47]

Discards:
Eugenius [39, 46, 48]
George   [13, 30, 31]
Jamal    [10, 15, 34]
Alex     [20, 27, 47]


Debug output from Eugenius
------------------------------------------------------------------------
11 20 21 26 27 29 35 37 38 47 

20------------------------------------------------------------------------

Round 0: Eugenius holding [11, 20, 21, 26, 27, 29, 35, 37, 38, 47] plays the 20 
Round 0: George   holding [12, 19, 32, 36, 39, 40, 41, 43, 46, 48] plays the 46 
Round 0: Jamal    holding [13, 16, 17, 23, 24, 28, 30, 31, 45, 49] plays the 24 
Round 0: Alex     holding [10, 14, 15, 18, 22, 25, 33, 34, 42, 44] plays the 25 
George wins the round 

Round 1: George   holding [12, 19, 32, 36, 39, 40, 41, 43, 48] plays the 40 
Round 1: Jamal    holding [13, 16, 17, 23, 28, 30, 31, 45, 49] plays the 30 
Round 1: Alex     holding [10, 14, 15, 18, 22, 33, 34, 42, 44] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
11 21 26 27 29 35 37 38 47 0 

26------------------------------------------------------------------------

Round 1: Eugenius holding [11, 21, 26, 27, 29, 35, 37, 38, 47] plays the 26 
George wins the round 

Round 2: George   holding [12, 19, 32, 36, 39, 41, 43, 48] plays the 32 
Round 2: Jamal    holding [13, 16, 17, 23, 28, 31, 45, 49] plays the 28 
Round 2: Alex     holding [10, 14, 15, 18, 22, 33, 42, 44] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 21 27 29 35 37 38 47 0 0 

38------------------------------------------------------------------------

Round 2: Eugenius holding [11, 21, 27, 29, 35, 37, 38, 47] plays the 38 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 21 27 29 35 37 47 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [11, 21, 27, 29, 35, 37, 47] plays the 21 
Round 3: George   holding [12, 19, 36, 39, 41, 43, 48] plays the 48 
Round 3: Jamal    holding [13, 16, 17, 23, 31, 45, 49] plays the 49 
Round 3: Alex     holding [10, 14, 15, 22, 33, 42, 44] plays the 42 
Jamal wins the round which contains 7 penalty points

Round 4: Jamal    holding [13, 16, 17, 23, 31, 45] plays the 16 
Round 4: Alex     holding [10, 14, 15, 22, 33, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
11 27 29 35 37 47 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 4: Eugenius holding [11, 27, 29, 35, 37, 47] plays the 11 
Round 4: George   holding [12, 19, 36, 39, 41, 43] plays the 36 
Alex wins the round which contains 1 penalty points

Round 5: Alex     holding [10, 14, 15, 22, 33] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 35 37 47 0 0 0 0 0 

27 chah------------------------------------------------------------------------

Round 5: Eugenius holding [27, 29, 35, 37, 47] plays the 27 
Round 5: George   holding [12, 19, 39, 41, 43] plays the 12 
Round 5: Jamal    holding [13, 17, 23, 31, 45] plays the 13 
Alex wins the round which contains 1 penalty points

Round 6: Alex     holding [10, 14, 15, 33] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
29 35 37 47 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 6: Eugenius holding [29, 35, 37, 47] plays the 29 
Round 6: George   holding [19, 39, 41, 43] plays the 39 
Round 6: Jamal    holding [17, 23, 31, 45] plays the 45 
Jamal wins the round which contains 1 penalty points

Round 7: Jamal    holding [17, 23, 31] plays the 31 
Round 7: Alex     holding [10, 14, 15] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
35 37 47 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 7: Eugenius holding [35, 37, 47] plays the 37 
Round 7: George   holding [19, 41, 43] plays the 19 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
35 47 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 8: Eugenius holding [35, 47] plays the 35 
Round 8: George   holding [41, 43] plays the 43 
Round 8: Jamal    holding [17, 23] plays the 23 
Round 8: Alex     holding [10, 15] plays the 10 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
47 0 0 0 0 0 0 0 0 0 

47------------------------------------------------------------------------

Round 9: Eugenius holding [47] plays the 47 
Round 9: George   holding [41] plays the 41 
Round 9: Jamal    holding [17] plays the 17 
Round 9: Alex     holding [15] plays the 15 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points George (system)
#2 with 2 penalty points Alex (system)
#3 with 8 penalty points Eugenius (dodo.c)
#3 with 8 penalty points Jamal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9545722 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Matthew : [11, 12, 14, 16, 20, 22, 37, 41, 42, 43]
Table position 1: Eugenius: [17, 25, 30, 32, 35, 36, 38, 45, 47, 49]
Table position 2: Michael : [13, 21, 23, 24, 26, 28, 33, 34, 39, 48]
Table position 3: Sabrina : [10, 15, 18, 19, 27, 29, 31, 40, 44, 46]

Discards:
Matthew  [12, 37, 41]
Eugenius [45, 47, 49]
Michael  [21, 24, 28]
Sabrina  [10, 15, 46]

Round 0: Matthew  holding [10, 11, 14, 15, 16, 20, 22, 42, 43, 46] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
12 17 25 30 32 35 36 37 38 41 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 17, 25, 30, 32, 35, 36, 37, 38, 41] plays the 12 
Round 0: Michael  holding [13, 23, 26, 33, 34, 39, 45, 47, 48, 49] plays the 34 
Round 0: Sabrina  holding [18, 19, 21, 24, 27, 28, 29, 31, 40, 44] plays the 28 
Michael wins the round 

Round 1: Michael  holding [13, 23, 26, 33, 39, 45, 47, 48, 49] plays the 48 
Round 1: Sabrina  holding [18, 19, 21, 24, 27, 29, 31, 40, 44] plays the 21 
Round 1: Matthew  holding [10, 11, 14, 15, 20, 22, 42, 43, 46] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 30 32 35 36 37 38 41 0 

30------------------------------------------------------------------------

Round 1: Eugenius holding [17, 25, 30, 32, 35, 36, 37, 38, 41] plays the 30 
Michael wins the round 

Round 2: Michael  holding [13, 23, 26, 33, 39, 45, 47, 49] plays the 26 
Round 2: Sabrina  holding [18, 19, 24, 27, 29, 31, 40, 44] plays the 40 
Round 2: Matthew  holding [10, 11, 15, 20, 22, 42, 43, 46] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 32 35 36 37 38 41 0 0 

32------------------------------------------------------------------------

Round 2: Eugenius holding [17, 25, 32, 35, 36, 37, 38, 41] plays the 32 
Sabrina wins the round 

Round 3: Sabrina  holding [18, 19, 24, 27, 29, 31, 44] plays the 44 
Round 3: Matthew  holding [10, 11, 15, 22, 42, 43, 46] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 35 36 37 38 41 0 0 0 

36------------------------------------------------------------------------

Round 3: Eugenius holding [17, 25, 35, 36, 37, 38, 41] plays the 36 
Round 3: Michael  holding [13, 23, 33, 39, 45, 47, 49] plays the 33 
Sabrina wins the round which contains 7 penalty points

Round 4: Sabrina  holding [18, 19, 24, 27, 29, 31] plays the 24 
Round 4: Matthew  holding [10, 11, 15, 22, 43, 46] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 35 37 38 41 0 0 0 0 

38------------------------------------------------------------------------

Round 4: Eugenius holding [17, 25, 35, 37, 38, 41] plays the 38 
Round 4: Michael  holding [13, 23, 39, 45, 47, 49] plays the 39 
Michael wins the round 

Round 5: Michael  holding [13, 23, 45, 47, 49] plays the 45 
Round 5: Sabrina  holding [18, 19, 27, 29, 31] plays the 18 
Round 5: Matthew  holding [10, 11, 22, 43, 46] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 35 37 41 0 0 0 0 0 

25------------------------------------------------------------------------

Round 5: Eugenius holding [17, 25, 35, 37, 41] plays the 25 
Michael wins the round 

Round 6: Michael  holding [13, 23, 47, 49] plays the 49 
Round 6: Sabrina  holding [19, 27, 29, 31] plays the 27 
Round 6: Matthew  holding [11, 22, 43, 46] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
17 35 37 41 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 6: Eugenius holding [17, 35, 37, 41] plays the 35 
Michael wins the round which contains 1 penalty points

Round 7: Michael  holding [13, 23, 47] plays the 23 
Round 7: Sabrina  holding [19, 29, 31] plays the 19 
Round 7: Matthew  holding [22, 43, 46] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
17 37 41 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 37, 41] plays the 17 
Matthew wins the round which contains 4 penalty points

Round 8: Matthew  holding [22, 46] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
37 41 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 8: Eugenius holding [37, 41] plays the 37 
Round 8: Michael  holding [13, 47] plays the 13 
Round 8: Sabrina  holding [29, 31] plays the 29 
Matthew wins the round which contains 3 penalty points

Round 9: Matthew  holding [46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41 chah------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Round 9: Michael  holding [47] plays the 47 
Round 9: Sabrina  holding [31] plays the 31 
Matthew wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Michael (system)
#3 with 7 penalty points Sabrina (system)
#4 with 10 penalty points Matthew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1683881 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Livia   : [12, 16, 17, 18, 20, 21, 28, 30, 39, 49]
Table position 1: George  : [11, 23, 27, 38, 42, 44, 45, 46, 47, 48]
Table position 2: Eugenius: [10, 25, 26, 29, 32, 35, 36, 37, 40, 41]
Table position 3: Nicholas: [13, 14, 15, 19, 22, 24, 31, 33, 34, 43]

Discards:
Livia    [12, 21, 28]
George   [11, 23, 38]
Eugenius [37, 40, 41]
Nicholas [13, 15, 34]

Round 0: Livia    holding [13, 15, 16, 17, 18, 20, 30, 34, 39, 49] plays the 49 
Round 0: George   holding [12, 21, 27, 28, 42, 44, 45, 46, 47, 48] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 23 25 26 29 32 35 36 38 

35------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 23, 25, 26, 29, 32, 35, 36, 38] plays the 35 
Round 0: Nicholas holding [14, 19, 22, 24, 31, 33, 37, 40, 41, 43] plays the 14 
Livia wins the round 

Round 1: Livia    holding [13, 15, 16, 17, 18, 20, 30, 34, 39] plays the 16 
Round 1: George   holding [12, 21, 27, 42, 44, 45, 46, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 23 25 26 29 32 36 38 0 

10------------------------------------------------------------------------

Round 1: Eugenius holding [10, 11, 23, 25, 26, 29, 32, 36, 38] plays the 10 
Round 1: Nicholas holding [19, 22, 24, 31, 33, 37, 40, 41, 43] plays the 40 
George wins the round 

Round 2: George   holding [12, 21, 27, 42, 44, 45, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 25 26 29 32 36 38 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [11, 23, 25, 26, 29, 32, 36, 38] plays the 26 
Round 2: Nicholas holding [19, 22, 24, 31, 33, 37, 41, 43] plays the 24 
Round 2: Livia    holding [13, 15, 17, 18, 20, 30, 34, 39] plays the 20 
George wins the round 

Round 3: George   holding [12, 21, 27, 42, 44, 45, 47] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 25 29 32 36 38 0 0 0 

36------------------------------------------------------------------------

Round 3: Eugenius holding [11, 23, 25, 29, 32, 36, 38] plays the 36 
Round 3: Nicholas holding [19, 22, 31, 33, 37, 41, 43] plays the 33 
Round 3: Livia    holding [13, 15, 17, 18, 30, 34, 39] plays the 18 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 23 25 29 32 38 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [11, 23, 25, 29, 32, 38] plays the 25 
Round 4: Nicholas holding [19, 22, 31, 37, 41, 43] plays the 19 
Round 4: Livia    holding [13, 15, 17, 30, 34, 39] plays the 15 
Round 4: George   holding [12, 21, 42, 44, 45, 47] plays the 45 
George wins the round which contains 1 penalty points

Round 5: George   holding [12, 21, 42, 44, 47] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 29 32 38 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 23, 29, 32, 38] plays the 11 
Round 5: Nicholas holding [22, 31, 37, 41, 43] plays the 31 
Round 5: Livia    holding [13, 17, 30, 34, 39] plays the 39 
Livia wins the round which contains 2 penalty points

Round 6: Livia    holding [13, 17, 30, 34] plays the 30 
Round 6: George   holding [12, 42, 44, 47] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 32 38 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 6: Eugenius holding [23, 29, 32, 38] plays the 32 
Round 6: Nicholas holding [22, 37, 41, 43] plays the 22 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
23 29 38 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius holding [23, 29, 38] plays the 23 
Round 7: Nicholas holding [37, 41, 43] plays the 41 
Round 7: Livia    holding [13, 17, 34] plays the 13 
Round 7: George   holding [42, 44, 47] plays the 47 
George wins the round which contains 4 penalty points

Round 8: George   holding [42, 44] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
29 38 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [29, 38] plays the 38 
Round 8: Nicholas holding [37, 43] plays the 43 
Round 8: Livia    holding [17, 34] plays the 34 
George wins the round which contains 8 penalty points

Round 9: George   holding [44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
29 0 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 9: Eugenius holding [29] plays the 29 
Round 9: Nicholas holding [37] plays the 37 
Round 9: Livia    holding [17] plays the 17 
George wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Nicholas (system)
#3 with 2 penalty points Livia (system)
#4 with 16 penalty points George (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12339706 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Vincent : [10, 13, 14, 29, 40, 41, 43, 46, 48, 49]
Table position 1: Reede   : [15, 16, 17, 19, 25, 26, 28, 34, 37, 45]
Table position 2: Eugenius: [11, 21, 23, 24, 27, 30, 31, 33, 39, 47]
Table position 3: Heather : [12, 18, 20, 22, 32, 35, 36, 38, 42, 44]

Discards:
Vincent  [13, 40, 41]
Reede    [16, 19, 37]
Eugenius [33, 39, 47]
Heather  [20, 35, 38]

Round 0: Vincent  holding [10, 14, 20, 29, 35, 38, 43, 46, 48, 49] plays the 48 
Round 0: Reede    holding [13, 15, 17, 25, 26, 28, 34, 40, 41, 45] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 19 21 23 24 27 30 31 37 

16------------------------------------------------------------------------

Round 0: Eugenius holding [11, 16, 19, 21, 23, 24, 27, 30, 31, 37] plays the 16 
Round 0: Heather  holding [12, 18, 22, 32, 33, 36, 39, 42, 44, 47] plays the 44 
Vincent wins the round 

Round 1: Vincent  holding [10, 14, 20, 29, 35, 38, 43, 46, 49] plays the 35 
Round 1: Reede    holding [13, 15, 17, 25, 26, 28, 34, 41, 45] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 21 23 24 27 30 31 37 0 

21------------------------------------------------------------------------

Round 1: Eugenius holding [11, 19, 21, 23, 24, 27, 30, 31, 37] plays the 21 
Round 1: Heather  holding [12, 18, 22, 32, 33, 36, 39, 42, 47] plays the 42 
Heather wins the round which contains 7 penalty points

Round 2: Heather  holding [12, 18, 22, 32, 33, 36, 39, 47] plays the 32 
Round 2: Vincent  holding [10, 14, 20, 29, 38, 43, 46, 49] plays the 38 
Round 2: Reede    holding [13, 15, 17, 25, 26, 34, 41, 45] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 24 27 30 31 37 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [11, 19, 23, 24, 27, 30, 31, 37] plays the 24 
Vincent wins the round 

Round 3: Vincent  holding [10, 14, 20, 29, 43, 46, 49] plays the 14 
Round 3: Reede    holding [13, 15, 17, 25, 26, 41, 45] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 27 30 31 37 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [11, 19, 23, 27, 30, 31, 37] plays the 30 
Round 3: Heather  holding [12, 18, 22, 33, 36, 39, 47] plays the 22 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 27 31 37 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [11, 19, 23, 27, 31, 37] plays the 27 
Round 4: Heather  holding [12, 18, 33, 36, 39, 47] plays the 33 
Round 4: Vincent  holding [10, 20, 29, 43, 46, 49] plays the 43 
Round 4: Reede    holding [13, 15, 17, 25, 41, 45] plays the 15 
Heather wins the round which contains 1 penalty points

Round 5: Heather  holding [12, 18, 36, 39, 47] plays the 18 
Round 5: Vincent  holding [10, 20, 29, 46, 49] plays the 10 
Round 5: Reede    holding [13, 17, 25, 41, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 31 37 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 19, 23, 31, 37] plays the 11 
Reede wins the round which contains 1 penalty points

Round 6: Reede    holding [13, 17, 25, 41] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 31 37 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 23, 31, 37] plays the 19 
Round 6: Heather  holding [12, 36, 39, 47] plays the 47 
Round 6: Vincent  holding [20, 29, 46, 49] plays the 29 
Heather wins the round which contains 4 penalty points

Round 7: Heather  holding [12, 36, 39] plays the 12 
Round 7: Vincent  holding [20, 46, 49] plays the 46 
Round 7: Reede    holding [13, 25, 41] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 37 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 7: Eugenius holding [23, 31, 37] plays the 23 
Vincent wins the round which contains 1 penalty points

Round 8: Vincent  holding [20, 49] plays the 20 
Round 8: Reede    holding [13, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius holding [31, 37] plays the 31 
Round 8: Heather  holding [36, 39] plays the 36 
Heather wins the round which contains 2 penalty points

Round 9: Heather  holding [39] plays the 39 
Round 9: Vincent  holding [49] plays the 49 
Round 9: Reede    holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Heather wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Vincent (system)
#2 with 1 penalty points Reede (system)
#4 with 16 penalty points Heather (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16152562 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Reede   : [17, 20, 30, 34, 35, 38, 43, 44, 45, 48]
Table position 1: Matthew : [14, 15, 18, 27, 31, 33, 36, 40, 42, 47]
Table position 2: Eugenius: [11, 13, 21, 22, 25, 26, 29, 39, 41, 46]
Table position 3: Dean    : [10, 12, 16, 19, 23, 24, 28, 32, 37, 49]

Discards:
Reede    [30, 38, 43]
Matthew  [14, 18, 31]
Eugenius [39, 41, 46]
Dean     [16, 32, 37]

Round 0: Reede    holding [16, 17, 20, 32, 34, 35, 37, 44, 45, 48] plays the 48 
Round 0: Matthew  holding [15, 27, 30, 33, 36, 38, 40, 42, 43, 47] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 14 18 21 22 25 26 29 31 

14------------------------------------------------------------------------

Round 0: Eugenius holding [11, 13, 14, 18, 21, 22, 25, 26, 29, 31] plays the 14 
Round 0: Dean     holding [10, 12, 19, 23, 24, 28, 39, 41, 46, 49] plays the 10 
Reede wins the round 

Round 1: Reede    holding [16, 17, 20, 32, 34, 35, 37, 44, 45] plays the 32 
Round 1: Matthew  holding [15, 27, 30, 33, 38, 40, 42, 43, 47] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 18 21 22 25 26 29 31 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 18, 21, 22, 25, 26, 29, 31] plays the 18 
Round 1: Dean     holding [12, 19, 23, 24, 28, 39, 41, 46, 49] plays the 12 
Matthew wins the round 

Round 2: Matthew  holding [15, 27, 30, 33, 38, 42, 43, 47] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 21 22 25 26 29 31 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 21, 22, 25, 26, 29, 31] plays the 21 
Round 2: Dean     holding [19, 23, 24, 28, 39, 41, 46, 49] plays the 28 
Round 2: Reede    holding [16, 17, 20, 34, 35, 37, 44, 45] plays the 16 
Matthew wins the round 

Round 3: Matthew  holding [15, 27, 33, 38, 42, 43, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 22 25 26 29 31 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 22, 25, 26, 29, 31] plays the 22 
Round 3: Dean     holding [19, 23, 24, 39, 41, 46, 49] plays the 39 
Round 3: Reede    holding [17, 20, 34, 35, 37, 44, 45] plays the 44 
Reede wins the round 

Round 4: Reede    holding [17, 20, 34, 35, 37, 45] plays the 45 
Round 4: Matthew  holding [15, 27, 38, 42, 43, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 25 26 29 31 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 25, 26, 29, 31] plays the 25 
Round 4: Dean     holding [19, 23, 24, 41, 46, 49] plays the 24 
Reede wins the round which contains 7 penalty points

Round 5: Reede    holding [17, 20, 34, 35, 37] plays the 35 
Round 5: Matthew  holding [15, 27, 38, 43, 47] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 26 29 31 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 26, 29, 31] plays the 11 
Round 5: Dean     holding [19, 23, 41, 46, 49] plays the 49 
Dean wins the round which contains 1 penalty points

Round 6: Dean     holding [19, 23, 41, 46] plays the 19 
Round 6: Reede    holding [17, 20, 34, 37] plays the 37 
Round 6: Matthew  holding [27, 38, 43, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
13 26 29 31 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 26, 29, 31] plays the 13 
Matthew wins the round which contains 4 penalty points

Round 7: Matthew  holding [27, 38, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
26 29 31 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [26, 29, 31] plays the 29 
Round 7: Dean     holding [23, 41, 46] plays the 23 
Round 7: Reede    holding [17, 20, 34] plays the 17 
Matthew wins the round which contains 4 penalty points

Round 8: Matthew  holding [27, 38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
26 31 0 0 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 8: Eugenius holding [26, 31] plays the 26 
Round 8: Dean     holding [41, 46] plays the 46 
Round 8: Reede    holding [20, 34] plays the 20 
Dean wins the round 

Round 9: Dean     holding [41] plays the 41 
Round 9: Reede    holding [34] plays the 34 
Round 9: Matthew  holding [27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Dean wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 3 penalty points Dean (system)
#3 with 7 penalty points Reede (system)
#4 with 8 penalty points Matthew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 889148 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 13, 17, 21, 22, 25, 26, 31, 43, 47]
Table position 1: Finbar  : [12, 16, 24, 28, 29, 34, 35, 41, 46, 48]
Table position 2: Braedon : [10, 15, 18, 19, 20, 23, 36, 40, 44, 49]
Table position 3: Nicholas: [14, 27, 30, 32, 33, 37, 38, 39, 42, 45]

Discards:
Eugenius [31, 43, 47]
Finbar   [12, 35, 48]
Braedon  [10, 36, 49]
Nicholas [33, 39, 42]


Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 21 22 25 26 33 39 42 

21------------------------------------------------------------------------

Round 0: Eugenius holding [11, 13, 17, 21, 22, 25, 26, 33, 39, 42] plays the 21 
Round 0: Finbar   holding [16, 24, 28, 29, 31, 34, 41, 43, 46, 47] plays the 24 
Round 0: Braedon  holding [12, 15, 18, 19, 20, 23, 35, 40, 44, 48] plays the 18 
Round 0: Nicholas holding [10, 14, 27, 30, 32, 36, 37, 38, 45, 49] plays the 27 
Nicholas wins the round 

Round 1: Nicholas holding [10, 14, 30, 32, 36, 37, 38, 45, 49] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 22 25 26 33 39 42 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 17, 22, 25, 26, 33, 39, 42] plays the 22 
Round 1: Finbar   holding [16, 28, 29, 31, 34, 41, 43, 46, 47] plays the 28 
Round 1: Braedon  holding [12, 15, 19, 20, 23, 35, 40, 44, 48] plays the 35 
Braedon wins the round 

Round 2: Braedon  holding [12, 15, 19, 20, 23, 40, 44, 48] plays the 20 
Round 2: Nicholas holding [10, 30, 32, 36, 37, 38, 45, 49] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 25 26 33 39 42 0 0 

25------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 17, 25, 26, 33, 39, 42] plays the 25 
Round 2: Finbar   holding [16, 29, 31, 34, 41, 43, 46, 47] plays the 16 
Nicholas wins the round 

Round 3: Nicholas holding [10, 30, 32, 36, 37, 38, 49] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 26 33 39 42 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 17, 26, 33, 39, 42] plays the 26 
Round 3: Finbar   holding [29, 31, 34, 41, 43, 46, 47] plays the 46 
Round 3: Braedon  holding [12, 15, 19, 23, 40, 44, 48] plays the 40 
Finbar wins the round 

Round 4: Finbar   holding [29, 31, 34, 41, 43, 47] plays the 34 
Round 4: Braedon  holding [12, 15, 19, 23, 44, 48] plays the 48 
Round 4: Nicholas holding [30, 32, 36, 37, 38, 49] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 33 39 42 0 0 0 0 

42------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 17, 33, 39, 42] plays the 42 
Braedon wins the round which contains 7 penalty points

Round 5: Braedon  holding [12, 15, 19, 23, 44] plays the 12 
Round 5: Nicholas holding [30, 32, 37, 38, 49] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 33 39 0 0 0 0 0 

33------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 17, 33, 39] plays the 33 
Round 5: Finbar   holding [29, 31, 41, 43, 47] plays the 41 
Nicholas wins the round which contains 1 penalty points

Round 6: Nicholas holding [30, 32, 37, 49] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 39 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 13, 17, 39] plays the 11 
Round 6: Finbar   holding [29, 31, 43, 47] plays the 43 
Round 6: Braedon  holding [15, 19, 23, 44] plays the 23 
Finbar wins the round which contains 4 penalty points

Round 7: Finbar   holding [29, 31, 47] plays the 47 
Round 7: Braedon  holding [15, 19, 44] plays the 19 
Round 7: Nicholas holding [30, 32, 49] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 39 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 17, 39] plays the 13 
Finbar wins the round which contains 3 penalty points

Round 8: Finbar   holding [29, 31] plays the 29 
Round 8: Braedon  holding [15, 44] plays the 44 
Round 8: Nicholas holding [32, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
17 39 0 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 8: Eugenius holding [17, 39] plays the 17 
Finbar wins the round which contains 2 penalty points

Round 9: Finbar   holding [31] plays the 31 
Round 9: Braedon  holding [15] plays the 15 
Round 9: Nicholas holding [32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Finbar wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Nicholas (system)
#3 with 7 penalty points Braedon (system)
#4 with 10 penalty points Finbar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16651200 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Nicholas: [13, 16, 21, 23, 25, 33, 38, 40, 47, 49]
Table position 1: Marc    : [15, 19, 20, 24, 26, 34, 42, 43, 44, 48]
Table position 2: Braedon : [10, 11, 12, 18, 22, 28, 30, 39, 41, 45]
Table position 3: Eugenius: [14, 17, 27, 29, 31, 32, 35, 36, 37, 46]

Discards:
Nicholas [16, 33, 49]
Marc     [24, 34, 42]
Braedon  [18, 30, 45]
Eugenius [36, 37, 46]

Round 0: Nicholas holding [13, 21, 23, 25, 36, 37, 38, 40, 46, 47] plays the 40 
Round 0: Marc     holding [15, 16, 19, 20, 26, 33, 43, 44, 48, 49] plays the 48 
Round 0: Braedon  holding [10, 11, 12, 22, 24, 28, 34, 39, 41, 42] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 18 27 29 30 31 32 35 45 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 17, 18, 27, 29, 30, 31, 32, 35, 45] plays the 14 
Marc wins the round 

Round 1: Marc     holding [15, 16, 19, 20, 26, 33, 43, 44, 49] plays the 44 
Round 1: Braedon  holding [10, 11, 12, 24, 28, 34, 39, 41, 42] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
17 18 27 29 30 31 32 35 45 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [17, 18, 27, 29, 30, 31, 32, 35, 45] plays the 18 
Round 1: Nicholas holding [13, 21, 23, 25, 36, 37, 38, 46, 47] plays the 36 
Marc wins the round 

Round 2: Marc     holding [15, 16, 19, 20, 26, 33, 43, 49] plays the 16 
Round 2: Braedon  holding [11, 12, 24, 28, 34, 39, 41, 42] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 29 30 31 32 35 45 0 0 

30------------------------------------------------------------------------

Round 2: Eugenius holding [17, 27, 29, 30, 31, 32, 35, 45] plays the 30 
Round 2: Nicholas holding [13, 21, 23, 25, 37, 38, 46, 47] plays the 46 
Nicholas wins the round 

Round 3: Nicholas holding [13, 21, 23, 25, 37, 38, 47] plays the 21 
Round 3: Marc     holding [15, 19, 20, 26, 33, 43, 49] plays the 33 
Round 3: Braedon  holding [11, 12, 28, 34, 39, 41, 42] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 29 31 32 35 45 0 0 0 

27------------------------------------------------------------------------

Round 3: Eugenius holding [17, 27, 29, 31, 32, 35, 45] plays the 27 
Marc wins the round 

Round 4: Marc     holding [15, 19, 20, 26, 43, 49] plays the 49 
Round 4: Braedon  holding [11, 28, 34, 39, 41, 42] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 31 32 35 45 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [17, 29, 31, 32, 35, 45] plays the 35 
Round 4: Nicholas holding [13, 23, 25, 37, 38, 47] plays the 38 
Marc wins the round 

Round 5: Marc     holding [15, 19, 20, 26, 43] plays the 26 
Round 5: Braedon  holding [11, 34, 39, 41, 42] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 31 32 45 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [17, 29, 31, 32, 45] plays the 32 
Round 5: Nicholas holding [13, 23, 25, 37, 47] plays the 23 
Braedon wins the round which contains 1 penalty points

Round 6: Braedon  holding [11, 39, 41, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 31 45 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 6: Eugenius holding [17, 29, 31, 45] plays the 45 
Round 6: Nicholas holding [13, 25, 37, 47] plays the 25 
Round 6: Marc     holding [15, 19, 20, 43] plays the 20 
Eugenius wins the round which contains 7 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
17 29 31 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 29, 31] plays the 17 
Round 7: Nicholas holding [13, 37, 47] plays the 37 
Round 7: Marc     holding [15, 19, 43] plays the 43 
Round 7: Braedon  holding [11, 39, 41] plays the 41 
Marc wins the round which contains 4 penalty points

Round 8: Marc     holding [15, 19] plays the 19 
Round 8: Braedon  holding [11, 39] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 31] plays the 29 
Round 8: Nicholas holding [13, 47] plays the 47 
Nicholas wins the round which contains 4 penalty points

Round 9: Nicholas holding [13] plays the 13 
Round 9: Marc     holding [15] plays the 15 
Round 9: Braedon  holding [39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 1 penalty points Braedon (system)
#2 with 4 penalty points Nicholas (system)
#2 with 4 penalty points Marc (system)
#4 with 9 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12944130 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 15, 24, 26, 28, 34, 39, 40, 44, 48]
Table position 1: Livia   : [14, 16, 20, 29, 30, 31, 37, 43, 45, 49]
Table position 2: Marc    : [11, 13, 17, 21, 25, 33, 36, 38, 41, 46]
Table position 3: George  : [12, 18, 19, 22, 23, 27, 32, 35, 42, 47]

Discards:
Eugenius [40, 44, 48]
Livia    [14, 29, 31]
Marc     [11, 21, 25]
George   [19, 32, 47]


Debug output from Eugenius
------------------------------------------------------------------------
10 15 19 24 26 28 32 34 39 47 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 15, 19, 24, 26, 28, 32, 34, 39, 47] plays the 10 
Round 0: Livia    holding [16, 20, 30, 37, 40, 43, 44, 45, 48, 49] plays the 45 
Round 0: Marc     holding [13, 14, 17, 29, 31, 33, 36, 38, 41, 46] plays the 14 
Round 0: George   holding [11, 12, 18, 21, 22, 23, 25, 27, 35, 42] plays the 12 
Livia wins the round 

Round 1: Livia    holding [16, 20, 30, 37, 40, 43, 44, 48, 49] plays the 20 
Round 1: Marc     holding [13, 17, 29, 31, 33, 36, 38, 41, 46] plays the 46 
Round 1: George   holding [11, 18, 21, 22, 23, 25, 27, 35, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
15 19 24 26 28 32 34 39 47 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [15, 19, 24, 26, 28, 32, 34, 39, 47] plays the 15 
Marc wins the round which contains 7 penalty points

Round 2: Marc     holding [13, 17, 29, 31, 33, 36, 38, 41] plays the 38 
Round 2: George   holding [11, 18, 21, 22, 23, 25, 27, 35] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
19 24 26 28 32 34 39 47 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [19, 24, 26, 28, 32, 34, 39, 47] plays the 24 
Round 2: Livia    holding [16, 30, 37, 40, 43, 44, 48, 49] plays the 40 
Livia wins the round 

Round 3: Livia    holding [16, 30, 37, 43, 44, 48, 49] plays the 16 
Round 3: Marc     holding [13, 17, 29, 31, 33, 36, 41] plays the 36 
Round 3: George   holding [11, 18, 21, 23, 25, 27, 35] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
19 26 28 32 34 39 47 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [19, 26, 28, 32, 34, 39, 47] plays the 26 
Marc wins the round 

Round 4: Marc     holding [13, 17, 29, 31, 33, 41] plays the 33 
Round 4: George   holding [11, 21, 23, 25, 27, 35] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
19 28 32 34 39 47 0 0 0 0 

39------------------------------------------------------------------------

Round 4: Eugenius holding [19, 28, 32, 34, 39, 47] plays the 39 
Round 4: Livia    holding [30, 37, 43, 44, 48, 49] plays the 48 
Livia wins the round 

Round 5: Livia    holding [30, 37, 43, 44, 49] plays the 30 
Round 5: Marc     holding [13, 17, 29, 31, 41] plays the 13 
Round 5: George   holding [11, 23, 25, 27, 35] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
19 28 32 34 47 0 0 0 0 0 

28------------------------------------------------------------------------

Round 5: Eugenius holding [19, 28, 32, 34, 47] plays the 28 
Livia wins the round which contains 1 penalty points

Round 6: Livia    holding [37, 43, 44, 49] plays the 49 
Round 6: Marc     holding [17, 29, 31, 41] plays the 29 
Round 6: George   holding [11, 23, 25, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
19 32 34 47 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 6: Eugenius holding [19, 32, 34, 47] plays the 19 
Livia wins the round which contains 2 penalty points

Round 7: Livia    holding [37, 43, 44] plays the 43 
Round 7: Marc     holding [17, 31, 41] plays the 41 
Round 7: George   holding [11, 23, 25] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
32 34 47 0 0 0 0 0 0 0 

47------------------------------------------------------------------------

Round 7: Eugenius holding [32, 34, 47] plays the 47 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
32 34 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 8: Eugenius holding [32, 34] plays the 32 
Round 8: Livia    holding [37, 44] plays the 44 
Round 8: Marc     holding [17, 31] plays the 31 
Round 8: George   holding [11, 25] plays the 11 
Livia wins the round which contains 2 penalty points

Round 9: Livia    holding [37] plays the 37 
Round 9: Marc     holding [17] plays the 17 
Round 9: George   holding [25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
34 0 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 9: Eugenius holding [34] plays the 34 
Livia wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points George (system)
#2 with 4 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Livia (system)
#3 with 7 penalty points Marc (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7201773 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Connor  : [10, 14, 20, 23, 24, 30, 34, 38, 43, 44]
Table position 1: Oscar   : [13, 22, 26, 32, 33, 36, 40, 42, 45, 49]
Table position 2: Kangying: [15, 16, 17, 19, 27, 28, 31, 35, 46, 48]
Table position 3: Eugenius: [11, 12, 18, 21, 25, 29, 37, 39, 41, 47]

Discards:
Connor   [14, 20, 24]
Oscar    [32, 36, 42]
Kangying [17, 28, 35]
Eugenius [39, 41, 47]

Round 0: Connor   holding [10, 23, 30, 34, 38, 39, 41, 43, 44, 47] plays the 34 
Round 0: Oscar    holding [13, 14, 20, 22, 24, 26, 33, 40, 45, 49] plays the 24 
Round 0: Kangying holding [15, 16, 19, 27, 31, 32, 36, 42, 46, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 17 18 21 25 28 29 35 37 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 17, 18, 21, 25, 28, 29, 35, 37] plays the 12 
Kangying wins the round 

Round 1: Kangying holding [15, 16, 19, 27, 31, 32, 36, 42, 46] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 18 21 25 28 29 35 37 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [11, 17, 18, 21, 25, 28, 29, 35, 37] plays the 18 
Round 1: Connor   holding [10, 23, 30, 38, 39, 41, 43, 44, 47] plays the 10 
Round 1: Oscar    holding [13, 14, 20, 22, 26, 33, 40, 45, 49] plays the 45 
Oscar wins the round which contains 7 penalty points

Round 2: Oscar    holding [13, 14, 20, 22, 26, 33, 40, 49] plays the 26 
Round 2: Kangying holding [15, 16, 19, 27, 31, 32, 36, 46] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 21 25 28 29 35 37 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [11, 17, 21, 25, 28, 29, 35, 37] plays the 28 
Round 2: Connor   holding [23, 30, 38, 39, 41, 43, 44, 47] plays the 44 
Connor wins the round 

Round 3: Connor   holding [23, 30, 38, 39, 41, 43, 47] plays the 38 
Round 3: Oscar    holding [13, 14, 20, 22, 33, 40, 49] plays the 14 
Round 3: Kangying holding [15, 16, 19, 27, 31, 32, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 21 25 29 35 37 0 0 0 

11 chah------------------------------------------------------------------------

Round 3: Eugenius holding [11, 17, 21, 25, 29, 35, 37] plays the 11 
Kangying wins the round which contains 1 penalty points

Round 4: Kangying holding [15, 16, 19, 27, 31, 32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
17 21 25 29 35 37 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 4: Eugenius holding [17, 21, 25, 29, 35, 37] plays the 17 
Round 4: Connor   holding [23, 30, 39, 41, 43, 47] plays the 30 
Round 4: Oscar    holding [13, 20, 22, 33, 40, 49] plays the 22 
Kangying wins the round which contains 1 penalty points

Round 5: Kangying holding [15, 16, 19, 27, 31] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
21 25 29 35 37 0 0 0 0 0 

21------------------------------------------------------------------------

Round 5: Eugenius holding [21, 25, 29, 35, 37] plays the 21 
Round 5: Connor   holding [23, 39, 41, 43, 47] plays the 39 
Round 5: Oscar    holding [13, 20, 33, 40, 49] plays the 33 
Connor wins the round 

Round 6: Connor   holding [23, 41, 43, 47] plays the 41 
Round 6: Oscar    holding [13, 20, 40, 49] plays the 13 
Round 6: Kangying holding [16, 19, 27, 31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 35 37 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 6: Eugenius holding [25, 29, 35, 37] plays the 29 
Connor wins the round which contains 4 penalty points

Round 7: Connor   holding [23, 43, 47] plays the 47 
Round 7: Oscar    holding [20, 40, 49] plays the 20 
Round 7: Kangying holding [16, 19, 27] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
25 35 37 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 7: Eugenius holding [25, 35, 37] plays the 37 
Connor wins the round which contains 3 penalty points

Round 8: Connor   holding [23, 43] plays the 43 
Round 8: Oscar    holding [40, 49] plays the 40 
Round 8: Kangying holding [16, 27] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
25 35 0 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 8: Eugenius holding [25, 35] plays the 25 
Connor wins the round which contains 1 penalty points

Round 9: Connor   holding [23] plays the 23 
Round 9: Oscar    holding [49] plays the 49 
Round 9: Kangying holding [27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Connor wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 2 penalty points Kangying (system)
#3 with 7 penalty points Oscar (system)
#4 with 9 penalty points Connor (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6791434 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Dean    : [12, 14, 18, 33, 34, 38, 41, 43, 46, 48]
Table position 1: Eugenius: [11, 13, 17, 19, 20, 25, 29, 37, 40, 49]
Table position 2: Jamal   : [16, 22, 23, 24, 27, 28, 35, 39, 42, 44]
Table position 3: Zachary : [10, 15, 21, 26, 30, 31, 32, 36, 45, 47]

Discards:
Dean     [43, 46, 48]
Eugenius [37, 40, 49]
Jamal    [22, 23, 39]
Zachary  [15, 30, 36]

Round 0: Dean     holding [12, 14, 15, 18, 30, 33, 34, 36, 38, 41] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 19 20 25 29 43 46 48 

20------------------------------------------------------------------------

Round 0: Eugenius holding [11, 13, 17, 19, 20, 25, 29, 43, 46, 48] plays the 20 
Round 0: Jamal    holding [16, 24, 27, 28, 35, 37, 40, 42, 44, 49] plays the 16 
Round 0: Zachary  holding [10, 21, 22, 23, 26, 31, 32, 39, 45, 47] plays the 22 
Dean wins the round 

Round 1: Dean     holding [12, 14, 15, 18, 30, 33, 34, 36, 41] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 19 25 29 43 46 48 0 

46------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 17, 19, 25, 29, 43, 46, 48] plays the 46 
Round 1: Jamal    holding [24, 27, 28, 35, 37, 40, 42, 44, 49] plays the 27 
Round 1: Zachary  holding [10, 21, 23, 26, 31, 32, 39, 45, 47] plays the 45 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 19 25 29 43 48 0 0 

25------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 17, 19, 25, 29, 43, 48] plays the 25 
Round 2: Jamal    holding [24, 28, 35, 37, 40, 42, 44, 49] plays the 40 
Round 2: Zachary  holding [10, 21, 23, 26, 31, 32, 39, 47] plays the 10 
Round 2: Dean     holding [12, 14, 15, 18, 30, 33, 34, 41] plays the 15 
Jamal wins the round 

Round 3: Jamal    holding [24, 28, 35, 37, 42, 44, 49] plays the 24 
Round 3: Zachary  holding [21, 23, 26, 31, 32, 39, 47] plays the 39 
Round 3: Dean     holding [12, 14, 18, 30, 33, 34, 41] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 19 29 43 48 0 0 0 

48------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 17, 19, 29, 43, 48] plays the 48 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 19 29 43 0 0 0 0 

11------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 17, 19, 29, 43] plays the 11 
Round 4: Jamal    holding [28, 35, 37, 42, 44, 49] plays the 37 
Round 4: Zachary  holding [21, 23, 26, 31, 32, 47] plays the 47 
Round 4: Dean     holding [12, 14, 18, 30, 34, 41] plays the 41 
Zachary wins the round which contains 4 penalty points

Round 5: Zachary  holding [21, 23, 26, 31, 32] plays the 26 
Round 5: Dean     holding [12, 14, 18, 30, 34] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 29 43 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 19, 29, 43] plays the 13 
Round 5: Jamal    holding [28, 35, 42, 44, 49] plays the 28 
Jamal wins the round which contains 1 penalty points

Round 6: Jamal    holding [35, 42, 44, 49] plays the 49 
Round 6: Zachary  holding [21, 23, 31, 32] plays the 21 
Round 6: Dean     holding [14, 18, 30, 34] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 43 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 6: Eugenius holding [17, 19, 29, 43] plays the 17 
Jamal wins the round which contains 1 penalty points

Round 7: Jamal    holding [35, 42, 44] plays the 42 
Round 7: Zachary  holding [23, 31, 32] plays the 32 
Round 7: Dean     holding [18, 30, 34] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 43 0 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 7: Eugenius holding [19, 29, 43] plays the 19 
Jamal wins the round which contains 8 penalty points

Round 8: Jamal    holding [35, 44] plays the 44 
Round 8: Zachary  holding [23, 31] plays the 31 
Round 8: Dean     holding [30, 34] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
29 43 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 8: Eugenius holding [29, 43] plays the 29 
Jamal wins the round which contains 2 penalty points

Round 9: Jamal    holding [35] plays the 35 
Round 9: Zachary  holding [23] plays the 23 
Round 9: Dean     holding [34] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43 chah------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Jamal wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Dean (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Zachary (system)
#4 with 14 penalty points Jamal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 8897959 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Minh    : [14, 17, 20, 24, 28, 30, 34, 37, 44, 45]
Table position 1: Eugenius: [15, 21, 23, 27, 31, 33, 35, 38, 39, 42]
Table position 2: Sabrina : [10, 11, 18, 19, 25, 26, 40, 46, 48, 49]
Table position 3: Peter   : [12, 13, 16, 22, 29, 32, 36, 41, 43, 47]

Discards:
Minh     [28, 34, 44]
Eugenius [38, 39, 42]
Sabrina  [19, 26, 49]
Peter    [13, 22, 36]

Round 0: Minh     holding [13, 14, 17, 20, 22, 24, 30, 36, 37, 45] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
15 21 23 27 28 31 33 34 35 44 

15------------------------------------------------------------------------

Round 0: Eugenius holding [15, 21, 23, 27, 28, 31, 33, 34, 35, 44] plays the 15 
Round 0: Sabrina  holding [10, 11, 18, 25, 38, 39, 40, 42, 46, 48] plays the 48 
Round 0: Peter    holding [12, 16, 19, 26, 29, 32, 41, 43, 47, 49] plays the 16 
Sabrina wins the round 

Round 1: Sabrina  holding [10, 11, 18, 25, 38, 39, 40, 42, 46] plays the 40 
Round 1: Peter    holding [12, 19, 26, 29, 32, 41, 43, 47, 49] plays the 32 
Round 1: Minh     holding [13, 14, 17, 20, 22, 30, 36, 37, 45] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
21 23 27 28 31 33 34 35 44 0 

28------------------------------------------------------------------------

Round 1: Eugenius holding [21, 23, 27, 28, 31, 33, 34, 35, 44] plays the 28 
Sabrina wins the round 

Round 2: Sabrina  holding [10, 11, 18, 25, 38, 39, 42, 46] plays the 46 
Round 2: Peter    holding [12, 19, 26, 29, 41, 43, 47, 49] plays the 12 
Round 2: Minh     holding [13, 14, 17, 20, 22, 36, 37, 45] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
21 23 27 31 33 34 35 44 0 0 

34------------------------------------------------------------------------

Round 2: Eugenius holding [21, 23, 27, 31, 33, 34, 35, 44] plays the 34 
Sabrina wins the round 

Round 3: Sabrina  holding [10, 11, 18, 25, 38, 39, 42] plays the 25 
Round 3: Peter    holding [19, 26, 29, 41, 43, 47, 49] plays the 41 
Round 3: Minh     holding [13, 14, 17, 20, 22, 37, 45] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
21 23 27 31 33 35 44 0 0 0 

35------------------------------------------------------------------------

Round 3: Eugenius holding [21, 23, 27, 31, 33, 35, 44] plays the 35 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
21 23 27 31 33 44 0 0 0 0 

21------------------------------------------------------------------------

Round 4: Eugenius holding [21, 23, 27, 31, 33, 44] plays the 21 
Round 4: Sabrina  holding [10, 11, 18, 38, 39, 42] plays the 42 
Round 4: Peter    holding [19, 26, 29, 43, 47, 49] plays the 49 
Round 4: Minh     holding [13, 14, 17, 22, 37, 45] plays the 45 
Peter wins the round which contains 7 penalty points

Round 5: Peter    holding [19, 26, 29, 43, 47] plays the 29 
Round 5: Minh     holding [13, 14, 17, 22, 37] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
23 27 31 33 44 0 0 0 0 0 

23------------------------------------------------------------------------

Round 5: Eugenius holding [23, 27, 31, 33, 44] plays the 23 
Round 5: Sabrina  holding [10, 11, 18, 38, 39] plays the 11 
Peter wins the round which contains 4 penalty points

Round 6: Peter    holding [19, 26, 43, 47] plays the 43 
Round 6: Minh     holding [13, 14, 22, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
27 31 33 44 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 6: Eugenius holding [27, 31, 33, 44] plays the 31 
Round 6: Sabrina  holding [10, 18, 38, 39] plays the 18 
Peter wins the round which contains 3 penalty points

Round 7: Peter    holding [19, 26, 47] plays the 19 
Round 7: Minh     holding [13, 14, 22] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
27 33 44 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [27, 33, 44] plays the 27 
Round 7: Sabrina  holding [10, 38, 39] plays the 10 
Peter wins the round which contains 2 penalty points

Round 8: Peter    holding [26, 47] plays the 26 
Round 8: Minh     holding [14, 22] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
33 44 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 8: Eugenius holding [33, 44] plays the 44 
Round 8: Sabrina  holding [38, 39] plays the 38 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
33 0 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 9: Eugenius holding [33] plays the 33 
Round 9: Sabrina  holding [39] plays the 39 
Round 9: Peter    holding [47] plays the 47 
Round 9: Minh     holding [22] plays the 22 
Sabrina wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Minh (system)
#2 with 1 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Sabrina (system)
#4 with 16 penalty points Peter (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2239856 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Oscar   : [18, 19, 21, 23, 27, 34, 36, 42, 46, 48]
Table position 1: Eugenius: [13, 17, 22, 31, 33, 37, 39, 40, 44, 45]
Table position 2: Kane    : [12, 14, 15, 20, 28, 30, 32, 35, 38, 47]
Table position 3: David   : [10, 11, 16, 24, 25, 26, 29, 41, 43, 49]

Discards:
Oscar    [18, 34, 46]
Eugenius [40, 44, 45]
Kane     [12, 20, 35]
David    [11, 25, 49]

Round 0: Oscar    holding [11, 19, 21, 23, 25, 27, 36, 42, 48, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 18 22 31 33 34 37 39 46 

13 chah------------------------------------------------------------------------

Round 0: Eugenius holding [13, 17, 18, 22, 31, 33, 34, 37, 39, 46] plays the 13 
Round 0: Kane     holding [14, 15, 28, 30, 32, 38, 40, 44, 45, 47] plays the 14 
Round 0: David    holding [10, 12, 16, 20, 24, 26, 29, 35, 41, 43] plays the 35 
Oscar wins the round which contains 1 penalty points

Round 1: Oscar    holding [11, 19, 21, 23, 25, 27, 36, 42, 48] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
17 18 22 31 33 34 37 39 46 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [17, 18, 22, 31, 33, 34, 37, 39, 46] plays the 18 
Round 1: Kane     holding [15, 28, 30, 32, 38, 40, 44, 45, 47] plays the 15 
Round 1: David    holding [10, 12, 16, 20, 24, 26, 29, 41, 43] plays the 16 
Oscar wins the round 

Round 2: Oscar    holding [11, 19, 21, 23, 25, 27, 42, 48] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 31 33 34 37 39 46 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [17, 22, 31, 33, 34, 37, 39, 46] plays the 22 
Round 2: Kane     holding [28, 30, 32, 38, 40, 44, 45, 47] plays the 38 
Round 2: David    holding [10, 12, 20, 24, 26, 29, 41, 43] plays the 12 
Oscar wins the round which contains 7 penalty points

Round 3: Oscar    holding [11, 19, 21, 23, 25, 27, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 33 34 37 39 46 0 0 0 

33------------------------------------------------------------------------

Round 3: Eugenius holding [17, 31, 33, 34, 37, 39, 46] plays the 33 
Round 3: Kane     holding [28, 30, 32, 40, 44, 45, 47] plays the 30 
Round 3: David    holding [10, 20, 24, 26, 29, 41, 43] plays the 24 
Oscar wins the round 

Round 4: Oscar    holding [11, 19, 21, 23, 25, 27] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 34 37 39 46 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 4: Eugenius holding [17, 31, 34, 37, 39, 46] plays the 17 
Round 4: Kane     holding [28, 32, 40, 44, 45, 47] plays the 45 
Round 4: David    holding [10, 20, 26, 29, 41, 43] plays the 20 
Kane wins the round which contains 1 penalty points

Round 5: Kane     holding [28, 32, 40, 44, 47] plays the 40 
Round 5: David    holding [10, 26, 29, 41, 43] plays the 10 
Round 5: Oscar    holding [11, 19, 21, 23, 27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
31 34 37 39 46 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [31, 34, 37, 39, 46] plays the 34 
Kane wins the round 

Round 6: Kane     holding [28, 32, 44, 47] plays the 44 
Round 6: David    holding [26, 29, 41, 43] plays the 26 
Round 6: Oscar    holding [11, 19, 21, 23] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 39 46 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 6: Eugenius holding [31, 37, 39, 46] plays the 46 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
31 37 39 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [31, 37, 39] plays the 31 
Round 7: Kane     holding [28, 32, 47] plays the 47 
Round 7: David    holding [29, 41, 43] plays the 43 
Round 7: Oscar    holding [11, 21, 23] plays the 23 
Kane wins the round which contains 4 penalty points

Round 8: Kane     holding [28, 32] plays the 28 
Round 8: David    holding [29, 41] plays the 29 
Round 8: Oscar    holding [11, 21] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
37 39 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 8: Eugenius holding [37, 39] plays the 37 
Kane wins the round which contains 2 penalty points

Round 9: Kane     holding [32] plays the 32 
Round 9: David    holding [41] plays the 41 
Round 9: Oscar    holding [11] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39 chah------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Kane wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points David (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 8 penalty points Oscar (system)
#4 with 9 penalty points Kane (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15334138 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Costa   : [12, 14, 15, 17, 20, 22, 26, 39, 40, 44]
Table position 1: Claire  : [18, 19, 23, 24, 25, 27, 33, 35, 37, 49]
Table position 2: Eugenius: [16, 28, 31, 32, 34, 38, 42, 43, 45, 48]
Table position 3: Kangying: [10, 11, 13, 21, 29, 30, 36, 41, 46, 47]

Discards:
Costa    [15, 26, 44]
Claire   [18, 25, 33]
Eugenius [43, 45, 48]
Kangying [13, 46, 47]

Round 0: Costa    holding [12, 13, 14, 17, 20, 22, 39, 40, 46, 47] plays the 39 
Round 0: Claire   holding [15, 19, 23, 24, 26, 27, 35, 37, 44, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
16 18 25 28 31 32 33 34 38 42 

18------------------------------------------------------------------------

Round 0: Eugenius holding [16, 18, 25, 28, 31, 32, 33, 34, 38, 42] plays the 18 
Round 0: Kangying holding [10, 11, 21, 29, 30, 36, 41, 43, 45, 48] plays the 21 
Costa wins the round 

Round 1: Costa    holding [12, 13, 14, 17, 20, 22, 40, 46, 47] plays the 20 
Round 1: Claire   holding [19, 23, 24, 26, 27, 35, 37, 44, 49] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
16 25 28 31 32 33 34 38 42 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 25, 28, 31, 32, 33, 34, 38, 42] plays the 16 
Round 1: Kangying holding [10, 11, 29, 30, 36, 41, 43, 45, 48] plays the 36 
Kangying wins the round 

Round 2: Kangying holding [10, 11, 29, 30, 41, 43, 45, 48] plays the 45 
Round 2: Costa    holding [12, 13, 14, 17, 22, 40, 46, 47] plays the 40 
Round 2: Claire   holding [19, 23, 24, 27, 35, 37, 44, 49] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
25 28 31 32 33 34 38 42 0 0 

25------------------------------------------------------------------------

Round 2: Eugenius holding [25, 28, 31, 32, 33, 34, 38, 42] plays the 25 
Kangying wins the round 

Round 3: Kangying holding [10, 11, 29, 30, 41, 43, 48] plays the 48 
Round 3: Costa    holding [12, 13, 14, 17, 22, 46, 47] plays the 46 
Round 3: Claire   holding [19, 23, 24, 27, 37, 44, 49] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
28 31 32 33 34 38 42 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [28, 31, 32, 33, 34, 38, 42] plays the 28 
Kangying wins the round 

Round 4: Kangying holding [10, 11, 29, 30, 41, 43] plays the 10 
Round 4: Costa    holding [12, 13, 14, 17, 22, 47] plays the 12 
Round 4: Claire   holding [19, 23, 27, 37, 44, 49] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
31 32 33 34 38 42 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [31, 32, 33, 34, 38, 42] plays the 32 
Claire wins the round 

Round 5: Claire   holding [19, 23, 27, 37, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
31 33 34 38 42 0 0 0 0 0 

42------------------------------------------------------------------------

Round 5: Eugenius holding [31, 33, 34, 38, 42] plays the 42 
Round 5: Kangying holding [11, 29, 30, 41, 43] plays the 29 
Round 5: Costa    holding [13, 14, 17, 22, 47] plays the 14 
Claire wins the round which contains 8 penalty points

Round 6: Claire   holding [19, 23, 27, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
31 33 34 38 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 6: Eugenius holding [31, 33, 34, 38] plays the 31 
Round 6: Kangying holding [11, 30, 41, 43] plays the 11 
Round 6: Costa    holding [13, 17, 22, 47] plays the 13 
Claire wins the round which contains 4 penalty points

Round 7: Claire   holding [19, 23, 27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
33 34 38 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 7: Eugenius holding [33, 34, 38] plays the 33 
Round 7: Kangying holding [30, 41, 43] plays the 30 
Round 7: Costa    holding [17, 22, 47] plays the 22 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
34 38 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 8: Eugenius holding [34, 38] plays the 34 
Round 8: Kangying holding [41, 43] plays the 41 
Round 8: Costa    holding [17, 47] plays the 17 
Round 8: Claire   holding [19, 23] plays the 19 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Round 9: Kangying holding [43] plays the 43 
Round 9: Costa    holding [47] plays the 47 
Round 9: Claire   holding [23] plays the 23 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Costa (system)
#1 with 0 penalty points Kangying (system)
#3 with 6 penalty points Eugenius (dodo.c)
#4 with 12 penalty points Claire (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10257392 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 15, 23, 27, 36, 39, 42, 46, 47, 49]
Table position 1: Alex    : [12, 13, 14, 18, 30, 33, 40, 44, 45, 48]
Table position 2: David   : [11, 17, 20, 21, 24, 26, 29, 32, 35, 38]
Table position 3: Peter   : [16, 19, 22, 25, 28, 31, 34, 37, 41, 43]

Discards:
Eugenius [46, 47, 49]
Alex     [12, 45, 48]
David    [29, 32, 38]
Peter    [25, 34, 41]


Debug output from Eugenius
------------------------------------------------------------------------
10 15 23 25 27 34 36 39 41 42 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 15, 23, 25, 27, 34, 36, 39, 41, 42] plays the 10 
Round 0: Alex     holding [13, 14, 18, 30, 33, 40, 44, 46, 47, 49] plays the 14 
Round 0: David    holding [11, 12, 17, 20, 21, 24, 26, 35, 45, 48] plays the 45 
Round 0: Peter    holding [16, 19, 22, 28, 29, 31, 32, 37, 38, 43] plays the 32 
David wins the round 

Round 1: David    holding [11, 12, 17, 20, 21, 24, 26, 35, 48] plays the 48 
Round 1: Peter    holding [16, 19, 22, 28, 29, 31, 37, 38, 43] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
15 23 25 27 34 36 39 41 42 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [15, 23, 25, 27, 34, 36, 39, 41, 42] plays the 15 
Round 1: Alex     holding [13, 18, 30, 33, 40, 44, 46, 47, 49] plays the 46 
David wins the round 

Round 2: David    holding [11, 12, 17, 20, 21, 24, 26, 35] plays the 24 
Round 2: Peter    holding [19, 22, 28, 29, 31, 37, 38, 43] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 27 34 36 39 41 42 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [23, 25, 27, 34, 36, 39, 41, 42] plays the 27 
Round 2: Alex     holding [13, 18, 30, 33, 40, 44, 47, 49] plays the 18 
Peter wins the round 

Round 3: Peter    holding [19, 22, 28, 29, 31, 37, 43] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 34 36 39 41 42 0 0 0 

34------------------------------------------------------------------------

Round 3: Eugenius holding [23, 25, 34, 36, 39, 41, 42] plays the 34 
Round 3: Alex     holding [13, 30, 33, 40, 44, 47, 49] plays the 40 
Round 3: David    holding [11, 12, 17, 20, 21, 26, 35] plays the 35 
Alex wins the round 

Round 4: Alex     holding [13, 30, 33, 44, 47, 49] plays the 44 
Round 4: David    holding [11, 12, 17, 20, 21, 26] plays the 26 
Round 4: Peter    holding [19, 22, 29, 31, 37, 43] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 36 39 41 42 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius holding [23, 25, 36, 39, 41, 42] plays the 36 
Alex wins the round 

Round 5: Alex     holding [13, 30, 33, 47, 49] plays the 33 
Round 5: David    holding [11, 12, 17, 20, 21] plays the 21 
Round 5: Peter    holding [19, 29, 31, 37, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 39 41 42 0 0 0 0 0 

39------------------------------------------------------------------------

Round 5: Eugenius holding [23, 25, 39, 41, 42] plays the 39 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
23 25 41 42 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 25, 41, 42] plays the 23 
Round 6: Alex     holding [13, 30, 47, 49] plays the 47 
Round 6: David    holding [11, 12, 17, 20] plays the 17 
Round 6: Peter    holding [19, 29, 31, 37] plays the 31 
Alex wins the round which contains 4 penalty points

Round 7: Alex     holding [13, 30, 49] plays the 13 
Round 7: David    holding [11, 12, 20] plays the 11 
Round 7: Peter    holding [19, 29, 37] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
25 41 42 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 7: Eugenius holding [25, 41, 42] plays the 41 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
25 42 0 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 8: Eugenius holding [25, 42] plays the 25 
Round 8: Alex     holding [30, 49] plays the 30 
Round 8: David    holding [12, 20] plays the 20 
Round 8: Peter    holding [29, 37] plays the 29 
Alex wins the round which contains 1 penalty points

Round 9: Alex     holding [49] plays the 49 
Round 9: David    holding [12] plays the 12 
Round 9: Peter    holding [37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
42 0 0 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 9: Eugenius holding [42] plays the 42 
Alex wins the round which contains 8 penalty points


Finishing Positions

#1 with 0 penalty points David (system)
#1 with 0 penalty points Peter (system)
#3 with 5 penalty points Eugenius (dodo.c)
#4 with 13 penalty points Alex (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2321658 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Heather : [12, 18, 19, 20, 23, 24, 31, 35, 40, 45]
Table position 1: Eugenius: [22, 25, 28, 32, 33, 36, 39, 47, 48, 49]
Table position 2: Trung   : [10, 11, 17, 21, 34, 37, 38, 43, 44, 46]
Table position 3: Costa   : [13, 14, 15, 16, 26, 27, 29, 30, 41, 42]

Discards:
Heather  [18, 20, 45]
Eugenius [47, 48, 49]
Trung    [10, 34, 46]
Costa    [26, 30, 42]

Round 0: Heather  holding [12, 19, 23, 24, 26, 30, 31, 35, 40, 42] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
18 20 22 25 28 32 33 36 39 45 

18------------------------------------------------------------------------

Round 0: Eugenius holding [18, 20, 22, 25, 28, 32, 33, 36, 39, 45] plays the 18 
Round 0: Trung    holding [11, 17, 21, 37, 38, 43, 44, 47, 48, 49] plays the 21 
Round 0: Costa    holding [10, 13, 14, 15, 16, 27, 29, 34, 41, 46] plays the 10 
Heather wins the round 

Round 1: Heather  holding [12, 19, 23, 26, 30, 31, 35, 40, 42] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
20 22 25 28 32 33 36 39 45 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [20, 22, 25, 28, 32, 33, 36, 39, 45] plays the 20 
Round 1: Trung    holding [11, 17, 37, 38, 43, 44, 47, 48, 49] plays the 44 
Round 1: Costa    holding [13, 14, 15, 16, 27, 29, 34, 41, 46] plays the 16 
Trung wins the round 

Round 2: Trung    holding [11, 17, 37, 38, 43, 47, 48, 49] plays the 49 
Round 2: Costa    holding [13, 14, 15, 27, 29, 34, 41, 46] plays the 14 
Round 2: Heather  holding [19, 23, 26, 30, 31, 35, 40, 42] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 28 32 33 36 39 45 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [22, 25, 28, 32, 33, 36, 39, 45] plays the 28 
Trung wins the round 

Round 3: Trung    holding [11, 17, 37, 38, 43, 47, 48] plays the 48 
Round 3: Costa    holding [13, 15, 27, 29, 34, 41, 46] plays the 15 
Round 3: Heather  holding [19, 23, 26, 30, 31, 40, 42] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 32 33 36 39 45 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [22, 25, 32, 33, 36, 39, 45] plays the 22 
Trung wins the round 

Round 4: Trung    holding [11, 17, 37, 38, 43, 47] plays the 38 
Round 4: Costa    holding [13, 27, 29, 34, 41, 46] plays the 46 
Round 4: Heather  holding [19, 23, 26, 30, 31, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
25 32 33 36 39 45 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [25, 32, 33, 36, 39, 45] plays the 32 
Costa wins the round which contains 7 penalty points

Round 5: Costa    holding [13, 27, 29, 34, 41] plays the 27 
Round 5: Heather  holding [19, 23, 26, 30, 31] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
25 33 36 39 45 0 0 0 0 0 

33------------------------------------------------------------------------

Round 5: Eugenius holding [25, 33, 36, 39, 45] plays the 33 
Round 5: Trung    holding [11, 17, 37, 43, 47] plays the 37 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
25 36 39 45 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 6: Eugenius holding [25, 36, 39, 45] plays the 25 
Round 6: Trung    holding [11, 17, 43, 47] plays the 47 
Round 6: Costa    holding [13, 29, 34, 41] plays the 34 
Round 6: Heather  holding [19, 23, 26, 31] plays the 19 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
36 39 45 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 7: Eugenius holding [36, 39, 45] plays the 36 
Round 7: Trung    holding [11, 17, 43] plays the 11 
Round 7: Costa    holding [13, 29, 41] plays the 13 
Round 7: Heather  holding [23, 26, 31] plays the 26 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
39 45 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 8: Eugenius holding [39, 45] plays the 39 
Round 8: Trung    holding [17, 43] plays the 43 
Round 8: Costa    holding [29, 41] plays the 41 
Round 8: Heather  holding [23, 31] plays the 31 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Round 9: Trung    holding [17] plays the 17 
Round 9: Costa    holding [29] plays the 29 
Round 9: Heather  holding [23] plays the 23 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Heather (system)
#1 with 0 penalty points Trung (system)
#3 with 7 penalty points Costa (system)
#4 with 11 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12095443 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Livia    : [18, 21, 23, 24, 28, 35, 36, 38, 44, 48]
Table position 1: Jamal    : [10, 20, 25, 30, 32, 33, 34, 41, 46, 47]
Table position 2: Elizabeth: [13, 15, 17, 19, 26, 27, 39, 42, 43, 49]
Table position 3: Eugenius : [11, 12, 14, 16, 22, 29, 31, 37, 40, 45]

Discards:
Livia     [24, 36, 48]
Jamal     [30, 33, 47]
Elizabeth [15, 17, 27]
Eugenius  [37, 40, 45]

Round 0: Livia     holding [18, 21, 23, 28, 35, 37, 38, 40, 44, 45] plays the 18 
Round 0: Jamal     holding [10, 20, 24, 25, 32, 34, 36, 41, 46, 48] plays the 34 
Round 0: Elizabeth holding [13, 19, 26, 30, 33, 39, 42, 43, 47, 49] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 14 15 16 17 22 27 29 31 

12------------------------------------------------------------------------

Round 0: Eugenius  holding [11, 12, 14, 15, 16, 17, 22, 27, 29, 31] plays the 12 
Jamal wins the round 

Round 1: Jamal     holding [10, 20, 24, 25, 32, 36, 41, 46, 48] plays the 20 
Round 1: Elizabeth holding [13, 19, 26, 33, 39, 42, 43, 47, 49] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 15 16 17 22 27 29 31 0 

14------------------------------------------------------------------------

Round 1: Eugenius  holding [11, 14, 15, 16, 17, 22, 27, 29, 31] plays the 14 
Round 1: Livia     holding [21, 23, 28, 35, 37, 38, 40, 44, 45] plays the 45 
Livia wins the round 

Round 2: Livia     holding [21, 23, 28, 35, 37, 38, 40, 44] plays the 21 
Round 2: Jamal     holding [10, 24, 25, 32, 36, 41, 46, 48] plays the 36 
Round 2: Elizabeth holding [13, 19, 33, 39, 42, 43, 47, 49] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 16 17 22 27 29 31 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius  holding [11, 15, 16, 17, 22, 27, 29, 31] plays the 15 
Jamal wins the round 

Round 3: Jamal     holding [10, 24, 25, 32, 41, 46, 48] plays the 24 
Round 3: Elizabeth holding [13, 19, 39, 42, 43, 47, 49] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 17 22 27 29 31 0 0 0 

16------------------------------------------------------------------------

Round 3: Eugenius  holding [11, 16, 17, 22, 27, 29, 31] plays the 16 
Round 3: Livia     holding [23, 28, 35, 37, 38, 40, 44] plays the 44 
Livia wins the round which contains 7 penalty points

Round 4: Livia     holding [23, 28, 35, 37, 38, 40] plays the 38 
Round 4: Jamal     holding [10, 25, 32, 41, 46, 48] plays the 10 
Round 4: Elizabeth holding [13, 19, 39, 43, 47, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 22 27 29 31 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius  holding [11, 17, 22, 27, 29, 31] plays the 22 
Livia wins the round 

Round 5: Livia     holding [23, 28, 35, 37, 40] plays the 35 
Round 5: Jamal     holding [25, 32, 41, 46, 48] plays the 25 
Round 5: Elizabeth holding [13, 19, 39, 43, 47] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 27 29 31 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius  holding [11, 17, 27, 29, 31] plays the 11 
Livia wins the round which contains 2 penalty points

Round 6: Livia     holding [23, 28, 37, 40] plays the 40 
Round 6: Jamal     holding [32, 41, 46, 48] plays the 32 
Round 6: Elizabeth holding [19, 39, 43, 47] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 29 31 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 6: Eugenius  holding [17, 27, 29, 31] plays the 17 
Livia wins the round which contains 1 penalty points

Round 7: Livia     holding [23, 28, 37] plays the 37 
Round 7: Jamal     holding [41, 46, 48] plays the 41 
Round 7: Elizabeth holding [19, 43, 47] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 31 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius  holding [27, 29, 31] plays the 29 
Jamal wins the round which contains 4 penalty points

Round 8: Jamal     holding [46, 48] plays the 48 
Round 8: Elizabeth holding [43, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
27 31 0 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 8: Eugenius  holding [27, 31] plays the 27 
Round 8: Livia     holding [23, 28] plays the 28 
Jamal wins the round which contains 1 penalty points

Round 9: Jamal     holding [46] plays the 46 
Round 9: Elizabeth holding [43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 9: Eugenius  holding [31] plays the 31 
Round 9: Livia     holding [23] plays the 23 
Jamal wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Elizabeth (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 8 penalty points Jamal (system)
#4 with 10 penalty points Livia (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13517718 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Zachary : [16, 24, 26, 34, 40, 43, 45, 46, 48, 49]
Table position 1: Eugenius: [12, 13, 19, 22, 27, 31, 32, 33, 42, 47]
Table position 2: Nathan  : [10, 14, 20, 21, 23, 25, 28, 29, 30, 39]
Table position 3: Aydin   : [11, 15, 17, 18, 35, 36, 37, 38, 41, 44]

Discards:
Zachary  [24, 43, 49]
Eugenius [33, 42, 47]
Nathan   [25, 30, 39]
Aydin    [11, 17, 36]

Round 0: Zachary  holding [11, 16, 17, 26, 34, 36, 40, 45, 46, 48] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 19 22 24 27 31 32 43 49 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 13, 19, 22, 24, 27, 31, 32, 43, 49] plays the 12 
Round 0: Nathan   holding [10, 14, 20, 21, 23, 28, 29, 33, 42, 47] plays the 42 
Round 0: Aydin    holding [15, 18, 25, 30, 35, 37, 38, 39, 41, 44] plays the 15 
Zachary wins the round which contains 7 penalty points

Round 1: Zachary  holding [11, 16, 17, 26, 34, 36, 40, 46, 48] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 22 24 27 31 32 43 49 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [13, 19, 22, 24, 27, 31, 32, 43, 49] plays the 22 
Round 1: Nathan   holding [10, 14, 20, 21, 23, 28, 29, 33, 47] plays the 28 
Round 1: Aydin    holding [18, 25, 30, 35, 37, 38, 39, 41, 44] plays the 44 
Aydin wins the round 

Round 2: Aydin    holding [18, 25, 30, 35, 37, 38, 39, 41] plays the 30 
Round 2: Zachary  holding [11, 16, 17, 26, 34, 36, 46, 48] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 24 27 31 32 43 49 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [13, 19, 24, 27, 31, 32, 43, 49] plays the 24 
Round 2: Nathan   holding [10, 14, 20, 21, 23, 29, 33, 47] plays the 21 
Aydin wins the round 

Round 3: Aydin    holding [18, 25, 35, 37, 38, 39, 41] plays the 39 
Round 3: Zachary  holding [11, 16, 17, 34, 36, 46, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 27 31 32 43 49 0 0 0 

27------------------------------------------------------------------------

Round 3: Eugenius holding [13, 19, 27, 31, 32, 43, 49] plays the 27 
Round 3: Nathan   holding [10, 14, 20, 23, 29, 33, 47] plays the 33 
Zachary wins the round 

Round 4: Zachary  holding [11, 16, 17, 34, 36, 46] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 31 32 43 49 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [13, 19, 31, 32, 43, 49] plays the 32 
Round 4: Nathan   holding [10, 14, 20, 23, 29, 47] plays the 20 
Round 4: Aydin    holding [18, 25, 35, 37, 38, 41] plays the 18 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 19 31 43 49 0 0 0 0 0 

49------------------------------------------------------------------------

Round 5: Eugenius holding [13, 19, 31, 43, 49] plays the 49 
Round 5: Nathan   holding [10, 14, 23, 29, 47] plays the 14 
Round 5: Aydin    holding [25, 35, 37, 38, 41] plays the 35 
Round 5: Zachary  holding [11, 17, 34, 36, 46] plays the 17 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 19 31 43 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 19, 31, 43] plays the 13 
Round 6: Nathan   holding [10, 23, 29, 47] plays the 23 
Round 6: Aydin    holding [25, 37, 38, 41] plays the 41 
Round 6: Zachary  holding [11, 34, 36, 46] plays the 11 
Aydin wins the round which contains 4 penalty points

Round 7: Aydin    holding [25, 37, 38] plays the 37 
Round 7: Zachary  holding [34, 36, 46] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
19 31 43 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius holding [19, 31, 43] plays the 19 
Round 7: Nathan   holding [10, 29, 47] plays the 47 
Nathan wins the round which contains 3 penalty points

Round 8: Nathan   holding [10, 29] plays the 10 
Round 8: Aydin    holding [25, 38] plays the 38 
Round 8: Zachary  holding [36, 46] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
31 43 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius holding [31, 43] plays the 31 
Aydin wins the round which contains 1 penalty points

Round 9: Aydin    holding [25] plays the 25 
Round 9: Zachary  holding [46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43 chah------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Round 9: Nathan   holding [29] plays the 29 
Aydin wins the round which contains 2 penalty points


Finishing Positions

#1 with 1 penalty points Eugenius (dodo.c)
#2 with 3 penalty points Nathan (system)
#3 with 7 penalty points Zachary (system)
#3 with 7 penalty points Aydin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16378247 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Harrison: [12, 15, 19, 20, 31, 34, 39, 40, 45, 48]
Table position 1: Eugenius: [13, 16, 17, 22, 23, 24, 33, 42, 44, 47]
Table position 2: Nicholas: [11, 14, 26, 27, 28, 32, 35, 36, 43, 49]
Table position 3: Nathan  : [10, 18, 21, 25, 29, 30, 37, 38, 41, 46]

Discards:
Harrison [12, 20, 39]
Eugenius [42, 44, 47]
Nicholas [26, 28, 35]
Nathan   [21, 38, 46]

Round 0: Harrison holding [15, 19, 21, 31, 34, 38, 40, 45, 46, 48] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 16 17 20 22 23 24 33 39 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 13, 16, 17, 20, 22, 23, 24, 33, 39] plays the 12 
Round 0: Nicholas holding [11, 14, 27, 32, 36, 42, 43, 44, 47, 49] plays the 42 
Round 0: Nathan   holding [10, 18, 25, 26, 28, 29, 30, 35, 37, 41] plays the 30 
Nicholas wins the round which contains 7 penalty points

Round 1: Nicholas holding [11, 14, 27, 32, 36, 43, 44, 47, 49] plays the 14 
Round 1: Nathan   holding [10, 18, 25, 26, 28, 29, 35, 37, 41] plays the 26 
Round 1: Harrison holding [15, 19, 31, 34, 38, 40, 45, 46, 48] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 17 20 22 23 24 33 39 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [13, 16, 17, 20, 22, 23, 24, 33, 39] plays the 16 
Harrison wins the round 

Round 2: Harrison holding [15, 19, 31, 34, 38, 40, 45, 48] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 20 22 23 24 33 39 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 20, 22, 23, 24, 33, 39] plays the 20 
Round 2: Nicholas holding [11, 27, 32, 36, 43, 44, 47, 49] plays the 44 
Round 2: Nathan   holding [10, 18, 25, 28, 29, 35, 37, 41] plays the 28 
Nicholas wins the round 

Round 3: Nicholas holding [11, 27, 32, 36, 43, 47, 49] plays the 32 
Round 3: Nathan   holding [10, 18, 25, 29, 35, 37, 41] plays the 18 
Round 3: Harrison holding [15, 19, 31, 34, 40, 45, 48] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 22 23 24 33 39 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 22, 23, 24, 33, 39] plays the 22 
Harrison wins the round 

Round 4: Harrison holding [15, 19, 31, 40, 45, 48] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 24 33 39 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 23, 24, 33, 39] plays the 24 
Round 4: Nicholas holding [11, 27, 36, 43, 47, 49] plays the 36 
Round 4: Nathan   holding [10, 25, 29, 35, 37, 41] plays the 10 
Nicholas wins the round 

Round 5: Nicholas holding [11, 27, 43, 47, 49] plays the 49 
Round 5: Nathan   holding [25, 29, 35, 37, 41] plays the 35 
Round 5: Harrison holding [19, 31, 40, 45, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 33 39 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 23, 33, 39] plays the 13 
Nicholas wins the round which contains 1 penalty points

Round 6: Nicholas holding [11, 27, 43, 47] plays the 47 
Round 6: Nathan   holding [25, 29, 37, 41] plays the 29 
Round 6: Harrison holding [19, 31, 40, 45] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 33 39 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 23, 33, 39] plays the 17 
Nicholas wins the round which contains 4 penalty points

Round 7: Nicholas holding [11, 27, 43] plays the 27 
Round 7: Nathan   holding [25, 37, 41] plays the 37 
Round 7: Harrison holding [19, 40, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
23 33 39 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 7: Eugenius holding [23, 33, 39] plays the 33 
Harrison wins the round which contains 1 penalty points

Round 8: Harrison holding [19, 40] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
23 39 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 8: Eugenius holding [23, 39] plays the 23 
Round 8: Nicholas holding [11, 43] plays the 43 
Round 8: Nathan   holding [25, 41] plays the 41 
Nicholas wins the round which contains 4 penalty points

Round 9: Nicholas holding [11] plays the 11 
Round 9: Nathan   holding [25] plays the 25 
Round 9: Harrison holding [40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Nicholas wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Nathan (system)
#3 with 1 penalty points Harrison (system)
#4 with 17 penalty points Nicholas (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5598095 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [14, 16, 20, 22, 29, 32, 36, 38, 47, 48]
Table position 1: Costa   : [11, 13, 19, 21, 25, 31, 39, 43, 44, 49]
Table position 2: Nathan  : [10, 12, 17, 23, 24, 28, 33, 35, 37, 46]
Table position 3: Xue     : [15, 18, 26, 27, 30, 34, 40, 41, 42, 45]

Discards:
Eugenius [38, 47, 48]
Costa    [19, 25, 31]
Nathan   [12, 24, 35]
Xue      [34, 42, 45]


Debug output from Eugenius
------------------------------------------------------------------------
14 16 20 22 29 32 34 36 42 45 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 16, 20, 22, 29, 32, 34, 36, 42, 45] plays the 14 
Round 0: Costa    holding [11, 13, 21, 38, 39, 43, 44, 47, 48, 49] plays the 21 
Round 0: Nathan   holding [10, 17, 19, 23, 25, 28, 31, 33, 37, 46] plays the 10 
Round 0: Xue      holding [12, 15, 18, 24, 26, 27, 30, 35, 40, 41] plays the 26 
Xue wins the round 

Round 1: Xue      holding [12, 15, 18, 24, 27, 30, 35, 40, 41] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
16 20 22 29 32 34 36 42 45 0 

36------------------------------------------------------------------------

Round 1: Eugenius holding [16, 20, 22, 29, 32, 34, 36, 42, 45] plays the 36 
Round 1: Costa    holding [11, 13, 38, 39, 43, 44, 47, 48, 49] plays the 48 
Round 1: Nathan   holding [17, 19, 23, 25, 28, 31, 33, 37, 46] plays the 33 
Costa wins the round 

Round 2: Costa    holding [11, 13, 38, 39, 43, 44, 47, 49] plays the 39 
Round 2: Nathan   holding [17, 19, 23, 25, 28, 31, 37, 46] plays the 37 
Round 2: Xue      holding [12, 15, 18, 24, 30, 35, 40, 41] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
16 20 22 29 32 34 42 45 0 0 

42------------------------------------------------------------------------

Round 2: Eugenius holding [16, 20, 22, 29, 32, 34, 42, 45] plays the 42 
Eugenius wins the round which contains 8 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
16 20 22 29 32 34 45 0 0 0 

16------------------------------------------------------------------------

Round 3: Eugenius holding [16, 20, 22, 29, 32, 34, 45] plays the 16 
Round 3: Costa    holding [11, 13, 38, 43, 44, 47, 49] plays the 44 
Round 3: Nathan   holding [17, 19, 23, 25, 28, 31, 46] plays the 28 
Round 3: Xue      holding [15, 18, 24, 30, 35, 40, 41] plays the 24 
Costa wins the round 

Round 4: Costa    holding [11, 13, 38, 43, 47, 49] plays the 11 
Round 4: Nathan   holding [17, 19, 23, 25, 31, 46] plays the 19 
Round 4: Xue      holding [15, 18, 30, 35, 40, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
20 22 29 32 34 45 0 0 0 0 

29------------------------------------------------------------------------

Round 4: Eugenius holding [20, 22, 29, 32, 34, 45] plays the 29 
Xue wins the round which contains 4 penalty points

Round 5: Xue      holding [15, 18, 30, 35, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
20 22 32 34 45 0 0 0 0 0 

20------------------------------------------------------------------------

Round 5: Eugenius holding [20, 22, 32, 34, 45] plays the 20 
Round 5: Costa    holding [13, 38, 43, 47, 49] plays the 38 
Round 5: Nathan   holding [17, 23, 25, 31, 46] plays the 46 
Nathan wins the round 

Round 6: Nathan   holding [17, 23, 25, 31] plays the 31 
Round 6: Xue      holding [15, 18, 30, 35] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
22 32 34 45 0 0 0 0 0 0 

22------------------------------------------------------------------------

Round 6: Eugenius holding [22, 32, 34, 45] plays the 22 
Round 6: Costa    holding [13, 43, 47, 49] plays the 43 
Costa wins the round which contains 2 penalty points

Round 7: Costa    holding [13, 47, 49] plays the 47 
Round 7: Nathan   holding [17, 23, 25] plays the 23 
Round 7: Xue      holding [15, 30, 35] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
32 34 45 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 7: Eugenius holding [32, 34, 45] plays the 32 
Costa wins the round which contains 2 penalty points

Round 8: Costa    holding [13, 49] plays the 49 
Round 8: Nathan   holding [17, 25] plays the 25 
Round 8: Xue      holding [30, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
34 45 0 0 0 0 0 0 0 0 

34 chah------------------------------------------------------------------------

Round 8: Eugenius holding [34, 45] plays the 34 
Costa wins the round 

Round 9: Costa    holding [13] plays the 13 
Round 9: Nathan   holding [17] plays the 17 
Round 9: Xue      holding [30] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Nathan wins the round which contains 2 penalty points


Finishing Positions

#1 with 2 penalty points Nathan (system)
#2 with 4 penalty points Costa (system)
#2 with 4 penalty points Xue (system)
#4 with 8 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7325555 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Nicholas: [12, 15, 19, 23, 34, 39, 41, 43, 44, 47]
Table position 1: Eugenius: [11, 18, 24, 28, 33, 36, 42, 45, 46, 49]
Table position 2: Jamal   : [14, 16, 17, 25, 26, 27, 29, 30, 31, 35]
Table position 3: Finbar  : [10, 13, 20, 21, 22, 32, 37, 38, 40, 48]

Discards:
Nicholas [12, 34, 39]
Eugenius [45, 46, 49]
Jamal    [14, 25, 26]
Finbar   [13, 40, 48]

Round 0: Nicholas holding [13, 15, 19, 23, 40, 41, 43, 44, 47, 48] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 18 24 28 33 34 36 39 42 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 18, 24, 28, 33, 34, 36, 39, 42] plays the 12 
Round 0: Jamal    holding [16, 17, 27, 29, 30, 31, 35, 45, 46, 49] plays the 27 
Round 0: Finbar   holding [10, 14, 20, 21, 22, 25, 26, 32, 37, 38] plays the 20 
Jamal wins the round 

Round 1: Jamal    holding [16, 17, 29, 30, 31, 35, 45, 46, 49] plays the 46 
Round 1: Finbar   holding [10, 14, 21, 22, 25, 26, 32, 37, 38] plays the 14 
Round 1: Nicholas holding [13, 19, 23, 40, 41, 43, 44, 47, 48] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
11 18 24 28 33 34 36 39 42 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [11, 18, 24, 28, 33, 34, 36, 39, 42] plays the 18 
Jamal wins the round 

Round 2: Jamal    holding [16, 17, 29, 30, 31, 35, 45, 49] plays the 30 
Round 2: Finbar   holding [10, 21, 22, 25, 26, 32, 37, 38] plays the 10 
Round 2: Nicholas holding [13, 19, 23, 40, 41, 43, 47, 48] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
11 24 28 33 34 36 39 42 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [11, 24, 28, 33, 34, 36, 39, 42] plays the 24 
Nicholas wins the round 

Round 3: Nicholas holding [13, 19, 23, 41, 43, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
11 28 33 34 36 39 42 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [11, 28, 33, 34, 36, 39, 42] plays the 28 
Round 3: Jamal    holding [16, 17, 29, 31, 35, 45, 49] plays the 16 
Round 3: Finbar   holding [21, 22, 25, 26, 32, 37, 38] plays the 26 
Nicholas wins the round 

Round 4: Nicholas holding [13, 19, 23, 41, 43, 47] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
11 33 34 36 39 42 0 0 0 0 

11------------------------------------------------------------------------

Round 4: Eugenius holding [11, 33, 34, 36, 39, 42] plays the 11 
Round 4: Jamal    holding [17, 29, 31, 35, 45, 49] plays the 29 
Round 4: Finbar   holding [21, 22, 25, 32, 37, 38] plays the 37 
Nicholas wins the round which contains 4 penalty points

Round 5: Nicholas holding [13, 19, 23, 43, 47] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
33 34 36 39 42 0 0 0 0 0 

33------------------------------------------------------------------------

Round 5: Eugenius holding [33, 34, 36, 39, 42] plays the 33 
Round 5: Jamal    holding [17, 31, 35, 45, 49] plays the 31 
Round 5: Finbar   holding [21, 22, 25, 32, 38] plays the 21 
Jamal wins the round which contains 2 penalty points

Round 6: Jamal    holding [17, 35, 45, 49] plays the 45 
Round 6: Finbar   holding [22, 25, 32, 38] plays the 25 
Round 6: Nicholas holding [13, 23, 43, 47] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
34 36 39 42 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 6: Eugenius holding [34, 36, 39, 42] plays the 36 
Jamal wins the round which contains 1 penalty points

Round 7: Jamal    holding [17, 35, 49] plays the 17 
Round 7: Finbar   holding [22, 32, 38] plays the 38 
Round 7: Nicholas holding [13, 43, 47] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
34 39 42 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 7: Eugenius holding [34, 39, 42] plays the 34 
Jamal wins the round which contains 2 penalty points

Round 8: Jamal    holding [35, 49] plays the 49 
Round 8: Finbar   holding [22, 32] plays the 22 
Round 8: Nicholas holding [43, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
39 42 0 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 8: Eugenius holding [39, 42] plays the 42 
Jamal wins the round which contains 8 penalty points

Round 9: Jamal    holding [35] plays the 35 
Round 9: Finbar   holding [32] plays the 32 
Round 9: Nicholas holding [43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39 chah------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Jamal wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Finbar (system)
#3 with 4 penalty points Nicholas (system)
#4 with 14 penalty points Jamal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7860190 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Oscar   : [11, 18, 19, 33, 39, 44, 45, 46, 48, 49]
Table position 1: Eugenius: [13, 15, 16, 24, 27, 29, 34, 36, 37, 47]
Table position 2: Nicholas: [10, 17, 20, 21, 23, 26, 30, 31, 38, 42]
Table position 3: Eleni   : [12, 14, 22, 25, 28, 32, 35, 40, 41, 43]

Discards:
Oscar    [33, 44, 48]
Eugenius [36, 37, 47]
Nicholas [20, 38, 42]
Eleni    [14, 28, 32]

Round 0: Oscar    holding [11, 14, 18, 19, 28, 32, 39, 45, 46, 49] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 16 24 27 29 33 34 44 48 

16------------------------------------------------------------------------

Round 0: Eugenius holding [13, 15, 16, 24, 27, 29, 33, 34, 44, 48] plays the 16 
Round 0: Nicholas holding [10, 17, 21, 23, 26, 30, 31, 36, 37, 47] plays the 30 
Round 0: Eleni    holding [12, 20, 22, 25, 35, 38, 40, 41, 42, 43] plays the 12 
Nicholas wins the round 

Round 1: Nicholas holding [10, 17, 21, 23, 26, 31, 36, 37, 47] plays the 26 
Round 1: Eleni    holding [20, 22, 25, 35, 38, 40, 41, 42, 43] plays the 40 
Round 1: Oscar    holding [11, 18, 19, 28, 32, 39, 45, 46, 49] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 24 27 29 33 34 44 48 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [13, 15, 24, 27, 29, 33, 34, 44, 48] plays the 24 
Eleni wins the round 

Round 2: Eleni    holding [20, 22, 25, 35, 38, 41, 42, 43] plays the 22 
Round 2: Oscar    holding [11, 18, 19, 28, 32, 45, 46, 49] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 27 29 33 34 44 48 0 0 

33------------------------------------------------------------------------

Round 2: Eugenius holding [13, 15, 27, 29, 33, 34, 44, 48] plays the 33 
Round 2: Nicholas holding [10, 17, 21, 23, 31, 36, 37, 47] plays the 10 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 15 27 29 34 44 48 0 0 0 

15------------------------------------------------------------------------

Round 3: Eugenius holding [13, 15, 27, 29, 34, 44, 48] plays the 15 
Round 3: Nicholas holding [17, 21, 23, 31, 36, 37, 47] plays the 36 
Round 3: Eleni    holding [20, 25, 35, 38, 41, 42, 43] plays the 20 
Round 3: Oscar    holding [11, 19, 28, 32, 45, 46, 49] plays the 45 
Oscar wins the round 

Round 4: Oscar    holding [11, 19, 28, 32, 46, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
13 27 29 34 44 48 0 0 0 0 

34------------------------------------------------------------------------

Round 4: Eugenius holding [13, 27, 29, 34, 44, 48] plays the 34 
Round 4: Nicholas holding [17, 21, 23, 31, 37, 47] plays the 21 
Round 4: Eleni    holding [25, 35, 38, 41, 42, 43] plays the 38 
Oscar wins the round 

Round 5: Oscar    holding [11, 19, 28, 32, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
13 27 29 44 48 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 5: Eugenius holding [13, 27, 29, 44, 48] plays the 13 
Round 5: Nicholas holding [17, 23, 31, 37, 47] plays the 47 
Round 5: Eleni    holding [25, 35, 41, 42, 43] plays the 35 
Oscar wins the round which contains 2 penalty points

Round 6: Oscar    holding [11, 19, 28, 32] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 44 48 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 6: Eugenius holding [27, 29, 44, 48] plays the 44 
Round 6: Nicholas holding [17, 23, 31, 37] plays the 31 
Round 6: Eleni    holding [25, 41, 42, 43] plays the 42 
Eugenius wins the round which contains 8 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
27 29 48 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [27, 29, 48] plays the 27 
Round 7: Nicholas holding [17, 23, 37] plays the 37 
Round 7: Eleni    holding [25, 41, 43] plays the 41 
Round 7: Oscar    holding [11, 19, 32] plays the 19 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
29 48 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 48] plays the 29 
Round 8: Nicholas holding [17, 23] plays the 17 
Round 8: Eleni    holding [25, 43] plays the 43 
Round 8: Oscar    holding [11, 32] plays the 11 
Eleni wins the round which contains 4 penalty points

Round 9: Eleni    holding [25] plays the 25 
Round 9: Oscar    holding [32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
48 0 0 0 0 0 0 0 0 0 

48 chah------------------------------------------------------------------------

Round 9: Eugenius holding [48] plays the 48 
Round 9: Nicholas holding [23] plays the 23 
Eleni wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Nicholas (system)
#2 with 2 penalty points Oscar (system)
#3 with 5 penalty points Eleni (system)
#4 with 11 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15806890 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Dean    : [13, 17, 20, 21, 31, 33, 34, 38, 45, 49]
Table position 1: Braedon : [11, 15, 16, 24, 27, 30, 36, 43, 44, 47]
Table position 2: Finbar  : [12, 18, 25, 28, 32, 35, 37, 40, 42, 48]
Table position 3: Eugenius: [10, 14, 19, 22, 23, 26, 29, 39, 41, 46]

Discards:
Dean     [17, 34, 38]
Braedon  [11, 27, 36]
Finbar   [25, 28, 48]
Eugenius [39, 41, 46]

Round 0: Dean     holding [13, 20, 21, 31, 33, 39, 41, 45, 46, 49] plays the 21 
Round 0: Braedon  holding [15, 16, 17, 24, 30, 34, 38, 43, 44, 47] plays the 15 
Round 0: Finbar   holding [11, 12, 18, 27, 32, 35, 36, 37, 40, 42] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
10 14 19 22 23 25 26 28 29 48 

14------------------------------------------------------------------------

Round 0: Eugenius holding [10, 14, 19, 22, 23, 25, 26, 28, 29, 48] plays the 14 
Dean wins the round 

Round 1: Dean     holding [13, 20, 31, 33, 39, 41, 45, 46, 49] plays the 49 
Round 1: Braedon  holding [16, 17, 24, 30, 34, 38, 43, 44, 47] plays the 34 
Round 1: Finbar   holding [11, 18, 27, 32, 35, 36, 37, 40, 42] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
10 19 22 23 25 26 28 29 48 0 

28------------------------------------------------------------------------

Round 1: Eugenius holding [10, 19, 22, 23, 25, 26, 28, 29, 48] plays the 28 
Dean wins the round 

Round 2: Dean     holding [13, 20, 31, 33, 39, 41, 45, 46] plays the 39 
Round 2: Braedon  holding [16, 17, 24, 30, 38, 43, 44, 47] plays the 24 
Round 2: Finbar   holding [11, 18, 27, 32, 36, 37, 40, 42] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
10 19 22 23 25 26 29 48 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [10, 19, 22, 23, 25, 26, 29, 48] plays the 26 
Dean wins the round 

Round 3: Dean     holding [13, 20, 31, 33, 41, 45, 46] plays the 45 
Round 3: Braedon  holding [16, 17, 30, 38, 43, 44, 47] plays the 30 
Round 3: Finbar   holding [11, 18, 32, 36, 37, 40, 42] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
10 19 22 23 25 29 48 0 0 0 

10------------------------------------------------------------------------

Round 3: Eugenius holding [10, 19, 22, 23, 25, 29, 48] plays the 10 
Dean wins the round 

Round 4: Dean     holding [13, 20, 31, 33, 41, 46] plays the 20 
Round 4: Braedon  holding [16, 17, 38, 43, 44, 47] plays the 44 
Round 4: Finbar   holding [11, 32, 36, 37, 40, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 23 25 29 48 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius holding [19, 22, 23, 25, 29, 48] plays the 22 
Braedon wins the round which contains 7 penalty points

Round 5: Braedon  holding [16, 17, 38, 43, 47] plays the 16 
Round 5: Finbar   holding [11, 32, 36, 37, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 25 29 48 0 0 0 0 0 

48------------------------------------------------------------------------

Round 5: Eugenius holding [19, 23, 25, 29, 48] plays the 48 
Round 5: Dean     holding [13, 31, 33, 41, 46] plays the 46 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
19 23 25 29 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 6: Eugenius holding [19, 23, 25, 29] plays the 25 
Round 6: Dean     holding [13, 31, 33, 41] plays the 31 
Round 6: Braedon  holding [17, 38, 43, 47] plays the 43 
Round 6: Finbar   holding [11, 32, 36, 37] plays the 37 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
19 23 29 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius holding [19, 23, 29] plays the 19 
Round 7: Dean     holding [13, 33, 41] plays the 41 
Round 7: Braedon  holding [17, 38, 47] plays the 17 
Round 7: Finbar   holding [11, 32, 36] plays the 11 
Dean wins the round which contains 4 penalty points

Round 8: Dean     holding [13, 33] plays the 33 
Round 8: Braedon  holding [38, 47] plays the 47 
Round 8: Finbar   holding [32, 36] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 0 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 8: Eugenius holding [23, 29] plays the 23 
Finbar wins the round which contains 2 penalty points

Round 9: Finbar   holding [32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
29 0 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 9: Eugenius holding [29] plays the 29 
Round 9: Dean     holding [13] plays the 13 
Round 9: Braedon  holding [38] plays the 38 
Braedon wins the round which contains 2 penalty points


Finishing Positions

#1 with 2 penalty points Finbar (system)
#2 with 3 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Dean (system)
#4 with 9 penalty points Braedon (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12377423 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Zachary : [13, 15, 19, 21, 29, 32, 33, 42, 43, 44]
Table position 1: Dylan   : [10, 14, 16, 23, 24, 30, 39, 46, 48, 49]
Table position 2: Eugenius: [12, 17, 18, 26, 27, 28, 31, 34, 37, 38]
Table position 3: Claire  : [11, 20, 22, 25, 35, 36, 40, 41, 45, 47]

Discards:
Zachary  [15, 19, 42]
Dylan    [10, 39, 48]
Eugenius [34, 37, 38]
Claire   [25, 36, 45]

Round 0: Zachary  holding [13, 21, 25, 29, 32, 33, 36, 43, 44, 45] plays the 25 
Round 0: Dylan    holding [14, 15, 16, 19, 23, 24, 30, 42, 46, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 17 18 26 27 28 31 39 48 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 17, 18, 26, 27, 28, 31, 39, 48] plays the 10 
Round 0: Claire   holding [11, 20, 22, 34, 35, 37, 38, 40, 41, 47] plays the 20 
Zachary wins the round 

Round 1: Zachary  holding [13, 21, 29, 32, 33, 36, 43, 44, 45] plays the 45 
Round 1: Dylan    holding [14, 16, 19, 23, 24, 30, 42, 46, 49] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
12 17 18 26 27 28 31 39 48 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 17, 18, 26, 27, 28, 31, 39, 48] plays the 12 
Round 1: Claire   holding [11, 22, 34, 35, 37, 38, 40, 41, 47] plays the 35 
Zachary wins the round 

Round 2: Zachary  holding [13, 21, 29, 32, 33, 36, 43, 44] plays the 33 
Round 2: Dylan    holding [14, 16, 19, 23, 30, 42, 46, 49] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
17 18 26 27 28 31 39 48 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [17, 18, 26, 27, 28, 31, 39, 48] plays the 18 
Round 2: Claire   holding [11, 22, 34, 37, 38, 40, 41, 47] plays the 22 
Zachary wins the round 

Round 3: Zachary  holding [13, 21, 29, 32, 36, 43, 44] plays the 36 
Round 3: Dylan    holding [14, 16, 19, 23, 42, 46, 49] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
17 26 27 28 31 39 48 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [17, 26, 27, 28, 31, 39, 48] plays the 26 
Round 3: Claire   holding [11, 34, 37, 38, 40, 41, 47] plays the 38 
Claire wins the round 

Round 4: Claire   holding [11, 34, 37, 40, 41, 47] plays the 40 
Round 4: Zachary  holding [13, 21, 29, 32, 43, 44] plays the 44 
Round 4: Dylan    holding [14, 19, 23, 42, 46, 49] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 28 31 39 48 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [17, 27, 28, 31, 39, 48] plays the 28 
Zachary wins the round 

Round 5: Zachary  holding [13, 21, 29, 32, 43] plays the 21 
Round 5: Dylan    holding [19, 23, 42, 46, 49] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 31 39 48 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius holding [17, 27, 31, 39, 48] plays the 27 
Round 5: Claire   holding [11, 34, 37, 41, 47] plays the 34 
Dylan wins the round which contains 7 penalty points

Round 6: Dylan    holding [19, 23, 46, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 39 48 0 0 0 0 0 0 

48------------------------------------------------------------------------

Round 6: Eugenius holding [17, 31, 39, 48] plays the 48 
Round 6: Claire   holding [11, 37, 41, 47] plays the 41 
Round 6: Zachary  holding [13, 29, 32, 43] plays the 32 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
17 31 39 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 31, 39] plays the 17 
Round 7: Claire   holding [11, 37, 47] plays the 37 
Round 7: Zachary  holding [13, 29, 43] plays the 13 
Round 7: Dylan    holding [19, 23, 49] plays the 23 
Claire wins the round which contains 4 penalty points

Round 8: Claire   holding [11, 47] plays the 47 
Round 8: Zachary  holding [29, 43] plays the 43 
Round 8: Dylan    holding [19, 49] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
31 39 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 39] plays the 31 
Claire wins the round which contains 4 penalty points

Round 9: Claire   holding [11] plays the 11 
Round 9: Zachary  holding [29] plays the 29 
Round 9: Dylan    holding [49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Zachary wins the round which contains 2 penalty points


Finishing Positions

#1 with 1 penalty points Eugenius (dodo.c)
#2 with 2 penalty points Zachary (system)
#3 with 7 penalty points Dylan (system)
#4 with 8 penalty points Claire (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12600359 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Benjamin: [14, 18, 21, 27, 32, 35, 36, 41, 42, 49]
Table position 1: Andrew  : [10, 12, 15, 19, 23, 25, 29, 31, 39, 48]
Table position 2: Nathan  : [13, 16, 17, 26, 28, 33, 34, 38, 40, 46]
Table position 3: Eugenius: [11, 20, 22, 24, 30, 37, 43, 44, 45, 47]

Discards:
Benjamin [14, 18, 21]
Andrew   [10, 23, 39]
Nathan   [26, 34, 40]
Eugenius [44, 45, 47]

Round 0: Benjamin holding [27, 32, 35, 36, 41, 42, 44, 45, 47, 49] plays the 27 
Round 0: Andrew   holding [12, 14, 15, 18, 19, 21, 25, 29, 31, 48] plays the 18 
Round 0: Nathan   holding [10, 13, 16, 17, 23, 28, 33, 38, 39, 46] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
11 20 22 24 26 30 34 37 40 43 

24------------------------------------------------------------------------

Round 0: Eugenius holding [11, 20, 22, 24, 26, 30, 34, 37, 40, 43] plays the 24 
Nathan wins the round 

Round 1: Nathan   holding [10, 13, 16, 17, 23, 28, 33, 38, 46] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 20 22 26 30 34 37 40 43 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [11, 20, 22, 26, 30, 34, 37, 40, 43] plays the 22 
Round 1: Benjamin holding [32, 35, 36, 41, 42, 44, 45, 47, 49] plays the 42 
Round 1: Andrew   holding [12, 14, 15, 19, 21, 25, 29, 31, 48] plays the 15 
Benjamin wins the round which contains 7 penalty points

Round 2: Benjamin holding [32, 35, 36, 41, 44, 45, 47, 49] plays the 35 
Round 2: Andrew   holding [12, 14, 19, 21, 25, 29, 31, 48] plays the 14 
Round 2: Nathan   holding [10, 13, 16, 17, 23, 28, 38, 46] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 20 26 30 34 37 40 43 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [11, 20, 26, 30, 34, 37, 40, 43] plays the 20 
Benjamin wins the round 

Round 3: Benjamin holding [32, 36, 41, 44, 45, 47, 49] plays the 45 
Round 3: Andrew   holding [12, 19, 21, 25, 29, 31, 48] plays the 48 
Round 3: Nathan   holding [10, 13, 16, 17, 23, 38, 46] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 26 30 34 37 40 43 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [11, 26, 30, 34, 37, 40, 43] plays the 30 
Andrew wins the round 

Round 4: Andrew   holding [12, 19, 21, 25, 29, 31] plays the 12 
Round 4: Nathan   holding [13, 16, 17, 23, 38, 46] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
11 26 34 37 40 43 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [11, 26, 34, 37, 40, 43] plays the 26 
Round 4: Benjamin holding [32, 36, 41, 44, 47, 49] plays the 32 
Nathan wins the round 

Round 5: Nathan   holding [13, 16, 17, 23, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 34 37 40 43 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [11, 34, 37, 40, 43] plays the 34 
Round 5: Benjamin holding [36, 41, 44, 47, 49] plays the 36 
Round 5: Andrew   holding [19, 21, 25, 29, 31] plays the 21 
Nathan wins the round 

Round 6: Nathan   holding [13, 16, 17, 23] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
11 37 40 43 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 6: Eugenius holding [11, 37, 40, 43] plays the 40 
Round 6: Benjamin holding [41, 44, 47, 49] plays the 44 
Round 6: Andrew   holding [19, 25, 29, 31] plays the 25 
Benjamin wins the round 

Round 7: Benjamin holding [41, 47, 49] plays the 49 
Round 7: Andrew   holding [19, 29, 31] plays the 19 
Round 7: Nathan   holding [13, 17, 23] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
11 37 43 0 0 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 7: Eugenius holding [11, 37, 43] plays the 11 
Benjamin wins the round which contains 3 penalty points

Round 8: Benjamin holding [41, 47] plays the 41 
Round 8: Andrew   holding [29, 31] plays the 29 
Round 8: Nathan   holding [17, 23] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
37 43 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 8: Eugenius holding [37, 43] plays the 37 
Benjamin wins the round which contains 4 penalty points

Round 9: Benjamin holding [47] plays the 47 
Round 9: Andrew   holding [31] plays the 31 
Round 9: Nathan   holding [23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Benjamin wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Andrew (system)
#1 with 0 penalty points Nathan (system)
#1 with 0 penalty points Eugenius (dodo.c)
#4 with 18 penalty points Benjamin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2925090 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: David   : [11, 22, 23, 30, 32, 34, 42, 46, 47, 49]
Table position 1: Nicholas: [12, 14, 15, 16, 17, 19, 33, 36, 39, 43]
Table position 2: Michael : [20, 21, 26, 29, 31, 35, 38, 40, 41, 48]
Table position 3: Eugenius: [10, 13, 18, 24, 25, 27, 28, 37, 44, 45]

Discards:
David    [11, 46, 49]
Nicholas [16, 19, 43]
Michael  [26, 31, 40]
Eugenius [37, 44, 45]

Round 0: David    holding [22, 23, 30, 32, 34, 37, 42, 44, 45, 47] plays the 34 
Round 0: Nicholas holding [11, 12, 14, 15, 17, 33, 36, 39, 46, 49] plays the 14 
Round 0: Michael  holding [16, 19, 20, 21, 29, 35, 38, 41, 43, 48] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
10 13 18 24 25 26 27 28 31 40 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 13, 18, 24, 25, 26, 27, 28, 31, 40] plays the 10 
David wins the round 

Round 1: David    holding [22, 23, 30, 32, 37, 42, 44, 45, 47] plays the 22 
Round 1: Nicholas holding [11, 12, 15, 17, 33, 36, 39, 46, 49] plays the 12 
Round 1: Michael  holding [19, 20, 21, 29, 35, 38, 41, 43, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
13 18 24 25 26 27 28 31 40 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [13, 18, 24, 25, 26, 27, 28, 31, 40] plays the 18 
Michael wins the round 

Round 2: Michael  holding [19, 20, 21, 29, 35, 38, 41, 43] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
13 24 25 26 27 28 31 40 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [13, 24, 25, 26, 27, 28, 31, 40] plays the 24 
Round 2: David    holding [23, 30, 32, 37, 42, 44, 45, 47] plays the 44 
Round 2: Nicholas holding [11, 15, 17, 33, 36, 39, 46, 49] plays the 15 
David wins the round 

Round 3: David    holding [23, 30, 32, 37, 42, 45, 47] plays the 42 
Round 3: Nicholas holding [11, 17, 33, 36, 39, 46, 49] plays the 33 
Round 3: Michael  holding [19, 21, 29, 35, 38, 41, 43] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
13 25 26 27 28 31 40 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [13, 25, 26, 27, 28, 31, 40] plays the 26 
David wins the round which contains 7 penalty points

Round 4: David    holding [23, 30, 32, 37, 45, 47] plays the 32 
Round 4: Nicholas holding [11, 17, 36, 39, 46, 49] plays the 36 
Round 4: Michael  holding [19, 29, 35, 38, 41, 43] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
13 25 27 28 31 40 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [13, 25, 27, 28, 31, 40] plays the 28 
Michael wins the round 

Round 5: Michael  holding [19, 29, 35, 41, 43] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
13 25 27 31 40 0 0 0 0 0 

25------------------------------------------------------------------------

Round 5: Eugenius holding [13, 25, 27, 31, 40] plays the 25 
Round 5: David    holding [23, 30, 37, 45, 47] plays the 45 
Round 5: Nicholas holding [11, 17, 39, 46, 49] plays the 49 
Nicholas wins the round 

Round 6: Nicholas holding [11, 17, 39, 46] plays the 39 
Round 6: Michael  holding [19, 29, 41, 43] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
13 27 31 40 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 6: Eugenius holding [13, 27, 31, 40] plays the 27 
Round 6: David    holding [23, 30, 37, 47] plays the 30 
Nicholas wins the round which contains 1 penalty points

Round 7: Nicholas holding [11, 17, 46] plays the 17 
Round 7: Michael  holding [19, 29, 43] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
13 31 40 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 31, 40] plays the 13 
Round 7: David    holding [23, 37, 47] plays the 37 
David wins the round which contains 4 penalty points

Round 8: David    holding [23, 47] plays the 47 
Round 8: Nicholas holding [11, 46] plays the 11 
Round 8: Michael  holding [19, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
31 40 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 40] plays the 31 
David wins the round which contains 4 penalty points

Round 9: David    holding [23] plays the 23 
Round 9: Nicholas holding [46] plays the 46 
Round 9: Michael  holding [19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 9: Eugenius holding [40] plays the 40 
David wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Michael (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 1 penalty points Nicholas (system)
#4 with 17 penalty points David (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 635015 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Vincent : [10, 12, 25, 26, 27, 28, 30, 31, 35, 37]
Table position 1: Eugenius: [11, 17, 19, 24, 34, 38, 40, 43, 45, 48]
Table position 2: Emily   : [16, 21, 22, 23, 36, 41, 42, 44, 46, 47]
Table position 3: Dylan   : [13, 14, 15, 18, 20, 29, 32, 33, 39, 49]

Discards:
Vincent  [25, 26, 37]
Eugenius [43, 45, 48]
Emily    [21, 23, 46]
Dylan    [20, 32, 33]

Round 0: Vincent  holding [10, 12, 20, 27, 28, 30, 31, 32, 33, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 19 24 25 26 34 37 38 40 

25------------------------------------------------------------------------

Round 0: Eugenius holding [11, 17, 19, 24, 25, 26, 34, 37, 38, 40] plays the 25 
Round 0: Emily    holding [16, 22, 36, 41, 42, 43, 44, 45, 47, 48] plays the 45 
Round 0: Dylan    holding [13, 14, 15, 18, 21, 23, 29, 39, 46, 49] plays the 14 
Emily wins the round 

Round 1: Emily    holding [16, 22, 36, 41, 42, 43, 44, 47, 48] plays the 48 
Round 1: Dylan    holding [13, 15, 18, 21, 23, 29, 39, 46, 49] plays the 39 
Round 1: Vincent  holding [10, 12, 20, 27, 28, 30, 31, 32, 33] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 19 24 26 34 37 38 40 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [11, 17, 19, 24, 26, 34, 37, 38, 40] plays the 24 
Emily wins the round 

Round 2: Emily    holding [16, 22, 36, 41, 42, 43, 44, 47] plays the 22 
Round 2: Dylan    holding [13, 15, 18, 21, 23, 29, 46, 49] plays the 18 
Round 2: Vincent  holding [10, 12, 20, 27, 28, 30, 31, 32] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 19 26 34 37 38 40 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [11, 17, 19, 26, 34, 37, 38, 40] plays the 26 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 17 19 34 37 38 40 0 0 0 

34------------------------------------------------------------------------

Round 3: Eugenius holding [11, 17, 19, 34, 37, 38, 40] plays the 34 
Round 3: Emily    holding [16, 36, 41, 42, 43, 44, 47] plays the 42 
Round 3: Dylan    holding [13, 15, 21, 23, 29, 46, 49] plays the 46 
Round 3: Vincent  holding [12, 20, 27, 28, 30, 31, 32] plays the 28 
Dylan wins the round which contains 7 penalty points

Round 4: Dylan    holding [13, 15, 21, 23, 29, 49] plays the 15 
Round 4: Vincent  holding [12, 20, 27, 30, 31, 32] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 19 37 38 40 0 0 0 0 

40------------------------------------------------------------------------

Round 4: Eugenius holding [11, 17, 19, 37, 38, 40] plays the 40 
Round 4: Emily    holding [16, 36, 41, 43, 44, 47] plays the 36 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 17 19 37 38 0 0 0 0 0 

38------------------------------------------------------------------------

Round 5: Eugenius holding [11, 17, 19, 37, 38] plays the 38 
Round 5: Emily    holding [16, 41, 43, 44, 47] plays the 16 
Round 5: Dylan    holding [13, 21, 23, 29, 49] plays the 23 
Round 5: Vincent  holding [20, 27, 30, 31, 32] plays the 30 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
11 17 19 37 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 17, 19, 37] plays the 11 
Round 6: Emily    holding [41, 43, 44, 47] plays the 47 
Round 6: Dylan    holding [13, 21, 29, 49] plays the 13 
Round 6: Vincent  holding [20, 27, 31, 32] plays the 31 
Emily wins the round which contains 4 penalty points

Round 7: Emily    holding [41, 43, 44] plays the 41 
Round 7: Dylan    holding [21, 29, 49] plays the 29 
Round 7: Vincent  holding [20, 27, 32] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 37 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 19, 37] plays the 17 
Emily wins the round which contains 3 penalty points

Round 8: Emily    holding [43, 44] plays the 44 
Round 8: Dylan    holding [21, 49] plays the 49 
Round 8: Vincent  holding [27, 32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
19 37 0 0 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 8: Eugenius holding [19, 37] plays the 19 
Emily wins the round which contains 1 penalty points

Round 9: Emily    holding [43] plays the 43 
Round 9: Dylan    holding [21] plays the 21 
Round 9: Vincent  holding [27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Emily wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Vincent (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Dylan (system)
#4 with 10 penalty points Emily (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13819540 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Connor  : [10, 12, 15, 19, 20, 23, 25, 35, 39, 49]
Table position 1: Eugenius: [13, 18, 21, 26, 27, 30, 37, 41, 42, 43]
Table position 2: Emily   : [11, 16, 22, 28, 33, 38, 40, 44, 46, 47]
Table position 3: Sabrina : [14, 17, 24, 29, 31, 32, 34, 36, 45, 48]

Discards:
Connor   [12, 23, 39]
Eugenius [41, 42, 43]
Emily    [22, 46, 47]
Sabrina  [14, 17, 32]

Round 0: Connor   holding [10, 14, 15, 17, 19, 20, 25, 32, 35, 49] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 18 21 23 26 27 30 37 39 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 13, 18, 21, 23, 26, 27, 30, 37, 39] plays the 12 
Round 0: Emily    holding [11, 16, 28, 33, 38, 40, 41, 42, 43, 44] plays the 28 
Round 0: Sabrina  holding [22, 24, 29, 31, 34, 36, 45, 46, 47, 48] plays the 36 
Sabrina wins the round 

Round 1: Sabrina  holding [22, 24, 29, 31, 34, 45, 46, 47, 48] plays the 24 
Round 1: Connor   holding [10, 14, 15, 17, 19, 25, 32, 35, 49] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
13 18 21 23 26 27 30 37 39 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [13, 18, 21, 23, 26, 27, 30, 37, 39] plays the 18 
Round 1: Emily    holding [11, 16, 33, 38, 40, 41, 42, 43, 44] plays the 33 
Emily wins the round 

Round 2: Emily    holding [11, 16, 38, 40, 41, 42, 43, 44] plays the 38 
Round 2: Sabrina  holding [22, 29, 31, 34, 45, 46, 47, 48] plays the 46 
Round 2: Connor   holding [14, 15, 17, 19, 25, 32, 35, 49] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
13 21 23 26 27 30 37 39 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [13, 21, 23, 26, 27, 30, 37, 39] plays the 26 
Sabrina wins the round 

Round 3: Sabrina  holding [22, 29, 31, 34, 45, 47, 48] plays the 34 
Round 3: Connor   holding [14, 15, 17, 19, 25, 35, 49] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
13 21 23 27 30 37 39 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [13, 21, 23, 27, 30, 37, 39] plays the 30 
Round 3: Emily    holding [11, 16, 40, 41, 42, 43, 44] plays the 40 
Emily wins the round 

Round 4: Emily    holding [11, 16, 41, 42, 43, 44] plays the 16 
Round 4: Sabrina  holding [22, 29, 31, 45, 47, 48] plays the 48 
Round 4: Connor   holding [15, 17, 19, 25, 35, 49] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
13 21 23 27 37 39 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 4: Eugenius holding [13, 21, 23, 27, 37, 39] plays the 13 
Sabrina wins the round which contains 2 penalty points

Round 5: Sabrina  holding [22, 29, 31, 45, 47] plays the 47 
Round 5: Connor   holding [15, 19, 25, 35, 49] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
21 23 27 37 39 0 0 0 0 0 

23------------------------------------------------------------------------

Round 5: Eugenius holding [21, 23, 27, 37, 39] plays the 23 
Round 5: Emily    holding [11, 41, 42, 43, 44] plays the 43 
Sabrina wins the round which contains 4 penalty points

Round 6: Sabrina  holding [22, 29, 31, 45] plays the 29 
Round 6: Connor   holding [15, 25, 35, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
21 27 37 39 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 6: Eugenius holding [21, 27, 37, 39] plays the 37 
Round 6: Emily    holding [11, 41, 42, 44] plays the 41 
Emily wins the round which contains 3 penalty points

Round 7: Emily    holding [11, 42, 44] plays the 11 
Round 7: Sabrina  holding [22, 31, 45] plays the 31 
Round 7: Connor   holding [15, 25, 35] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
21 27 39 0 0 0 0 0 0 0 

21------------------------------------------------------------------------

Round 7: Eugenius holding [21, 27, 39] plays the 21 
Sabrina wins the round which contains 2 penalty points

Round 8: Sabrina  holding [22, 45] plays the 22 
Round 8: Connor   holding [25, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
27 39 0 0 0 0 0 0 0 0 

27 chah------------------------------------------------------------------------

Round 8: Eugenius holding [27, 39] plays the 27 
Round 8: Emily    holding [42, 44] plays the 44 
Emily wins the round 

Round 9: Emily    holding [42] plays the 42 
Round 9: Sabrina  holding [45] plays the 45 
Round 9: Connor   holding [25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Sabrina wins the round which contains 7 penalty points


Finishing Positions

#1 with 0 penalty points Connor (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 3 penalty points Emily (system)
#4 with 15 penalty points Sabrina (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 4565946 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Oscar   : [13, 24, 26, 27, 29, 31, 35, 47, 48, 49]
Table position 1: Heather : [10, 15, 18, 21, 22, 28, 32, 33, 34, 36]
Table position 2: Kangying: [11, 14, 17, 19, 25, 37, 39, 40, 42, 44]
Table position 3: Eugenius: [12, 16, 20, 23, 30, 38, 41, 43, 45, 46]

Discards:
Oscar    [31, 47, 49]
Heather  [21, 22, 33]
Kangying [17, 19, 25]
Eugenius [43, 45, 46]

Round 0: Oscar    holding [13, 24, 26, 27, 29, 35, 43, 45, 46, 48] plays the 46 
Round 0: Heather  holding [10, 15, 18, 28, 31, 32, 34, 36, 47, 49] plays the 34 
Round 0: Kangying holding [11, 14, 21, 22, 33, 37, 39, 40, 42, 44] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
12 16 17 19 20 23 25 30 38 41 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 16, 17, 19, 20, 23, 25, 30, 38, 41] plays the 12 
Oscar wins the round 

Round 1: Oscar    holding [13, 24, 26, 27, 29, 35, 43, 45, 48] plays the 24 
Round 1: Heather  holding [10, 15, 18, 28, 31, 32, 36, 47, 49] plays the 32 
Round 1: Kangying holding [11, 14, 21, 33, 37, 39, 40, 42, 44] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 19 20 23 25 30 38 41 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 17, 19, 20, 23, 25, 30, 38, 41] plays the 16 
Kangying wins the round 

Round 2: Kangying holding [11, 14, 21, 37, 39, 40, 42, 44] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 20 23 25 30 38 41 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [17, 19, 20, 23, 25, 30, 38, 41] plays the 20 
Round 2: Oscar    holding [13, 26, 27, 29, 35, 43, 45, 48] plays the 35 
Round 2: Heather  holding [10, 15, 18, 28, 31, 36, 47, 49] plays the 28 
Oscar wins the round 

Round 3: Oscar    holding [13, 26, 27, 29, 43, 45, 48] plays the 26 
Round 3: Heather  holding [10, 15, 18, 31, 36, 47, 49] plays the 18 
Round 3: Kangying holding [11, 21, 37, 39, 40, 42, 44] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 25 30 38 41 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 23, 25, 30, 38, 41] plays the 30 
Kangying wins the round 

Round 4: Kangying holding [11, 21, 37, 39, 42, 44] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 25 38 41 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 23, 25, 38, 41] plays the 17 
Round 4: Oscar    holding [13, 27, 29, 43, 45, 48] plays the 27 
Round 4: Heather  holding [10, 15, 31, 36, 47, 49] plays the 36 
Kangying wins the round which contains 1 penalty points

Round 5: Kangying holding [11, 21, 37, 42, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 25 38 41 0 0 0 0 0 

38------------------------------------------------------------------------

Round 5: Eugenius holding [19, 23, 25, 38, 41] plays the 38 
Round 5: Oscar    holding [13, 29, 43, 45, 48] plays the 48 
Round 5: Heather  holding [10, 15, 31, 47, 49] plays the 10 
Oscar wins the round 

Round 6: Oscar    holding [13, 29, 43, 45] plays the 13 
Round 6: Heather  holding [15, 31, 47, 49] plays the 47 
Round 6: Kangying holding [11, 21, 37, 42] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 25 41 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 23, 25, 41] plays the 19 
Heather wins the round which contains 4 penalty points

Round 7: Heather  holding [15, 31, 49] plays the 15 
Round 7: Kangying holding [21, 37, 42] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 41 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 7: Eugenius holding [23, 25, 41] plays the 25 
Round 7: Oscar    holding [29, 43, 45] plays the 45 
Oscar wins the round 

Round 8: Oscar    holding [29, 43] plays the 43 
Round 8: Heather  holding [31, 49] plays the 31 
Round 8: Kangying holding [37, 42] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
23 41 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 8: Eugenius holding [23, 41] plays the 23 
Oscar wins the round which contains 4 penalty points

Round 9: Oscar    holding [29] plays the 29 
Round 9: Heather  holding [49] plays the 49 
Round 9: Kangying holding [42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Eugenius wins the round which contains 9 penalty points


Finishing Positions

#1 with 1 penalty points Kangying (system)
#2 with 4 penalty points Oscar (system)
#2 with 4 penalty points Heather (system)
#4 with 9 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12620269 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Marc    : [15, 17, 22, 31, 38, 40, 44, 45, 48, 49]
Table position 1: Eugenius: [10, 14, 16, 24, 29, 32, 33, 43, 46, 47]
Table position 2: Dean    : [11, 18, 19, 26, 27, 30, 34, 36, 37, 42]
Table position 3: Eleni   : [12, 13, 20, 21, 23, 25, 28, 35, 39, 41]

Discards:
Marc     [22, 38, 45]
Eugenius [43, 46, 47]
Dean     [18, 36, 37]
Eleni    [20, 25, 35]

Round 0: Marc     holding [15, 17, 20, 25, 31, 35, 40, 44, 48, 49] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
10 14 16 22 24 29 32 33 38 45 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 14, 16, 22, 24, 29, 32, 33, 38, 45] plays the 10 
Round 0: Dean     holding [11, 19, 26, 27, 30, 34, 42, 43, 46, 47] plays the 27 
Round 0: Eleni    holding [12, 13, 18, 21, 23, 28, 36, 37, 39, 41] plays the 28 
Marc wins the round 

Round 1: Marc     holding [15, 17, 20, 25, 31, 35, 40, 44, 49] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 22 24 29 32 33 38 45 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 16, 22, 24, 29, 32, 33, 38, 45] plays the 14 
Round 1: Dean     holding [11, 19, 26, 30, 34, 42, 43, 46, 47] plays the 34 
Round 1: Eleni    holding [12, 13, 18, 21, 23, 36, 37, 39, 41] plays the 18 
Marc wins the round 

Round 2: Marc     holding [15, 17, 20, 25, 31, 35, 40, 49] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
16 22 24 29 32 33 38 45 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [16, 22, 24, 29, 32, 33, 38, 45] plays the 16 
Round 2: Dean     holding [11, 19, 26, 30, 42, 43, 46, 47] plays the 46 
Round 2: Eleni    holding [12, 13, 21, 23, 36, 37, 39, 41] plays the 12 
Dean wins the round 

Round 3: Dean     holding [11, 19, 26, 30, 42, 43, 47] plays the 30 
Round 3: Eleni    holding [13, 21, 23, 36, 37, 39, 41] plays the 39 
Round 3: Marc     holding [15, 17, 25, 31, 35, 40, 49] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
22 24 29 32 33 38 45 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [22, 24, 29, 32, 33, 38, 45] plays the 22 
Marc wins the round 

Round 4: Marc     holding [15, 17, 25, 31, 35, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
24 29 32 33 38 45 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius holding [24, 29, 32, 33, 38, 45] plays the 24 
Round 4: Dean     holding [11, 19, 26, 42, 43, 47] plays the 42 
Round 4: Eleni    holding [13, 21, 23, 36, 37, 41] plays the 36 
Dean wins the round which contains 7 penalty points

Round 5: Dean     holding [11, 19, 26, 43, 47] plays the 26 
Round 5: Eleni    holding [13, 21, 23, 37, 41] plays the 41 
Round 5: Marc     holding [17, 25, 31, 35, 49] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
29 32 33 38 45 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [29, 32, 33, 38, 45] plays the 32 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
29 33 38 45 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 6: Eugenius holding [29, 33, 38, 45] plays the 29 
Round 6: Dean     holding [11, 19, 43, 47] plays the 47 
Round 6: Eleni    holding [13, 21, 23, 37] plays the 37 
Round 6: Marc     holding [17, 25, 35, 49] plays the 17 
Dean wins the round which contains 4 penalty points

Round 7: Dean     holding [11, 19, 43] plays the 43 
Round 7: Eleni    holding [13, 21, 23] plays the 23 
Round 7: Marc     holding [25, 35, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
33 38 45 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 7: Eugenius holding [33, 38, 45] plays the 33 
Dean wins the round which contains 2 penalty points

Round 8: Dean     holding [11, 19] plays the 19 
Round 8: Eleni    holding [13, 21] plays the 13 
Round 8: Marc     holding [25, 35] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
38 45 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [38, 45] plays the 38 
Dean wins the round which contains 2 penalty points

Round 9: Dean     holding [11] plays the 11 
Round 9: Eleni    holding [21] plays the 21 
Round 9: Marc     holding [35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Dean wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Marc (system)
#1 with 0 penalty points Eleni (system)
#3 with 2 penalty points Eugenius (dodo.c)
#4 with 16 penalty points Dean (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7162772 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Finbar  : [15, 16, 17, 22, 29, 30, 33, 38, 40, 43]
Table position 1: Eleni   : [13, 18, 21, 26, 32, 34, 41, 42, 45, 48]
Table position 2: Eugenius: [10, 12, 20, 23, 27, 28, 37, 39, 44, 49]
Table position 3: Dean    : [11, 14, 19, 24, 25, 31, 35, 36, 46, 47]

Discards:
Finbar   [15, 16, 43]
Eleni    [21, 26, 45]
Eugenius [39, 44, 49]
Dean     [24, 25, 47]

Round 0: Finbar   holding [17, 22, 24, 25, 29, 30, 33, 38, 40, 47] plays the 30 
Round 0: Eleni    holding [13, 15, 16, 18, 32, 34, 41, 42, 43, 48] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 20 21 23 26 27 28 37 45 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 20, 21, 23, 26, 27, 28, 37, 45] plays the 10 
Round 0: Dean     holding [11, 14, 19, 31, 35, 36, 39, 44, 46, 49] plays the 14 
Finbar wins the round 

Round 1: Finbar   holding [17, 22, 24, 25, 29, 33, 38, 40, 47] plays the 25 
Round 1: Eleni    holding [13, 15, 18, 32, 34, 41, 42, 43, 48] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
12 20 21 23 26 27 28 37 45 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [12, 20, 21, 23, 26, 27, 28, 37, 45] plays the 20 
Round 1: Dean     holding [11, 19, 31, 35, 36, 39, 44, 46, 49] plays the 35 
Dean wins the round 

Round 2: Dean     holding [11, 19, 31, 36, 39, 44, 46, 49] plays the 46 
Round 2: Finbar   holding [17, 22, 24, 29, 33, 38, 40, 47] plays the 22 
Round 2: Eleni    holding [13, 18, 32, 34, 41, 42, 43, 48] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
12 21 23 26 27 28 37 45 0 0 

12------------------------------------------------------------------------

Round 2: Eugenius holding [12, 21, 23, 26, 27, 28, 37, 45] plays the 12 
Dean wins the round 

Round 3: Dean     holding [11, 19, 31, 36, 39, 44, 49] plays the 36 
Round 3: Finbar   holding [17, 24, 29, 33, 38, 40, 47] plays the 33 
Round 3: Eleni    holding [13, 32, 34, 41, 42, 43, 48] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
21 23 26 27 28 37 45 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [21, 23, 26, 27, 28, 37, 45] plays the 21 
Eleni wins the round which contains 7 penalty points

Round 4: Eleni    holding [13, 32, 34, 41, 43, 48] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
23 26 27 28 37 45 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [23, 26, 27, 28, 37, 45] plays the 26 
Round 4: Dean     holding [11, 19, 31, 39, 44, 49] plays the 44 
Round 4: Finbar   holding [17, 24, 29, 38, 40, 47] plays the 24 
Dean wins the round 

Round 5: Dean     holding [11, 19, 31, 39, 49] plays the 39 
Round 5: Finbar   holding [17, 29, 38, 40, 47] plays the 47 
Round 5: Eleni    holding [13, 34, 41, 43, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
23 27 28 37 45 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius holding [23, 27, 28, 37, 45] plays the 27 
Eleni wins the round which contains 1 penalty points

Round 6: Eleni    holding [13, 34, 41, 43] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
23 28 37 45 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 28, 37, 45] plays the 23 
Round 6: Dean     holding [11, 19, 31, 49] plays the 11 
Round 6: Finbar   holding [17, 29, 38, 40] plays the 17 
Eleni wins the round which contains 4 penalty points

Round 7: Eleni    holding [13, 34, 43] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
28 37 45 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 7: Eugenius holding [28, 37, 45] plays the 37 
Round 7: Dean     holding [19, 31, 49] plays the 31 
Round 7: Finbar   holding [29, 38, 40] plays the 29 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
28 45 0 0 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 8: Eugenius holding [28, 45] plays the 28 
Round 8: Dean     holding [19, 49] plays the 49 
Round 8: Finbar   holding [38, 40] plays the 40 
Round 8: Eleni    holding [34, 43] plays the 34 
Dean wins the round 

Round 9: Dean     holding [19] plays the 19 
Round 9: Finbar   holding [38] plays the 38 
Round 9: Eleni    holding [43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Eleni wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Finbar (system)
#1 with 0 penalty points Dean (system)
#3 with 4 penalty points Eugenius (dodo.c)
#4 with 14 penalty points Eleni (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 359787 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius : [10, 12, 14, 24, 26, 29, 34, 41, 47, 48]
Table position 1: Braedon  : [11, 15, 20, 27, 32, 36, 37, 39, 40, 45]
Table position 2: Kane     : [16, 17, 19, 25, 28, 31, 33, 42, 43, 46]
Table position 3: Elizabeth: [13, 18, 21, 22, 23, 30, 35, 38, 44, 49]

Discards:
Eugenius  [41, 47, 48]
Braedon   [11, 27, 37]
Kane      [17, 31, 43]
Elizabeth [18, 44, 49]


Debug output from Eugenius
------------------------------------------------------------------------
10 12 14 18 24 26 29 34 44 49 

10------------------------------------------------------------------------

Round 0: Eugenius  holding [10, 12, 14, 18, 24, 26, 29, 34, 44, 49] plays the 10 
Round 0: Braedon   holding [15, 20, 32, 36, 39, 40, 41, 45, 47, 48] plays the 36 
Round 0: Kane      holding [11, 16, 19, 25, 27, 28, 33, 37, 42, 46] plays the 16 
Round 0: Elizabeth holding [13, 17, 21, 22, 23, 30, 31, 35, 38, 43] plays the 22 
Braedon wins the round 

Round 1: Braedon   holding [15, 20, 32, 39, 40, 41, 45, 47, 48] plays the 39 
Round 1: Kane      holding [11, 19, 25, 27, 28, 33, 37, 42, 46] plays the 27 
Round 1: Elizabeth holding [13, 17, 21, 23, 30, 31, 35, 38, 43] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 18 24 26 29 34 44 49 0 

12------------------------------------------------------------------------

Round 1: Eugenius  holding [12, 14, 18, 24, 26, 29, 34, 44, 49] plays the 12 
Braedon wins the round 

Round 2: Braedon   holding [15, 20, 32, 40, 41, 45, 47, 48] plays the 32 
Round 2: Kane      holding [11, 19, 25, 28, 33, 37, 42, 46] plays the 46 
Round 2: Elizabeth holding [13, 17, 21, 23, 31, 35, 38, 43] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
14 18 24 26 29 34 44 49 0 0 

14------------------------------------------------------------------------

Round 2: Eugenius  holding [14, 18, 24, 26, 29, 34, 44, 49] plays the 14 
Kane wins the round 

Round 3: Kane      holding [11, 19, 25, 28, 33, 37, 42] plays the 42 
Round 3: Elizabeth holding [13, 17, 21, 23, 31, 35, 43] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
18 24 26 29 34 44 49 0 0 0 

18------------------------------------------------------------------------

Round 3: Eugenius  holding [18, 24, 26, 29, 34, 44, 49] plays the 18 
Round 3: Braedon   holding [15, 20, 40, 41, 45, 47, 48] plays the 20 
Kane wins the round which contains 7 penalty points

Round 4: Kane      holding [11, 19, 25, 28, 33, 37] plays the 25 
Round 4: Elizabeth holding [13, 17, 21, 23, 31, 43] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
24 26 29 34 44 49 0 0 0 0 

24 chah------------------------------------------------------------------------

Round 4: Eugenius  holding [24, 26, 29, 34, 44, 49] plays the 24 
Round 4: Braedon   holding [15, 40, 41, 45, 47, 48] plays the 40 
Braedon wins the round 

Round 5: Braedon   holding [15, 41, 45, 47, 48] plays the 48 
Round 5: Kane      holding [11, 19, 28, 33, 37] plays the 33 
Round 5: Elizabeth holding [13, 17, 23, 31, 43] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
26 29 34 44 49 0 0 0 0 0 

26------------------------------------------------------------------------

Round 5: Eugenius  holding [26, 29, 34, 44, 49] plays the 26 
Braedon wins the round which contains 1 penalty points

Round 6: Braedon   holding [15, 41, 45, 47] plays the 47 
Round 6: Kane      holding [11, 19, 28, 37] plays the 11 
Round 6: Elizabeth holding [13, 17, 23, 43] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
29 34 44 49 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 6: Eugenius  holding [29, 34, 44, 49] plays the 29 
Braedon wins the round which contains 4 penalty points

Round 7: Braedon   holding [15, 41, 45] plays the 45 
Round 7: Kane      holding [19, 28, 37] plays the 19 
Round 7: Elizabeth holding [13, 17, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
34 44 49 0 0 0 0 0 0 0 

34 chah------------------------------------------------------------------------

Round 7: Eugenius  holding [34, 44, 49] plays the 34 
Braedon wins the round which contains 2 penalty points

Round 8: Braedon   holding [15, 41] plays the 15 
Round 8: Kane      holding [28, 37] plays the 28 
Round 8: Elizabeth holding [13, 17] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
44 49 0 0 0 0 0 0 0 0 

44 chah------------------------------------------------------------------------

Round 8: Eugenius  holding [44, 49] plays the 44 
Braedon wins the round which contains 1 penalty points

Round 9: Braedon   holding [41] plays the 41 
Round 9: Kane      holding [37] plays the 37 
Round 9: Elizabeth holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 9: Eugenius  holding [49] plays the 49 
Braedon wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Elizabeth (system)
#3 with 7 penalty points Kane (system)
#4 with 11 penalty points Braedon (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16463262 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Andrew  : [13, 14, 15, 23, 30, 32, 39, 40, 42, 45]
Table position 1: David   : [11, 17, 20, 21, 22, 24, 28, 41, 43, 44]
Table position 2: Eugenius: [16, 19, 26, 27, 29, 34, 35, 37, 46, 49]
Table position 3: Alex    : [10, 12, 18, 25, 31, 33, 36, 38, 47, 48]

Discards:
Andrew   [14, 15, 23]
David    [17, 20, 21]
Eugenius [37, 46, 49]
Alex     [10, 36, 47]

Round 0: Andrew   holding [10, 13, 30, 32, 36, 39, 40, 42, 45, 47] plays the 45 
Round 0: David    holding [11, 14, 15, 22, 23, 24, 28, 41, 43, 44] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 19 20 21 26 27 29 34 35 

20------------------------------------------------------------------------

Round 0: Eugenius holding [16, 17, 19, 20, 21, 26, 27, 29, 34, 35] plays the 20 
Round 0: Alex     holding [12, 18, 25, 31, 33, 37, 38, 46, 48, 49] plays the 48 
Alex wins the round 

Round 1: Alex     holding [12, 18, 25, 31, 33, 37, 38, 46, 49] plays the 46 
Round 1: Andrew   holding [10, 13, 30, 32, 36, 39, 40, 42, 47] plays the 30 
Round 1: David    holding [11, 14, 15, 22, 23, 28, 41, 43, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 19 21 26 27 29 34 35 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 17, 19, 21, 26, 27, 29, 34, 35] plays the 16 
Alex wins the round 

Round 2: Alex     holding [12, 18, 25, 31, 33, 37, 38, 49] plays the 33 
Round 2: Andrew   holding [10, 13, 32, 36, 39, 40, 42, 47] plays the 42 
Round 2: David    holding [11, 14, 15, 22, 23, 28, 41, 43] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 21 26 27 29 34 35 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [17, 19, 21, 26, 27, 29, 34, 35] plays the 21 
Andrew wins the round which contains 7 penalty points

Round 3: Andrew   holding [10, 13, 32, 36, 39, 40, 47] plays the 40 
Round 3: David    holding [11, 14, 15, 23, 28, 41, 43] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 26 27 29 34 35 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 26, 27, 29, 34, 35] plays the 26 
Round 3: Alex     holding [12, 18, 25, 31, 37, 38, 49] plays the 38 
Andrew wins the round 

Round 4: Andrew   holding [10, 13, 32, 36, 39, 47] plays the 36 
Round 4: David    holding [11, 15, 23, 28, 41, 43] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 27 29 34 35 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 27, 29, 34, 35] plays the 27 
Round 4: Alex     holding [12, 18, 25, 31, 37, 49] plays the 12 
Andrew wins the round 

Round 5: Andrew   holding [10, 13, 32, 39, 47] plays the 32 
Round 5: David    holding [11, 15, 23, 41, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 34 35 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 29, 34, 35] plays the 34 
Round 5: Alex     holding [18, 25, 31, 37, 49] plays the 18 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 35 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 19, 29, 35] plays the 17 
Round 6: Alex     holding [25, 31, 37, 49] plays the 31 
Round 6: Andrew   holding [10, 13, 39, 47] plays the 47 
Round 6: David    holding [11, 15, 23, 41] plays the 41 
Andrew wins the round which contains 4 penalty points

Round 7: Andrew   holding [10, 13, 39] plays the 39 
Round 7: David    holding [11, 15, 23] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 35 0 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 7: Eugenius holding [19, 29, 35] plays the 19 
Round 7: Alex     holding [25, 37, 49] plays the 25 
Andrew wins the round which contains 1 penalty points

Round 8: Andrew   holding [10, 13] plays the 13 
Round 8: David    holding [11, 23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
29 35 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 35] plays the 29 
Round 8: Alex     holding [37, 49] plays the 37 
Alex wins the round which contains 4 penalty points

Round 9: Alex     holding [49] plays the 49 
Round 9: Andrew   holding [10] plays the 10 
Round 9: David    holding [11] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Alex wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points David (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 5 penalty points Alex (system)
#4 with 12 penalty points Andrew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14854659 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 14, 17, 18, 21, 26, 28, 41, 45, 49]
Table position 1: Emily   : [12, 25, 33, 34, 36, 38, 39, 40, 47, 48]
Table position 2: Kane    : [11, 13, 15, 16, 19, 20, 29, 43, 44, 46]
Table position 3: Andrew  : [22, 23, 24, 27, 30, 31, 32, 35, 37, 42]

Discards:
Eugenius [41, 45, 49]
Emily    [25, 33, 47]
Kane     [13, 20, 44]
Andrew   [24, 27, 42]


Debug output from Eugenius
------------------------------------------------------------------------
10 14 17 18 21 24 26 27 28 42 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 14, 17, 18, 21, 24, 26, 27, 28, 42] plays the 10 
Round 0: Emily    holding [12, 34, 36, 38, 39, 40, 41, 45, 48, 49] plays the 12 
Round 0: Kane     holding [11, 15, 16, 19, 25, 29, 33, 43, 46, 47] plays the 46 
Round 0: Andrew   holding [13, 20, 22, 23, 30, 31, 32, 35, 37, 44] plays the 32 
Kane wins the round 

Round 1: Kane     holding [11, 15, 16, 19, 25, 29, 33, 43, 47] plays the 25 
Round 1: Andrew   holding [13, 20, 22, 23, 30, 31, 35, 37, 44] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 18 21 24 26 27 28 42 0 

14 chah------------------------------------------------------------------------

Round 1: Eugenius holding [14, 17, 18, 21, 24, 26, 27, 28, 42] plays the 14 
Round 1: Emily    holding [34, 36, 38, 39, 40, 41, 45, 48, 49] plays the 45 
Emily wins the round 

Round 2: Emily    holding [34, 36, 38, 39, 40, 41, 48, 49] plays the 39 
Round 2: Kane     holding [11, 15, 16, 19, 29, 33, 43, 47] plays the 15 
Round 2: Andrew   holding [13, 22, 23, 30, 31, 35, 37, 44] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
17 18 21 24 26 27 28 42 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [17, 18, 21, 24, 26, 27, 28, 42] plays the 18 
Emily wins the round 

Round 3: Emily    holding [34, 36, 38, 40, 41, 48, 49] plays the 49 
Round 3: Kane     holding [11, 16, 19, 29, 33, 43, 47] plays the 33 
Round 3: Andrew   holding [13, 22, 23, 31, 35, 37, 44] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
17 21 24 26 27 28 42 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [17, 21, 24, 26, 27, 28, 42] plays the 21 
Emily wins the round 

Round 4: Emily    holding [34, 36, 38, 40, 41, 48] plays the 34 
Round 4: Kane     holding [11, 16, 19, 29, 43, 47] plays the 16 
Round 4: Andrew   holding [13, 22, 23, 31, 37, 44] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
17 24 26 27 28 42 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius holding [17, 24, 26, 27, 28, 42] plays the 24 
Emily wins the round 

Round 5: Emily    holding [36, 38, 40, 41, 48] plays the 36 
Round 5: Kane     holding [11, 19, 29, 43, 47] plays the 47 
Round 5: Andrew   holding [13, 23, 31, 37, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
17 26 27 28 42 0 0 0 0 0 

26------------------------------------------------------------------------

Round 5: Eugenius holding [17, 26, 27, 28, 42] plays the 26 
Andrew wins the round which contains 1 penalty points

Round 6: Andrew   holding [13, 23, 31, 37] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 28 42 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 27, 28, 42] plays the 17 
Round 6: Emily    holding [38, 40, 41, 48] plays the 41 
Round 6: Kane     holding [11, 19, 29, 43] plays the 11 
Emily wins the round which contains 4 penalty points

Round 7: Emily    holding [38, 40, 48] plays the 38 
Round 7: Kane     holding [19, 29, 43] plays the 19 
Round 7: Andrew   holding [13, 23, 37] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
27 28 42 0 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 7: Eugenius holding [27, 28, 42] plays the 28 
Emily wins the round which contains 2 penalty points

Round 8: Emily    holding [40, 48] plays the 48 
Round 8: Kane     holding [29, 43] plays the 29 
Round 8: Andrew   holding [13, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
27 42 0 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 8: Eugenius holding [27, 42] plays the 27 
Emily wins the round which contains 2 penalty points

Round 9: Emily    holding [40] plays the 40 
Round 9: Kane     holding [43] plays the 43 
Round 9: Andrew   holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
42 0 0 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 9: Eugenius holding [42] plays the 42 
Eugenius wins the round which contains 9 penalty points


Finishing Positions

#1 with 0 penalty points Kane (system)
#2 with 1 penalty points Andrew (system)
#3 with 8 penalty points Emily (system)
#4 with 9 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5342881 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Nathan  : [17, 21, 25, 28, 31, 34, 36, 37, 40, 48]
Table position 1: Zachary : [11, 15, 16, 29, 32, 33, 35, 41, 43, 49]
Table position 2: Eugenius: [10, 20, 22, 23, 24, 26, 38, 44, 45, 46]
Table position 3: Dylan   : [12, 13, 14, 18, 19, 27, 30, 39, 42, 47]

Discards:
Nathan   [34, 36, 40]
Zachary  [29, 35, 49]
Eugenius [44, 45, 46]
Dylan    [18, 19, 47]

Round 0: Nathan   holding [17, 18, 19, 21, 25, 28, 31, 37, 47, 48] plays the 18 
Round 0: Zachary  holding [11, 15, 16, 32, 33, 34, 36, 40, 41, 43] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
10 20 22 23 24 26 29 35 38 49 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 20, 22, 23, 24, 26, 29, 35, 38, 49] plays the 10 
Round 0: Dylan    holding [12, 13, 14, 27, 30, 39, 42, 44, 45, 46] plays the 27 
Zachary wins the round 

Round 1: Zachary  holding [11, 15, 16, 33, 34, 36, 40, 41, 43] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
20 22 23 24 26 29 35 38 49 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [20, 22, 23, 24, 26, 29, 35, 38, 49] plays the 20 
Round 1: Dylan    holding [12, 13, 14, 30, 39, 42, 44, 45, 46] plays the 42 
Round 1: Nathan   holding [17, 19, 21, 25, 28, 31, 37, 47, 48] plays the 48 
Nathan wins the round which contains 7 penalty points

Round 2: Nathan   holding [17, 19, 21, 25, 28, 31, 37, 47] plays the 28 
Round 2: Zachary  holding [11, 15, 16, 33, 34, 36, 41, 43] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
22 23 24 26 29 35 38 49 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [22, 23, 24, 26, 29, 35, 38, 49] plays the 22 
Round 2: Dylan    holding [12, 13, 14, 30, 39, 44, 45, 46] plays the 14 
Zachary wins the round 

Round 3: Zachary  holding [11, 15, 16, 33, 36, 41, 43] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
23 24 26 29 35 38 49 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [23, 24, 26, 29, 35, 38, 49] plays the 24 
Round 3: Dylan    holding [12, 13, 30, 39, 44, 45, 46] plays the 12 
Round 3: Nathan   holding [17, 19, 21, 25, 31, 37, 47] plays the 21 
Zachary wins the round 

Round 4: Zachary  holding [11, 15, 16, 36, 41, 43] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
23 26 29 35 38 49 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [23, 26, 29, 35, 38, 49] plays the 26 
Round 4: Dylan    holding [13, 30, 39, 44, 45, 46] plays the 44 
Round 4: Nathan   holding [17, 19, 25, 31, 37, 47] plays the 37 
Dylan wins the round which contains 1 penalty points

Round 5: Dylan    holding [13, 30, 39, 45, 46] plays the 39 
Round 5: Nathan   holding [17, 19, 25, 31, 47] plays the 47 
Round 5: Zachary  holding [11, 15, 36, 41, 43] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 35 38 49 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 5: Eugenius holding [23, 29, 35, 38, 49] plays the 23 
Dylan wins the round which contains 2 penalty points

Round 6: Dylan    holding [13, 30, 45, 46] plays the 13 
Round 6: Nathan   holding [17, 19, 25, 31] plays the 17 
Round 6: Zachary  holding [11, 36, 41, 43] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
29 35 38 49 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 6: Eugenius holding [29, 35, 38, 49] plays the 29 
Zachary wins the round which contains 4 penalty points

Round 7: Zachary  holding [11, 36, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
35 38 49 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 7: Eugenius holding [35, 38, 49] plays the 35 
Round 7: Dylan    holding [30, 45, 46] plays the 46 
Round 7: Nathan   holding [19, 25, 31] plays the 31 
Zachary wins the round which contains 2 penalty points

Round 8: Zachary  holding [11, 36] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
38 49 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [38, 49] plays the 38 
Round 8: Dylan    holding [30, 45] plays the 30 
Round 8: Nathan   holding [19, 25] plays the 25 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 9: Eugenius holding [49] plays the 49 
Round 9: Dylan    holding [45] plays the 45 
Round 9: Nathan   holding [19] plays the 19 
Round 9: Zachary  holding [11] plays the 11 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 2 penalty points Eugenius (dodo.c)
#2 with 3 penalty points Dylan (system)
#3 with 6 penalty points Zachary (system)
#4 with 7 penalty points Nathan (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2829607 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 14, 15, 17, 21, 28, 29, 35, 41, 47]
Table position 1: Minh    : [12, 13, 18, 22, 24, 25, 30, 39, 42, 43]
Table position 2: Braedon : [16, 20, 26, 27, 31, 32, 36, 40, 48, 49]
Table position 3: Stephen : [10, 19, 23, 33, 34, 37, 38, 44, 45, 46]

Discards:
Eugenius [35, 41, 47]
Minh     [13, 24, 30]
Braedon  [16, 26, 31]
Stephen  [33, 34, 38]


Debug output from Eugenius
------------------------------------------------------------------------
11 14 15 17 21 28 29 33 34 38 

14------------------------------------------------------------------------

Round 0: Eugenius holding [11, 14, 15, 17, 21, 28, 29, 33, 34, 38] plays the 14 
Round 0: Minh     holding [12, 18, 22, 25, 35, 39, 41, 42, 43, 47] plays the 35 
Round 0: Braedon  holding [13, 20, 24, 27, 30, 32, 36, 40, 48, 49] plays the 48 
Round 0: Stephen  holding [10, 16, 19, 23, 26, 31, 37, 44, 45, 46] plays the 46 
Braedon wins the round 

Round 1: Braedon  holding [13, 20, 24, 27, 30, 32, 36, 40, 49] plays the 20 
Round 1: Stephen  holding [10, 16, 19, 23, 26, 31, 37, 44, 45] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 17 21 28 29 33 34 38 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [11, 15, 17, 21, 28, 29, 33, 34, 38] plays the 15 
Round 1: Minh     holding [12, 18, 22, 25, 39, 41, 42, 43, 47] plays the 25 
Stephen wins the round 

Round 2: Stephen  holding [10, 16, 19, 23, 31, 37, 44, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 21 28 29 33 34 38 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [11, 17, 21, 28, 29, 33, 34, 38] plays the 21 
Round 2: Minh     holding [12, 18, 22, 39, 41, 42, 43, 47] plays the 12 
Round 2: Braedon  holding [13, 24, 27, 30, 32, 36, 40, 49] plays the 40 
Stephen wins the round 

Round 3: Stephen  holding [10, 16, 19, 23, 31, 37, 44] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 28 29 33 34 38 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [11, 17, 28, 29, 33, 34, 38] plays the 28 
Round 3: Minh     holding [18, 22, 39, 41, 42, 43, 47] plays the 42 
Round 3: Braedon  holding [13, 24, 27, 30, 32, 36, 49] plays the 30 
Minh wins the round which contains 7 penalty points

Round 4: Minh     holding [18, 22, 39, 41, 43, 47] plays the 39 
Round 4: Braedon  holding [13, 24, 27, 32, 36, 49] plays the 36 
Round 4: Stephen  holding [10, 19, 23, 31, 37, 44] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 29 33 34 38 0 0 0 0 

33------------------------------------------------------------------------

Round 4: Eugenius holding [11, 17, 29, 33, 34, 38] plays the 33 
Minh wins the round which contains 1 penalty points

Round 5: Minh     holding [18, 22, 41, 43, 47] plays the 22 
Round 5: Braedon  holding [13, 24, 27, 32, 49] plays the 24 
Round 5: Stephen  holding [10, 19, 31, 37, 44] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 29 34 38 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [11, 17, 29, 34, 38] plays the 34 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 17 29 38 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 17, 29, 38] plays the 11 
Round 6: Minh     holding [18, 41, 43, 47] plays the 41 
Round 6: Braedon  holding [13, 27, 32, 49] plays the 13 
Round 6: Stephen  holding [19, 31, 37, 44] plays the 37 
Minh wins the round which contains 4 penalty points

Round 7: Minh     holding [18, 43, 47] plays the 47 
Round 7: Braedon  holding [27, 32, 49] plays the 32 
Round 7: Stephen  holding [19, 31, 44] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 38 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 29, 38] plays the 17 
Minh wins the round which contains 3 penalty points

Round 8: Minh     holding [18, 43] plays the 43 
Round 8: Braedon  holding [27, 49] plays the 27 
Round 8: Stephen  holding [19, 44] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
29 38 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 38] plays the 29 
Minh wins the round which contains 3 penalty points

Round 9: Minh     holding [18] plays the 18 
Round 9: Braedon  holding [49] plays the 49 
Round 9: Stephen  holding [44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Stephen wins the round 


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Braedon (system)
#1 with 0 penalty points Stephen (system)
#4 with 18 penalty points Minh (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12575370 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Nicholas: [15, 20, 21, 24, 37, 39, 41, 43, 46, 47]
Table position 1: Aydin   : [14, 23, 27, 28, 30, 32, 35, 40, 48, 49]
Table position 2: Eugenius: [10, 11, 12, 16, 18, 29, 33, 34, 38, 45]
Table position 3: Reede   : [13, 17, 19, 22, 25, 26, 31, 36, 42, 44]

Discards:
Nicholas [15, 20, 46]
Aydin    [23, 32, 40]
Eugenius [34, 38, 45]
Reede    [13, 22, 31]

Round 0: Nicholas holding [13, 21, 22, 24, 31, 37, 39, 41, 43, 47] plays the 21 
Round 0: Aydin    holding [14, 15, 20, 27, 28, 30, 35, 46, 48, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 12 16 18 23 29 32 33 40 

12------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 12, 16, 18, 23, 29, 32, 33, 40] plays the 12 
Round 0: Reede    holding [17, 19, 25, 26, 34, 36, 38, 42, 44, 45] plays the 42 
Aydin wins the round which contains 7 penalty points

Round 1: Aydin    holding [14, 15, 20, 27, 28, 30, 35, 46, 48] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 16 18 23 29 32 33 40 0 

10------------------------------------------------------------------------

Round 1: Eugenius holding [10, 11, 16, 18, 23, 29, 32, 33, 40] plays the 10 
Round 1: Reede    holding [17, 19, 25, 26, 34, 36, 38, 44, 45] plays the 25 
Round 1: Nicholas holding [13, 22, 24, 31, 37, 39, 41, 43, 47] plays the 31 
Aydin wins the round which contains 1 penalty points

Round 2: Aydin    holding [14, 15, 20, 27, 28, 30, 46, 48] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 18 23 29 32 33 40 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [11, 16, 18, 23, 29, 32, 33, 40] plays the 16 
Round 2: Reede    holding [17, 19, 26, 34, 36, 38, 44, 45] plays the 44 
Round 2: Nicholas holding [13, 22, 24, 37, 39, 41, 43, 47] plays the 24 
Aydin wins the round 

Round 3: Aydin    holding [14, 15, 20, 27, 28, 30, 48] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 18 23 29 32 33 40 0 0 0 

18------------------------------------------------------------------------

Round 3: Eugenius holding [11, 18, 23, 29, 32, 33, 40] plays the 18 
Round 3: Reede    holding [17, 19, 26, 34, 36, 38, 45] plays the 36 
Round 3: Nicholas holding [13, 22, 37, 39, 41, 43, 47] plays the 39 
Nicholas wins the round 

Round 4: Nicholas holding [13, 22, 37, 41, 43, 47] plays the 13 
Round 4: Aydin    holding [14, 20, 27, 28, 30, 48] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 29 32 33 40 0 0 0 0 

11------------------------------------------------------------------------

Round 4: Eugenius holding [11, 23, 29, 32, 33, 40] plays the 11 
Round 4: Reede    holding [17, 19, 26, 34, 38, 45] plays the 17 
Reede wins the round which contains 3 penalty points

Round 5: Reede    holding [19, 26, 34, 38, 45] plays the 38 
Round 5: Nicholas holding [22, 37, 41, 43, 47] plays the 22 
Round 5: Aydin    holding [14, 27, 28, 30, 48] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 32 33 40 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [23, 29, 32, 33, 40] plays the 32 
Reede wins the round 

Round 6: Reede    holding [19, 26, 34, 45] plays the 26 
Round 6: Nicholas holding [37, 41, 43, 47] plays the 43 
Round 6: Aydin    holding [14, 27, 28, 48] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 33 40 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 6: Eugenius holding [23, 29, 33, 40] plays the 40 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
23 29 33 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius holding [23, 29, 33] plays the 23 
Round 7: Reede    holding [19, 34, 45] plays the 19 
Round 7: Nicholas holding [37, 41, 47] plays the 37 
Round 7: Aydin    holding [14, 27, 48] plays the 14 
Nicholas wins the round which contains 3 penalty points

Round 8: Nicholas holding [41, 47] plays the 47 
Round 8: Aydin    holding [27, 48] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
29 33 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 33] plays the 29 
Round 8: Reede    holding [34, 45] plays the 34 
Nicholas wins the round which contains 2 penalty points

Round 9: Nicholas holding [41] plays the 41 
Round 9: Aydin    holding [48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
33 0 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 9: Eugenius holding [33] plays the 33 
Round 9: Reede    holding [45] plays the 45 
Nicholas wins the round which contains 1 penalty points


Finishing Positions

#1 with 1 penalty points Eugenius (dodo.c)
#2 with 3 penalty points Reede (system)
#3 with 6 penalty points Nicholas (system)
#4 with 8 penalty points Aydin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 4639716 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Finbar   : [14, 16, 17, 21, 22, 23, 38, 40, 41, 44]
Table position 1: Eugenius : [10, 19, 20, 24, 25, 26, 29, 34, 42, 49]
Table position 2: Gal      : [11, 12, 13, 15, 28, 30, 32, 35, 36, 47]
Table position 3: Elizabeth: [18, 27, 31, 33, 37, 39, 43, 45, 46, 48]

Discards:
Finbar    [23, 38, 41]
Eugenius  [34, 42, 49]
Gal       [12, 32, 35]
Elizabeth [18, 33, 43]

Round 0: Finbar    holding [14, 16, 17, 18, 21, 22, 33, 40, 43, 44] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
10 19 20 23 24 25 26 29 38 41 

24------------------------------------------------------------------------

Round 0: Eugenius  holding [10, 19, 20, 23, 24, 25, 26, 29, 38, 41] plays the 24 
Round 0: Gal       holding [11, 13, 15, 28, 30, 34, 36, 42, 47, 49] plays the 36 
Round 0: Elizabeth holding [12, 27, 31, 32, 35, 37, 39, 45, 46, 48] plays the 27 
Gal wins the round 

Round 1: Gal       holding [11, 13, 15, 28, 30, 34, 42, 47, 49] plays the 30 
Round 1: Elizabeth holding [12, 31, 32, 35, 37, 39, 45, 46, 48] plays the 12 
Round 1: Finbar    holding [14, 16, 17, 18, 22, 33, 40, 43, 44] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
10 19 20 23 25 26 29 38 41 0 

10------------------------------------------------------------------------

Round 1: Eugenius  holding [10, 19, 20, 23, 25, 26, 29, 38, 41] plays the 10 
Gal wins the round 

Round 2: Gal       holding [11, 13, 15, 28, 34, 42, 47, 49] plays the 34 
Round 2: Elizabeth holding [31, 32, 35, 37, 39, 45, 46, 48] plays the 46 
Round 2: Finbar    holding [14, 16, 17, 18, 33, 40, 43, 44] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
19 20 23 25 26 29 38 41 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius  holding [19, 20, 23, 25, 26, 29, 38, 41] plays the 20 
Elizabeth wins the round 

Round 3: Elizabeth holding [31, 32, 35, 37, 39, 45, 48] plays the 32 
Round 3: Finbar    holding [14, 17, 18, 33, 40, 43, 44] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 25 26 29 38 41 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius  holding [19, 23, 25, 26, 29, 38, 41] plays the 26 
Round 3: Gal       holding [11, 13, 15, 28, 42, 47, 49] plays the 28 
Finbar wins the round 

Round 4: Finbar    holding [14, 17, 18, 33, 43, 44] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 25 29 38 41 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 4: Eugenius  holding [19, 23, 25, 29, 38, 41] plays the 19 
Round 4: Gal       holding [11, 13, 15, 42, 47, 49] plays the 15 
Round 4: Elizabeth holding [31, 35, 37, 39, 45, 48] plays the 39 
Elizabeth wins the round which contains 1 penalty points

Round 5: Elizabeth holding [31, 35, 37, 45, 48] plays the 45 
Round 5: Finbar    holding [14, 17, 18, 43, 44] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 29 38 41 0 0 0 0 0 

25------------------------------------------------------------------------

Round 5: Eugenius  holding [23, 25, 29, 38, 41] plays the 25 
Round 5: Gal       holding [11, 13, 42, 47, 49] plays the 42 
Elizabeth wins the round which contains 7 penalty points

Round 6: Elizabeth holding [31, 35, 37, 48] plays the 48 
Round 6: Finbar    holding [14, 17, 43, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 38 41 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 6: Eugenius  holding [23, 29, 38, 41] plays the 38 
Round 6: Gal       holding [11, 13, 47, 49] plays the 11 
Elizabeth wins the round which contains 1 penalty points

Round 7: Elizabeth holding [31, 35, 37] plays the 37 
Round 7: Finbar    holding [14, 17, 43] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 41 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius  holding [23, 29, 41] plays the 23 
Round 7: Gal       holding [13, 47, 49] plays the 47 
Gal wins the round which contains 4 penalty points

Round 8: Gal       holding [13, 49] plays the 49 
Round 8: Elizabeth holding [31, 35] plays the 35 
Round 8: Finbar    holding [14, 43] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
29 41 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 8: Eugenius  holding [29, 41] plays the 29 
Gal wins the round which contains 1 penalty points

Round 9: Gal       holding [13] plays the 13 
Round 9: Elizabeth holding [31] plays the 31 
Round 9: Finbar    holding [43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius  holding [41] plays the 41 
Finbar wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Finbar (system)
#3 with 5 penalty points Gal (system)
#4 with 9 penalty points Elizabeth (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3694424 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Aydin   : [11, 12, 13, 15, 16, 17, 27, 33, 46, 47]
Table position 1: Eugenius: [14, 20, 22, 24, 25, 28, 29, 31, 34, 38]
Table position 2: Connor  : [10, 18, 19, 26, 37, 39, 41, 42, 43, 49]
Table position 3: Benjamin: [21, 23, 30, 32, 35, 36, 40, 44, 45, 48]

Discards:
Aydin    [15, 16, 47]
Eugenius [31, 34, 38]
Connor   [18, 41, 42]
Benjamin [36, 40, 45]

Round 0: Aydin    holding [11, 12, 13, 17, 27, 33, 36, 40, 45, 46] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
14 15 16 20 22 24 25 28 29 47 

15------------------------------------------------------------------------

Round 0: Eugenius holding [14, 15, 16, 20, 22, 24, 25, 28, 29, 47] plays the 15 
Round 0: Connor   holding [10, 19, 26, 31, 34, 37, 38, 39, 43, 49] plays the 39 
Round 0: Benjamin holding [18, 21, 23, 30, 32, 35, 41, 42, 44, 48] plays the 21 
Connor wins the round 

Round 1: Connor   holding [10, 19, 26, 31, 34, 37, 38, 43, 49] plays the 34 
Round 1: Benjamin holding [18, 23, 30, 32, 35, 41, 42, 44, 48] plays the 42 
Round 1: Aydin    holding [11, 12, 13, 17, 33, 36, 40, 45, 46] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 20 22 24 25 28 29 47 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 16, 20, 22, 24, 25, 28, 29, 47] plays the 14 
Benjamin wins the round which contains 7 penalty points

Round 2: Benjamin holding [18, 23, 30, 32, 35, 41, 44, 48] plays the 48 
Round 2: Aydin    holding [11, 12, 13, 17, 33, 40, 45, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
16 20 22 24 25 28 29 47 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [16, 20, 22, 24, 25, 28, 29, 47] plays the 16 
Round 2: Connor   holding [10, 19, 26, 31, 37, 38, 43, 49] plays the 38 
Benjamin wins the round 

Round 3: Benjamin holding [18, 23, 30, 32, 35, 41, 44] plays the 35 
Round 3: Aydin    holding [11, 12, 13, 17, 33, 40, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
20 22 24 25 28 29 47 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [20, 22, 24, 25, 28, 29, 47] plays the 20 
Round 3: Connor   holding [10, 19, 26, 31, 37, 43, 49] plays the 10 
Aydin wins the round 

Round 4: Aydin    holding [11, 12, 13, 17, 33, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
22 24 25 28 29 47 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius holding [22, 24, 25, 28, 29, 47] plays the 22 
Round 4: Connor   holding [19, 26, 31, 37, 43, 49] plays the 26 
Round 4: Benjamin holding [18, 23, 30, 32, 41, 44] plays the 32 
Aydin wins the round 

Round 5: Aydin    holding [11, 12, 13, 17, 33] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
24 25 28 29 47 0 0 0 0 0 

24------------------------------------------------------------------------

Round 5: Eugenius holding [24, 25, 28, 29, 47] plays the 24 
Round 5: Connor   holding [19, 31, 37, 43, 49] plays the 43 
Round 5: Benjamin holding [18, 23, 30, 41, 44] plays the 18 
Aydin wins the round which contains 1 penalty points

Round 6: Aydin    holding [11, 12, 13, 17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
25 28 29 47 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 6: Eugenius holding [25, 28, 29, 47] plays the 29 
Round 6: Connor   holding [19, 31, 37, 49] plays the 31 
Round 6: Benjamin holding [23, 30, 41, 44] plays the 41 
Benjamin wins the round which contains 4 penalty points

Round 7: Benjamin holding [23, 30, 44] plays the 23 
Round 7: Aydin    holding [11, 12, 13] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
25 28 47 0 0 0 0 0 0 0 

47------------------------------------------------------------------------

Round 7: Eugenius holding [25, 28, 47] plays the 47 
Round 7: Connor   holding [19, 37, 49] plays the 19 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
25 28 0 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 8: Eugenius holding [25, 28] plays the 25 
Round 8: Connor   holding [37, 49] plays the 37 
Round 8: Benjamin holding [30, 44] plays the 30 
Round 8: Aydin    holding [12, 13] plays the 12 
Benjamin wins the round which contains 1 penalty points

Round 9: Benjamin holding [44] plays the 44 
Round 9: Aydin    holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
28 0 0 0 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 9: Eugenius holding [28] plays the 28 
Round 9: Connor   holding [49] plays the 49 
Benjamin wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Connor (system)
#2 with 1 penalty points Aydin (system)
#3 with 4 penalty points Eugenius (dodo.c)
#4 with 13 penalty points Benjamin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5872114 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Trung   : [15, 18, 22, 23, 26, 30, 36, 37, 46, 49]
Table position 1: Zachary : [10, 11, 17, 19, 25, 27, 28, 32, 43, 44]
Table position 2: Finbar  : [12, 13, 20, 21, 29, 34, 35, 38, 39, 45]
Table position 3: Eugenius: [14, 16, 24, 31, 33, 40, 41, 42, 47, 48]

Discards:
Trung    [15, 46, 49]
Zachary  [11, 25, 43]
Finbar   [20, 29, 38]
Eugenius [42, 47, 48]

Round 0: Trung    holding [18, 22, 23, 26, 30, 36, 37, 42, 47, 48] plays the 30 
Round 0: Zachary  holding [10, 15, 17, 19, 27, 28, 32, 44, 46, 49] plays the 46 
Round 0: Finbar   holding [11, 12, 13, 21, 25, 34, 35, 39, 43, 45] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 20 24 29 31 33 38 40 41 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 16, 20, 24, 29, 31, 33, 38, 40, 41] plays the 14 
Zachary wins the round 

Round 1: Zachary  holding [10, 15, 17, 19, 27, 28, 32, 44, 49] plays the 49 
Round 1: Finbar   holding [11, 12, 13, 21, 25, 34, 35, 43, 45] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
16 20 24 29 31 33 38 40 41 0 

16 chah------------------------------------------------------------------------

Round 1: Eugenius holding [16, 20, 24, 29, 31, 33, 38, 40, 41] plays the 16 
Round 1: Trung    holding [18, 22, 23, 26, 36, 37, 42, 47, 48] plays the 42 
Zachary wins the round which contains 7 penalty points

Round 2: Zachary  holding [10, 15, 17, 19, 27, 28, 32, 44] plays the 44 
Round 2: Finbar   holding [11, 12, 13, 25, 34, 35, 43, 45] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
20 24 29 31 33 38 40 41 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [20, 24, 29, 31, 33, 38, 40, 41] plays the 20 
Round 2: Trung    holding [18, 22, 23, 26, 36, 37, 47, 48] plays the 48 
Trung wins the round 

Round 3: Trung    holding [18, 22, 23, 26, 36, 37, 47] plays the 36 
Round 3: Zachary  holding [10, 15, 17, 19, 27, 28, 32] plays the 15 
Round 3: Finbar   holding [11, 12, 13, 25, 35, 43, 45] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
24 29 31 33 38 40 41 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [24, 29, 31, 33, 38, 40, 41] plays the 24 
Trung wins the round 

Round 4: Trung    holding [18, 22, 23, 26, 37, 47] plays the 26 
Round 4: Zachary  holding [10, 17, 19, 27, 28, 32] plays the 32 
Round 4: Finbar   holding [11, 13, 25, 35, 43, 45] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 33 38 40 41 0 0 0 0 

38------------------------------------------------------------------------

Round 4: Eugenius holding [29, 31, 33, 38, 40, 41] plays the 38 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
29 31 33 40 41 0 0 0 0 0 

29------------------------------------------------------------------------

Round 5: Eugenius holding [29, 31, 33, 40, 41] plays the 29 
Round 5: Trung    holding [18, 22, 23, 37, 47] plays the 23 
Round 5: Zachary  holding [10, 17, 19, 27, 28] plays the 19 
Round 5: Finbar   holding [13, 25, 35, 43, 45] plays the 13 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
31 33 40 41 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 6: Eugenius holding [31, 33, 40, 41] plays the 31 
Round 6: Trung    holding [18, 22, 37, 47] plays the 47 
Round 6: Zachary  holding [10, 17, 27, 28] plays the 17 
Round 6: Finbar   holding [25, 35, 43, 45] plays the 43 
Trung wins the round which contains 4 penalty points

Round 7: Trung    holding [18, 22, 37] plays the 18 
Round 7: Zachary  holding [10, 27, 28] plays the 28 
Round 7: Finbar   holding [25, 35, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
33 40 41 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 7: Eugenius holding [33, 40, 41] plays the 33 
Finbar wins the round 

Round 8: Finbar   holding [25, 35] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
40 41 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 8: Eugenius holding [40, 41] plays the 40 
Round 8: Trung    holding [22, 37] plays the 22 
Round 8: Zachary  holding [10, 27] plays the 10 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Round 9: Trung    holding [37] plays the 37 
Round 9: Zachary  holding [27] plays the 27 
Round 9: Finbar   holding [35] plays the 35 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Finbar (system)
#2 with 4 penalty points Trung (system)
#3 with 7 penalty points Zachary (system)
#3 with 7 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10337998 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [14, 21, 24, 26, 32, 36, 38, 39, 44, 47]
Table position 1: Michael : [10, 12, 22, 28, 30, 31, 37, 42, 46, 49]
Table position 2: Eleni   : [11, 13, 16, 25, 33, 34, 40, 41, 45, 48]
Table position 3: Minh    : [15, 17, 18, 19, 20, 23, 27, 29, 35, 43]

Discards:
Eugenius [39, 44, 47]
Michael  [28, 30, 31]
Eleni    [11, 34, 48]
Minh     [15, 20, 35]


Debug output from Eugenius
------------------------------------------------------------------------
14 15 20 21 24 26 32 35 36 38 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 15, 20, 21, 24, 26, 32, 35, 36, 38] plays the 14 
Round 0: Michael  holding [10, 12, 22, 37, 39, 42, 44, 46, 47, 49] plays the 22 
Round 0: Eleni    holding [13, 16, 25, 28, 30, 31, 33, 40, 41, 45] plays the 28 
Round 0: Minh     holding [11, 17, 18, 19, 23, 27, 29, 34, 43, 48] plays the 34 
Minh wins the round 

Round 1: Minh     holding [11, 17, 18, 19, 23, 27, 29, 43, 48] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
15 20 21 24 26 32 35 36 38 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [15, 20, 21, 24, 26, 32, 35, 36, 38] plays the 15 
Round 1: Michael  holding [10, 12, 37, 39, 42, 44, 46, 47, 49] plays the 42 
Round 1: Eleni    holding [13, 16, 25, 30, 31, 33, 40, 41, 45] plays the 33 
Michael wins the round which contains 7 penalty points

Round 2: Michael  holding [10, 12, 37, 39, 44, 46, 47, 49] plays the 46 
Round 2: Eleni    holding [13, 16, 25, 30, 31, 40, 41, 45] plays the 40 
Round 2: Minh     holding [11, 17, 19, 23, 27, 29, 43, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
20 21 24 26 32 35 36 38 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [20, 21, 24, 26, 32, 35, 36, 38] plays the 20 
Minh wins the round 

Round 3: Minh     holding [11, 17, 19, 23, 27, 29, 43] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
21 24 26 32 35 36 38 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [21, 24, 26, 32, 35, 36, 38] plays the 21 
Round 3: Michael  holding [10, 12, 37, 39, 44, 47, 49] plays the 12 
Round 3: Eleni    holding [13, 16, 25, 30, 31, 41, 45] plays the 30 
Eleni wins the round 

Round 4: Eleni    holding [13, 16, 25, 31, 41, 45] plays the 25 
Round 4: Minh     holding [11, 17, 19, 23, 29, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
24 26 32 35 36 38 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [24, 26, 32, 35, 36, 38] plays the 35 
Round 4: Michael  holding [10, 37, 39, 44, 47, 49] plays the 10 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
24 26 32 36 38 0 0 0 0 0 

24------------------------------------------------------------------------

Round 5: Eugenius holding [24, 26, 32, 36, 38] plays the 24 
Round 5: Michael  holding [37, 39, 44, 47, 49] plays the 39 
Round 5: Eleni    holding [13, 16, 31, 41, 45] plays the 16 
Round 5: Minh     holding [11, 17, 19, 23, 29] plays the 17 
Michael wins the round which contains 1 penalty points

Round 6: Michael  holding [37, 44, 47, 49] plays the 47 
Round 6: Eleni    holding [13, 31, 41, 45] plays the 13 
Round 6: Minh     holding [11, 19, 23, 29] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
26 32 36 38 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 6: Eugenius holding [26, 32, 36, 38] plays the 26 
Michael wins the round which contains 3 penalty points

Round 7: Michael  holding [37, 44, 49] plays the 49 
Round 7: Eleni    holding [31, 41, 45] plays the 31 
Round 7: Minh     holding [19, 23, 29] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
32 36 38 0 0 0 0 0 0 0 

32 chah------------------------------------------------------------------------

Round 7: Eugenius holding [32, 36, 38] plays the 32 
Michael wins the round which contains 2 penalty points

Round 8: Michael  holding [37, 44] plays the 37 
Round 8: Eleni    holding [41, 45] plays the 41 
Round 8: Minh     holding [23, 29] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
36 38 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [36, 38] plays the 36 
Eleni wins the round which contains 3 penalty points

Round 9: Eleni    holding [45] plays the 45 
Round 9: Minh     holding [23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38 chah------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Round 9: Michael  holding [44] plays the 44 
Eleni wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Minh (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Eleni (system)
#4 with 13 penalty points Michael (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2686952 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Andrew  : [10, 11, 15, 17, 19, 25, 26, 28, 29, 34]
Table position 1: Nicholas: [12, 21, 23, 33, 36, 40, 42, 43, 46, 49]
Table position 2: Dylan   : [13, 18, 22, 24, 27, 30, 31, 37, 38, 48]
Table position 3: Eugenius: [14, 16, 20, 32, 35, 39, 41, 44, 45, 47]

Discards:
Andrew   [10, 17, 34]
Nicholas [21, 36, 49]
Dylan    [22, 37, 38]
Eugenius [44, 45, 47]

Round 0: Andrew   holding [11, 15, 19, 25, 26, 28, 29, 44, 45, 47] plays the 28 
Round 0: Nicholas holding [10, 12, 17, 23, 33, 34, 40, 42, 43, 46] plays the 34 
Round 0: Dylan    holding [13, 18, 21, 24, 27, 30, 31, 36, 48, 49] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 20 22 32 35 37 38 39 41 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 16, 20, 22, 32, 35, 37, 38, 39, 41] plays the 14 
Dylan wins the round 

Round 1: Dylan    holding [13, 18, 21, 24, 27, 30, 31, 36, 49] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
16 20 22 32 35 37 38 39 41 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 20, 22, 32, 35, 37, 38, 39, 41] plays the 16 
Round 1: Andrew   holding [11, 15, 19, 25, 26, 29, 44, 45, 47] plays the 26 
Round 1: Nicholas holding [10, 12, 17, 23, 33, 40, 42, 43, 46] plays the 10 
Dylan wins the round 

Round 2: Dylan    holding [13, 18, 21, 24, 27, 30, 31, 49] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
20 22 32 35 37 38 39 41 0 0 

39------------------------------------------------------------------------

Round 2: Eugenius holding [20, 22, 32, 35, 37, 38, 39, 41] plays the 39 
Round 2: Andrew   holding [11, 15, 19, 25, 29, 44, 45, 47] plays the 15 
Round 2: Nicholas holding [12, 17, 23, 33, 40, 42, 43, 46] plays the 12 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
20 22 32 35 37 38 41 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [20, 22, 32, 35, 37, 38, 41] plays the 20 
Round 3: Andrew   holding [11, 19, 25, 29, 44, 45, 47] plays the 45 
Round 3: Nicholas holding [17, 23, 33, 40, 42, 43, 46] plays the 42 
Round 3: Dylan    holding [13, 18, 21, 24, 30, 31, 49] plays the 24 
Andrew wins the round which contains 7 penalty points

Round 4: Andrew   holding [11, 19, 25, 29, 44, 47] plays the 25 
Round 4: Nicholas holding [17, 23, 33, 40, 43, 46] plays the 40 
Round 4: Dylan    holding [13, 18, 21, 30, 31, 49] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
22 32 35 37 38 41 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [22, 32, 35, 37, 38, 41] plays the 35 
Nicholas wins the round 

Round 5: Nicholas holding [17, 23, 33, 43, 46] plays the 33 
Round 5: Dylan    holding [13, 18, 21, 31, 49] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
22 32 37 38 41 0 0 0 0 0 

22------------------------------------------------------------------------

Round 5: Eugenius holding [22, 32, 37, 38, 41] plays the 22 
Round 5: Andrew   holding [11, 19, 29, 44, 47] plays the 44 
Andrew wins the round 

Round 6: Andrew   holding [11, 19, 29, 47] plays the 47 
Round 6: Nicholas holding [17, 23, 43, 46] plays the 23 
Round 6: Dylan    holding [13, 18, 31, 49] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
32 37 38 41 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 6: Eugenius holding [32, 37, 38, 41] plays the 37 
Andrew wins the round which contains 4 penalty points

Round 7: Andrew   holding [11, 19, 29] plays the 11 
Round 7: Nicholas holding [17, 43, 46] plays the 17 
Round 7: Dylan    holding [13, 18, 49] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
32 38 41 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 7: Eugenius holding [32, 38, 41] plays the 41 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
32 38 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 8: Eugenius holding [32, 38] plays the 32 
Round 8: Andrew   holding [19, 29] plays the 29 
Round 8: Nicholas holding [43, 46] plays the 46 
Round 8: Dylan    holding [18, 49] plays the 18 
Nicholas wins the round which contains 1 penalty points

Round 9: Nicholas holding [43] plays the 43 
Round 9: Dylan    holding [49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Round 9: Andrew   holding [19] plays the 19 
Nicholas wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Dylan (system)
#2 with 3 penalty points Nicholas (system)
#3 with 4 penalty points Eugenius (dodo.c)
#4 with 11 penalty points Andrew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11864957 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius : [13, 15, 19, 21, 25, 26, 30, 41, 44, 45]
Table position 1: Peter    : [14, 17, 18, 20, 23, 29, 31, 33, 36, 48]
Table position 2: Elizabeth: [11, 27, 32, 34, 37, 38, 39, 43, 46, 49]
Table position 3: Michael  : [10, 12, 16, 22, 24, 28, 35, 40, 42, 47]

Discards:
Eugenius  [41, 44, 45]
Peter     [20, 31, 48]
Elizabeth [34, 39, 46]
Michael   [10, 28, 40]


Debug output from Eugenius
------------------------------------------------------------------------
10 13 15 19 21 25 26 28 30 40 

10------------------------------------------------------------------------

Round 0: Eugenius  holding [10, 13, 15, 19, 21, 25, 26, 28, 30, 40] plays the 10 
Round 0: Peter     holding [14, 17, 18, 23, 29, 33, 36, 41, 44, 45] plays the 14 
Round 0: Elizabeth holding [11, 20, 27, 31, 32, 37, 38, 43, 48, 49] plays the 20 
Round 0: Michael   holding [12, 16, 22, 24, 34, 35, 39, 42, 46, 47] plays the 24 
Michael wins the round 

Round 1: Michael   holding [12, 16, 22, 34, 35, 39, 42, 46, 47] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 19 21 25 26 28 30 40 0 

26------------------------------------------------------------------------

Round 1: Eugenius  holding [13, 15, 19, 21, 25, 26, 28, 30, 40] plays the 26 
Round 1: Peter     holding [17, 18, 23, 29, 33, 36, 41, 44, 45] plays the 44 
Round 1: Elizabeth holding [11, 27, 31, 32, 37, 38, 43, 48, 49] plays the 38 
Peter wins the round 

Round 2: Peter     holding [17, 18, 23, 29, 33, 36, 41, 45] plays the 36 
Round 2: Elizabeth holding [11, 27, 31, 32, 37, 43, 48, 49] plays the 27 
Round 2: Michael   holding [12, 22, 34, 35, 39, 42, 46, 47] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 19 21 25 28 30 40 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius  holding [13, 15, 19, 21, 25, 28, 30, 40] plays the 15 
Peter wins the round 

Round 3: Peter     holding [17, 18, 23, 29, 33, 41, 45] plays the 45 
Round 3: Elizabeth holding [11, 31, 32, 37, 43, 48, 49] plays the 48 
Round 3: Michael   holding [22, 34, 35, 39, 42, 46, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 21 25 28 30 40 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius  holding [13, 19, 21, 25, 28, 30, 40] plays the 21 
Elizabeth wins the round which contains 7 penalty points

Round 4: Elizabeth holding [11, 31, 32, 37, 43, 49] plays the 32 
Round 4: Michael   holding [22, 34, 35, 39, 46, 47] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 28 30 40 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius  holding [13, 19, 25, 28, 30, 40] plays the 28 
Round 4: Peter     holding [17, 18, 23, 29, 33, 41] plays the 18 
Michael wins the round 

Round 5: Michael   holding [22, 35, 39, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 30 40 0 0 0 0 0 

30------------------------------------------------------------------------

Round 5: Eugenius  holding [13, 19, 25, 30, 40] plays the 30 
Round 5: Peter     holding [17, 23, 29, 33, 41] plays the 29 
Round 5: Elizabeth holding [11, 31, 37, 43, 49] plays the 43 
Michael wins the round which contains 2 penalty points

Round 6: Michael   holding [22, 35, 39, 47] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 40 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 6: Eugenius  holding [13, 19, 25, 40] plays the 40 
Round 6: Peter     holding [17, 23, 33, 41] plays the 33 
Round 6: Elizabeth holding [11, 31, 37, 49] plays the 37 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius  holding [13, 19, 25] plays the 13 
Round 7: Peter     holding [17, 23, 41] plays the 23 
Round 7: Elizabeth holding [11, 31, 49] plays the 31 
Round 7: Michael   holding [35, 39, 47] plays the 47 
Michael wins the round which contains 4 penalty points

Round 8: Michael   holding [35, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
19 25 0 0 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 8: Eugenius  holding [19, 25] plays the 19 
Round 8: Peter     holding [17, 41] plays the 17 
Round 8: Elizabeth holding [11, 49] plays the 49 
Michael wins the round which contains 2 penalty points

Round 9: Michael   holding [35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
25 0 0 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 9: Eugenius  holding [25] plays the 25 
Round 9: Peter     holding [41] plays the 41 
Round 9: Elizabeth holding [11] plays the 11 
Michael wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Peter (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Elizabeth (system)
#4 with 10 penalty points Michael (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15453850 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Michael : [10, 11, 18, 27, 33, 37, 39, 43, 45, 48]
Table position 1: Connor  : [17, 19, 22, 25, 26, 32, 35, 36, 44, 46]
Table position 2: Eugenius: [13, 15, 23, 29, 30, 31, 34, 38, 41, 42]
Table position 3: Andrew  : [12, 14, 16, 20, 21, 24, 28, 40, 47, 49]

Discards:
Michael  [11, 37, 45]
Connor   [19, 26, 36]
Eugenius [38, 41, 42]
Andrew   [16, 24, 40]

Round 0: Michael  holding [10, 16, 18, 24, 27, 33, 39, 40, 43, 48] plays the 18 
Round 0: Connor   holding [11, 17, 22, 25, 32, 35, 37, 44, 45, 46] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 19 23 26 29 30 31 34 36 

15------------------------------------------------------------------------

Round 0: Eugenius holding [13, 15, 19, 23, 26, 29, 30, 31, 34, 36] plays the 15 
Round 0: Andrew   holding [12, 14, 20, 21, 28, 38, 41, 42, 47, 49] plays the 12 
Connor wins the round 

Round 1: Connor   holding [11, 17, 25, 32, 35, 37, 44, 45, 46] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 23 26 29 30 31 34 36 0 

30------------------------------------------------------------------------

Round 1: Eugenius holding [13, 19, 23, 26, 29, 30, 31, 34, 36] plays the 30 
Round 1: Andrew   holding [14, 20, 21, 28, 38, 41, 42, 47, 49] plays the 20 
Round 1: Michael  holding [10, 16, 24, 27, 33, 39, 40, 43, 48] plays the 40 
Michael wins the round 

Round 2: Michael  holding [10, 16, 24, 27, 33, 39, 43, 48] plays the 48 
Round 2: Connor   holding [11, 17, 32, 35, 37, 44, 45, 46] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 23 26 29 31 34 36 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [13, 19, 23, 26, 29, 31, 34, 36] plays the 26 
Round 2: Andrew   holding [14, 21, 28, 38, 41, 42, 47, 49] plays the 42 
Michael wins the round which contains 7 penalty points

Round 3: Michael  holding [10, 16, 24, 27, 33, 39, 43] plays the 24 
Round 3: Connor   holding [11, 17, 32, 35, 37, 45, 46] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 23 29 31 34 36 0 0 0 

34------------------------------------------------------------------------

Round 3: Eugenius holding [13, 19, 23, 29, 31, 34, 36] plays the 34 
Round 3: Andrew   holding [14, 21, 28, 38, 41, 47, 49] plays the 14 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 19 23 29 31 36 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius holding [13, 19, 23, 29, 31, 36] plays the 36 
Round 4: Andrew   holding [21, 28, 38, 41, 47, 49] plays the 21 
Round 4: Michael  holding [10, 16, 27, 33, 39, 43] plays the 10 
Round 4: Connor   holding [11, 17, 35, 37, 45, 46] plays the 45 
Connor wins the round 

Round 5: Connor   holding [11, 17, 35, 37, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 23 29 31 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 5: Eugenius holding [13, 19, 23, 29, 31] plays the 13 
Round 5: Andrew   holding [28, 38, 41, 47, 49] plays the 38 
Round 5: Michael  holding [16, 27, 33, 39, 43] plays the 16 
Connor wins the round which contains 1 penalty points

Round 6: Connor   holding [11, 17, 35, 37] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 29 31 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 23, 29, 31] plays the 19 
Round 6: Andrew   holding [28, 41, 47, 49] plays the 41 
Round 6: Michael  holding [27, 33, 39, 43] plays the 43 
Michael wins the round which contains 4 penalty points

Round 7: Michael  holding [27, 33, 39] plays the 39 
Round 7: Connor   holding [17, 35, 37] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 31 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 7: Eugenius holding [23, 29, 31] plays the 23 
Round 7: Andrew   holding [28, 47, 49] plays the 47 
Michael wins the round which contains 2 penalty points

Round 8: Michael  holding [27, 33] plays the 33 
Round 8: Connor   holding [17, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 8: Eugenius holding [29, 31] plays the 29 
Round 8: Andrew   holding [28, 49] plays the 49 
Michael wins the round which contains 2 penalty points

Round 9: Michael  holding [27] plays the 27 
Round 9: Connor   holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Round 9: Andrew   holding [28] plays the 28 
Michael wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Andrew (system)
#3 with 1 penalty points Connor (system)
#4 with 17 penalty points Michael (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5588111 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Livia   : [11, 23, 25, 28, 33, 35, 36, 37, 40, 43]
Table position 1: Dean    : [17, 20, 22, 26, 30, 38, 41, 42, 45, 46]
Table position 2: Eugenius: [10, 12, 14, 15, 16, 27, 29, 39, 44, 47]
Table position 3: Zachary : [13, 18, 19, 21, 24, 31, 32, 34, 48, 49]

Discards:
Livia    [28, 33, 37]
Dean     [17, 22, 30]
Eugenius [39, 44, 47]
Zachary  [21, 32, 48]

Round 0: Livia    holding [11, 21, 23, 25, 32, 35, 36, 40, 43, 48] plays the 32 
Round 0: Dean     holding [20, 26, 28, 33, 37, 38, 41, 42, 45, 46] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 14 15 16 17 22 27 29 30 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 14, 15, 16, 17, 22, 27, 29, 30] plays the 10 
Round 0: Zachary  holding [13, 18, 19, 24, 31, 34, 39, 44, 47, 49] plays the 34 
Dean wins the round 

Round 1: Dean     holding [20, 26, 28, 33, 37, 41, 42, 45, 46] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 15 16 17 22 27 29 30 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 14, 15, 16, 17, 22, 27, 29, 30] plays the 12 
Round 1: Zachary  holding [13, 18, 19, 24, 31, 39, 44, 47, 49] plays the 44 
Round 1: Livia    holding [11, 21, 23, 25, 35, 36, 40, 43, 48] plays the 48 
Livia wins the round 

Round 2: Livia    holding [11, 21, 23, 25, 35, 36, 40, 43] plays the 35 
Round 2: Dean     holding [20, 26, 28, 37, 41, 42, 45, 46] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
14 15 16 17 22 27 29 30 0 0 

14------------------------------------------------------------------------

Round 2: Eugenius holding [14, 15, 16, 17, 22, 27, 29, 30] plays the 14 
Round 2: Zachary  holding [13, 18, 19, 24, 31, 39, 47, 49] plays the 49 
Zachary wins the round which contains 7 penalty points

Round 3: Zachary  holding [13, 18, 19, 24, 31, 39, 47] plays the 24 
Round 3: Livia    holding [11, 21, 23, 25, 36, 40, 43] plays the 21 
Round 3: Dean     holding [20, 26, 28, 37, 41, 45, 46] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
15 16 17 22 27 29 30 0 0 0 

15------------------------------------------------------------------------

Round 3: Eugenius holding [15, 16, 17, 22, 27, 29, 30] plays the 15 
Zachary wins the round 

Round 4: Zachary  holding [13, 18, 19, 31, 39, 47] plays the 39 
Round 4: Livia    holding [11, 23, 25, 36, 40, 43] plays the 36 
Round 4: Dean     holding [26, 28, 37, 41, 45, 46] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 22 27 29 30 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [16, 17, 22, 27, 29, 30] plays the 27 
Zachary wins the round 

Round 5: Zachary  holding [13, 18, 19, 31, 47] plays the 18 
Round 5: Livia    holding [11, 23, 25, 40, 43] plays the 40 
Round 5: Dean     holding [28, 37, 41, 45, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 22 29 30 0 0 0 0 0 

16------------------------------------------------------------------------

Round 5: Eugenius holding [16, 17, 22, 29, 30] plays the 16 
Dean wins the round 

Round 6: Dean     holding [28, 37, 41, 45] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 29 30 0 0 0 0 0 0 

22------------------------------------------------------------------------

Round 6: Eugenius holding [17, 22, 29, 30] plays the 22 
Round 6: Zachary  holding [13, 19, 31, 47] plays the 19 
Round 6: Livia    holding [11, 23, 25, 43] plays the 25 
Dean wins the round which contains 1 penalty points

Round 7: Dean     holding [37, 41, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 30 0 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 7: Eugenius holding [17, 29, 30] plays the 30 
Round 7: Zachary  holding [13, 31, 47] plays the 31 
Round 7: Livia    holding [11, 23, 43] plays the 23 
Dean wins the round which contains 2 penalty points

Round 8: Dean     holding [37, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 0 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 8: Eugenius holding [17, 29] plays the 17 
Round 8: Zachary  holding [13, 47] plays the 13 
Round 8: Livia    holding [11, 43] plays the 11 
Dean wins the round which contains 4 penalty points

Round 9: Dean     holding [37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
29 0 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 9: Eugenius holding [29] plays the 29 
Round 9: Zachary  holding [47] plays the 47 
Round 9: Livia    holding [43] plays the 43 
Zachary wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Livia (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Dean (system)
#4 with 11 penalty points Zachary (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9503280 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Michael : [16, 17, 19, 20, 21, 22, 26, 36, 40, 49]
Table position 1: Gal     : [11, 13, 15, 28, 29, 30, 33, 44, 47, 48]
Table position 2: Nicholas: [12, 14, 24, 27, 32, 35, 37, 38, 42, 43]
Table position 3: Eugenius: [10, 18, 23, 25, 31, 34, 39, 41, 45, 46]

Discards:
Michael  [21, 26, 40]
Gal      [30, 33, 48]
Nicholas [14, 35, 38]
Eugenius [41, 45, 46]

Round 0: Michael  holding [16, 17, 19, 20, 22, 36, 41, 45, 46, 49] plays the 20 
Round 0: Gal      holding [11, 13, 15, 21, 26, 28, 29, 40, 44, 47] plays the 28 
Round 0: Nicholas holding [12, 24, 27, 30, 32, 33, 37, 42, 43, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
10 14 18 23 25 31 34 35 38 39 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 14, 18, 23, 25, 31, 34, 35, 38, 39] plays the 10 
Nicholas wins the round 

Round 1: Nicholas holding [12, 24, 27, 30, 32, 33, 37, 42, 43] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
14 18 23 25 31 34 35 38 39 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 18, 23, 25, 31, 34, 35, 38, 39] plays the 14 
Round 1: Michael  holding [16, 17, 19, 22, 36, 41, 45, 46, 49] plays the 16 
Round 1: Gal      holding [11, 13, 15, 21, 26, 29, 40, 44, 47] plays the 26 
Nicholas wins the round 

Round 2: Nicholas holding [12, 24, 27, 30, 33, 37, 42, 43] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
18 23 25 31 34 35 38 39 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [18, 23, 25, 31, 34, 35, 38, 39] plays the 18 
Round 2: Michael  holding [17, 19, 22, 36, 41, 45, 46, 49] plays the 36 
Round 2: Gal      holding [11, 13, 15, 21, 29, 40, 44, 47] plays the 15 
Michael wins the round 

Round 3: Michael  holding [17, 19, 22, 41, 45, 46, 49] plays the 45 
Round 3: Gal      holding [11, 13, 21, 29, 40, 44, 47] plays the 21 
Round 3: Nicholas holding [12, 24, 30, 33, 37, 42, 43] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 31 34 35 38 39 0 0 0 

25------------------------------------------------------------------------

Round 3: Eugenius holding [23, 25, 31, 34, 35, 38, 39] plays the 25 
Michael wins the round 

Round 4: Michael  holding [17, 19, 22, 41, 46, 49] plays the 49 
Round 4: Gal      holding [11, 13, 29, 40, 44, 47] plays the 13 
Round 4: Nicholas holding [12, 30, 33, 37, 42, 43] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 34 35 38 39 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [23, 31, 34, 35, 38, 39] plays the 35 
Michael wins the round which contains 8 penalty points

Round 5: Michael  holding [17, 19, 22, 41, 46] plays the 41 
Round 5: Gal      holding [11, 29, 40, 44, 47] plays the 47 
Round 5: Nicholas holding [12, 30, 33, 37, 43] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 34 38 39 0 0 0 0 0 

23------------------------------------------------------------------------

Round 5: Eugenius holding [23, 31, 34, 38, 39] plays the 23 
Gal wins the round which contains 4 penalty points

Round 6: Gal      holding [11, 29, 40, 44] plays the 44 
Round 6: Nicholas holding [12, 30, 33, 43] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
31 34 38 39 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 6: Eugenius holding [31, 34, 38, 39] plays the 34 
Round 6: Michael  holding [17, 19, 22, 46] plays the 22 
Gal wins the round 

Round 7: Gal      holding [11, 29, 40] plays the 29 
Round 7: Nicholas holding [12, 33, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
31 38 39 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [31, 38, 39] plays the 31 
Round 7: Michael  holding [17, 19, 46] plays the 19 
Nicholas wins the round which contains 4 penalty points

Round 8: Nicholas holding [12, 33] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
38 39 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 8: Eugenius holding [38, 39] plays the 39 
Round 8: Michael  holding [17, 46] plays the 46 
Round 8: Gal      holding [11, 40] plays the 11 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Round 9: Michael  holding [17] plays the 17 
Round 9: Gal      holding [40] plays the 40 
Round 9: Nicholas holding [12] plays the 12 
Gal wins the round which contains 1 penalty points


Finishing Positions

#1 with 1 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Nicholas (system)
#3 with 5 penalty points Gal (system)
#4 with 8 penalty points Michael (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12712963 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Kane    : [15, 17, 20, 21, 23, 30, 37, 40, 41, 44]
Table position 1: Peter   : [10, 11, 12, 16, 18, 19, 25, 31, 36, 47]
Table position 2: Eugenius: [14, 22, 24, 27, 29, 33, 38, 42, 45, 46]
Table position 3: Dylan   : [13, 26, 28, 32, 34, 35, 39, 43, 48, 49]

Discards:
Kane     [20, 21, 41]
Peter    [16, 18, 25]
Eugenius [42, 45, 46]
Dylan    [13, 26, 49]

Round 0: Kane     holding [13, 15, 17, 23, 26, 30, 37, 40, 44, 49] plays the 40 
Round 0: Peter    holding [10, 11, 12, 19, 20, 21, 31, 36, 41, 47] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 18 22 24 25 27 29 33 38 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 16, 18, 22, 24, 25, 27, 29, 33, 38] plays the 14 
Round 0: Dylan    holding [28, 32, 34, 35, 39, 42, 43, 45, 46, 48] plays the 35 
Kane wins the round 

Round 1: Kane     holding [13, 15, 17, 23, 26, 30, 37, 44, 49] plays the 15 
Round 1: Peter    holding [11, 12, 19, 20, 21, 31, 36, 41, 47] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
16 18 22 24 25 27 29 33 38 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [16, 18, 22, 24, 25, 27, 29, 33, 38] plays the 18 
Round 1: Dylan    holding [28, 32, 34, 39, 42, 43, 45, 46, 48] plays the 42 
Dylan wins the round which contains 7 penalty points

Round 2: Dylan    holding [28, 32, 34, 39, 43, 45, 46, 48] plays the 46 
Round 2: Kane     holding [13, 17, 23, 26, 30, 37, 44, 49] plays the 26 
Round 2: Peter    holding [11, 12, 19, 20, 31, 36, 41, 47] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
16 22 24 25 27 29 33 38 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [16, 22, 24, 25, 27, 29, 33, 38] plays the 16 
Dylan wins the round 

Round 3: Dylan    holding [28, 32, 34, 39, 43, 45, 48] plays the 45 
Round 3: Kane     holding [13, 17, 23, 30, 37, 44, 49] plays the 30 
Round 3: Peter    holding [11, 19, 20, 31, 36, 41, 47] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
22 24 25 27 29 33 38 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [22, 24, 25, 27, 29, 33, 38] plays the 24 
Dylan wins the round 

Round 4: Dylan    holding [28, 32, 34, 39, 43, 48] plays the 32 
Round 4: Kane     holding [13, 17, 23, 37, 44, 49] plays the 44 
Round 4: Peter    holding [11, 19, 20, 31, 41, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 27 29 33 38 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius holding [22, 25, 27, 29, 33, 38] plays the 22 
Kane wins the round 

Round 5: Kane     holding [13, 17, 23, 37, 49] plays the 49 
Round 5: Peter    holding [11, 19, 31, 41, 47] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
25 27 29 33 38 0 0 0 0 0 

25 chah------------------------------------------------------------------------

Round 5: Eugenius holding [25, 27, 29, 33, 38] plays the 25 
Round 5: Dylan    holding [28, 34, 39, 43, 48] plays the 28 
Kane wins the round which contains 1 penalty points

Round 6: Kane     holding [13, 17, 23, 37] plays the 13 
Round 6: Peter    holding [11, 19, 31, 47] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 33 38 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 6: Eugenius holding [27, 29, 33, 38] plays the 29 
Round 6: Dylan    holding [34, 39, 43, 48] plays the 43 
Dylan wins the round which contains 4 penalty points

Round 7: Dylan    holding [34, 39, 48] plays the 48 
Round 7: Kane     holding [17, 23, 37] plays the 37 
Round 7: Peter    holding [19, 31, 47] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
27 33 38 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [27, 33, 38] plays the 27 
Dylan wins the round which contains 2 penalty points

Round 8: Dylan    holding [34, 39] plays the 34 
Round 8: Kane     holding [17, 23] plays the 23 
Round 8: Peter    holding [31, 47] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
33 38 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [33, 38] plays the 38 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
33 0 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 9: Eugenius holding [33] plays the 33 
Round 9: Dylan    holding [39] plays the 39 
Round 9: Kane     holding [17] plays the 17 
Round 9: Peter    holding [47] plays the 47 
Dylan wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Peter (system)
#2 with 1 penalty points Kane (system)
#3 with 2 penalty points Eugenius (dodo.c)
#4 with 15 penalty points Dylan (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15437106 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [13, 14, 19, 21, 25, 32, 34, 36, 43, 49]
Table position 1: Matthew : [20, 24, 27, 33, 35, 39, 41, 42, 45, 46]
Table position 2: Sabrina : [10, 17, 22, 23, 26, 31, 38, 40, 44, 47]
Table position 3: Nathan  : [11, 12, 15, 16, 18, 28, 29, 30, 37, 48]

Discards:
Eugenius [36, 43, 49]
Matthew  [33, 39, 45]
Sabrina  [23, 40, 47]
Nathan   [11, 16, 30]


Debug output from Eugenius
------------------------------------------------------------------------
11 13 14 16 19 21 25 30 32 34 

14------------------------------------------------------------------------

Round 0: Eugenius holding [11, 13, 14, 16, 19, 21, 25, 30, 32, 34] plays the 14 
Round 0: Matthew  holding [20, 24, 27, 35, 36, 41, 42, 43, 46, 49] plays the 36 
Round 0: Sabrina  holding [10, 17, 22, 26, 31, 33, 38, 39, 44, 45] plays the 44 
Round 0: Nathan   holding [12, 15, 18, 23, 28, 29, 37, 40, 47, 48] plays the 12 
Sabrina wins the round 

Round 1: Sabrina  holding [10, 17, 22, 26, 31, 33, 38, 39, 45] plays the 26 
Round 1: Nathan   holding [15, 18, 23, 28, 29, 37, 40, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 16 19 21 25 30 32 34 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 16, 19, 21, 25, 30, 32, 34] plays the 16 
Round 1: Matthew  holding [20, 24, 27, 35, 41, 42, 43, 46, 49] plays the 42 
Nathan wins the round which contains 7 penalty points

Round 2: Nathan   holding [15, 18, 23, 28, 29, 37, 40, 47] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 21 25 30 32 34 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 19, 21, 25, 30, 32, 34] plays the 21 
Round 2: Matthew  holding [20, 24, 27, 35, 41, 43, 46, 49] plays the 49 
Round 2: Sabrina  holding [10, 17, 22, 31, 33, 38, 39, 45] plays the 38 
Matthew wins the round 

Round 3: Matthew  holding [20, 24, 27, 35, 41, 43, 46] plays the 24 
Round 3: Sabrina  holding [10, 17, 22, 31, 33, 39, 45] plays the 10 
Round 3: Nathan   holding [15, 18, 23, 29, 37, 40, 47] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 25 30 32 34 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 19, 25, 30, 32, 34] plays the 30 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 25 32 34 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 19, 25, 32, 34] plays the 25 
Round 4: Matthew  holding [20, 27, 35, 41, 43, 46] plays the 35 
Round 4: Sabrina  holding [17, 22, 31, 33, 39, 45] plays the 45 
Round 4: Nathan   holding [18, 23, 29, 37, 40, 47] plays the 40 
Sabrina wins the round 

Round 5: Sabrina  holding [17, 22, 31, 33, 39] plays the 33 
Round 5: Nathan   holding [18, 23, 29, 37, 47] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 32 34 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 19, 32, 34] plays the 11 
Round 5: Matthew  holding [20, 27, 41, 43, 46] plays the 27 
Sabrina wins the round which contains 1 penalty points

Round 6: Sabrina  holding [17, 22, 31, 39] plays the 22 
Round 6: Nathan   holding [23, 29, 37, 47] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 32 34 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 6: Eugenius holding [13, 19, 32, 34] plays the 32 
Round 6: Matthew  holding [20, 41, 43, 46] plays the 46 
Matthew wins the round which contains 1 penalty points

Round 7: Matthew  holding [20, 41, 43] plays the 43 
Round 7: Sabrina  holding [17, 31, 39] plays the 17 
Round 7: Nathan   holding [29, 37, 47] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 34 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 19, 34] plays the 13 
Matthew wins the round which contains 4 penalty points

Round 8: Matthew  holding [20, 41] plays the 41 
Round 8: Sabrina  holding [31, 39] plays the 31 
Round 8: Nathan   holding [37, 47] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
19 34 0 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 8: Eugenius holding [19, 34] plays the 19 
Matthew wins the round which contains 4 penalty points

Round 9: Matthew  holding [20] plays the 20 
Round 9: Sabrina  holding [39] plays the 39 
Round 9: Nathan   holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
34 0 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 9: Eugenius holding [34] plays the 34 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 1 penalty points Eugenius (dodo.c)
#1 with 1 penalty points Sabrina (system)
#3 with 7 penalty points Nathan (system)
#4 with 9 penalty points Matthew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13831351 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 12, 13, 17, 26, 36, 40, 41, 43, 44]
Table position 1: Livia   : [10, 15, 16, 19, 25, 29, 34, 38, 46, 48]
Table position 2: Connor  : [18, 20, 21, 24, 27, 32, 37, 45, 47, 49]
Table position 3: Harrison: [14, 22, 23, 28, 30, 31, 33, 35, 39, 42]

Discards:
Eugenius [41, 43, 44]
Livia    [10, 19, 46]
Connor   [21, 37, 45]
Harrison [14, 23, 30]


Debug output from Eugenius
------------------------------------------------------------------------
11 12 13 14 17 23 26 30 36 40 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 13, 14, 17, 23, 26, 30, 36, 40] plays the 12 
Round 0: Livia    holding [15, 16, 25, 29, 34, 38, 41, 43, 44, 48] plays the 34 
Round 0: Connor   holding [10, 18, 19, 20, 24, 27, 32, 46, 47, 49] plays the 32 
Round 0: Harrison holding [21, 22, 28, 31, 33, 35, 37, 39, 42, 45] plays the 45 
Harrison wins the round 

Round 1: Harrison holding [21, 22, 28, 31, 33, 35, 37, 39, 42] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 14 17 23 26 30 36 40 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 14, 17, 23, 26, 30, 36, 40] plays the 14 
Round 1: Livia    holding [15, 16, 25, 29, 38, 41, 43, 44, 48] plays the 48 
Round 1: Connor   holding [10, 18, 19, 20, 24, 27, 46, 47, 49] plays the 49 
Connor wins the round 

Round 2: Connor   holding [10, 18, 19, 20, 24, 27, 46, 47] plays the 10 
Round 2: Harrison holding [22, 28, 31, 33, 35, 37, 39, 42] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 23 26 30 36 40 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 17, 23, 26, 30, 36, 40] plays the 26 
Round 2: Livia    holding [15, 16, 25, 29, 38, 41, 43, 44] plays the 15 
Harrison wins the round 

Round 3: Harrison holding [22, 31, 33, 35, 37, 39, 42] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 23 30 36 40 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 17, 23, 30, 36, 40] plays the 30 
Round 3: Livia    holding [16, 25, 29, 38, 41, 43, 44] plays the 44 
Round 3: Connor   holding [18, 19, 20, 24, 27, 46, 47] plays the 27 
Livia wins the round 

Round 4: Livia    holding [16, 25, 29, 38, 41, 43] plays the 38 
Round 4: Connor   holding [18, 19, 20, 24, 46, 47] plays the 18 
Round 4: Harrison holding [22, 31, 35, 37, 39, 42] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 23 36 40 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 17, 23, 36, 40] plays the 36 
Livia wins the round 

Round 5: Livia    holding [16, 25, 29, 41, 43] plays the 16 
Round 5: Connor   holding [19, 20, 24, 46, 47] plays the 24 
Round 5: Harrison holding [31, 35, 37, 39, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 23 40 0 0 0 0 0 

40------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 17, 23, 40] plays the 40 
Harrison wins the round which contains 7 penalty points

Round 6: Harrison holding [31, 35, 37, 39] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 23 0 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 6: Eugenius holding [11, 13, 17, 23] plays the 11 
Round 6: Livia    holding [25, 29, 41, 43] plays the 25 
Round 6: Connor   holding [19, 20, 46, 47] plays the 20 
Harrison wins the round which contains 1 penalty points

Round 7: Harrison holding [31, 37, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 0 0 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 7: Eugenius holding [13, 17, 23] plays the 13 
Round 7: Livia    holding [29, 41, 43] plays the 41 
Round 7: Connor   holding [19, 46, 47] plays the 46 
Harrison wins the round which contains 2 penalty points

Round 8: Harrison holding [31, 37] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 0 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 8: Eugenius holding [17, 23] plays the 17 
Round 8: Livia    holding [29, 43] plays the 29 
Round 8: Connor   holding [19, 47] plays the 47 
Connor wins the round which contains 4 penalty points

Round 9: Connor   holding [19] plays the 19 
Round 9: Harrison holding [37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
23 0 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 9: Eugenius holding [23] plays the 23 
Round 9: Livia    holding [43] plays the 43 
Livia wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Livia (system)
#2 with 4 penalty points Connor (system)
#4 with 10 penalty points Harrison (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16346817 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [16, 21, 26, 28, 29, 30, 35, 36, 42, 45]
Table position 1: Emily   : [17, 19, 20, 32, 33, 38, 41, 46, 47, 48]
Table position 2: Mitchell: [10, 15, 18, 23, 31, 34, 37, 39, 43, 44]
Table position 3: Finbar  : [11, 12, 13, 14, 22, 24, 25, 27, 40, 49]

Discards:
Eugenius [36, 42, 45]
Emily    [17, 33, 41]
Mitchell [15, 18, 23]
Finbar   [11, 14, 40]


Debug output from Eugenius
------------------------------------------------------------------------
11 14 16 21 26 28 29 30 35 40 

14------------------------------------------------------------------------

Round 0: Eugenius holding [11, 14, 16, 21, 26, 28, 29, 30, 35, 40] plays the 14 
Round 0: Emily    holding [19, 20, 32, 36, 38, 42, 45, 46, 47, 48] plays the 48 
Round 0: Mitchell holding [10, 17, 31, 33, 34, 37, 39, 41, 43, 44] plays the 10 
Round 0: Finbar   holding [12, 13, 15, 18, 22, 23, 24, 25, 27, 49] plays the 49 
Finbar wins the round 

Round 1: Finbar   holding [12, 13, 15, 18, 22, 23, 24, 25, 27] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 21 26 28 29 30 35 40 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [11, 16, 21, 26, 28, 29, 30, 35, 40] plays the 16 
Round 1: Emily    holding [19, 20, 32, 36, 38, 42, 45, 46, 47] plays the 32 
Round 1: Mitchell holding [17, 31, 33, 34, 37, 39, 41, 43, 44] plays the 44 
Mitchell wins the round 

Round 2: Mitchell holding [17, 31, 33, 34, 37, 39, 41, 43] plays the 34 
Round 2: Finbar   holding [12, 13, 15, 18, 23, 24, 25, 27] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
11 21 26 28 29 30 35 40 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [11, 21, 26, 28, 29, 30, 35, 40] plays the 26 
Round 2: Emily    holding [19, 20, 36, 38, 42, 45, 46, 47] plays the 20 
Mitchell wins the round 

Round 3: Mitchell holding [17, 31, 33, 37, 39, 41, 43] plays the 33 
Round 3: Finbar   holding [12, 13, 15, 18, 23, 25, 27] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
11 21 28 29 30 35 40 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [11, 21, 28, 29, 30, 35, 40] plays the 21 
Round 3: Emily    holding [19, 36, 38, 42, 45, 46, 47] plays the 36 
Emily wins the round 

Round 4: Emily    holding [19, 38, 42, 45, 46, 47] plays the 45 
Round 4: Mitchell holding [17, 31, 37, 39, 41, 43] plays the 39 
Round 4: Finbar   holding [13, 15, 18, 23, 25, 27] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 28 29 30 35 40 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [11, 28, 29, 30, 35, 40] plays the 30 
Emily wins the round 

Round 5: Emily    holding [19, 38, 42, 46, 47] plays the 46 
Round 5: Mitchell holding [17, 31, 37, 41, 43] plays the 37 
Round 5: Finbar   holding [13, 18, 23, 25, 27] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 28 29 35 40 0 0 0 0 0 

28------------------------------------------------------------------------

Round 5: Eugenius holding [11, 28, 29, 35, 40] plays the 28 
Emily wins the round which contains 1 penalty points

Round 6: Emily    holding [19, 38, 42, 47] plays the 19 
Round 6: Mitchell holding [17, 31, 41, 43] plays the 41 
Round 6: Finbar   holding [13, 23, 25, 27] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
11 29 35 40 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 29, 35, 40] plays the 11 
Mitchell wins the round which contains 4 penalty points

Round 7: Mitchell holding [17, 31, 43] plays the 43 
Round 7: Finbar   holding [23, 25, 27] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
29 35 40 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 35, 40] plays the 29 
Round 7: Emily    holding [38, 42, 47] plays the 47 
Emily wins the round which contains 4 penalty points

Round 8: Emily    holding [38, 42] plays the 42 
Round 8: Mitchell holding [17, 31] plays the 17 
Round 8: Finbar   holding [25, 27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
35 40 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 8: Eugenius holding [35, 40] plays the 35 
Emily wins the round which contains 8 penalty points

Round 9: Emily    holding [38] plays the 38 
Round 9: Mitchell holding [31] plays the 31 
Round 9: Finbar   holding [25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 9: Eugenius holding [40] plays the 40 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Finbar (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Mitchell (system)
#4 with 13 penalty points Emily (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7893329 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: George  : [13, 15, 18, 20, 23, 30, 32, 33, 39, 41]
Table position 1: Stephen : [10, 11, 19, 31, 35, 38, 44, 46, 47, 48]
Table position 2: Eugenius: [25, 27, 28, 29, 34, 36, 37, 40, 42, 43]
Table position 3: Sabrina : [12, 14, 16, 17, 21, 22, 24, 26, 45, 49]

Discards:
George   [23, 32, 41]
Stephen  [19, 35, 44]
Eugenius [40, 42, 43]
Sabrina  [14, 16, 49]

Round 0: George   holding [13, 14, 15, 16, 18, 20, 30, 33, 39, 49] plays the 14 
Round 0: Stephen  holding [10, 11, 23, 31, 32, 38, 41, 46, 47, 48] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
19 25 27 28 29 34 35 36 37 44 

28------------------------------------------------------------------------

Round 0: Eugenius holding [19, 25, 27, 28, 29, 34, 35, 36, 37, 44] plays the 28 
Round 0: Sabrina  holding [12, 17, 21, 22, 24, 26, 40, 42, 43, 45] plays the 42 
Sabrina wins the round which contains 7 penalty points

Round 1: Sabrina  holding [12, 17, 21, 22, 24, 26, 40, 43, 45] plays the 45 
Round 1: George   holding [13, 15, 16, 18, 20, 30, 33, 39, 49] plays the 20 
Round 1: Stephen  holding [10, 11, 23, 31, 38, 41, 46, 47, 48] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
19 25 27 29 34 35 36 37 44 0 

25------------------------------------------------------------------------

Round 1: Eugenius holding [19, 25, 27, 29, 34, 35, 36, 37, 44] plays the 25 
Sabrina wins the round 

Round 2: Sabrina  holding [12, 17, 21, 22, 24, 26, 40, 43] plays the 24 
Round 2: George   holding [13, 15, 16, 18, 30, 33, 39, 49] plays the 33 
Round 2: Stephen  holding [11, 23, 31, 38, 41, 46, 47, 48] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
19 27 29 34 35 36 37 44 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [19, 27, 29, 34, 35, 36, 37, 44] plays the 27 
Stephen wins the round 

Round 3: Stephen  holding [11, 23, 31, 41, 46, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 34 35 36 37 44 0 0 0 

34------------------------------------------------------------------------

Round 3: Eugenius holding [19, 29, 34, 35, 36, 37, 44] plays the 34 
Round 3: Sabrina  holding [12, 17, 21, 22, 26, 40, 43] plays the 21 
Round 3: George   holding [13, 15, 16, 18, 30, 39, 49] plays the 39 
Stephen wins the round 

Round 4: Stephen  holding [11, 23, 31, 41, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 35 36 37 44 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius holding [19, 29, 35, 36, 37, 44] plays the 36 
Round 4: Sabrina  holding [12, 17, 22, 26, 40, 43] plays the 40 
Round 4: George   holding [13, 15, 16, 18, 30, 49] plays the 30 
Stephen wins the round 

Round 5: Stephen  holding [11, 23, 31, 41, 47] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 35 37 44 0 0 0 0 0 

19------------------------------------------------------------------------

Round 5: Eugenius holding [19, 29, 35, 37, 44] plays the 19 
Round 5: Sabrina  holding [12, 17, 22, 26, 43] plays the 43 
Round 5: George   holding [13, 15, 16, 18, 49] plays the 13 
Sabrina wins the round which contains 4 penalty points

Round 6: Sabrina  holding [12, 17, 22, 26] plays the 17 
Round 6: George   holding [15, 16, 18, 49] plays the 15 
Round 6: Stephen  holding [11, 23, 41, 47] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
29 35 37 44 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 6: Eugenius holding [29, 35, 37, 44] plays the 29 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
35 37 44 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 7: Eugenius holding [35, 37, 44] plays the 35 
Round 7: Sabrina  holding [12, 22, 26] plays the 12 
Round 7: George   holding [16, 18, 49] plays the 49 
Round 7: Stephen  holding [11, 41, 47] plays the 41 
George wins the round which contains 1 penalty points

Round 8: George   holding [16, 18] plays the 16 
Round 8: Stephen  holding [11, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
37 44 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 8: Eugenius holding [37, 44] plays the 44 
Round 8: Sabrina  holding [22, 26] plays the 22 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Sabrina  holding [26] plays the 26 
Round 9: George   holding [18] plays the 18 
Round 9: Stephen  holding [11] plays the 11 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Stephen (system)
#2 with 1 penalty points George (system)
#3 with 6 penalty points Eugenius (dodo.c)
#4 with 11 penalty points Sabrina (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5749279 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Minh    : [13, 18, 20, 22, 24, 27, 29, 43, 45, 48]
Table position 1: Finbar  : [11, 16, 26, 28, 31, 33, 34, 37, 39, 44]
Table position 2: Eugenius: [10, 14, 15, 19, 23, 25, 32, 36, 46, 49]
Table position 3: Xue     : [12, 17, 21, 30, 35, 38, 40, 41, 42, 47]

Discards:
Minh     [18, 29, 45]
Finbar   [11, 34, 44]
Eugenius [36, 46, 49]
Xue      [17, 38, 41]

Round 0: Minh     holding [13, 17, 20, 22, 24, 27, 38, 41, 43, 48] plays the 24 
Round 0: Finbar   holding [16, 18, 26, 28, 29, 31, 33, 37, 39, 45] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 14 15 19 23 25 32 34 44 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 14, 15, 19, 23, 25, 32, 34, 44] plays the 10 
Round 0: Xue      holding [12, 21, 30, 35, 36, 40, 42, 46, 47, 49] plays the 30 
Xue wins the round 

Round 1: Xue      holding [12, 21, 35, 36, 40, 42, 46, 47, 49] plays the 42 
Round 1: Minh     holding [13, 17, 20, 22, 27, 38, 41, 43, 48] plays the 48 
Round 1: Finbar   holding [18, 26, 28, 29, 31, 33, 37, 39, 45] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 15 19 23 25 32 34 44 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [11, 14, 15, 19, 23, 25, 32, 34, 44] plays the 14 
Minh wins the round which contains 7 penalty points

Round 2: Minh     holding [13, 17, 20, 22, 27, 38, 41, 43] plays the 20 
Round 2: Finbar   holding [18, 26, 29, 31, 33, 37, 39, 45] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 19 23 25 32 34 44 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius holding [11, 15, 19, 23, 25, 32, 34, 44] plays the 15 
Round 2: Xue      holding [12, 21, 35, 36, 40, 46, 47, 49] plays the 40 
Xue wins the round 

Round 3: Xue      holding [12, 21, 35, 36, 46, 47, 49] plays the 35 
Round 3: Minh     holding [13, 17, 22, 27, 38, 41, 43] plays the 27 
Round 3: Finbar   holding [18, 29, 31, 33, 37, 39, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 25 32 34 44 0 0 0 

25------------------------------------------------------------------------

Round 3: Eugenius holding [11, 19, 23, 25, 32, 34, 44] plays the 25 
Finbar wins the round 

Round 4: Finbar   holding [18, 29, 31, 33, 37, 39] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 32 34 44 0 0 0 0 

44------------------------------------------------------------------------

Round 4: Eugenius holding [11, 19, 23, 32, 34, 44] plays the 44 
Round 4: Xue      holding [12, 21, 36, 46, 47, 49] plays the 12 
Round 4: Minh     holding [13, 17, 22, 38, 41, 43] plays the 22 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 32 34 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [11, 19, 23, 32, 34] plays the 32 
Round 5: Xue      holding [21, 36, 46, 47, 49] plays the 36 
Round 5: Minh     holding [13, 17, 38, 41, 43] plays the 38 
Round 5: Finbar   holding [18, 29, 31, 37, 39] plays the 18 
Minh wins the round 

Round 6: Minh     holding [13, 17, 41, 43] plays the 41 
Round 6: Finbar   holding [29, 31, 37, 39] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 34 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 19, 23, 34] plays the 11 
Round 6: Xue      holding [21, 46, 47, 49] plays the 47 
Xue wins the round which contains 4 penalty points

Round 7: Xue      holding [21, 46, 49] plays the 49 
Round 7: Minh     holding [13, 17, 43] plays the 13 
Round 7: Finbar   holding [29, 31, 39] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 34 0 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 7: Eugenius holding [19, 23, 34] plays the 19 
Xue wins the round which contains 3 penalty points

Round 8: Xue      holding [21, 46] plays the 46 
Round 8: Minh     holding [17, 43] plays the 43 
Round 8: Finbar   holding [31, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
23 34 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 8: Eugenius holding [23, 34] plays the 34 
Xue wins the round which contains 1 penalty points

Round 9: Xue      holding [21] plays the 21 
Round 9: Minh     holding [17] plays the 17 
Round 9: Finbar   holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
23 0 0 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 9: Eugenius holding [23] plays the 23 
Xue wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Finbar (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Minh (system)
#4 with 11 penalty points Xue (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11752805 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Andrew  : [11, 15, 23, 26, 27, 34, 37, 38, 40, 44]
Table position 1: Jamal   : [20, 22, 24, 25, 35, 36, 45, 46, 47, 49]
Table position 2: Eugenius: [12, 16, 18, 21, 28, 30, 31, 33, 39, 43]
Table position 3: Dylan   : [10, 13, 14, 17, 19, 29, 32, 41, 42, 48]

Discards:
Andrew   [11, 37, 38]
Jamal    [22, 24, 25]
Eugenius [33, 39, 43]
Dylan    [13, 17, 48]

Round 0: Andrew   holding [13, 15, 17, 23, 26, 27, 34, 40, 44, 48] plays the 48 
Round 0: Jamal    holding [11, 20, 35, 36, 37, 38, 45, 46, 47, 49] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
12 16 18 21 22 24 25 28 30 31 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 16, 18, 21, 22, 24, 25, 28, 30, 31] plays the 12 
Round 0: Dylan    holding [10, 14, 19, 29, 32, 33, 39, 41, 42, 43] plays the 33 
Andrew wins the round 

Round 1: Andrew   holding [13, 15, 17, 23, 26, 27, 34, 40, 44] plays the 27 
Round 1: Jamal    holding [11, 20, 35, 36, 37, 45, 46, 47, 49] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
16 18 21 22 24 25 28 30 31 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [16, 18, 21, 22, 24, 25, 28, 30, 31] plays the 18 
Round 1: Dylan    holding [10, 14, 19, 29, 32, 39, 41, 42, 43] plays the 42 
Jamal wins the round which contains 7 penalty points

Round 2: Jamal    holding [11, 20, 35, 36, 37, 46, 47, 49] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
16 21 22 24 25 28 30 31 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [16, 21, 22, 24, 25, 28, 30, 31] plays the 16 
Round 2: Dylan    holding [10, 14, 19, 29, 32, 39, 41, 43] plays the 39 
Round 2: Andrew   holding [13, 15, 17, 23, 26, 34, 40, 44] plays the 44 
Andrew wins the round 

Round 3: Andrew   holding [13, 15, 17, 23, 26, 34, 40] plays the 15 
Round 3: Jamal    holding [11, 20, 35, 37, 46, 47, 49] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
21 22 24 25 28 30 31 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [21, 22, 24, 25, 28, 30, 31] plays the 21 
Round 3: Dylan    holding [10, 14, 19, 29, 32, 41, 43] plays the 10 
Jamal wins the round 

Round 4: Jamal    holding [11, 20, 37, 46, 47, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
22 24 25 28 30 31 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius holding [22, 24, 25, 28, 30, 31] plays the 22 
Round 4: Dylan    holding [14, 19, 29, 32, 41, 43] plays the 32 
Round 4: Andrew   holding [13, 17, 23, 26, 34, 40] plays the 40 
Jamal wins the round 

Round 5: Jamal    holding [11, 20, 37, 47, 49] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
24 25 28 30 31 0 0 0 0 0 

24------------------------------------------------------------------------

Round 5: Eugenius holding [24, 25, 28, 30, 31] plays the 24 
Round 5: Dylan    holding [14, 19, 29, 41, 43] plays the 14 
Round 5: Andrew   holding [13, 17, 23, 26, 34] plays the 26 
Andrew wins the round 

Round 6: Andrew   holding [13, 17, 23, 34] plays the 34 
Round 6: Jamal    holding [11, 37, 47, 49] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
25 28 30 31 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 6: Eugenius holding [25, 28, 30, 31] plays the 28 
Round 6: Dylan    holding [19, 29, 41, 43] plays the 19 
Andrew wins the round which contains 2 penalty points

Round 7: Andrew   holding [13, 17, 23] plays the 17 
Round 7: Jamal    holding [11, 47, 49] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
25 30 31 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [25, 30, 31] plays the 31 
Round 7: Dylan    holding [29, 41, 43] plays the 29 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
25 30 0 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 8: Eugenius holding [25, 30] plays the 25 
Round 8: Dylan    holding [41, 43] plays the 41 
Round 8: Andrew   holding [13, 23] plays the 23 
Round 8: Jamal    holding [47, 49] plays the 49 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
30 0 0 0 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 9: Eugenius holding [30] plays the 30 
Round 9: Dylan    holding [43] plays the 43 
Round 9: Andrew   holding [13] plays the 13 
Round 9: Jamal    holding [47] plays the 47 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Dylan (system)
#2 with 2 penalty points Andrew (system)
#3 with 7 penalty points Jamal (system)
#4 with 9 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7767873 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Minh    : [16, 20, 22, 32, 34, 36, 37, 38, 45, 46]
Table position 1: Alex    : [10, 11, 15, 21, 26, 30, 39, 43, 44, 49]
Table position 2: Eugenius: [12, 17, 23, 27, 28, 31, 33, 40, 42, 47]
Table position 3: Sabrina : [13, 14, 18, 19, 24, 25, 29, 35, 41, 48]

Discards:
Minh     [32, 34, 36]
Alex     [11, 30, 39]
Eugenius [40, 42, 47]
Sabrina  [13, 14, 19]

Round 0: Minh     holding [13, 14, 16, 19, 20, 22, 37, 38, 45, 46] plays the 22 
Round 0: Alex     holding [10, 15, 21, 26, 32, 34, 36, 43, 44, 49] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 17 23 27 28 30 31 33 39 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 17, 23, 27, 28, 30, 31, 33, 39] plays the 12 
Round 0: Sabrina  holding [18, 24, 25, 29, 35, 40, 41, 42, 47, 48] plays the 42 
Sabrina wins the round which contains 7 penalty points

Round 1: Sabrina  holding [18, 24, 25, 29, 35, 40, 41, 47, 48] plays the 48 
Round 1: Minh     holding [13, 14, 16, 19, 20, 37, 38, 45, 46] plays the 45 
Round 1: Alex     holding [10, 15, 21, 26, 34, 36, 43, 44, 49] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 23 27 28 30 31 33 39 0 

27------------------------------------------------------------------------

Round 1: Eugenius holding [11, 17, 23, 27, 28, 30, 31, 33, 39] plays the 27 
Sabrina wins the round 

Round 2: Sabrina  holding [18, 24, 25, 29, 35, 40, 41, 47] plays the 24 
Round 2: Minh     holding [13, 14, 16, 19, 20, 37, 38, 46] plays the 38 
Round 2: Alex     holding [10, 15, 21, 26, 36, 43, 44, 49] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 23 28 30 31 33 39 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [11, 17, 23, 28, 30, 31, 33, 39] plays the 28 
Minh wins the round 

Round 3: Minh     holding [13, 14, 16, 19, 20, 37, 46] plays the 16 
Round 3: Alex     holding [10, 15, 21, 26, 43, 44, 49] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 23 30 31 33 39 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [11, 17, 23, 30, 31, 33, 39] plays the 30 
Round 3: Sabrina  holding [18, 25, 29, 35, 40, 41, 47] plays the 18 
Alex wins the round 

Round 4: Alex     holding [10, 15, 21, 26, 43, 49] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 23 31 33 39 0 0 0 0 

33------------------------------------------------------------------------

Round 4: Eugenius holding [11, 17, 23, 31, 33, 39] plays the 33 
Round 4: Sabrina  holding [25, 29, 35, 40, 41, 47] plays the 35 
Round 4: Minh     holding [13, 14, 19, 20, 37, 46] plays the 14 
Sabrina wins the round 

Round 5: Sabrina  holding [25, 29, 40, 41, 47] plays the 25 
Round 5: Minh     holding [13, 19, 20, 37, 46] plays the 20 
Round 5: Alex     holding [10, 15, 26, 43, 49] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 23 31 39 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 17, 23, 31, 39] plays the 11 
Sabrina wins the round which contains 1 penalty points

Round 6: Sabrina  holding [29, 40, 41, 47] plays the 29 
Round 6: Minh     holding [13, 19, 37, 46] plays the 13 
Round 6: Alex     holding [15, 26, 43, 49] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 31 39 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 23, 31, 39] plays the 17 
Alex wins the round which contains 4 penalty points

Round 7: Alex     holding [15, 26, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 39 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 7: Eugenius holding [23, 31, 39] plays the 23 
Round 7: Sabrina  holding [40, 41, 47] plays the 47 
Round 7: Minh     holding [19, 37, 46] plays the 46 
Alex wins the round which contains 2 penalty points

Round 8: Alex     holding [15, 26] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
31 39 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 8: Eugenius holding [31, 39] plays the 39 
Round 8: Sabrina  holding [40, 41] plays the 40 
Round 8: Minh     holding [19, 37] plays the 37 
Sabrina wins the round which contains 1 penalty points

Round 9: Sabrina  holding [41] plays the 41 
Round 9: Minh     holding [19] plays the 19 
Round 9: Alex     holding [15] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Sabrina wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Minh (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Alex (system)
#4 with 12 penalty points Sabrina (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3127767 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Nicholas: [10, 12, 13, 17, 25, 27, 31, 33, 45, 47]
Table position 1: Heather : [14, 15, 22, 29, 30, 34, 38, 39, 44, 48]
Table position 2: Eugenius: [18, 21, 24, 32, 35, 36, 37, 41, 43, 46]
Table position 3: Vincent : [11, 16, 19, 20, 23, 26, 28, 40, 42, 49]

Discards:
Nicholas [13, 33, 45]
Heather  [29, 30, 38]
Eugenius [41, 43, 46]
Vincent  [16, 20, 40]

Round 0: Nicholas holding [10, 12, 16, 17, 20, 25, 27, 31, 40, 47] plays the 12 
Round 0: Heather  holding [13, 14, 15, 22, 33, 34, 39, 44, 45, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
18 21 24 29 30 32 35 36 37 38 

18------------------------------------------------------------------------

Round 0: Eugenius holding [18, 21, 24, 29, 30, 32, 35, 36, 37, 38] plays the 18 
Round 0: Vincent  holding [11, 19, 23, 26, 28, 41, 42, 43, 46, 49] plays the 26 
Heather wins the round 

Round 1: Heather  holding [13, 14, 15, 22, 33, 34, 39, 44, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
21 24 29 30 32 35 36 37 38 0 

21------------------------------------------------------------------------

Round 1: Eugenius holding [21, 24, 29, 30, 32, 35, 36, 37, 38] plays the 21 
Round 1: Vincent  holding [11, 19, 23, 28, 41, 42, 43, 46, 49] plays the 42 
Round 1: Nicholas holding [10, 16, 17, 20, 25, 27, 31, 40, 47] plays the 40 
Heather wins the round which contains 7 penalty points

Round 2: Heather  holding [13, 14, 15, 22, 33, 34, 39, 44] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
24 29 30 32 35 36 37 38 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [24, 29, 30, 32, 35, 36, 37, 38] plays the 24 
Round 2: Vincent  holding [11, 19, 23, 28, 41, 43, 46, 49] plays the 46 
Round 2: Nicholas holding [10, 16, 17, 20, 25, 27, 31, 47] plays the 20 
Vincent wins the round 

Round 3: Vincent  holding [11, 19, 23, 28, 41, 43, 49] plays the 49 
Round 3: Nicholas holding [10, 16, 17, 25, 27, 31, 47] plays the 17 
Round 3: Heather  holding [13, 14, 15, 33, 34, 39, 44] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
29 30 32 35 36 37 38 0 0 0 

35------------------------------------------------------------------------

Round 3: Eugenius holding [29, 30, 32, 35, 36, 37, 38] plays the 35 
Vincent wins the round which contains 1 penalty points

Round 4: Vincent  holding [11, 19, 23, 28, 41, 43] plays the 41 
Round 4: Nicholas holding [10, 16, 25, 27, 31, 47] plays the 31 
Round 4: Heather  holding [13, 15, 33, 34, 39, 44] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
29 30 32 36 37 38 0 0 0 0 

29------------------------------------------------------------------------

Round 4: Eugenius holding [29, 30, 32, 36, 37, 38] plays the 29 
Vincent wins the round which contains 4 penalty points

Round 5: Vincent  holding [11, 19, 23, 28, 43] plays the 19 
Round 5: Nicholas holding [10, 16, 25, 27, 47] plays the 47 
Round 5: Heather  holding [15, 33, 34, 39, 44] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
30 32 36 37 38 0 0 0 0 0 

37------------------------------------------------------------------------

Round 5: Eugenius holding [30, 32, 36, 37, 38] plays the 37 
Nicholas wins the round which contains 3 penalty points

Round 6: Nicholas holding [10, 16, 25, 27] plays the 16 
Round 6: Heather  holding [15, 34, 39, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
30 32 36 38 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 6: Eugenius holding [30, 32, 36, 38] plays the 30 
Round 6: Vincent  holding [11, 23, 28, 43] plays the 28 
Heather wins the round 

Round 7: Heather  holding [15, 34, 39] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
32 36 38 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 7: Eugenius holding [32, 36, 38] plays the 32 
Round 7: Vincent  holding [11, 23, 43] plays the 43 
Round 7: Nicholas holding [10, 25, 27] plays the 10 
Heather wins the round which contains 1 penalty points

Round 8: Heather  holding [15, 39] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
36 38 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [36, 38] plays the 36 
Round 8: Vincent  holding [11, 23] plays the 11 
Round 8: Nicholas holding [25, 27] plays the 27 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Round 9: Vincent  holding [23] plays the 23 
Round 9: Nicholas holding [25] plays the 25 
Round 9: Heather  holding [39] plays the 39 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 2 penalty points Eugenius (dodo.c)
#2 with 3 penalty points Nicholas (system)
#3 with 5 penalty points Vincent (system)
#4 with 8 penalty points Heather (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 993994 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Heather : [13, 15, 22, 27, 28, 31, 41, 45, 46, 49]
Table position 1: Eugenius: [12, 16, 18, 19, 20, 23, 24, 32, 37, 42]
Table position 2: Benjamin: [10, 21, 25, 29, 30, 36, 38, 40, 43, 47]
Table position 3: Kangying: [11, 14, 17, 26, 33, 34, 35, 39, 44, 48]

Discards:
Heather  [22, 27, 49]
Eugenius [32, 37, 42]
Benjamin [25, 29, 30]
Kangying [11, 14, 34]

Round 0: Heather  holding [11, 13, 14, 15, 28, 31, 34, 41, 45, 46] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
12 16 18 19 20 22 23 24 27 49 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 16, 18, 19, 20, 22, 23, 24, 27, 49] plays the 12 
Round 0: Benjamin holding [10, 21, 32, 36, 37, 38, 40, 42, 43, 47] plays the 38 
Round 0: Kangying holding [17, 25, 26, 29, 30, 33, 35, 39, 44, 48] plays the 35 
Benjamin wins the round 

Round 1: Benjamin holding [10, 21, 32, 36, 37, 40, 42, 43, 47] plays the 10 
Round 1: Kangying holding [17, 25, 26, 29, 30, 33, 39, 44, 48] plays the 25 
Round 1: Heather  holding [11, 13, 15, 28, 31, 34, 41, 45, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
16 18 19 20 22 23 24 27 49 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 18, 19, 20, 22, 23, 24, 27, 49] plays the 16 
Heather wins the round 

Round 2: Heather  holding [11, 13, 15, 28, 31, 34, 41, 45] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
18 19 20 22 23 24 27 49 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [18, 19, 20, 22, 23, 24, 27, 49] plays the 18 
Round 2: Benjamin holding [21, 32, 36, 37, 40, 42, 43, 47] plays the 32 
Round 2: Kangying holding [17, 26, 29, 30, 33, 39, 44, 48] plays the 30 
Benjamin wins the round 

Round 3: Benjamin holding [21, 36, 37, 40, 42, 43, 47] plays the 42 
Round 3: Kangying holding [17, 26, 29, 33, 39, 44, 48] plays the 44 
Round 3: Heather  holding [11, 13, 15, 31, 34, 41, 45] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
19 20 22 23 24 27 49 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [19, 20, 22, 23, 24, 27, 49] plays the 20 
Kangying wins the round which contains 7 penalty points

Round 4: Kangying holding [17, 26, 29, 33, 39, 48] plays the 48 
Round 4: Heather  holding [11, 13, 15, 31, 41, 45] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 23 24 27 49 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius holding [19, 22, 23, 24, 27, 49] plays the 22 
Round 4: Benjamin holding [21, 36, 37, 40, 43, 47] plays the 40 
Kangying wins the round 

Round 5: Kangying holding [17, 26, 29, 33, 39] plays the 33 
Round 5: Heather  holding [11, 13, 31, 41, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 24 27 49 0 0 0 0 0 

24------------------------------------------------------------------------

Round 5: Eugenius holding [19, 23, 24, 27, 49] plays the 24 
Round 5: Benjamin holding [21, 36, 37, 43, 47] plays the 21 
Heather wins the round 

Round 6: Heather  holding [11, 13, 31, 41] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 27 49 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 23, 27, 49] plays the 19 
Round 6: Benjamin holding [36, 37, 43, 47] plays the 47 
Round 6: Kangying holding [17, 26, 29, 39] plays the 29 
Benjamin wins the round which contains 4 penalty points

Round 7: Benjamin holding [36, 37, 43] plays the 43 
Round 7: Kangying holding [17, 26, 39] plays the 17 
Round 7: Heather  holding [13, 31, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
23 27 49 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius holding [23, 27, 49] plays the 23 
Benjamin wins the round which contains 4 penalty points

Round 8: Benjamin holding [36, 37] plays the 36 
Round 8: Kangying holding [26, 39] plays the 26 
Round 8: Heather  holding [13, 31] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
27 49 0 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 8: Eugenius holding [27, 49] plays the 27 
Benjamin wins the round which contains 1 penalty points

Round 9: Benjamin holding [37] plays the 37 
Round 9: Kangying holding [39] plays the 39 
Round 9: Heather  holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 9: Eugenius holding [49] plays the 49 
Benjamin wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Heather (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Kangying (system)
#4 with 11 penalty points Benjamin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3911853 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 12, 13, 22, 24, 26, 30, 40, 43, 48]
Table position 1: Jamal   : [11, 20, 27, 32, 37, 39, 41, 44, 46, 49]
Table position 2: Oscar   : [14, 17, 21, 23, 25, 29, 33, 34, 36, 45]
Table position 3: Aydin   : [15, 16, 18, 19, 28, 31, 35, 38, 42, 47]

Discards:
Eugenius [40, 43, 48]
Jamal    [32, 41, 49]
Oscar    [17, 29, 34]
Aydin    [15, 28, 42]


Debug output from Eugenius
------------------------------------------------------------------------
10 12 13 15 22 24 26 28 30 42 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 13, 15, 22, 24, 26, 28, 30, 42] plays the 10 
Round 0: Jamal    holding [11, 20, 27, 37, 39, 40, 43, 44, 46, 48] plays the 46 
Round 0: Oscar    holding [14, 21, 23, 25, 32, 33, 36, 41, 45, 49] plays the 36 
Round 0: Aydin    holding [16, 17, 18, 19, 29, 31, 34, 35, 38, 47] plays the 18 
Jamal wins the round 

Round 1: Jamal    holding [11, 20, 27, 37, 39, 40, 43, 44, 48] plays the 40 
Round 1: Oscar    holding [14, 21, 23, 25, 32, 33, 41, 45, 49] plays the 25 
Round 1: Aydin    holding [16, 17, 19, 29, 31, 34, 35, 38, 47] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 15 22 24 26 28 30 42 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 13, 15, 22, 24, 26, 28, 30, 42] plays the 12 
Jamal wins the round 

Round 2: Jamal    holding [11, 20, 27, 37, 39, 43, 44, 48] plays the 44 
Round 2: Oscar    holding [14, 21, 23, 32, 33, 41, 45, 49] plays the 14 
Round 2: Aydin    holding [17, 19, 29, 31, 34, 35, 38, 47] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 22 24 26 28 30 42 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [13, 15, 22, 24, 26, 28, 30, 42] plays the 22 
Jamal wins the round 

Round 3: Jamal    holding [11, 20, 27, 37, 39, 43, 48] plays the 20 
Round 3: Oscar    holding [21, 23, 32, 33, 41, 45, 49] plays the 32 
Round 3: Aydin    holding [17, 19, 29, 31, 34, 35, 47] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 24 26 28 30 42 0 0 0 

15------------------------------------------------------------------------

Round 3: Eugenius holding [13, 15, 24, 26, 28, 30, 42] plays the 15 
Aydin wins the round 

Round 4: Aydin    holding [17, 19, 29, 31, 35, 47] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
13 24 26 28 30 42 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [13, 24, 26, 28, 30, 42] plays the 28 
Round 4: Jamal    holding [11, 27, 37, 39, 43, 48] plays the 37 
Round 4: Oscar    holding [21, 23, 33, 41, 45, 49] plays the 21 
Aydin wins the round which contains 1 penalty points

Round 5: Aydin    holding [17, 19, 29, 31, 47] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
13 24 26 30 42 0 0 0 0 0 

13------------------------------------------------------------------------

Round 5: Eugenius holding [13, 24, 26, 30, 42] plays the 13 
Round 5: Jamal    holding [11, 27, 39, 43, 48] plays the 43 
Round 5: Oscar    holding [23, 33, 41, 45, 49] plays the 41 
Jamal wins the round which contains 4 penalty points

Round 6: Jamal    holding [11, 27, 39, 48] plays the 11 
Round 6: Oscar    holding [23, 33, 45, 49] plays the 23 
Round 6: Aydin    holding [17, 19, 31, 47] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
24 26 30 42 0 0 0 0 0 0 

24------------------------------------------------------------------------

Round 6: Eugenius holding [24, 26, 30, 42] plays the 24 
Aydin wins the round which contains 3 penalty points

Round 7: Aydin    holding [17, 19, 47] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
26 30 42 0 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 7: Eugenius holding [26, 30, 42] plays the 26 
Round 7: Jamal    holding [27, 39, 48] plays the 27 
Round 7: Oscar    holding [33, 45, 49] plays the 49 
Aydin wins the round which contains 1 penalty points

Round 8: Aydin    holding [19, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
30 42 0 0 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 8: Eugenius holding [30, 42] plays the 30 
Round 8: Jamal    holding [39, 48] plays the 48 
Round 8: Oscar    holding [33, 45] plays the 45 
Aydin wins the round which contains 1 penalty points

Round 9: Aydin    holding [19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
42 0 0 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 9: Eugenius holding [42] plays the 42 
Round 9: Jamal    holding [39] plays the 39 
Round 9: Oscar    holding [33] plays the 33 
Aydin wins the round which contains 8 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Oscar (system)
#3 with 4 penalty points Jamal (system)
#4 with 14 penalty points Aydin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15069067 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [12, 15, 18, 21, 22, 23, 28, 34, 37, 49]
Table position 1: Costa   : [10, 16, 17, 27, 31, 35, 42, 45, 47, 48]
Table position 2: Minh    : [19, 20, 24, 26, 29, 33, 38, 41, 44, 46]
Table position 3: Sabrina : [11, 13, 14, 25, 30, 32, 36, 39, 40, 43]

Discards:
Eugenius [34, 37, 49]
Costa    [16, 27, 31]
Minh     [26, 29, 44]
Sabrina  [11, 13, 25]


Debug output from Eugenius
------------------------------------------------------------------------
11 12 13 15 18 21 22 23 25 28 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 13, 15, 18, 21, 22, 23, 25, 28] plays the 12 
Round 0: Costa    holding [10, 17, 34, 35, 37, 42, 45, 47, 48, 49] plays the 10 
Round 0: Minh     holding [16, 19, 20, 24, 27, 31, 33, 38, 41, 46] plays the 16 
Round 0: Sabrina  holding [14, 26, 29, 30, 32, 36, 39, 40, 43, 44] plays the 32 
Sabrina wins the round 

Round 1: Sabrina  holding [14, 26, 29, 30, 36, 39, 40, 43, 44] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 15 18 21 22 23 25 28 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 15, 18, 21, 22, 23, 25, 28] plays the 18 
Round 1: Costa    holding [17, 34, 35, 37, 42, 45, 47, 48, 49] plays the 42 
Round 1: Minh     holding [19, 20, 24, 27, 31, 33, 38, 41, 46] plays the 38 
Costa wins the round which contains 7 penalty points

Round 2: Costa    holding [17, 34, 35, 37, 45, 47, 48, 49] plays the 34 
Round 2: Minh     holding [19, 20, 24, 27, 31, 33, 41, 46] plays the 46 
Round 2: Sabrina  holding [14, 29, 30, 36, 39, 40, 43, 44] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 15 21 22 23 25 28 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 15, 21, 22, 23, 25, 28] plays the 22 
Minh wins the round 

Round 3: Minh     holding [19, 20, 24, 27, 31, 33, 41] plays the 33 
Round 3: Sabrina  holding [14, 29, 30, 36, 39, 43, 44] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 15 21 23 25 28 0 0 0 

15------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 15, 21, 23, 25, 28] plays the 15 
Round 3: Costa    holding [17, 35, 37, 45, 47, 48, 49] plays the 48 
Costa wins the round 

Round 4: Costa    holding [17, 35, 37, 45, 47, 49] plays the 49 
Round 4: Minh     holding [19, 20, 24, 27, 31, 41] plays the 19 
Round 4: Sabrina  holding [14, 29, 30, 36, 43, 44] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 21 23 25 28 0 0 0 0 

21------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 21, 23, 25, 28] plays the 21 
Costa wins the round which contains 1 penalty points

Round 5: Costa    holding [17, 35, 37, 45, 47] plays the 47 
Round 5: Minh     holding [20, 24, 27, 31, 41] plays the 31 
Round 5: Sabrina  holding [29, 30, 36, 43, 44] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 23 25 28 0 0 0 0 0 

11------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 23, 25, 28] plays the 11 
Costa wins the round which contains 4 penalty points

Round 6: Costa    holding [17, 35, 37, 45] plays the 17 
Round 6: Minh     holding [20, 24, 27, 41] plays the 41 
Round 6: Sabrina  holding [30, 36, 43, 44] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 25 28 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 23, 25, 28] plays the 13 
Sabrina wins the round which contains 4 penalty points

Round 7: Sabrina  holding [30, 36, 44] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 28 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 7: Eugenius holding [23, 25, 28] plays the 25 
Round 7: Costa    holding [35, 37, 45] plays the 45 
Round 7: Minh     holding [20, 24, 27] plays the 24 
Costa wins the round 

Round 8: Costa    holding [35, 37] plays the 35 
Round 8: Minh     holding [20, 27] plays the 20 
Round 8: Sabrina  holding [36, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
23 28 0 0 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 8: Eugenius holding [23, 28] plays the 28 
Costa wins the round 

Round 9: Costa    holding [37] plays the 37 
Round 9: Minh     holding [27] plays the 27 
Round 9: Sabrina  holding [36] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
23 0 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 9: Eugenius holding [23] plays the 23 
Costa wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Minh (system)
#3 with 4 penalty points Sabrina (system)
#4 with 14 penalty points Costa (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16155812 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: George  : [10, 19, 25, 27, 30, 33, 37, 42, 43, 49]
Table position 1: Peter   : [12, 14, 15, 18, 20, 21, 28, 40, 45, 48]
Table position 2: Dylan   : [13, 16, 17, 22, 23, 31, 34, 36, 38, 46]
Table position 3: Eugenius: [11, 24, 26, 29, 32, 35, 39, 41, 44, 47]

Discards:
George   [19, 33, 37]
Peter    [14, 28, 40]
Dylan    [22, 31, 36]
Eugenius [41, 44, 47]

Round 0: George   holding [10, 25, 27, 30, 41, 42, 43, 44, 47, 49] plays the 27 
Round 0: Peter    holding [12, 15, 18, 19, 20, 21, 33, 37, 45, 48] plays the 48 
Round 0: Dylan    holding [13, 14, 16, 17, 23, 28, 34, 38, 40, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 22 24 26 29 31 32 35 36 39 

24------------------------------------------------------------------------

Round 0: Eugenius holding [11, 22, 24, 26, 29, 31, 32, 35, 36, 39] plays the 24 
Peter wins the round 

Round 1: Peter    holding [12, 15, 18, 19, 20, 21, 33, 37, 45] plays the 33 
Round 1: Dylan    holding [13, 14, 16, 17, 23, 28, 34, 38, 40] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
11 22 26 29 31 32 35 36 39 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [11, 22, 26, 29, 31, 32, 35, 36, 39] plays the 22 
Round 1: George   holding [10, 25, 30, 41, 42, 43, 44, 47, 49] plays the 42 
George wins the round which contains 8 penalty points

Round 2: George   holding [10, 25, 30, 41, 43, 44, 47, 49] plays the 47 
Round 2: Peter    holding [12, 15, 18, 19, 20, 21, 37, 45] plays the 37 
Round 2: Dylan    holding [14, 16, 17, 23, 28, 34, 38, 40] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
11 26 29 31 32 35 36 39 0 0 

11------------------------------------------------------------------------

Round 2: Eugenius holding [11, 26, 29, 31, 32, 35, 36, 39] plays the 11 
George wins the round which contains 4 penalty points

Round 3: George   holding [10, 25, 30, 41, 43, 44, 49] plays the 43 
Round 3: Peter    holding [12, 15, 18, 19, 20, 21, 45] plays the 19 
Round 3: Dylan    holding [14, 16, 23, 28, 34, 38, 40] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
26 29 31 32 35 36 39 0 0 0 

29------------------------------------------------------------------------

Round 3: Eugenius holding [26, 29, 31, 32, 35, 36, 39] plays the 29 
George wins the round which contains 4 penalty points

Round 4: George   holding [10, 25, 30, 41, 44, 49] plays the 25 
Round 4: Peter    holding [12, 15, 18, 20, 21, 45] plays the 15 
Round 4: Dylan    holding [14, 16, 28, 34, 38, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
26 31 32 35 36 39 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [26, 31, 32, 35, 36, 39] plays the 35 
Dylan wins the round 

Round 5: Dylan    holding [14, 16, 28, 34, 38] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
26 31 32 36 39 0 0 0 0 0 

26------------------------------------------------------------------------

Round 5: Eugenius holding [26, 31, 32, 36, 39] plays the 26 
Round 5: George   holding [10, 30, 41, 44, 49] plays the 10 
Round 5: Peter    holding [12, 18, 20, 21, 45] plays the 12 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
31 32 36 39 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 6: Eugenius holding [31, 32, 36, 39] plays the 31 
Round 6: George   holding [30, 41, 44, 49] plays the 41 
Round 6: Peter    holding [18, 20, 21, 45] plays the 18 
Round 6: Dylan    holding [14, 28, 34, 38] plays the 28 
George wins the round which contains 2 penalty points

Round 7: George   holding [30, 44, 49] plays the 44 
Round 7: Peter    holding [20, 21, 45] plays the 20 
Round 7: Dylan    holding [14, 34, 38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
32 36 39 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 7: Eugenius holding [32, 36, 39] plays the 32 
George wins the round 

Round 8: George   holding [30, 49] plays the 49 
Round 8: Peter    holding [21, 45] plays the 21 
Round 8: Dylan    holding [14, 34] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
36 39 0 0 0 0 0 0 0 0 

36 chah------------------------------------------------------------------------

Round 8: Eugenius holding [36, 39] plays the 36 
George wins the round 

Round 9: George   holding [30] plays the 30 
Round 9: Peter    holding [45] plays the 45 
Round 9: Dylan    holding [34] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Peter wins the round 


Finishing Positions

#1 with 0 penalty points Peter (system)
#1 with 0 penalty points Dylan (system)
#1 with 0 penalty points Eugenius (dodo.c)
#4 with 18 penalty points George (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13092955 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Minh     : [11, 15, 16, 18, 27, 41, 42, 44, 45, 47]
Table position 1: Eugenius : [12, 14, 17, 20, 22, 23, 25, 31, 34, 35]
Table position 2: Elizabeth: [19, 21, 24, 26, 29, 32, 37, 39, 40, 43]
Table position 3: Vincent  : [10, 13, 28, 30, 33, 36, 38, 46, 48, 49]

Discards:
Minh      [18, 42, 44]
Eugenius  [31, 34, 35]
Elizabeth [21, 37, 43]
Vincent   [30, 33, 49]

Round 0: Minh      holding [11, 15, 16, 27, 30, 33, 41, 45, 47, 49] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 17 18 20 22 23 25 42 44 

12------------------------------------------------------------------------

Round 0: Eugenius  holding [12, 14, 17, 18, 20, 22, 23, 25, 42, 44] plays the 12 
Round 0: Elizabeth holding [19, 24, 26, 29, 31, 32, 34, 35, 39, 40] plays the 35 
Round 0: Vincent   holding [10, 13, 21, 28, 36, 37, 38, 43, 46, 48] plays the 21 
Minh wins the round 

Round 1: Minh      holding [11, 15, 16, 27, 30, 33, 41, 47, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 18 20 22 23 25 42 44 0 

14------------------------------------------------------------------------

Round 1: Eugenius  holding [14, 17, 18, 20, 22, 23, 25, 42, 44] plays the 14 
Round 1: Elizabeth holding [19, 24, 26, 29, 31, 32, 34, 39, 40] plays the 19 
Round 1: Vincent   holding [10, 13, 28, 36, 37, 38, 43, 46, 48] plays the 28 
Minh wins the round which contains 1 penalty points

Round 2: Minh      holding [11, 15, 16, 27, 30, 33, 41, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
17 18 20 22 23 25 42 44 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius  holding [17, 18, 20, 22, 23, 25, 42, 44] plays the 18 
Round 2: Elizabeth holding [24, 26, 29, 31, 32, 34, 39, 40] plays the 39 
Round 2: Vincent   holding [10, 13, 36, 37, 38, 43, 46, 48] plays the 48 
Vincent wins the round 

Round 3: Vincent   holding [10, 13, 36, 37, 38, 43, 46] plays the 46 
Round 3: Minh      holding [11, 15, 16, 27, 30, 41, 47] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
17 20 22 23 25 42 44 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius  holding [17, 20, 22, 23, 25, 42, 44] plays the 20 
Round 3: Elizabeth holding [24, 26, 29, 31, 32, 34, 40] plays the 26 
Vincent wins the round 

Round 4: Vincent   holding [10, 13, 36, 37, 38, 43] plays the 38 
Round 4: Minh      holding [11, 15, 16, 27, 41, 47] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 23 25 42 44 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius  holding [17, 22, 23, 25, 42, 44] plays the 22 
Round 4: Elizabeth holding [24, 29, 31, 32, 34, 40] plays the 32 
Vincent wins the round 

Round 5: Vincent   holding [10, 13, 36, 37, 43] plays the 43 
Round 5: Minh      holding [11, 15, 27, 41, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 25 42 44 0 0 0 0 0 

17------------------------------------------------------------------------

Round 5: Eugenius  holding [17, 23, 25, 42, 44] plays the 17 
Round 5: Elizabeth holding [24, 29, 31, 34, 40] plays the 29 
Minh wins the round which contains 4 penalty points

Round 6: Minh      holding [11, 15, 27, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 42 44 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius  holding [23, 25, 42, 44] plays the 23 
Round 6: Elizabeth holding [24, 31, 34, 40] plays the 31 
Round 6: Vincent   holding [10, 13, 36, 37] plays the 13 
Minh wins the round which contains 4 penalty points

Round 7: Minh      holding [11, 15, 27] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
25 42 44 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 7: Eugenius  holding [25, 42, 44] plays the 25 
Round 7: Elizabeth holding [24, 34, 40] plays the 24 
Round 7: Vincent   holding [10, 36, 37] plays the 37 
Vincent wins the round which contains 2 penalty points

Round 8: Vincent   holding [10, 36] plays the 10 
Round 8: Minh      holding [15, 27] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
42 44 0 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 8: Eugenius  holding [42, 44] plays the 42 
Round 8: Elizabeth holding [34, 40] plays the 40 
Eugenius wins the round which contains 7 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
44 0 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 9: Eugenius  holding [44] plays the 44 
Round 9: Elizabeth holding [34] plays the 34 
Round 9: Vincent   holding [36] plays the 36 
Round 9: Minh      holding [27] plays the 27 
Eugenius wins the round 


Finishing Positions

#1 with 0 penalty points Elizabeth (system)
#2 with 2 penalty points Vincent (system)
#3 with 7 penalty points Eugenius (dodo.c)
#4 with 9 penalty points Minh (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2047557 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Benjamin: [12, 14, 15, 16, 18, 27, 32, 36, 48, 49]
Table position 1: George  : [11, 22, 24, 29, 33, 34, 38, 41, 45, 46]
Table position 2: Mitchell: [13, 19, 25, 26, 28, 31, 37, 39, 40, 44]
Table position 3: Eugenius: [10, 17, 20, 21, 23, 30, 35, 42, 43, 47]

Discards:
Benjamin [12, 18, 32]
George   [29, 34, 41]
Mitchell [19, 31, 40]
Eugenius [42, 43, 47]

Round 0: Benjamin holding [14, 15, 16, 27, 36, 42, 43, 47, 48, 49] plays the 27 
Round 0: George   holding [11, 12, 18, 22, 24, 32, 33, 38, 45, 46] plays the 33 
Round 0: Mitchell holding [13, 25, 26, 28, 29, 34, 37, 39, 41, 44] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
10 17 19 20 21 23 30 31 35 40 

21------------------------------------------------------------------------

Round 0: Eugenius holding [10, 17, 19, 20, 21, 23, 30, 31, 35, 40] plays the 21 
Mitchell wins the round 

Round 1: Mitchell holding [13, 25, 26, 28, 29, 34, 37, 41, 44] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
10 17 19 20 23 30 31 35 40 0 

10------------------------------------------------------------------------

Round 1: Eugenius holding [10, 17, 19, 20, 23, 30, 31, 35, 40] plays the 10 
Round 1: Benjamin holding [14, 15, 16, 36, 42, 43, 47, 48, 49] plays the 42 
Round 1: George   holding [11, 12, 18, 22, 24, 32, 38, 45, 46] plays the 46 
George wins the round which contains 7 penalty points

Round 2: George   holding [11, 12, 18, 22, 24, 32, 38, 45] plays the 24 
Round 2: Mitchell holding [13, 25, 26, 29, 34, 37, 41, 44] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 20 23 30 31 35 40 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [17, 19, 20, 23, 30, 31, 35, 40] plays the 20 
Round 2: Benjamin holding [14, 15, 16, 36, 43, 47, 48, 49] plays the 36 
Benjamin wins the round 

Round 3: Benjamin holding [14, 15, 16, 43, 47, 48, 49] plays the 48 
Round 3: George   holding [11, 12, 18, 22, 32, 38, 45] plays the 45 
Round 3: Mitchell holding [13, 25, 26, 29, 37, 41, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 30 31 35 40 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 23, 30, 31, 35, 40] plays the 30 
Benjamin wins the round 

Round 4: Benjamin holding [14, 15, 16, 43, 47, 49] plays the 15 
Round 4: George   holding [11, 12, 18, 22, 32, 38] plays the 18 
Round 4: Mitchell holding [13, 25, 26, 29, 37, 41] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 31 35 40 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 23, 31, 35, 40] plays the 35 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 31 40 0 0 0 0 0 

40------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 23, 31, 40] plays the 40 
Round 5: Benjamin holding [14, 16, 43, 47, 49] plays the 14 
Round 5: George   holding [11, 12, 22, 32, 38] plays the 38 
Round 5: Mitchell holding [13, 26, 29, 37, 41] plays the 26 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 31 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 19, 23, 31] plays the 17 
Round 6: Benjamin holding [16, 43, 47, 49] plays the 47 
Round 6: George   holding [11, 12, 22, 32] plays the 11 
Round 6: Mitchell holding [13, 29, 37, 41] plays the 29 
Benjamin wins the round which contains 4 penalty points

Round 7: Benjamin holding [16, 43, 49] plays the 49 
Round 7: George   holding [12, 22, 32] plays the 22 
Round 7: Mitchell holding [13, 37, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 31 0 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 7: Eugenius holding [19, 23, 31] plays the 19 
Benjamin wins the round which contains 2 penalty points

Round 8: Benjamin holding [16, 43] plays the 43 
Round 8: George   holding [12, 32] plays the 32 
Round 8: Mitchell holding [13, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 8: Eugenius holding [23, 31] plays the 23 
Benjamin wins the round which contains 3 penalty points

Round 9: Benjamin holding [16] plays the 16 
Round 9: George   holding [12] plays the 12 
Round 9: Mitchell holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Benjamin wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Mitchell (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 7 penalty points George (system)
#4 with 11 penalty points Benjamin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14648641 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Zachary : [12, 13, 15, 18, 21, 26, 27, 40, 41, 44]
Table position 1: Eugenius: [22, 24, 25, 30, 35, 37, 39, 45, 46, 47]
Table position 2: Finbar  : [11, 14, 28, 29, 34, 38, 42, 43, 48, 49]
Table position 3: Harrison: [10, 16, 17, 19, 20, 23, 31, 32, 33, 36]

Discards:
Zachary  [27, 40, 44]
Eugenius [45, 46, 47]
Finbar   [11, 29, 49]
Harrison [10, 20, 31]

Round 0: Zachary  holding [10, 12, 13, 15, 18, 20, 21, 26, 31, 41] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
22 24 25 27 30 35 37 39 40 44 

24------------------------------------------------------------------------

Round 0: Eugenius holding [22, 24, 25, 27, 30, 35, 37, 39, 40, 44] plays the 24 
Round 0: Finbar   holding [14, 28, 34, 38, 42, 43, 45, 46, 47, 48] plays the 28 
Round 0: Harrison holding [11, 16, 17, 19, 23, 29, 32, 33, 36, 49] plays the 36 
Harrison wins the round 

Round 1: Harrison holding [11, 16, 17, 19, 23, 29, 32, 33, 49] plays the 49 
Round 1: Zachary  holding [10, 12, 13, 15, 18, 20, 26, 31, 41] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 27 30 35 37 39 40 44 0 

35------------------------------------------------------------------------

Round 1: Eugenius holding [22, 25, 27, 30, 35, 37, 39, 40, 44] plays the 35 
Round 1: Finbar   holding [14, 34, 38, 42, 43, 45, 46, 47, 48] plays the 14 
Harrison wins the round which contains 1 penalty points

Round 2: Harrison holding [11, 16, 17, 19, 23, 29, 32, 33] plays the 29 
Round 2: Zachary  holding [10, 12, 13, 15, 18, 20, 26, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 27 30 37 39 40 44 0 0 

37------------------------------------------------------------------------

Round 2: Eugenius holding [22, 25, 27, 30, 37, 39, 40, 44] plays the 37 
Round 2: Finbar   holding [34, 38, 42, 43, 45, 46, 47, 48] plays the 43 
Finbar wins the round which contains 4 penalty points

Round 3: Finbar   holding [34, 38, 42, 45, 46, 47, 48] plays the 46 
Round 3: Harrison holding [11, 16, 17, 19, 23, 32, 33] plays the 16 
Round 3: Zachary  holding [10, 12, 13, 15, 18, 20, 26] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 27 30 39 40 44 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [22, 25, 27, 30, 39, 40, 44] plays the 22 
Finbar wins the round 

Round 4: Finbar   holding [34, 38, 42, 45, 47, 48] plays the 34 
Round 4: Harrison holding [11, 17, 19, 23, 32, 33] plays the 32 
Round 4: Zachary  holding [10, 12, 13, 15, 18, 20] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
25 27 30 39 40 44 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [25, 27, 30, 39, 40, 44] plays the 30 
Finbar wins the round 

Round 5: Finbar   holding [38, 42, 45, 47, 48] plays the 48 
Round 5: Harrison holding [11, 17, 19, 23, 33] plays the 33 
Round 5: Zachary  holding [10, 12, 13, 15, 20] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
25 27 39 40 44 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius holding [25, 27, 39, 40, 44] plays the 27 
Finbar wins the round 

Round 6: Finbar   holding [38, 42, 45, 47] plays the 47 
Round 6: Harrison holding [11, 17, 19, 23] plays the 19 
Round 6: Zachary  holding [10, 13, 15, 20] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
25 39 40 44 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 6: Eugenius holding [25, 39, 40, 44] plays the 25 
Finbar wins the round which contains 3 penalty points

Round 7: Finbar   holding [38, 42, 45] plays the 42 
Round 7: Harrison holding [11, 17, 23] plays the 17 
Round 7: Zachary  holding [10, 15, 20] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
39 40 44 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 7: Eugenius holding [39, 40, 44] plays the 39 
Finbar wins the round which contains 8 penalty points

Round 8: Finbar   holding [38, 45] plays the 45 
Round 8: Harrison holding [11, 23] plays the 11 
Round 8: Zachary  holding [15, 20] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
40 44 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 8: Eugenius holding [40, 44] plays the 40 
Finbar wins the round which contains 1 penalty points

Round 9: Finbar   holding [38] plays the 38 
Round 9: Harrison holding [23] plays the 23 
Round 9: Zachary  holding [20] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
44 0 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 9: Eugenius holding [44] plays the 44 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Zachary (system)
#2 with 1 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Harrison (system)
#4 with 16 penalty points Finbar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7273466 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Livia   : [12, 13, 19, 22, 32, 37, 40, 42, 44, 48]
Table position 1: Eugenius: [18, 20, 21, 24, 25, 30, 31, 36, 45, 47]
Table position 2: Dean    : [10, 14, 26, 27, 33, 35, 38, 41, 43, 46]
Table position 3: David   : [11, 15, 16, 17, 23, 28, 29, 34, 39, 49]

Discards:
Livia    [13, 37, 48]
Eugenius [36, 45, 47]
Dean     [10, 14, 41]
David    [11, 17, 34]

Round 0: Livia    holding [11, 12, 17, 19, 22, 32, 34, 40, 42, 44] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 18 20 21 24 25 30 31 37 48 

18------------------------------------------------------------------------

Round 0: Eugenius holding [13, 18, 20, 21, 24, 25, 30, 31, 37, 48] plays the 18 
Round 0: Dean     holding [26, 27, 33, 35, 36, 38, 43, 45, 46, 47] plays the 33 
Round 0: David    holding [10, 14, 15, 16, 23, 28, 29, 39, 41, 49] plays the 10 
Dean wins the round 

Round 1: Dean     holding [26, 27, 35, 36, 38, 43, 45, 46, 47] plays the 38 
Round 1: David    holding [14, 15, 16, 23, 28, 29, 39, 41, 49] plays the 28 
Round 1: Livia    holding [11, 12, 17, 19, 32, 34, 40, 42, 44] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
13 20 21 24 25 30 31 37 48 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [13, 20, 21, 24, 25, 30, 31, 37, 48] plays the 20 
Dean wins the round 

Round 2: Dean     holding [26, 27, 35, 36, 43, 45, 46, 47] plays the 36 
Round 2: David    holding [14, 15, 16, 23, 29, 39, 41, 49] plays the 14 
Round 2: Livia    holding [11, 17, 19, 32, 34, 40, 42, 44] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
13 21 24 25 30 31 37 48 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [13, 21, 24, 25, 30, 31, 37, 48] plays the 21 
Dean wins the round 

Round 3: Dean     holding [26, 27, 35, 43, 45, 46, 47] plays the 27 
Round 3: David    holding [15, 16, 23, 29, 39, 41, 49] plays the 15 
Round 3: Livia    holding [11, 17, 19, 34, 40, 42, 44] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
13 24 25 30 31 37 48 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [13, 24, 25, 30, 31, 37, 48] plays the 24 
Livia wins the round which contains 7 penalty points

Round 4: Livia    holding [11, 17, 19, 34, 40, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
13 25 30 31 37 48 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [13, 25, 30, 31, 37, 48] plays the 30 
Round 4: Dean     holding [26, 35, 43, 45, 46, 47] plays the 26 
Round 4: David    holding [16, 23, 29, 39, 41, 49] plays the 16 
Livia wins the round 

Round 5: Livia    holding [11, 17, 19, 34, 40] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 25 31 37 48 0 0 0 0 0 

48------------------------------------------------------------------------

Round 5: Eugenius holding [13, 25, 31, 37, 48] plays the 48 
Round 5: Dean     holding [35, 43, 45, 46, 47] plays the 46 
Round 5: David    holding [23, 29, 39, 41, 49] plays the 41 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 25 31 37 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 25, 31, 37] plays the 13 
Round 6: Dean     holding [35, 43, 45, 47] plays the 47 
Round 6: David    holding [23, 29, 39, 49] plays the 23 
Round 6: Livia    holding [11, 17, 19, 40] plays the 17 
Dean wins the round which contains 4 penalty points

Round 7: Dean     holding [35, 43, 45] plays the 35 
Round 7: David    holding [29, 39, 49] plays the 49 
Round 7: Livia    holding [11, 19, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
25 31 37 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 7: Eugenius holding [25, 31, 37] plays the 25 
David wins the round 

Round 8: David    holding [29, 39] plays the 39 
Round 8: Livia    holding [11, 19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius holding [31, 37] plays the 31 
Round 8: Dean     holding [43, 45] plays the 45 
Dean wins the round which contains 2 penalty points

Round 9: Dean     holding [43] plays the 43 
Round 9: David    holding [29] plays the 29 
Round 9: Livia    holding [11] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Dean wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points David (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Livia (system)
#4 with 10 penalty points Dean (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15785971 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Stephen : [12, 21, 24, 25, 27, 29, 32, 35, 42, 46]
Table position 1: Andrew  : [13, 16, 17, 20, 28, 31, 33, 34, 43, 48]
Table position 2: Kangying: [14, 15, 18, 19, 23, 30, 37, 38, 40, 45]
Table position 3: Eugenius: [10, 11, 22, 26, 36, 39, 41, 44, 47, 49]

Discards:
Stephen  [27, 29, 35]
Andrew   [13, 16, 31]
Kangying [15, 30, 37]
Eugenius [44, 47, 49]

Round 0: Stephen  holding [12, 21, 24, 25, 32, 42, 44, 46, 47, 49] plays the 24 
Round 0: Andrew   holding [17, 20, 27, 28, 29, 33, 34, 35, 43, 48] plays the 27 
Round 0: Kangying holding [13, 14, 16, 18, 19, 23, 31, 38, 40, 45] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 15 22 26 30 36 37 39 41 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 15, 22, 26, 30, 36, 37, 39, 41] plays the 10 
Andrew wins the round 

Round 1: Andrew   holding [17, 20, 28, 29, 33, 34, 35, 43, 48] plays the 35 
Round 1: Kangying holding [13, 14, 16, 19, 23, 31, 38, 40, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 22 26 30 36 37 39 41 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [11, 15, 22, 26, 30, 36, 37, 39, 41] plays the 15 
Round 1: Stephen  holding [12, 21, 25, 32, 42, 44, 46, 47, 49] plays the 21 
Kangying wins the round 

Round 2: Kangying holding [13, 14, 16, 19, 23, 31, 38, 40] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
11 22 26 30 36 37 39 41 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [11, 22, 26, 30, 36, 37, 39, 41] plays the 22 
Round 2: Stephen  holding [12, 25, 32, 42, 44, 46, 47, 49] plays the 46 
Round 2: Andrew   holding [17, 20, 28, 29, 33, 34, 43, 48] plays the 28 
Stephen wins the round 

Round 3: Stephen  holding [12, 25, 32, 42, 44, 47, 49] plays the 44 
Round 3: Andrew   holding [17, 20, 29, 33, 34, 43, 48] plays the 33 
Round 3: Kangying holding [13, 14, 16, 19, 23, 31, 40] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
11 26 30 36 37 39 41 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [11, 26, 30, 36, 37, 39, 41] plays the 26 
Stephen wins the round 

Round 4: Stephen  holding [12, 25, 32, 42, 47, 49] plays the 25 
Round 4: Andrew   holding [17, 20, 29, 34, 43, 48] plays the 20 
Round 4: Kangying holding [13, 16, 19, 23, 31, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
11 30 36 37 39 41 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [11, 30, 36, 37, 39, 41] plays the 30 
Kangying wins the round 

Round 5: Kangying holding [13, 16, 19, 23, 31] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
11 36 37 39 41 0 0 0 0 0 

36------------------------------------------------------------------------

Round 5: Eugenius holding [11, 36, 37, 39, 41] plays the 36 
Round 5: Stephen  holding [12, 32, 42, 47, 49] plays the 12 
Round 5: Andrew   holding [17, 29, 34, 43, 48] plays the 48 
Andrew wins the round 

Round 6: Andrew   holding [17, 29, 34, 43] plays the 34 
Round 6: Kangying holding [13, 19, 23, 31] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
11 37 39 41 0 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 6: Eugenius holding [11, 37, 39, 41] plays the 11 
Round 6: Stephen  holding [32, 42, 47, 49] plays the 42 
Stephen wins the round which contains 9 penalty points

Round 7: Stephen  holding [32, 47, 49] plays the 49 
Round 7: Andrew   holding [17, 29, 43] plays the 29 
Round 7: Kangying holding [13, 19, 31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
37 39 41 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 7: Eugenius holding [37, 39, 41] plays the 37 
Stephen wins the round which contains 3 penalty points

Round 8: Stephen  holding [32, 47] plays the 32 
Round 8: Andrew   holding [17, 43] plays the 17 
Round 8: Kangying holding [13, 19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
39 41 0 0 0 0 0 0 0 0 

39 chah------------------------------------------------------------------------

Round 8: Eugenius holding [39, 41] plays the 39 
Stephen wins the round which contains 2 penalty points

Round 9: Stephen  holding [47] plays the 47 
Round 9: Andrew   holding [43] plays the 43 
Round 9: Kangying holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Stephen wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Andrew (system)
#1 with 0 penalty points Kangying (system)
#1 with 0 penalty points Eugenius (dodo.c)
#4 with 18 penalty points Stephen (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14750820 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 21, 24, 32, 33, 36, 37, 38, 39, 41]
Table position 1: Nathan  : [12, 16, 19, 23, 26, 29, 31, 40, 43, 45]
Table position 2: Eleni   : [11, 14, 15, 17, 18, 30, 35, 42, 44, 46]
Table position 3: Andrew  : [13, 20, 22, 25, 27, 28, 34, 47, 48, 49]

Discards:
Eugenius [38, 39, 41]
Nathan   [26, 29, 40]
Eleni    [18, 44, 46]
Andrew   [20, 25, 34]


Debug output from Eugenius
------------------------------------------------------------------------
10 20 21 24 25 32 33 34 36 37 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 20, 21, 24, 25, 32, 33, 34, 36, 37] plays the 10 
Round 0: Nathan   holding [12, 16, 19, 23, 31, 38, 39, 41, 43, 45] plays the 16 
Round 0: Eleni    holding [11, 14, 15, 17, 26, 29, 30, 35, 40, 42] plays the 42 
Round 0: Andrew   holding [13, 18, 22, 27, 28, 44, 46, 47, 48, 49] plays the 18 
Eleni wins the round which contains 7 penalty points

Round 1: Eleni    holding [11, 14, 15, 17, 26, 29, 30, 35, 40] plays the 30 
Round 1: Andrew   holding [13, 22, 27, 28, 44, 46, 47, 48, 49] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
20 21 24 25 32 33 34 36 37 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [20, 21, 24, 25, 32, 33, 34, 36, 37] plays the 20 
Round 1: Nathan   holding [12, 19, 23, 31, 38, 39, 41, 43, 45] plays the 12 
Eleni wins the round 

Round 2: Eleni    holding [11, 14, 15, 17, 26, 29, 35, 40] plays the 15 
Round 2: Andrew   holding [13, 22, 28, 44, 46, 47, 48, 49] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
21 24 25 32 33 34 36 37 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [21, 24, 25, 32, 33, 34, 36, 37] plays the 21 
Round 2: Nathan   holding [19, 23, 31, 38, 39, 41, 43, 45] plays the 39 
Andrew wins the round 

Round 3: Andrew   holding [13, 22, 28, 44, 46, 47, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
24 25 32 33 34 36 37 0 0 0 

24 chah------------------------------------------------------------------------

Round 3: Eugenius holding [24, 25, 32, 33, 34, 36, 37] plays the 24 
Round 3: Nathan   holding [19, 23, 31, 38, 41, 43, 45] plays the 41 
Round 3: Eleni    holding [11, 14, 17, 26, 29, 35, 40] plays the 14 
Andrew wins the round which contains 1 penalty points

Round 4: Andrew   holding [13, 22, 28, 44, 46, 47] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
25 32 33 34 36 37 0 0 0 0 

37------------------------------------------------------------------------

Round 4: Eugenius holding [25, 32, 33, 34, 36, 37] plays the 37 
Round 4: Nathan   holding [19, 23, 31, 38, 43, 45] plays the 43 
Round 4: Eleni    holding [11, 17, 26, 29, 35, 40] plays the 11 
Nathan wins the round which contains 4 penalty points

Round 5: Nathan   holding [19, 23, 31, 38, 45] plays the 38 
Round 5: Eleni    holding [17, 26, 29, 35, 40] plays the 40 
Round 5: Andrew   holding [22, 28, 44, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
25 32 33 34 36 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [25, 32, 33, 34, 36] plays the 32 
Andrew wins the round 

Round 6: Andrew   holding [22, 28, 44, 47] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
25 33 34 36 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 6: Eugenius holding [25, 33, 34, 36] plays the 34 
Round 6: Nathan   holding [19, 23, 31, 45] plays the 45 
Round 6: Eleni    holding [17, 26, 29, 35] plays the 26 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
25 33 36 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 7: Eugenius holding [25, 33, 36] plays the 25 
Round 7: Nathan   holding [19, 23, 31] plays the 31 
Round 7: Eleni    holding [17, 29, 35] plays the 35 
Round 7: Andrew   holding [22, 44, 47] plays the 44 
Eleni wins the round which contains 1 penalty points

Round 8: Eleni    holding [17, 29] plays the 17 
Round 8: Andrew   holding [22, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
33 36 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 8: Eugenius holding [33, 36] plays the 33 
Round 8: Nathan   holding [19, 23] plays the 23 
Andrew wins the round which contains 3 penalty points

Round 9: Andrew   holding [22] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
36 0 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 9: Eugenius holding [36] plays the 36 
Round 9: Nathan   holding [19] plays the 19 
Round 9: Eleni    holding [29] plays the 29 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 2 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Nathan (system)
#2 with 4 penalty points Andrew (system)
#4 with 8 penalty points Eleni (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5952510 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Costa   : [12, 13, 15, 19, 20, 35, 36, 37, 40, 47]
Table position 1: Eugenius: [16, 18, 21, 23, 24, 28, 38, 41, 45, 49]
Table position 2: Jamal   : [17, 22, 25, 26, 32, 34, 42, 43, 44, 46]
Table position 3: Xue     : [10, 11, 14, 27, 29, 30, 31, 33, 39, 48]

Discards:
Costa    [20, 35, 40]
Eugenius [41, 45, 49]
Jamal    [32, 42, 46]
Xue      [10, 11, 33]

Round 0: Costa    holding [10, 11, 12, 13, 15, 19, 33, 36, 37, 47] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
16 18 20 21 23 24 28 35 38 40 

18------------------------------------------------------------------------

Round 0: Eugenius holding [16, 18, 20, 21, 23, 24, 28, 35, 38, 40] plays the 18 
Round 0: Jamal    holding [17, 22, 25, 26, 34, 41, 43, 44, 45, 49] plays the 25 
Round 0: Xue      holding [14, 27, 29, 30, 31, 32, 39, 42, 46, 48] plays the 27 
Xue wins the round 

Round 1: Xue      holding [14, 29, 30, 31, 32, 39, 42, 46, 48] plays the 39 
Round 1: Costa    holding [10, 11, 12, 13, 19, 33, 36, 37, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
16 20 21 23 24 28 35 38 40 0 

21------------------------------------------------------------------------

Round 1: Eugenius holding [16, 20, 21, 23, 24, 28, 35, 38, 40] plays the 21 
Round 1: Jamal    holding [17, 22, 26, 34, 41, 43, 44, 45, 49] plays the 26 
Xue wins the round 

Round 2: Xue      holding [14, 29, 30, 31, 32, 42, 46, 48] plays the 14 
Round 2: Costa    holding [10, 11, 12, 13, 19, 36, 37, 47] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
16 20 23 24 28 35 38 40 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [16, 20, 23, 24, 28, 35, 38, 40] plays the 16 
Round 2: Jamal    holding [17, 22, 34, 41, 43, 44, 45, 49] plays the 49 
Jamal wins the round 

Round 3: Jamal    holding [17, 22, 34, 41, 43, 44, 45] plays the 45 
Round 3: Xue      holding [29, 30, 31, 32, 42, 46, 48] plays the 42 
Round 3: Costa    holding [10, 11, 13, 19, 36, 37, 47] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
20 23 24 28 35 38 40 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [20, 23, 24, 28, 35, 38, 40] plays the 20 
Jamal wins the round which contains 7 penalty points

Round 4: Jamal    holding [17, 22, 34, 41, 43, 44] plays the 34 
Round 4: Xue      holding [29, 30, 31, 32, 46, 48] plays the 48 
Round 4: Costa    holding [11, 13, 19, 36, 37, 47] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
23 24 28 35 38 40 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius holding [23, 24, 28, 35, 38, 40] plays the 24 
Xue wins the round 

Round 5: Xue      holding [29, 30, 31, 32, 46] plays the 46 
Round 5: Costa    holding [11, 13, 19, 37, 47] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
23 28 35 38 40 0 0 0 0 0 

28------------------------------------------------------------------------

Round 5: Eugenius holding [23, 28, 35, 38, 40] plays the 28 
Round 5: Jamal    holding [17, 22, 41, 43, 44] plays the 22 
Xue wins the round which contains 1 penalty points

Round 6: Xue      holding [29, 30, 31, 32] plays the 30 
Round 6: Costa    holding [11, 13, 37, 47] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
23 35 38 40 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 6: Eugenius holding [23, 35, 38, 40] plays the 35 
Round 6: Jamal    holding [17, 41, 43, 44] plays the 44 
Jamal wins the round which contains 1 penalty points

Round 7: Jamal    holding [17, 41, 43] plays the 17 
Round 7: Xue      holding [29, 31, 32] plays the 29 
Round 7: Costa    holding [11, 37, 47] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
23 38 40 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius holding [23, 38, 40] plays the 23 
Costa wins the round which contains 4 penalty points

Round 8: Costa    holding [11, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
38 40 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [38, 40] plays the 38 
Round 8: Jamal    holding [41, 43] plays the 41 
Round 8: Xue      holding [31, 32] plays the 31 
Costa wins the round which contains 3 penalty points

Round 9: Costa    holding [11] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 9: Eugenius holding [40] plays the 40 
Round 9: Jamal    holding [43] plays the 43 
Round 9: Xue      holding [32] plays the 32 
Jamal wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Xue (system)
#3 with 7 penalty points Costa (system)
#4 with 10 penalty points Jamal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16731876 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 15, 20, 26, 28, 29, 38, 40, 44, 45]
Table position 1: Matthew : [11, 12, 21, 32, 33, 35, 36, 39, 41, 48]
Table position 2: Nicholas: [13, 14, 17, 18, 22, 24, 27, 30, 34, 47]
Table position 3: Kane    : [16, 19, 23, 25, 31, 37, 42, 43, 46, 49]

Discards:
Eugenius [40, 44, 45]
Matthew  [32, 33, 36]
Nicholas [13, 18, 34]
Kane     [19, 25, 46]


Debug output from Eugenius
------------------------------------------------------------------------
10 15 19 20 25 26 28 29 38 46 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 15, 19, 20, 25, 26, 28, 29, 38, 46] plays the 10 
Round 0: Matthew  holding [11, 12, 21, 35, 39, 40, 41, 44, 45, 48] plays the 45 
Round 0: Nicholas holding [14, 17, 22, 24, 27, 30, 32, 33, 36, 47] plays the 22 
Round 0: Kane     holding [13, 16, 18, 23, 31, 34, 37, 42, 43, 49] plays the 34 
Matthew wins the round 

Round 1: Matthew  holding [11, 12, 21, 35, 39, 40, 41, 44, 48] plays the 40 
Round 1: Nicholas holding [14, 17, 24, 27, 30, 32, 33, 36, 47] plays the 14 
Round 1: Kane     holding [13, 16, 18, 23, 31, 37, 42, 43, 49] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
15 19 20 25 26 28 29 38 46 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [15, 19, 20, 25, 26, 28, 29, 38, 46] plays the 15 
Matthew wins the round 

Round 2: Matthew  holding [11, 12, 21, 35, 39, 41, 44, 48] plays the 21 
Round 2: Nicholas holding [17, 24, 27, 30, 32, 33, 36, 47] plays the 36 
Round 2: Kane     holding [13, 18, 23, 31, 37, 42, 43, 49] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
19 20 25 26 28 29 38 46 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [19, 20, 25, 26, 28, 29, 38, 46] plays the 28 
Nicholas wins the round 

Round 3: Nicholas holding [17, 24, 27, 30, 32, 33, 47] plays the 24 
Round 3: Kane     holding [13, 23, 31, 37, 42, 43, 49] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
19 20 25 26 29 38 46 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [19, 20, 25, 26, 29, 38, 46] plays the 20 
Round 3: Matthew  holding [11, 12, 35, 39, 41, 44, 48] plays the 39 
Kane wins the round which contains 7 penalty points

Round 4: Kane     holding [13, 23, 31, 37, 43, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
19 25 26 29 38 46 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 4: Eugenius holding [19, 25, 26, 29, 38, 46] plays the 19 
Round 4: Matthew  holding [11, 12, 35, 41, 44, 48] plays the 35 
Round 4: Nicholas holding [17, 27, 30, 32, 33, 47] plays the 30 
Kane wins the round which contains 1 penalty points

Round 5: Kane     holding [13, 23, 31, 37, 43] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
25 26 29 38 46 0 0 0 0 0 

29------------------------------------------------------------------------

Round 5: Eugenius holding [25, 26, 29, 38, 46] plays the 29 
Round 5: Matthew  holding [11, 12, 41, 44, 48] plays the 11 
Round 5: Nicholas holding [17, 27, 32, 33, 47] plays the 17 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
25 26 38 46 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 6: Eugenius holding [25, 26, 38, 46] plays the 25 
Round 6: Matthew  holding [12, 41, 44, 48] plays the 48 
Round 6: Nicholas holding [27, 32, 33, 47] plays the 27 
Round 6: Kane     holding [23, 31, 37, 43] plays the 43 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
26 38 46 0 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 7: Eugenius holding [26, 38, 46] plays the 26 
Round 7: Matthew  holding [12, 41, 44] plays the 44 
Round 7: Nicholas holding [32, 33, 47] plays the 32 
Round 7: Kane     holding [23, 31, 37] plays the 31 
Matthew wins the round which contains 1 penalty points

Round 8: Matthew  holding [12, 41] plays the 12 
Round 8: Nicholas holding [33, 47] plays the 33 
Round 8: Kane     holding [23, 37] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
38 46 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [38, 46] plays the 38 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
46 0 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 9: Eugenius holding [46] plays the 46 
Round 9: Matthew  holding [41] plays the 41 
Round 9: Nicholas holding [47] plays the 47 
Round 9: Kane     holding [37] plays the 37 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Nicholas (system)
#2 with 1 penalty points Matthew (system)
#3 with 8 penalty points Kane (system)
#4 with 9 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15365782 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 12, 17, 25, 28, 29, 32, 36, 37, 41]
Table position 1: Aydin   : [16, 20, 26, 35, 39, 40, 43, 44, 45, 48]
Table position 2: Nathan  : [11, 15, 21, 22, 24, 30, 38, 42, 46, 49]
Table position 3: Nicholas: [13, 14, 18, 19, 23, 27, 31, 33, 34, 47]

Discards:
Eugenius [36, 37, 41]
Aydin    [40, 43, 48]
Nathan   [22, 46, 49]
Nicholas [27, 31, 34]


Debug output from Eugenius
------------------------------------------------------------------------
10 12 17 25 27 28 29 31 32 34 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 17, 25, 27, 28, 29, 31, 32, 34] plays the 10 
Round 0: Aydin    holding [16, 20, 26, 35, 36, 37, 39, 41, 44, 45] plays the 16 
Round 0: Nathan   holding [11, 15, 21, 24, 30, 38, 40, 42, 43, 48] plays the 30 
Round 0: Nicholas holding [13, 14, 18, 19, 22, 23, 33, 46, 47, 49] plays the 14 
Nathan wins the round 

Round 1: Nathan   holding [11, 15, 21, 24, 38, 40, 42, 43, 48] plays the 48 
Round 1: Nicholas holding [13, 18, 19, 22, 23, 33, 46, 47, 49] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
12 17 25 27 28 29 31 32 34 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 17, 25, 27, 28, 29, 31, 32, 34] plays the 12 
Round 1: Aydin    holding [20, 26, 35, 36, 37, 39, 41, 44, 45] plays the 20 
Nathan wins the round 

Round 2: Nathan   holding [11, 15, 21, 24, 38, 40, 42, 43] plays the 42 
Round 2: Nicholas holding [13, 18, 19, 22, 23, 46, 47, 49] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 27 28 29 31 32 34 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [17, 25, 27, 28, 29, 31, 32, 34] plays the 27 
Round 2: Aydin    holding [26, 35, 36, 37, 39, 41, 44, 45] plays the 35 
Nathan wins the round which contains 7 penalty points

Round 3: Nathan   holding [11, 15, 21, 24, 38, 40, 43] plays the 15 
Round 3: Nicholas holding [13, 19, 22, 23, 46, 47, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 28 29 31 32 34 0 0 0 

25------------------------------------------------------------------------

Round 3: Eugenius holding [17, 25, 28, 29, 31, 32, 34] plays the 25 
Round 3: Aydin    holding [26, 36, 37, 39, 41, 44, 45] plays the 39 
Aydin wins the round 

Round 4: Aydin    holding [26, 36, 37, 41, 44, 45] plays the 45 
Round 4: Nathan   holding [11, 21, 24, 38, 40, 43] plays the 24 
Round 4: Nicholas holding [13, 19, 22, 23, 46, 47] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
17 28 29 31 32 34 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 4: Eugenius holding [17, 28, 29, 31, 32, 34] plays the 17 
Aydin wins the round which contains 1 penalty points

Round 5: Aydin    holding [26, 36, 37, 41, 44] plays the 44 
Round 5: Nathan   holding [11, 21, 38, 40, 43] plays the 38 
Round 5: Nicholas holding [13, 19, 23, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
28 29 31 32 34 0 0 0 0 0 

28------------------------------------------------------------------------

Round 5: Eugenius holding [28, 29, 31, 32, 34] plays the 28 
Nicholas wins the round 

Round 6: Nicholas holding [13, 19, 23, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 32 34 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 6: Eugenius holding [29, 31, 32, 34] plays the 29 
Round 6: Aydin    holding [26, 36, 37, 41] plays the 37 
Round 6: Nathan   holding [11, 21, 40, 43] plays the 11 
Nicholas wins the round which contains 4 penalty points

Round 7: Nicholas holding [13, 19, 23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
31 32 34 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [31, 32, 34] plays the 31 
Round 7: Aydin    holding [26, 36, 41] plays the 41 
Round 7: Nathan   holding [21, 40, 43] plays the 43 
Nathan wins the round which contains 4 penalty points

Round 8: Nathan   holding [21, 40] plays the 40 
Round 8: Nicholas holding [13, 19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
32 34 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 8: Eugenius holding [32, 34] plays the 32 
Round 8: Aydin    holding [26, 36] plays the 36 
Nathan wins the round which contains 1 penalty points

Round 9: Nathan   holding [21] plays the 21 
Round 9: Nicholas holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
34 0 0 0 0 0 0 0 0 0 

34 chah------------------------------------------------------------------------

Round 9: Eugenius holding [34] plays the 34 
Round 9: Aydin    holding [26] plays the 26 
Nathan wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Aydin (system)
#3 with 4 penalty points Nicholas (system)
#4 with 13 penalty points Nathan (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7992269 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Claire  : [10, 12, 13, 16, 17, 22, 26, 35, 47, 48]
Table position 1: Xue     : [11, 14, 15, 19, 21, 24, 25, 40, 43, 49]
Table position 2: Eugenius: [27, 29, 31, 32, 33, 37, 41, 42, 45, 46]
Table position 3: Jamal   : [18, 20, 23, 28, 30, 34, 36, 38, 39, 44]

Discards:
Claire   [10, 13, 48]
Xue      [19, 25, 40]
Eugenius [42, 45, 46]
Jamal    [20, 38, 39]

Round 0: Claire   holding [12, 16, 17, 20, 22, 26, 35, 38, 39, 47] plays the 16 
Round 0: Xue      holding [10, 11, 13, 14, 15, 21, 24, 43, 48, 49] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
19 25 27 29 31 32 33 37 40 41 

32------------------------------------------------------------------------

Round 0: Eugenius holding [19, 25, 27, 29, 31, 32, 33, 37, 40, 41] plays the 32 
Round 0: Jamal    holding [18, 23, 28, 30, 34, 36, 42, 44, 45, 46] plays the 34 
Jamal wins the round 

Round 1: Jamal    holding [18, 23, 28, 30, 36, 42, 44, 45, 46] plays the 18 
Round 1: Claire   holding [12, 17, 20, 22, 26, 35, 38, 39, 47] plays the 20 
Round 1: Xue      holding [11, 13, 14, 15, 21, 24, 43, 48, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
19 25 27 29 31 33 37 40 41 0 

27------------------------------------------------------------------------

Round 1: Eugenius holding [19, 25, 27, 29, 31, 33, 37, 40, 41] plays the 27 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
19 25 29 31 33 37 40 41 0 0 

25------------------------------------------------------------------------

Round 2: Eugenius holding [19, 25, 29, 31, 33, 37, 40, 41] plays the 25 
Round 2: Jamal    holding [23, 28, 30, 36, 42, 44, 45, 46] plays the 30 
Round 2: Claire   holding [12, 17, 22, 26, 35, 38, 39, 47] plays the 35 
Round 2: Xue      holding [11, 13, 14, 21, 24, 43, 48, 49] plays the 11 
Claire wins the round which contains 1 penalty points

Round 3: Claire   holding [12, 17, 22, 26, 38, 39, 47] plays the 12 
Round 3: Xue      holding [13, 14, 21, 24, 43, 48, 49] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 31 33 37 40 41 0 0 0 

33------------------------------------------------------------------------

Round 3: Eugenius holding [19, 29, 31, 33, 37, 40, 41] plays the 33 
Round 3: Jamal    holding [23, 28, 36, 42, 44, 45, 46] plays the 42 
Jamal wins the round which contains 7 penalty points

Round 4: Jamal    holding [23, 28, 36, 44, 45, 46] plays the 23 
Round 4: Claire   holding [17, 22, 26, 38, 39, 47] plays the 47 
Round 4: Xue      holding [13, 21, 24, 43, 48, 49] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 31 37 40 41 0 0 0 0 

19------------------------------------------------------------------------

Round 4: Eugenius holding [19, 29, 31, 37, 40, 41] plays the 19 
Claire wins the round which contains 4 penalty points

Round 5: Claire   holding [17, 22, 26, 38, 39] plays the 22 
Round 5: Xue      holding [21, 24, 43, 48, 49] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 37 40 41 0 0 0 0 0 

40------------------------------------------------------------------------

Round 5: Eugenius holding [29, 31, 37, 40, 41] plays the 40 
Round 5: Jamal    holding [28, 36, 44, 45, 46] plays the 44 
Jamal wins the round 

Round 6: Jamal    holding [28, 36, 45, 46] plays the 28 
Round 6: Claire   holding [17, 26, 38, 39] plays the 26 
Round 6: Xue      holding [21, 43, 48, 49] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 37 41 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 6: Eugenius holding [29, 31, 37, 41] plays the 29 
Xue wins the round which contains 1 penalty points

Round 7: Xue      holding [21, 43, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 41 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 7: Eugenius holding [31, 37, 41] plays the 31 
Round 7: Jamal    holding [36, 45, 46] plays the 46 
Round 7: Claire   holding [17, 38, 39] plays the 17 
Xue wins the round which contains 2 penalty points

Round 8: Xue      holding [21, 43] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
37 41 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 8: Eugenius holding [37, 41] plays the 37 
Round 8: Jamal    holding [36, 45] plays the 45 
Round 8: Claire   holding [38, 39] plays the 39 
Jamal wins the round which contains 1 penalty points

Round 9: Jamal    holding [36] plays the 36 
Round 9: Claire   holding [38] plays the 38 
Round 9: Xue      holding [43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41 chah------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Claire wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 3 penalty points Xue (system)
#3 with 7 penalty points Claire (system)
#4 with 8 penalty points Jamal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14359408 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Jamal   : [19, 20, 21, 25, 27, 34, 40, 42, 43, 47]
Table position 1: Matthew : [11, 13, 14, 17, 22, 24, 45, 46, 48, 49]
Table position 2: Eugenius: [16, 18, 26, 28, 29, 30, 31, 35, 36, 39]
Table position 3: Xue     : [10, 12, 15, 23, 32, 33, 37, 38, 41, 44]

Discards:
Jamal    [20, 40, 42]
Matthew  [17, 45, 46]
Eugenius [35, 36, 39]
Xue      [10, 32, 41]

Round 0: Jamal    holding [10, 19, 21, 25, 27, 32, 34, 41, 43, 47] plays the 10 
Round 0: Matthew  holding [11, 13, 14, 20, 22, 24, 40, 42, 48, 49] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 18 26 28 29 30 31 45 46 

16------------------------------------------------------------------------

Round 0: Eugenius holding [16, 17, 18, 26, 28, 29, 30, 31, 45, 46] plays the 16 
Round 0: Xue      holding [12, 15, 23, 33, 35, 36, 37, 38, 39, 44] plays the 12 
Matthew wins the round which contains 7 penalty points

Round 1: Matthew  holding [11, 13, 14, 20, 22, 24, 40, 48, 49] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
17 18 26 28 29 30 31 45 46 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [17, 18, 26, 28, 29, 30, 31, 45, 46] plays the 18 
Round 1: Xue      holding [15, 23, 33, 35, 36, 37, 38, 39, 44] plays the 38 
Round 1: Jamal    holding [19, 21, 25, 27, 32, 34, 41, 43, 47] plays the 25 
Xue wins the round 

Round 2: Xue      holding [15, 23, 33, 35, 36, 37, 39, 44] plays the 39 
Round 2: Jamal    holding [19, 21, 27, 32, 34, 41, 43, 47] plays the 27 
Round 2: Matthew  holding [11, 13, 14, 22, 24, 40, 48, 49] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
17 26 28 29 30 31 45 46 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [17, 26, 28, 29, 30, 31, 45, 46] plays the 26 
Xue wins the round 

Round 3: Xue      holding [15, 23, 33, 35, 36, 37, 44] plays the 15 
Round 3: Jamal    holding [19, 21, 32, 34, 41, 43, 47] plays the 21 
Round 3: Matthew  holding [11, 13, 14, 22, 40, 48, 49] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
17 28 29 30 31 45 46 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [17, 28, 29, 30, 31, 45, 46] plays the 30 
Matthew wins the round 

Round 4: Matthew  holding [11, 13, 14, 22, 48, 49] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
17 28 29 31 45 46 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [17, 28, 29, 31, 45, 46] plays the 28 
Round 4: Xue      holding [23, 33, 35, 36, 37, 44] plays the 36 
Round 4: Jamal    holding [19, 32, 34, 41, 43, 47] plays the 32 
Matthew wins the round 

Round 5: Matthew  holding [11, 13, 14, 22, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 31 45 46 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 5: Eugenius holding [17, 29, 31, 45, 46] plays the 17 
Round 5: Xue      holding [23, 33, 35, 37, 44] plays the 35 
Round 5: Jamal    holding [19, 34, 41, 43, 47] plays the 47 
Matthew wins the round which contains 2 penalty points

Round 6: Matthew  holding [11, 13, 14, 22] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 45 46 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 6: Eugenius holding [29, 31, 45, 46] plays the 46 
Round 6: Xue      holding [23, 33, 37, 44] plays the 44 
Round 6: Jamal    holding [19, 34, 41, 43] plays the 34 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
29 31 45 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 45] plays the 29 
Round 7: Xue      holding [23, 33, 37] plays the 23 
Round 7: Jamal    holding [19, 41, 43] plays the 19 
Round 7: Matthew  holding [11, 13, 22] plays the 13 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
31 45 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 45] plays the 31 
Round 8: Xue      holding [33, 37] plays the 37 
Round 8: Jamal    holding [41, 43] plays the 43 
Round 8: Matthew  holding [11, 22] plays the 11 
Jamal wins the round which contains 4 penalty points

Round 9: Jamal    holding [41] plays the 41 
Round 9: Matthew  holding [22] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Round 9: Xue      holding [33] plays the 33 
Jamal wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Xue (system)
#2 with 4 penalty points Eugenius (dodo.c)
#3 with 5 penalty points Jamal (system)
#4 with 9 penalty points Matthew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15222435 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Connor  : [10, 15, 20, 23, 24, 26, 30, 37, 40, 46]
Table position 1: Eugenius: [18, 21, 27, 28, 31, 38, 39, 43, 48, 49]
Table position 2: Minh    : [11, 12, 13, 16, 19, 25, 29, 33, 44, 47]
Table position 3: Marc    : [14, 17, 22, 32, 34, 35, 36, 41, 42, 45]

Discards:
Connor   [10, 40, 46]
Eugenius [43, 48, 49]
Minh     [19, 25, 44]
Marc     [22, 34, 45]

Round 0: Connor   holding [15, 20, 22, 23, 24, 26, 30, 34, 37, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
10 18 21 27 28 31 38 39 40 46 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 18, 21, 27, 28, 31, 38, 39, 40, 46] plays the 10 
Round 0: Minh     holding [11, 12, 13, 16, 29, 33, 43, 47, 48, 49] plays the 48 
Round 0: Marc     holding [14, 17, 19, 25, 32, 35, 36, 41, 42, 44] plays the 42 
Minh wins the round which contains 7 penalty points

Round 1: Minh     holding [11, 12, 13, 16, 29, 33, 43, 47, 49] plays the 33 
Round 1: Marc     holding [14, 17, 19, 25, 32, 35, 36, 41, 44] plays the 36 
Round 1: Connor   holding [15, 20, 22, 23, 24, 26, 30, 34, 37] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
18 21 27 28 31 38 39 40 46 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [18, 21, 27, 28, 31, 38, 39, 40, 46] plays the 18 
Marc wins the round 

Round 2: Marc     holding [14, 17, 19, 25, 32, 35, 41, 44] plays the 35 
Round 2: Connor   holding [15, 20, 22, 23, 26, 30, 34, 37] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
21 27 28 31 38 39 40 46 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [21, 27, 28, 31, 38, 39, 40, 46] plays the 21 
Round 2: Minh     holding [11, 12, 13, 16, 29, 43, 47, 49] plays the 49 
Minh wins the round 

Round 3: Minh     holding [11, 12, 13, 16, 29, 43, 47] plays the 12 
Round 3: Marc     holding [14, 17, 19, 25, 32, 41, 44] plays the 14 
Round 3: Connor   holding [15, 22, 23, 26, 30, 34, 37] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
27 28 31 38 39 40 46 0 0 0 

27------------------------------------------------------------------------

Round 3: Eugenius holding [27, 28, 31, 38, 39, 40, 46] plays the 27 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
28 31 38 39 40 46 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [28, 31, 38, 39, 40, 46] plays the 28 
Round 4: Minh     holding [11, 13, 16, 29, 43, 47] plays the 16 
Round 4: Marc     holding [17, 19, 25, 32, 41, 44] plays the 44 
Round 4: Connor   holding [15, 23, 26, 30, 34, 37] plays the 30 
Marc wins the round 

Round 5: Marc     holding [17, 19, 25, 32, 41] plays the 32 
Round 5: Connor   holding [15, 23, 26, 34, 37] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
31 38 39 40 46 0 0 0 0 0 

38------------------------------------------------------------------------

Round 5: Eugenius holding [31, 38, 39, 40, 46] plays the 38 
Round 5: Minh     holding [11, 13, 29, 43, 47] plays the 11 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
31 39 40 46 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 6: Eugenius holding [31, 39, 40, 46] plays the 31 
Round 6: Minh     holding [13, 29, 43, 47] plays the 43 
Round 6: Marc     holding [17, 19, 25, 41] plays the 41 
Round 6: Connor   holding [15, 23, 34, 37] plays the 23 
Minh wins the round which contains 4 penalty points

Round 7: Minh     holding [13, 29, 47] plays the 13 
Round 7: Marc     holding [17, 19, 25] plays the 19 
Round 7: Connor   holding [15, 34, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
39 40 46 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 7: Eugenius holding [39, 40, 46] plays the 39 
Connor wins the round which contains 3 penalty points

Round 8: Connor   holding [15, 34] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
40 46 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 8: Eugenius holding [40, 46] plays the 40 
Round 8: Minh     holding [29, 47] plays the 47 
Round 8: Marc     holding [17, 25] plays the 17 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
46 0 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 9: Eugenius holding [46] plays the 46 
Round 9: Minh     holding [29] plays the 29 
Round 9: Marc     holding [25] plays the 25 
Round 9: Connor   holding [15] plays the 15 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Marc (system)
#2 with 3 penalty points Connor (system)
#3 with 4 penalty points Eugenius (dodo.c)
#4 with 11 penalty points Minh (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5425085 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Andrew  : [12, 18, 19, 20, 21, 28, 35, 44, 45, 49]
Table position 1: Eugenius: [11, 13, 15, 22, 24, 26, 29, 38, 41, 47]
Table position 2: Gal     : [14, 16, 17, 25, 27, 30, 32, 33, 39, 40]
Table position 3: Matthew : [10, 23, 31, 34, 36, 37, 42, 43, 46, 48]

Discards:
Andrew   [12, 18, 45]
Eugenius [38, 41, 47]
Gal      [16, 30, 32]
Matthew  [10, 31, 36]

Round 0: Andrew   holding [10, 19, 20, 21, 28, 31, 35, 36, 44, 49] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 13 15 18 22 24 26 29 45 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 13, 15, 18, 22, 24, 26, 29, 45] plays the 12 
Round 0: Gal      holding [14, 17, 25, 27, 33, 38, 39, 40, 41, 47] plays the 25 
Round 0: Matthew  holding [16, 23, 30, 32, 34, 37, 42, 43, 46, 48] plays the 46 
Matthew wins the round 

Round 1: Matthew  holding [16, 23, 30, 32, 34, 37, 42, 43, 48] plays the 34 
Round 1: Andrew   holding [10, 19, 21, 28, 31, 35, 36, 44, 49] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 15 18 22 24 26 29 45 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 15, 18, 22, 24, 26, 29, 45] plays the 18 
Round 1: Gal      holding [14, 17, 27, 33, 38, 39, 40, 41, 47] plays the 40 
Gal wins the round 

Round 2: Gal      holding [14, 17, 27, 33, 38, 39, 41, 47] plays the 27 
Round 2: Matthew  holding [16, 23, 30, 32, 37, 42, 43, 48] plays the 30 
Round 2: Andrew   holding [19, 21, 28, 31, 35, 36, 44, 49] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 15 22 24 26 29 45 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 15, 22, 24, 26, 29, 45] plays the 15 
Andrew wins the round 

Round 3: Andrew   holding [19, 21, 28, 31, 35, 44, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 22 24 26 29 45 0 0 0 

11 chah------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 22, 24, 26, 29, 45] plays the 11 
Round 3: Gal      holding [14, 17, 33, 38, 39, 41, 47] plays the 14 
Round 3: Matthew  holding [16, 23, 32, 37, 42, 43, 48] plays the 42 
Andrew wins the round which contains 8 penalty points

Round 4: Andrew   holding [19, 21, 28, 31, 35, 44] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
13 22 24 26 29 45 0 0 0 0 

13------------------------------------------------------------------------

Round 4: Eugenius holding [13, 22, 24, 26, 29, 45] plays the 13 
Round 4: Gal      holding [17, 33, 38, 39, 41, 47] plays the 47 
Round 4: Matthew  holding [16, 23, 32, 37, 43, 48] plays the 23 
Gal wins the round which contains 4 penalty points

Round 5: Gal      holding [17, 33, 38, 39, 41] plays the 39 
Round 5: Matthew  holding [16, 32, 37, 43, 48] plays the 48 
Round 5: Andrew   holding [21, 28, 31, 35, 44] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
22 24 26 29 45 0 0 0 0 0 

24------------------------------------------------------------------------

Round 5: Eugenius holding [22, 24, 26, 29, 45] plays the 24 
Matthew wins the round 

Round 6: Matthew  holding [16, 32, 37, 43] plays the 16 
Round 6: Andrew   holding [28, 31, 35, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
22 26 29 45 0 0 0 0 0 0 

22------------------------------------------------------------------------

Round 6: Eugenius holding [22, 26, 29, 45] plays the 22 
Round 6: Gal      holding [17, 33, 38, 41] plays the 38 
Andrew wins the round 

Round 7: Andrew   holding [28, 31, 35] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
26 29 45 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [26, 29, 45] plays the 29 
Round 7: Gal      holding [17, 33, 41] plays the 17 
Round 7: Matthew  holding [32, 37, 43] plays the 43 
Matthew wins the round which contains 4 penalty points

Round 8: Matthew  holding [32, 37] plays the 32 
Round 8: Andrew   holding [28, 35] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
26 45 0 0 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 8: Eugenius holding [26, 45] plays the 26 
Round 8: Gal      holding [33, 41] plays the 33 
Matthew wins the round 

Round 9: Matthew  holding [37] plays the 37 
Round 9: Andrew   holding [35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Round 9: Gal      holding [41] plays the 41 
Gal wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Matthew (system)
#3 with 6 penalty points Gal (system)
#4 with 8 penalty points Andrew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 8572364 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Mitchell: [11, 12, 23, 25, 26, 29, 35, 41, 43, 48]
Table position 1: Eugenius: [15, 19, 21, 24, 28, 32, 44, 45, 47, 49]
Table position 2: Aydin   : [10, 13, 14, 18, 27, 30, 33, 36, 39, 42]
Table position 3: Gal     : [16, 17, 20, 22, 31, 34, 37, 38, 40, 46]

Discards:
Mitchell [23, 26, 41]
Eugenius [45, 47, 49]
Aydin    [10, 27, 30]
Gal      [16, 38, 46]

Round 0: Mitchell holding [11, 12, 16, 25, 29, 35, 38, 43, 46, 48] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
15 19 21 23 24 26 28 32 41 44 

24------------------------------------------------------------------------

Round 0: Eugenius holding [15, 19, 21, 23, 24, 26, 28, 32, 41, 44] plays the 24 
Round 0: Aydin    holding [13, 14, 18, 33, 36, 39, 42, 45, 47, 49] plays the 36 
Round 0: Gal      holding [10, 17, 20, 22, 27, 30, 31, 34, 37, 40] plays the 22 
Aydin wins the round 

Round 1: Aydin    holding [13, 14, 18, 33, 39, 42, 45, 47, 49] plays the 33 
Round 1: Gal      holding [10, 17, 20, 27, 30, 31, 34, 37, 40] plays the 30 
Round 1: Mitchell holding [11, 12, 25, 29, 35, 38, 43, 46, 48] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
15 19 21 23 26 28 32 41 44 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [15, 19, 21, 23, 26, 28, 32, 41, 44] plays the 15 
Aydin wins the round 

Round 2: Aydin    holding [13, 14, 18, 39, 42, 45, 47, 49] plays the 14 
Round 2: Gal      holding [10, 17, 20, 27, 31, 34, 37, 40] plays the 20 
Round 2: Mitchell holding [11, 25, 29, 35, 38, 43, 46, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
19 21 23 26 28 32 41 44 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [19, 21, 23, 26, 28, 32, 41, 44] plays the 21 
Mitchell wins the round 

Round 3: Mitchell holding [11, 25, 29, 35, 38, 43, 46] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 26 28 32 41 44 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [19, 23, 26, 28, 32, 41, 44] plays the 28 
Round 3: Aydin    holding [13, 18, 39, 42, 45, 47, 49] plays the 45 
Round 3: Gal      holding [10, 17, 27, 31, 34, 37, 40] plays the 10 
Aydin wins the round 

Round 4: Aydin    holding [13, 18, 39, 42, 47, 49] plays the 42 
Round 4: Gal      holding [17, 27, 31, 34, 37, 40] plays the 40 
Round 4: Mitchell holding [11, 25, 29, 38, 43, 46] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 26 32 41 44 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [19, 23, 26, 32, 41, 44] plays the 26 
Aydin wins the round which contains 7 penalty points

Round 5: Aydin    holding [13, 18, 39, 47, 49] plays the 49 
Round 5: Gal      holding [17, 27, 31, 34, 37] plays the 27 
Round 5: Mitchell holding [11, 25, 29, 43, 46] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 32 41 44 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 5: Eugenius holding [19, 23, 32, 41, 44] plays the 19 
Aydin wins the round which contains 2 penalty points

Round 6: Aydin    holding [13, 18, 39, 47] plays the 18 
Round 6: Gal      holding [17, 31, 34, 37] plays the 34 
Round 6: Mitchell holding [25, 29, 43, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
23 32 41 44 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 6: Eugenius holding [23, 32, 41, 44] plays the 32 
Mitchell wins the round 

Round 7: Mitchell holding [25, 29, 43] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
23 41 44 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius holding [23, 41, 44] plays the 23 
Round 7: Aydin    holding [13, 39, 47] plays the 13 
Round 7: Gal      holding [17, 31, 37] plays the 17 
Mitchell wins the round which contains 4 penalty points

Round 8: Mitchell holding [25, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
41 44 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 8: Eugenius holding [41, 44] plays the 41 
Round 8: Aydin    holding [39, 47] plays the 47 
Round 8: Gal      holding [31, 37] plays the 31 
Aydin wins the round which contains 4 penalty points

Round 9: Aydin    holding [39] plays the 39 
Round 9: Gal      holding [37] plays the 37 
Round 9: Mitchell holding [25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
44 0 0 0 0 0 0 0 0 0 

44 chah------------------------------------------------------------------------

Round 9: Eugenius holding [44] plays the 44 
Aydin wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Gal (system)
#3 with 4 penalty points Mitchell (system)
#4 with 14 penalty points Aydin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13377904 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Mitchell: [10, 13, 14, 19, 20, 26, 31, 37, 39, 47]
Table position 1: Connor  : [11, 15, 17, 24, 25, 28, 33, 40, 45, 46]
Table position 2: Nathan  : [18, 23, 27, 32, 35, 36, 38, 43, 44, 49]
Table position 3: Eugenius: [12, 16, 21, 22, 29, 30, 34, 41, 42, 48]

Discards:
Mitchell [19, 26, 37]
Connor   [17, 25, 45]
Nathan   [23, 32, 36]
Eugenius [41, 42, 48]

Round 0: Mitchell holding [10, 13, 14, 20, 31, 39, 41, 42, 47, 48] plays the 20 
Round 0: Connor   holding [11, 15, 19, 24, 26, 28, 33, 37, 40, 46] plays the 24 
Round 0: Nathan   holding [17, 18, 25, 27, 35, 38, 43, 44, 45, 49] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
12 16 21 22 23 29 30 32 34 36 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 16, 21, 22, 23, 29, 30, 32, 34, 36] plays the 12 
Nathan wins the round 

Round 1: Nathan   holding [17, 18, 25, 27, 38, 43, 44, 45, 49] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
16 21 22 23 29 30 32 34 36 0 

30------------------------------------------------------------------------

Round 1: Eugenius holding [16, 21, 22, 23, 29, 30, 32, 34, 36] plays the 30 
Round 1: Mitchell holding [10, 13, 14, 31, 39, 41, 42, 47, 48] plays the 10 
Round 1: Connor   holding [11, 15, 19, 26, 28, 33, 37, 40, 46] plays the 40 
Connor wins the round 

Round 2: Connor   holding [11, 15, 19, 26, 28, 33, 37, 46] plays the 46 
Round 2: Nathan   holding [17, 18, 27, 38, 43, 44, 45, 49] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
16 21 22 23 29 32 34 36 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [16, 21, 22, 23, 29, 32, 34, 36] plays the 16 
Round 2: Mitchell holding [13, 14, 31, 39, 41, 42, 47, 48] plays the 42 
Connor wins the round which contains 7 penalty points

Round 3: Connor   holding [11, 15, 19, 26, 28, 33, 37] plays the 28 
Round 3: Nathan   holding [17, 18, 27, 43, 44, 45, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
21 22 23 29 32 34 36 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [21, 22, 23, 29, 32, 34, 36] plays the 21 
Round 3: Mitchell holding [13, 14, 31, 39, 41, 47, 48] plays the 48 
Nathan wins the round 

Round 4: Nathan   holding [17, 18, 27, 43, 44, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
22 23 29 32 34 36 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius holding [22, 23, 29, 32, 34, 36] plays the 36 
Round 4: Mitchell holding [13, 14, 31, 39, 41, 47] plays the 39 
Round 4: Connor   holding [11, 15, 19, 26, 33, 37] plays the 15 
Nathan wins the round 

Round 5: Nathan   holding [17, 18, 27, 43, 44] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
22 23 29 32 34 0 0 0 0 0 

22 chah------------------------------------------------------------------------

Round 5: Eugenius holding [22, 23, 29, 32, 34] plays the 22 
Round 5: Mitchell holding [13, 14, 31, 41, 47] plays the 47 
Round 5: Connor   holding [11, 19, 26, 33, 37] plays the 33 
Connor wins the round which contains 1 penalty points

Round 6: Connor   holding [11, 19, 26, 37] plays the 11 
Round 6: Nathan   holding [17, 18, 43, 44] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 32 34 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 29, 32, 34] plays the 23 
Round 6: Mitchell holding [13, 14, 31, 41] plays the 41 
Nathan wins the round which contains 4 penalty points

Round 7: Nathan   holding [17, 18, 44] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
29 32 34 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 32, 34] plays the 29 
Round 7: Mitchell holding [13, 14, 31] plays the 31 
Round 7: Connor   holding [19, 26, 37] plays the 19 
Mitchell wins the round which contains 4 penalty points

Round 8: Mitchell holding [13, 14] plays the 13 
Round 8: Connor   holding [26, 37] plays the 37 
Round 8: Nathan   holding [18, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
32 34 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 8: Eugenius holding [32, 34] plays the 32 
Connor wins the round which contains 2 penalty points

Round 9: Connor   holding [26] plays the 26 
Round 9: Nathan   holding [18] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
34 0 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 9: Eugenius holding [34] plays the 34 
Round 9: Mitchell holding [14] plays the 14 
Eugenius wins the round 


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Mitchell (system)
#2 with 4 penalty points Nathan (system)
#4 with 10 penalty points Connor (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7647296 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 16, 18, 25, 28, 30, 36, 37, 38, 41]
Table position 1: Zachary : [11, 14, 19, 23, 26, 27, 34, 39, 40, 42]
Table position 2: Alex    : [12, 13, 15, 20, 22, 24, 29, 43, 45, 49]
Table position 3: Kangying: [17, 21, 31, 32, 33, 35, 44, 46, 47, 48]

Discards:
Eugenius [37, 38, 41]
Zachary  [14, 39, 42]
Alex     [22, 29, 49]
Kangying [17, 32, 48]


Debug output from Eugenius
------------------------------------------------------------------------
10 16 17 18 25 28 30 32 36 48 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 16, 17, 18, 25, 28, 30, 32, 36, 48] plays the 10 
Round 0: Zachary  holding [11, 19, 23, 26, 27, 34, 37, 38, 40, 41] plays the 26 
Round 0: Alex     holding [12, 13, 14, 15, 20, 24, 39, 42, 43, 45] plays the 24 
Round 0: Kangying holding [21, 22, 29, 31, 33, 35, 44, 46, 47, 49] plays the 35 
Kangying wins the round 

Round 1: Kangying holding [21, 22, 29, 31, 33, 44, 46, 47, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 18 25 28 30 32 36 48 0 

28------------------------------------------------------------------------

Round 1: Eugenius holding [16, 17, 18, 25, 28, 30, 32, 36, 48] plays the 28 
Round 1: Zachary  holding [11, 19, 23, 27, 34, 37, 38, 40, 41] plays the 23 
Round 1: Alex     holding [12, 13, 14, 15, 20, 39, 42, 43, 45] plays the 14 
Kangying wins the round which contains 1 penalty points

Round 2: Kangying holding [21, 22, 29, 31, 33, 44, 46, 47] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 18 25 30 32 36 48 0 0 

17------------------------------------------------------------------------

Round 2: Eugenius holding [16, 17, 18, 25, 30, 32, 36, 48] plays the 17 
Round 2: Zachary  holding [11, 19, 27, 34, 37, 38, 40, 41] plays the 41 
Round 2: Alex     holding [12, 13, 15, 20, 39, 42, 43, 45] plays the 43 
Alex wins the round which contains 4 penalty points

Round 3: Alex     holding [12, 13, 15, 20, 39, 42, 45] plays the 45 
Round 3: Kangying holding [21, 22, 31, 33, 44, 46, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
16 18 25 30 32 36 48 0 0 0 

18------------------------------------------------------------------------

Round 3: Eugenius holding [16, 18, 25, 30, 32, 36, 48] plays the 18 
Round 3: Zachary  holding [11, 19, 27, 34, 37, 38, 40] plays the 27 
Alex wins the round 

Round 4: Alex     holding [12, 13, 15, 20, 39, 42] plays the 12 
Round 4: Kangying holding [21, 22, 31, 44, 46, 47] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
16 25 30 32 36 48 0 0 0 0 

16------------------------------------------------------------------------

Round 4: Eugenius holding [16, 25, 30, 32, 36, 48] plays the 16 
Round 4: Zachary  holding [11, 19, 34, 37, 38, 40] plays the 38 
Kangying wins the round 

Round 5: Kangying holding [21, 22, 31, 46, 47] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
25 30 32 36 48 0 0 0 0 0 

30------------------------------------------------------------------------

Round 5: Eugenius holding [25, 30, 32, 36, 48] plays the 30 
Round 5: Zachary  holding [11, 19, 34, 37, 40] plays the 34 
Round 5: Alex     holding [13, 15, 20, 39, 42] plays the 42 
Alex wins the round which contains 7 penalty points

Round 6: Alex     holding [13, 15, 20, 39] plays the 13 
Round 6: Kangying holding [22, 31, 46, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
25 32 36 48 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 6: Eugenius holding [25, 32, 36, 48] plays the 25 
Round 6: Zachary  holding [11, 19, 37, 40] plays the 37 
Kangying wins the round which contains 3 penalty points

Round 7: Kangying holding [22, 31, 46] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
32 36 48 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 7: Eugenius holding [32, 36, 48] plays the 32 
Round 7: Zachary  holding [11, 19, 40] plays the 11 
Round 7: Alex     holding [15, 20, 39] plays the 39 
Kangying wins the round which contains 2 penalty points

Round 8: Kangying holding [22, 46] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
36 48 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [36, 48] plays the 36 
Round 8: Zachary  holding [19, 40] plays the 40 
Round 8: Alex     holding [15, 20] plays the 20 
Zachary wins the round 

Round 9: Zachary  holding [19] plays the 19 
Round 9: Alex     holding [15] plays the 15 
Round 9: Kangying holding [46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
48 0 0 0 0 0 0 0 0 0 

48------------------------------------------------------------------------

Round 9: Eugenius holding [48] plays the 48 
Zachary wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Zachary (system)
#3 with 6 penalty points Kangying (system)
#4 with 11 penalty points Alex (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2653720 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Aydin   : [10, 12, 13, 15, 16, 17, 19, 22, 24, 44]
Table position 1: Eugenius: [26, 28, 29, 32, 33, 34, 35, 37, 43, 45]
Table position 2: Vincent : [11, 18, 23, 25, 30, 38, 39, 40, 41, 47]
Table position 3: Eleni   : [14, 20, 21, 27, 31, 36, 42, 46, 48, 49]

Discards:
Aydin    [16, 22, 24]
Eugenius [37, 43, 45]
Vincent  [38, 39, 40]
Eleni    [27, 36, 42]

Round 0: Aydin    holding [10, 12, 13, 15, 17, 19, 27, 36, 42, 44] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
16 22 24 26 28 29 32 33 34 35 

24------------------------------------------------------------------------

Round 0: Eugenius holding [16, 22, 24, 26, 28, 29, 32, 33, 34, 35] plays the 24 
Round 0: Vincent  holding [11, 18, 23, 25, 30, 37, 41, 43, 45, 47] plays the 30 
Round 0: Eleni    holding [14, 20, 21, 31, 38, 39, 40, 46, 48, 49] plays the 48 
Eleni wins the round 

Round 1: Eleni    holding [14, 20, 21, 31, 38, 39, 40, 46, 49] plays the 38 
Round 1: Aydin    holding [10, 12, 13, 15, 17, 19, 36, 42, 44] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
16 22 26 28 29 32 33 34 35 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 22, 26, 28, 29, 32, 33, 34, 35] plays the 16 
Round 1: Vincent  holding [11, 18, 23, 25, 37, 41, 43, 45, 47] plays the 18 
Aydin wins the round which contains 7 penalty points

Round 2: Aydin    holding [10, 12, 13, 15, 17, 19, 36, 44] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
22 26 28 29 32 33 34 35 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [22, 26, 28, 29, 32, 33, 34, 35] plays the 22 
Round 2: Vincent  holding [11, 23, 25, 37, 41, 43, 45, 47] plays the 45 
Round 2: Eleni    holding [14, 20, 21, 31, 39, 40, 46, 49] plays the 46 
Eleni wins the round 

Round 3: Eleni    holding [14, 20, 21, 31, 39, 40, 49] plays the 20 
Round 3: Aydin    holding [10, 12, 13, 15, 17, 19, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
26 28 29 32 33 34 35 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [26, 28, 29, 32, 33, 34, 35] plays the 26 
Round 3: Vincent  holding [11, 23, 25, 37, 41, 43, 47] plays the 25 
Aydin wins the round 

Round 4: Aydin    holding [10, 12, 13, 15, 17, 19] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
28 29 32 33 34 35 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [28, 29, 32, 33, 34, 35] plays the 28 
Round 4: Vincent  holding [11, 23, 37, 41, 43, 47] plays the 43 
Round 4: Eleni    holding [14, 21, 31, 39, 40, 49] plays the 39 
Eleni wins the round which contains 1 penalty points

Round 5: Eleni    holding [14, 21, 31, 40, 49] plays the 21 
Round 5: Aydin    holding [10, 13, 15, 17, 19] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
29 32 33 34 35 0 0 0 0 0 

33------------------------------------------------------------------------

Round 5: Eugenius holding [29, 32, 33, 34, 35] plays the 33 
Round 5: Vincent  holding [11, 23, 37, 41, 47] plays the 11 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
29 32 34 35 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 6: Eugenius holding [29, 32, 34, 35] plays the 29 
Round 6: Vincent  holding [23, 37, 41, 47] plays the 41 
Round 6: Eleni    holding [14, 31, 40, 49] plays the 31 
Round 6: Aydin    holding [10, 13, 17, 19] plays the 17 
Vincent wins the round which contains 4 penalty points

Round 7: Vincent  holding [23, 37, 47] plays the 37 
Round 7: Eleni    holding [14, 40, 49] plays the 49 
Round 7: Aydin    holding [10, 13, 19] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
32 34 35 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 7: Eugenius holding [32, 34, 35] plays the 32 
Vincent wins the round which contains 2 penalty points

Round 8: Vincent  holding [23, 47] plays the 23 
Round 8: Eleni    holding [14, 40] plays the 40 
Round 8: Aydin    holding [10, 19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
34 35 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 8: Eugenius holding [34, 35] plays the 34 
Vincent wins the round which contains 2 penalty points

Round 9: Vincent  holding [47] plays the 47 
Round 9: Eleni    holding [14] plays the 14 
Round 9: Aydin    holding [10] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Vincent wins the round which contains 1 penalty points


Finishing Positions

#1 with 1 penalty points Eugenius (dodo.c)
#1 with 1 penalty points Eleni (system)
#3 with 7 penalty points Aydin (system)
#4 with 9 penalty points Vincent (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1385939 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Nathan  : [15, 18, 20, 21, 24, 28, 29, 36, 43, 44]
Table position 1: Claire  : [10, 11, 19, 23, 25, 30, 32, 35, 41, 42]
Table position 2: Eugenius: [13, 22, 26, 27, 31, 33, 37, 38, 40, 46]
Table position 3: George  : [12, 14, 16, 17, 34, 39, 45, 47, 48, 49]

Discards:
Nathan   [18, 24, 28]
Claire   [30, 32, 35]
Eugenius [38, 40, 46]
George   [17, 47, 48]

Round 0: Nathan   holding [15, 17, 20, 21, 29, 36, 43, 44, 47, 48] plays the 20 
Round 0: Claire   holding [10, 11, 18, 19, 23, 24, 25, 28, 41, 42] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
13 22 26 27 30 31 32 33 35 37 

22------------------------------------------------------------------------

Round 0: Eugenius holding [13, 22, 26, 27, 30, 31, 32, 33, 35, 37] plays the 22 
Round 0: George   holding [12, 14, 16, 34, 38, 39, 40, 45, 46, 49] plays the 38 
George wins the round 

Round 1: George   holding [12, 14, 16, 34, 39, 40, 45, 46, 49] plays the 12 
Round 1: Nathan   holding [15, 17, 21, 29, 36, 43, 44, 47, 48] plays the 21 
Round 1: Claire   holding [10, 11, 18, 19, 23, 24, 28, 41, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
13 26 27 30 31 32 33 35 37 0 

26------------------------------------------------------------------------

Round 1: Eugenius holding [13, 26, 27, 30, 31, 32, 33, 35, 37] plays the 26 
Claire wins the round which contains 7 penalty points

Round 2: Claire   holding [10, 11, 18, 19, 23, 24, 28, 41] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 27 30 31 32 33 35 37 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [13, 27, 30, 31, 32, 33, 35, 37] plays the 27 
Round 2: George   holding [14, 16, 34, 39, 40, 45, 46, 49] plays the 14 
Round 2: Nathan   holding [15, 17, 29, 36, 43, 44, 47, 48] plays the 36 
Nathan wins the round 

Round 3: Nathan   holding [15, 17, 29, 43, 44, 47, 48] plays the 15 
Round 3: Claire   holding [10, 11, 18, 19, 23, 28, 41] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
13 30 31 32 33 35 37 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [13, 30, 31, 32, 33, 35, 37] plays the 30 
Round 3: George   holding [16, 34, 39, 40, 45, 46, 49] plays the 45 
George wins the round 

Round 4: George   holding [16, 34, 39, 40, 46, 49] plays the 49 
Round 4: Nathan   holding [17, 29, 43, 44, 47, 48] plays the 47 
Round 4: Claire   holding [11, 18, 19, 23, 28, 41] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
13 31 32 33 35 37 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [13, 31, 32, 33, 35, 37] plays the 35 
George wins the round which contains 1 penalty points

Round 5: George   holding [16, 34, 39, 40, 46] plays the 34 
Round 5: Nathan   holding [17, 29, 43, 44, 48] plays the 48 
Round 5: Claire   holding [11, 18, 19, 23, 41] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
13 31 32 33 37 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [13, 31, 32, 33, 37] plays the 32 
Nathan wins the round 

Round 6: Nathan   holding [17, 29, 43, 44] plays the 29 
Round 6: Claire   holding [11, 19, 23, 41] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
13 31 33 37 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 31, 33, 37] plays the 13 
Round 6: George   holding [16, 39, 40, 46] plays the 40 
Nathan wins the round which contains 3 penalty points

Round 7: Nathan   holding [17, 43, 44] plays the 43 
Round 7: Claire   holding [11, 19, 41] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
31 33 37 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [31, 33, 37] plays the 31 
Round 7: George   holding [16, 39, 46] plays the 39 
Nathan wins the round which contains 3 penalty points

Round 8: Nathan   holding [17, 44] plays the 17 
Round 8: Claire   holding [11, 41] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
33 37 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 8: Eugenius holding [33, 37] plays the 37 
Round 8: George   holding [16, 46] plays the 46 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
33 0 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 9: Eugenius holding [33] plays the 33 
Round 9: George   holding [16] plays the 16 
Round 9: Nathan   holding [44] plays the 44 
Round 9: Claire   holding [41] plays the 41 
Nathan wins the round which contains 1 penalty points


Finishing Positions

#1 with 1 penalty points George (system)
#2 with 3 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Nathan (system)
#3 with 7 penalty points Claire (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6942815 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Trung   : [11, 16, 25, 27, 30, 31, 32, 36, 37, 39]
Table position 1: Michael : [10, 15, 20, 21, 23, 28, 44, 45, 46, 49]
Table position 2: Eugenius: [12, 13, 17, 22, 33, 34, 40, 42, 43, 47]
Table position 3: Harrison: [14, 18, 19, 24, 26, 29, 35, 38, 41, 48]

Discards:
Trung    [25, 27, 32]
Michael  [10, 44, 45]
Eugenius [42, 43, 47]
Harrison [14, 29, 41]

Round 0: Trung    holding [11, 14, 16, 29, 30, 31, 36, 37, 39, 41] plays the 30 
Round 0: Michael  holding [15, 20, 21, 23, 25, 27, 28, 32, 46, 49] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 13 17 22 33 34 40 44 45 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 13, 17, 22, 33, 34, 40, 44, 45] plays the 10 
Round 0: Harrison holding [18, 19, 24, 26, 35, 38, 42, 43, 47, 48] plays the 24 
Trung wins the round 

Round 1: Trung    holding [11, 14, 16, 29, 31, 36, 37, 39, 41] plays the 16 
Round 1: Michael  holding [15, 20, 23, 25, 27, 28, 32, 46, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 17 22 33 34 40 44 45 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 13, 17, 22, 33, 34, 40, 44, 45] plays the 12 
Round 1: Harrison holding [18, 19, 26, 35, 38, 42, 43, 47, 48] plays the 38 
Michael wins the round 

Round 2: Michael  holding [15, 20, 23, 25, 27, 28, 32, 49] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 22 33 34 40 44 45 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 22, 33, 34, 40, 44, 45] plays the 22 
Round 2: Harrison holding [18, 19, 26, 35, 42, 43, 47, 48] plays the 48 
Round 2: Trung    holding [11, 14, 29, 31, 36, 37, 39, 41] plays the 36 
Harrison wins the round 

Round 3: Harrison holding [18, 19, 26, 35, 42, 43, 47] plays the 18 
Round 3: Trung    holding [11, 14, 29, 31, 37, 39, 41] plays the 14 
Round 3: Michael  holding [15, 20, 23, 25, 27, 32, 49] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 33 34 40 44 45 0 0 0 

33------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 33, 34, 40, 44, 45] plays the 33 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 17 34 40 44 45 0 0 0 0 

34------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 34, 40, 44, 45] plays the 34 
Round 4: Harrison holding [19, 26, 35, 42, 43, 47] plays the 42 
Round 4: Trung    holding [11, 29, 31, 37, 39, 41] plays the 31 
Round 4: Michael  holding [15, 20, 23, 25, 27, 49] plays the 20 
Harrison wins the round which contains 8 penalty points

Round 5: Harrison holding [19, 26, 35, 43, 47] plays the 26 
Round 5: Trung    holding [11, 29, 37, 39, 41] plays the 39 
Round 5: Michael  holding [15, 23, 25, 27, 49] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 40 44 45 0 0 0 0 0 

40------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 40, 44, 45] plays the 40 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 17 44 45 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 17, 44, 45] plays the 13 
Round 6: Harrison holding [19, 35, 43, 47] plays the 43 
Round 6: Trung    holding [11, 29, 37, 41] plays the 11 
Round 6: Michael  holding [15, 25, 27, 49] plays the 27 
Harrison wins the round which contains 3 penalty points

Round 7: Harrison holding [19, 35, 47] plays the 47 
Round 7: Trung    holding [29, 37, 41] plays the 41 
Round 7: Michael  holding [15, 25, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
17 44 45 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 44, 45] plays the 17 
Harrison wins the round which contains 3 penalty points

Round 8: Harrison holding [19, 35] plays the 19 
Round 8: Trung    holding [29, 37] plays the 37 
Round 8: Michael  holding [25, 49] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
44 45 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 8: Eugenius holding [44, 45] plays the 44 
Trung wins the round which contains 2 penalty points

Round 9: Trung    holding [29] plays the 29 
Round 9: Michael  holding [49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Round 9: Harrison holding [35] plays the 35 
Trung wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Michael (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 3 penalty points Trung (system)
#4 with 14 penalty points Harrison (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 4825384 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Connor  : [13, 18, 29, 31, 33, 34, 36, 38, 44, 45]
Table position 1: Eugenius: [19, 25, 27, 28, 30, 32, 35, 37, 41, 47]
Table position 2: George  : [11, 14, 20, 21, 22, 23, 39, 42, 48, 49]
Table position 3: Heather : [10, 12, 15, 16, 17, 24, 26, 40, 43, 46]

Discards:
Connor   [13, 29, 36]
Eugenius [37, 41, 47]
George   [11, 20, 48]
Heather  [24, 26, 43]

Round 0: Connor   holding [18, 24, 26, 31, 33, 34, 38, 43, 44, 45] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 27 28 29 30 32 35 36 

28------------------------------------------------------------------------

Round 0: Eugenius holding [13, 19, 25, 27, 28, 29, 30, 32, 35, 36] plays the 28 
Round 0: George   holding [14, 21, 22, 23, 37, 39, 41, 42, 47, 49] plays the 42 
Round 0: Heather  holding [10, 11, 12, 15, 16, 17, 20, 40, 46, 48] plays the 16 
George wins the round which contains 7 penalty points

Round 1: George   holding [14, 21, 22, 23, 37, 39, 41, 47, 49] plays the 22 
Round 1: Heather  holding [10, 11, 12, 15, 17, 20, 40, 46, 48] plays the 40 
Round 1: Connor   holding [18, 24, 26, 31, 33, 34, 43, 44, 45] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 27 29 30 32 35 36 0 

30------------------------------------------------------------------------

Round 1: Eugenius holding [13, 19, 25, 27, 29, 30, 32, 35, 36] plays the 30 
Connor wins the round 

Round 2: Connor   holding [18, 24, 26, 31, 33, 34, 43, 45] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 27 29 32 35 36 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [13, 19, 25, 27, 29, 32, 35, 36] plays the 27 
Round 2: George   holding [14, 21, 23, 37, 39, 41, 47, 49] plays the 39 
Round 2: Heather  holding [10, 11, 12, 15, 17, 20, 46, 48] plays the 12 
George wins the round 

Round 3: George   holding [14, 21, 23, 37, 41, 47, 49] plays the 14 
Round 3: Heather  holding [10, 11, 15, 17, 20, 46, 48] plays the 48 
Round 3: Connor   holding [18, 26, 31, 33, 34, 43, 45] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 29 32 35 36 0 0 0 

32------------------------------------------------------------------------

Round 3: Eugenius holding [13, 19, 25, 29, 32, 35, 36] plays the 32 
Heather wins the round 

Round 4: Heather  holding [10, 11, 15, 17, 20, 46] plays the 20 
Round 4: Connor   holding [26, 31, 33, 34, 43, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 29 35 36 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [13, 19, 25, 29, 35, 36] plays the 25 
Round 4: George   holding [21, 23, 37, 41, 47, 49] plays the 37 
Connor wins the round which contains 1 penalty points

Round 5: Connor   holding [26, 31, 33, 34, 43] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 29 35 36 0 0 0 0 0 

36------------------------------------------------------------------------

Round 5: Eugenius holding [13, 19, 29, 35, 36] plays the 36 
Round 5: George   holding [21, 23, 41, 47, 49] plays the 23 
Round 5: Heather  holding [10, 11, 15, 17, 46] plays the 10 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 19 29 35 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 19, 29, 35] plays the 13 
Round 6: George   holding [21, 41, 47, 49] plays the 47 
Round 6: Heather  holding [11, 15, 17, 46] plays the 17 
Round 6: Connor   holding [31, 33, 34, 43] plays the 43 
George wins the round which contains 4 penalty points

Round 7: George   holding [21, 41, 49] plays the 21 
Round 7: Heather  holding [11, 15, 46] plays the 15 
Round 7: Connor   holding [31, 33, 34] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 35 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 7: Eugenius holding [19, 29, 35] plays the 35 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
19 29 0 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 8: Eugenius holding [19, 29] plays the 19 
Round 8: George   holding [41, 49] plays the 41 
Round 8: Heather  holding [11, 46] plays the 11 
Round 8: Connor   holding [31, 34] plays the 31 
George wins the round which contains 4 penalty points

Round 9: George   holding [49] plays the 49 
Round 9: Heather  holding [46] plays the 46 
Round 9: Connor   holding [34] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
29 0 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 9: Eugenius holding [29] plays the 29 
George wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Heather (system)
#2 with 1 penalty points Connor (system)
#2 with 1 penalty points Eugenius (dodo.c)
#4 with 16 penalty points George (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1273651 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Costa   : [16, 17, 20, 23, 29, 37, 39, 40, 47, 49]
Table position 1: Gal     : [11, 15, 19, 26, 31, 36, 38, 41, 42, 44]
Table position 2: Eugenius: [10, 18, 22, 24, 27, 30, 32, 45, 46, 48]
Table position 3: Reede   : [12, 13, 14, 21, 25, 28, 33, 34, 35, 43]

Discards:
Costa    [16, 29, 47]
Gal      [19, 31, 42]
Eugenius [45, 46, 48]
Reede    [12, 13, 33]

Round 0: Costa    holding [12, 13, 17, 20, 23, 33, 37, 39, 40, 49] plays the 20 
Round 0: Gal      holding [11, 15, 16, 26, 29, 36, 38, 41, 44, 47] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
10 18 19 22 24 27 30 31 32 42 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 18, 19, 22, 24, 27, 30, 31, 32, 42] plays the 10 
Round 0: Reede    holding [14, 21, 25, 28, 34, 35, 43, 45, 46, 48] plays the 34 
Reede wins the round 

Round 1: Reede    holding [14, 21, 25, 28, 35, 43, 45, 46, 48] plays the 48 
Round 1: Costa    holding [12, 13, 17, 23, 33, 37, 39, 40, 49] plays the 33 
Round 1: Gal      holding [11, 15, 26, 29, 36, 38, 41, 44, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
18 19 22 24 27 30 31 32 42 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [18, 19, 22, 24, 27, 30, 31, 32, 42] plays the 18 
Reede wins the round 

Round 2: Reede    holding [14, 21, 25, 28, 35, 43, 45, 46] plays the 21 
Round 2: Costa    holding [12, 13, 17, 23, 37, 39, 40, 49] plays the 39 
Round 2: Gal      holding [11, 15, 29, 36, 38, 41, 44, 47] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 24 27 30 31 32 42 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [19, 22, 24, 27, 30, 31, 32, 42] plays the 24 
Costa wins the round 

Round 3: Costa    holding [12, 13, 17, 23, 37, 40, 49] plays the 49 
Round 3: Gal      holding [11, 29, 36, 38, 41, 44, 47] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 27 30 31 32 42 0 0 0 

42------------------------------------------------------------------------

Round 3: Eugenius holding [19, 22, 27, 30, 31, 32, 42] plays the 42 
Round 3: Reede    holding [14, 25, 28, 35, 43, 45, 46] plays the 14 
Costa wins the round which contains 8 penalty points

Round 4: Costa    holding [12, 13, 17, 23, 37, 40] plays the 23 
Round 4: Gal      holding [11, 36, 38, 41, 44, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 27 30 31 32 0 0 0 0 

19------------------------------------------------------------------------

Round 4: Eugenius holding [19, 22, 27, 30, 31, 32] plays the 19 
Round 4: Reede    holding [25, 28, 35, 43, 45, 46] plays the 43 
Gal wins the round which contains 4 penalty points

Round 5: Gal      holding [11, 36, 38, 41, 44] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
22 27 30 31 32 0 0 0 0 0 

22------------------------------------------------------------------------

Round 5: Eugenius holding [22, 27, 30, 31, 32] plays the 22 
Round 5: Reede    holding [25, 28, 35, 45, 46] plays the 45 
Round 5: Costa    holding [12, 13, 17, 37, 40] plays the 40 
Reede wins the round 

Round 6: Reede    holding [25, 28, 35, 46] plays the 25 
Round 6: Costa    holding [12, 13, 17, 37] plays the 17 
Round 6: Gal      holding [11, 38, 41, 44] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
27 30 31 32 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 6: Eugenius holding [27, 30, 31, 32] plays the 30 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
27 31 32 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [27, 31, 32] plays the 27 
Round 7: Reede    holding [28, 35, 46] plays the 46 
Round 7: Costa    holding [12, 13, 37] plays the 12 
Round 7: Gal      holding [11, 41, 44] plays the 44 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
31 32 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 32] plays the 31 
Round 8: Reede    holding [28, 35] plays the 28 
Round 8: Costa    holding [13, 37] plays the 37 
Round 8: Gal      holding [11, 41] plays the 41 
Gal wins the round which contains 3 penalty points

Round 9: Gal      holding [11] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
32 0 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 9: Eugenius holding [32] plays the 32 
Round 9: Reede    holding [35] plays the 35 
Round 9: Costa    holding [13] plays the 13 
Costa wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Reede (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Gal (system)
#4 with 10 penalty points Costa (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14411349 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Elizabeth: [10, 14, 21, 30, 31, 39, 40, 42, 43, 48]
Table position 1: Eugenius : [11, 13, 16, 18, 24, 26, 28, 29, 47, 49]
Table position 2: Connor   : [15, 17, 20, 23, 25, 32, 33, 35, 44, 46]
Table position 3: David    : [12, 19, 22, 27, 34, 36, 37, 38, 41, 45]

Discards:
Elizabeth [14, 40, 43]
Eugenius  [29, 47, 49]
Connor    [32, 33, 46]
David     [27, 37, 45]

Round 0: Elizabeth holding [10, 21, 27, 30, 31, 37, 39, 42, 45, 48] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 14 16 18 24 26 28 40 43 

14------------------------------------------------------------------------

Round 0: Eugenius  holding [11, 13, 14, 16, 18, 24, 26, 28, 40, 43] plays the 14 
Round 0: Connor    holding [15, 17, 20, 23, 25, 29, 35, 44, 47, 49] plays the 20 
Round 0: David     holding [12, 19, 22, 32, 33, 34, 36, 38, 41, 46] plays the 32 
David wins the round 

Round 1: David     holding [12, 19, 22, 33, 34, 36, 38, 41, 46] plays the 38 
Round 1: Elizabeth holding [21, 27, 30, 31, 37, 39, 42, 45, 48] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 16 18 24 26 28 40 43 0 

16------------------------------------------------------------------------

Round 1: Eugenius  holding [11, 13, 16, 18, 24, 26, 28, 40, 43] plays the 16 
Round 1: Connor    holding [15, 17, 23, 25, 29, 35, 44, 47, 49] plays the 44 
Connor wins the round which contains 7 penalty points

Round 2: Connor    holding [15, 17, 23, 25, 29, 35, 47, 49] plays the 49 
Round 2: David     holding [12, 19, 22, 33, 34, 36, 41, 46] plays the 34 
Round 2: Elizabeth holding [21, 27, 30, 31, 37, 39, 45, 48] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 18 24 26 28 40 43 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius  holding [11, 13, 18, 24, 26, 28, 40, 43] plays the 28 
Connor wins the round 

Round 3: Connor    holding [15, 17, 23, 25, 29, 35, 47] plays the 15 
Round 3: David     holding [12, 19, 22, 33, 36, 41, 46] plays the 36 
Round 3: Elizabeth holding [27, 30, 31, 37, 39, 45, 48] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 18 24 26 40 43 0 0 0 

18------------------------------------------------------------------------

Round 3: Eugenius  holding [11, 13, 18, 24, 26, 40, 43] plays the 18 
Elizabeth wins the round 

Round 4: Elizabeth holding [27, 30, 31, 37, 45, 48] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 24 26 40 43 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius  holding [11, 13, 24, 26, 40, 43] plays the 24 
Round 4: Connor    holding [17, 23, 25, 29, 35, 47] plays the 25 
Round 4: David     holding [12, 19, 22, 33, 41, 46] plays the 12 
Elizabeth wins the round 

Round 5: Elizabeth holding [27, 30, 31, 37, 48] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 26 40 43 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius  holding [11, 13, 26, 40, 43] plays the 11 
Round 5: Connor    holding [17, 23, 29, 35, 47] plays the 47 
Round 5: David     holding [19, 22, 33, 41, 46] plays the 33 
David wins the round which contains 2 penalty points

Round 6: David     holding [19, 22, 41, 46] plays the 41 
Round 6: Elizabeth holding [30, 31, 37, 48] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
13 26 40 43 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius  holding [13, 26, 40, 43] plays the 13 
Round 6: Connor    holding [17, 23, 29, 35] plays the 23 
David wins the round which contains 4 penalty points

Round 7: David     holding [19, 22, 46] plays the 22 
Round 7: Elizabeth holding [30, 31, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
26 40 43 0 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 7: Eugenius  holding [26, 40, 43] plays the 26 
Round 7: Connor    holding [17, 29, 35] plays the 35 
Elizabeth wins the round 

Round 8: Elizabeth holding [30, 31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
40 43 0 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 8: Eugenius  holding [40, 43] plays the 43 
Round 8: Connor    holding [17, 29] plays the 17 
Round 8: David     holding [19, 46] plays the 19 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 9: Eugenius  holding [40] plays the 40 
Round 9: Connor    holding [29] plays the 29 
Round 9: David     holding [46] plays the 46 
Round 9: Elizabeth holding [30] plays the 30 
David wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Elizabeth (system)
#2 with 4 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Connor (system)
#3 with 7 penalty points David (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 8625850 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 17, 24, 27, 31, 32, 36, 39, 41, 46]
Table position 1: Emily   : [12, 14, 20, 23, 26, 30, 34, 37, 42, 44]
Table position 2: Eleni   : [10, 13, 16, 25, 29, 38, 43, 45, 47, 49]
Table position 3: Reede   : [15, 18, 19, 21, 22, 28, 33, 35, 40, 48]

Discards:
Eugenius [39, 41, 46]
Emily    [23, 26, 44]
Eleni    [43, 45, 49]
Reede    [22, 28, 33]


Debug output from Eugenius
------------------------------------------------------------------------
11 17 22 24 27 28 31 32 33 36 

22------------------------------------------------------------------------

Round 0: Eugenius holding [11, 17, 22, 24, 27, 28, 31, 32, 33, 36] plays the 22 
Round 0: Emily    holding [12, 14, 20, 30, 34, 37, 39, 41, 42, 46] plays the 46 
Round 0: Eleni    holding [10, 13, 16, 23, 25, 26, 29, 38, 44, 47] plays the 44 
Round 0: Reede    holding [15, 18, 19, 21, 35, 40, 43, 45, 48, 49] plays the 40 
Emily wins the round 

Round 1: Emily    holding [12, 14, 20, 30, 34, 37, 39, 41, 42] plays the 30 
Round 1: Eleni    holding [10, 13, 16, 23, 25, 26, 29, 38, 47] plays the 26 
Round 1: Reede    holding [15, 18, 19, 21, 35, 43, 45, 48, 49] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 24 27 28 31 32 33 36 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [11, 17, 24, 27, 28, 31, 32, 33, 36] plays the 24 
Emily wins the round 

Round 2: Emily    holding [12, 14, 20, 34, 37, 39, 41, 42] plays the 39 
Round 2: Eleni    holding [10, 13, 16, 23, 25, 29, 38, 47] plays the 16 
Round 2: Reede    holding [15, 19, 21, 35, 43, 45, 48, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 27 28 31 32 33 36 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [11, 17, 27, 28, 31, 32, 33, 36] plays the 27 
Emily wins the round 

Round 3: Emily    holding [12, 14, 20, 34, 37, 41, 42] plays the 42 
Round 3: Eleni    holding [10, 13, 23, 25, 29, 38, 47] plays the 38 
Round 3: Reede    holding [19, 21, 35, 43, 45, 48, 49] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 28 31 32 33 36 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [11, 17, 28, 31, 32, 33, 36] plays the 28 
Emily wins the round which contains 7 penalty points

Round 4: Emily    holding [12, 14, 20, 34, 37, 41] plays the 12 
Round 4: Eleni    holding [10, 13, 23, 25, 29, 47] plays the 10 
Round 4: Reede    holding [19, 21, 43, 45, 48, 49] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 31 32 33 36 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [11, 17, 31, 32, 33, 36] plays the 32 
Reede wins the round 

Round 5: Reede    holding [19, 21, 43, 48, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 31 33 36 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 17, 31, 33, 36] plays the 11 
Round 5: Emily    holding [14, 20, 34, 37, 41] plays the 14 
Round 5: Eleni    holding [13, 23, 25, 29, 47] plays the 25 
Reede wins the round which contains 1 penalty points

Round 6: Reede    holding [19, 21, 43, 48] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 33 36 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 31, 33, 36] plays the 17 
Round 6: Emily    holding [20, 34, 37, 41] plays the 41 
Round 6: Eleni    holding [13, 23, 29, 47] plays the 29 
Reede wins the round which contains 4 penalty points

Round 7: Reede    holding [19, 21, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
31 33 36 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 7: Eugenius holding [31, 33, 36] plays the 33 
Round 7: Emily    holding [20, 34, 37] plays the 34 
Round 7: Eleni    holding [13, 23, 47] plays the 47 
Reede wins the round which contains 1 penalty points

Round 8: Reede    holding [19, 21] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
31 36 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [31, 36] plays the 36 
Round 8: Emily    holding [20, 37] plays the 37 
Round 8: Eleni    holding [13, 23] plays the 13 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Round 9: Emily    holding [20] plays the 20 
Round 9: Eleni    holding [23] plays the 23 
Round 9: Reede    holding [19] plays the 19 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eleni (system)
#2 with 5 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Reede (system)
#4 with 7 penalty points Emily (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12656101 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Alex    : [11, 18, 33, 36, 37, 38, 40, 41, 42, 49]
Table position 1: Eugenius: [14, 17, 21, 23, 26, 29, 31, 43, 44, 46]
Table position 2: David   : [10, 15, 16, 22, 25, 27, 28, 45, 47, 48]
Table position 3: Gal     : [12, 13, 19, 20, 24, 30, 32, 34, 35, 39]

Discards:
Alex     [18, 36, 40]
Eugenius [43, 44, 46]
David    [22, 25, 27]
Gal      [19, 35, 39]

Round 0: Alex     holding [11, 19, 33, 35, 37, 38, 39, 41, 42, 49] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 18 21 23 26 29 31 36 40 

18------------------------------------------------------------------------

Round 0: Eugenius holding [14, 17, 18, 21, 23, 26, 29, 31, 36, 40] plays the 18 
Round 0: David    holding [10, 15, 16, 28, 43, 44, 45, 46, 47, 48] plays the 45 
Round 0: Gal      holding [12, 13, 20, 22, 24, 25, 27, 30, 32, 34] plays the 27 
David wins the round 

Round 1: David    holding [10, 15, 16, 28, 43, 44, 46, 47, 48] plays the 10 
Round 1: Gal      holding [12, 13, 20, 22, 24, 25, 30, 32, 34] plays the 30 
Round 1: Alex     holding [11, 19, 33, 35, 37, 38, 41, 42, 49] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 21 23 26 29 31 36 40 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 17, 21, 23, 26, 29, 31, 36, 40] plays the 14 
Alex wins the round 

Round 2: Alex     holding [11, 19, 33, 35, 37, 41, 42, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
17 21 23 26 29 31 36 40 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [17, 21, 23, 26, 29, 31, 36, 40] plays the 21 
Round 2: David    holding [15, 16, 28, 43, 44, 46, 47, 48] plays the 28 
Round 2: Gal      holding [12, 13, 20, 22, 24, 25, 32, 34] plays the 12 
Alex wins the round 

Round 3: Alex     holding [11, 19, 33, 35, 37, 41, 42] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 26 29 31 36 40 0 0 0 

40------------------------------------------------------------------------

Round 3: Eugenius holding [17, 23, 26, 29, 31, 36, 40] plays the 40 
Round 3: David    holding [15, 16, 43, 44, 46, 47, 48] plays the 15 
Round 3: Gal      holding [13, 20, 22, 24, 25, 32, 34] plays the 20 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
17 23 26 29 31 36 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [17, 23, 26, 29, 31, 36] plays the 26 
Round 4: David    holding [16, 43, 44, 46, 47, 48] plays the 44 
Round 4: Gal      holding [13, 22, 24, 25, 32, 34] plays the 32 
Round 4: Alex     holding [11, 19, 33, 37, 41, 42] plays the 42 
David wins the round which contains 7 penalty points

Round 5: David    holding [16, 43, 46, 47, 48] plays the 46 
Round 5: Gal      holding [13, 22, 24, 25, 34] plays the 34 
Round 5: Alex     holding [11, 19, 33, 37, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 29 31 36 0 0 0 0 0 

36------------------------------------------------------------------------

Round 5: Eugenius holding [17, 23, 29, 31, 36] plays the 36 
David wins the round which contains 1 penalty points

Round 6: David    holding [16, 43, 47, 48] plays the 43 
Round 6: Gal      holding [13, 22, 24, 25] plays the 13 
Round 6: Alex     holding [11, 19, 33, 37] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 29 31 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 23, 29, 31] plays the 17 
David wins the round which contains 4 penalty points

Round 7: David    holding [16, 47, 48] plays the 16 
Round 7: Gal      holding [22, 24, 25] plays the 22 
Round 7: Alex     holding [11, 33, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 31 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 7: Eugenius holding [23, 29, 31] plays the 23 
Gal wins the round which contains 2 penalty points

Round 8: Gal      holding [24, 25] plays the 25 
Round 8: Alex     holding [11, 33] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 8: Eugenius holding [29, 31] plays the 29 
Round 8: David    holding [47, 48] plays the 48 
Gal wins the round which contains 2 penalty points

Round 9: Gal      holding [24] plays the 24 
Round 9: Alex     holding [33] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Round 9: David    holding [47] plays the 47 
Alex wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 2 penalty points Alex (system)
#3 with 4 penalty points Gal (system)
#4 with 12 penalty points David (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 8744173 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Braedon : [17, 18, 21, 23, 27, 32, 38, 40, 41, 47]
Table position 1: Sabrina : [11, 12, 13, 16, 19, 20, 31, 35, 46, 49]
Table position 2: Minh    : [10, 22, 25, 28, 30, 34, 36, 37, 42, 48]
Table position 3: Eugenius: [14, 15, 24, 26, 29, 33, 39, 43, 44, 45]

Discards:
Braedon  [38, 40, 47]
Sabrina  [12, 16, 20]
Minh     [25, 36, 37]
Eugenius [43, 44, 45]

Round 0: Braedon  holding [17, 18, 21, 23, 27, 32, 41, 43, 44, 45] plays the 32 
Round 0: Sabrina  holding [11, 13, 19, 31, 35, 38, 40, 46, 47, 49] plays the 38 
Round 0: Minh     holding [10, 12, 16, 20, 22, 28, 30, 34, 42, 48] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
14 15 24 25 26 29 33 36 37 39 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 15, 24, 25, 26, 29, 33, 36, 37, 39] plays the 14 
Minh wins the round which contains 7 penalty points

Round 1: Minh     holding [10, 12, 16, 20, 22, 28, 30, 34, 48] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
15 24 25 26 29 33 36 37 39 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [15, 24, 25, 26, 29, 33, 36, 37, 39] plays the 24 
Round 1: Braedon  holding [17, 18, 21, 23, 27, 41, 43, 44, 45] plays the 18 
Round 1: Sabrina  holding [11, 13, 19, 31, 35, 40, 46, 47, 49] plays the 40 
Sabrina wins the round 

Round 2: Sabrina  holding [11, 13, 19, 31, 35, 46, 47, 49] plays the 46 
Round 2: Minh     holding [10, 12, 16, 20, 22, 28, 30, 48] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
15 25 26 29 33 36 37 39 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [15, 25, 26, 29, 33, 36, 37, 39] plays the 26 
Round 2: Braedon  holding [17, 21, 23, 27, 41, 43, 44, 45] plays the 44 
Sabrina wins the round 

Round 3: Sabrina  holding [11, 13, 19, 31, 35, 47, 49] plays the 49 
Round 3: Minh     holding [12, 16, 20, 22, 28, 30, 48] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
15 25 29 33 36 37 39 0 0 0 

15 chah------------------------------------------------------------------------

Round 3: Eugenius holding [15, 25, 29, 33, 36, 37, 39] plays the 15 
Round 3: Braedon  holding [17, 21, 23, 27, 41, 43, 45] plays the 21 
Sabrina wins the round 

Round 4: Sabrina  holding [11, 13, 19, 31, 35, 47] plays the 35 
Round 4: Minh     holding [12, 16, 20, 22, 30, 48] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 33 36 37 39 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [25, 29, 33, 36, 37, 39] plays the 25 
Round 4: Braedon  holding [17, 23, 27, 41, 43, 45] plays the 45 
Braedon wins the round 

Round 5: Braedon  holding [17, 23, 27, 41, 43] plays the 27 
Round 5: Sabrina  holding [11, 13, 19, 31, 47] plays the 31 
Round 5: Minh     holding [12, 16, 22, 30, 48] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
29 33 36 37 39 0 0 0 0 0 

33------------------------------------------------------------------------

Round 5: Eugenius holding [29, 33, 36, 37, 39] plays the 33 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
29 36 37 39 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 6: Eugenius holding [29, 36, 37, 39] plays the 29 
Round 6: Braedon  holding [17, 23, 41, 43] plays the 41 
Round 6: Sabrina  holding [11, 13, 19, 47] plays the 11 
Round 6: Minh     holding [16, 22, 30, 48] plays the 48 
Braedon wins the round which contains 3 penalty points

Round 7: Braedon  holding [17, 23, 43] plays the 43 
Round 7: Sabrina  holding [13, 19, 47] plays the 19 
Round 7: Minh     holding [16, 22, 30] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
36 37 39 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 7: Eugenius holding [36, 37, 39] plays the 37 
Braedon wins the round which contains 3 penalty points

Round 8: Braedon  holding [17, 23] plays the 17 
Round 8: Sabrina  holding [13, 47] plays the 13 
Round 8: Minh     holding [22, 30] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
36 39 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [36, 39] plays the 36 
Braedon wins the round which contains 2 penalty points

Round 9: Braedon  holding [23] plays the 23 
Round 9: Sabrina  holding [47] plays the 47 
Round 9: Minh     holding [22] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Sabrina wins the round which contains 2 penalty points


Finishing Positions

#1 with 1 penalty points Eugenius (dodo.c)
#2 with 2 penalty points Sabrina (system)
#3 with 7 penalty points Minh (system)
#4 with 8 penalty points Braedon (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11380518 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Jamal   : [12, 13, 17, 19, 24, 28, 33, 38, 39, 40]
Table position 1: Oscar   : [15, 16, 26, 36, 42, 43, 45, 46, 47, 48]
Table position 2: Alex    : [10, 11, 14, 20, 23, 31, 34, 37, 41, 44]
Table position 3: Eugenius: [18, 21, 22, 25, 27, 29, 30, 32, 35, 49]

Discards:
Jamal    [24, 28, 39]
Oscar    [15, 46, 48]
Alex     [10, 14, 31]
Eugenius [32, 35, 49]

Round 0: Jamal    holding [12, 13, 17, 19, 32, 33, 35, 38, 40, 49] plays the 33 
Round 0: Oscar    holding [16, 24, 26, 28, 36, 39, 42, 43, 45, 47] plays the 45 
Round 0: Alex     holding [11, 15, 20, 23, 34, 37, 41, 44, 46, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
10 14 18 21 22 25 27 29 30 31 

18------------------------------------------------------------------------

Round 0: Eugenius holding [10, 14, 18, 21, 22, 25, 27, 29, 30, 31] plays the 18 
Alex wins the round 

Round 1: Alex     holding [11, 15, 20, 23, 34, 37, 41, 44, 46] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
10 14 21 22 25 27 29 30 31 0 

10------------------------------------------------------------------------

Round 1: Eugenius holding [10, 14, 21, 22, 25, 27, 29, 30, 31] plays the 10 
Round 1: Jamal    holding [12, 13, 17, 19, 32, 35, 38, 40, 49] plays the 32 
Round 1: Oscar    holding [16, 24, 26, 28, 36, 39, 42, 43, 47] plays the 16 
Jamal wins the round 

Round 2: Jamal    holding [12, 13, 17, 19, 35, 38, 40, 49] plays the 35 
Round 2: Oscar    holding [24, 26, 28, 36, 39, 42, 43, 47] plays the 42 
Round 2: Alex     holding [11, 15, 23, 34, 37, 41, 44, 46] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
14 21 22 25 27 29 30 31 0 0 

14------------------------------------------------------------------------

Round 2: Eugenius holding [14, 21, 22, 25, 27, 29, 30, 31] plays the 14 
Oscar wins the round which contains 7 penalty points

Round 3: Oscar    holding [24, 26, 28, 36, 39, 43, 47] plays the 36 
Round 3: Alex     holding [11, 23, 34, 37, 41, 44, 46] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
21 22 25 27 29 30 31 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [21, 22, 25, 27, 29, 30, 31] plays the 21 
Round 3: Jamal    holding [12, 13, 17, 19, 38, 40, 49] plays the 38 
Alex wins the round 

Round 4: Alex     holding [11, 23, 34, 37, 41, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 27 29 30 31 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius holding [22, 25, 27, 29, 30, 31] plays the 22 
Round 4: Jamal    holding [12, 13, 17, 19, 40, 49] plays the 40 
Round 4: Oscar    holding [24, 26, 28, 39, 43, 47] plays the 26 
Alex wins the round 

Round 5: Alex     holding [11, 23, 34, 37, 41] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
25 27 29 30 31 0 0 0 0 0 

30------------------------------------------------------------------------

Round 5: Eugenius holding [25, 27, 29, 30, 31] plays the 30 
Round 5: Jamal    holding [12, 13, 17, 19, 49] plays the 12 
Round 5: Oscar    holding [24, 28, 39, 43, 47] plays the 28 
Alex wins the round 

Round 6: Alex     holding [11, 23, 37, 41] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
25 27 29 31 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 6: Eugenius holding [25, 27, 29, 31] plays the 29 
Round 6: Jamal    holding [13, 17, 19, 49] plays the 17 
Round 6: Oscar    holding [24, 39, 43, 47] plays the 43 
Oscar wins the round which contains 4 penalty points

Round 7: Oscar    holding [24, 39, 47] plays the 39 
Round 7: Alex     holding [11, 37, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
25 27 31 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [25, 27, 31] plays the 27 
Round 7: Jamal    holding [13, 19, 49] plays the 19 
Oscar wins the round which contains 2 penalty points

Round 8: Oscar    holding [24, 47] plays the 24 
Round 8: Alex     holding [11, 37] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
25 31 0 0 0 0 0 0 0 0 

25 chah------------------------------------------------------------------------

Round 8: Eugenius holding [25, 31] plays the 25 
Round 8: Jamal    holding [13, 49] plays the 49 
Oscar wins the round which contains 1 penalty points

Round 9: Oscar    holding [47] plays the 47 
Round 9: Alex     holding [37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Round 9: Jamal    holding [13] plays the 13 
Oscar wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Jamal (system)
#1 with 0 penalty points Alex (system)
#1 with 0 penalty points Eugenius (dodo.c)
#4 with 18 penalty points Oscar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5754348 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [17, 20, 22, 25, 31, 43, 44, 46, 47, 48]
Table position 1: Matthew : [15, 18, 19, 23, 24, 34, 35, 36, 42, 45]
Table position 2: Gal     : [11, 13, 14, 26, 27, 29, 32, 33, 39, 49]
Table position 3: Connor  : [10, 12, 16, 21, 28, 30, 37, 38, 40, 41]

Discards:
Eugenius [46, 47, 48]
Matthew  [18, 34, 35]
Gal      [11, 29, 49]
Connor   [30, 37, 38]


Debug output from Eugenius
------------------------------------------------------------------------
17 20 22 25 30 31 37 38 43 44 

20------------------------------------------------------------------------

Round 0: Eugenius holding [17, 20, 22, 25, 30, 31, 37, 38, 43, 44] plays the 20 
Round 0: Matthew  holding [15, 19, 23, 24, 36, 42, 45, 46, 47, 48] plays the 45 
Round 0: Gal      holding [13, 14, 18, 26, 27, 32, 33, 34, 35, 39] plays the 34 
Round 0: Connor   holding [10, 11, 12, 16, 21, 28, 29, 40, 41, 49] plays the 28 
Matthew wins the round 

Round 1: Matthew  holding [15, 19, 23, 24, 36, 42, 46, 47, 48] plays the 42 
Round 1: Gal      holding [13, 14, 18, 26, 27, 32, 33, 35, 39] plays the 33 
Round 1: Connor   holding [10, 11, 12, 16, 21, 29, 40, 41, 49] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 25 30 31 37 38 43 44 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [17, 22, 25, 30, 31, 37, 38, 43, 44] plays the 22 
Matthew wins the round which contains 7 penalty points

Round 2: Matthew  holding [15, 19, 23, 24, 36, 46, 47, 48] plays the 46 
Round 2: Gal      holding [13, 14, 18, 26, 27, 32, 35, 39] plays the 32 
Round 2: Connor   holding [10, 11, 12, 21, 29, 40, 41, 49] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 30 31 37 38 43 44 0 0 

30------------------------------------------------------------------------

Round 2: Eugenius holding [17, 25, 30, 31, 37, 38, 43, 44] plays the 30 
Matthew wins the round 

Round 3: Matthew  holding [15, 19, 23, 24, 36, 47, 48] plays the 15 
Round 3: Gal      holding [13, 14, 18, 26, 27, 35, 39] plays the 27 
Round 3: Connor   holding [10, 11, 12, 21, 29, 41, 49] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 31 37 38 43 44 0 0 0 

25------------------------------------------------------------------------

Round 3: Eugenius holding [17, 25, 31, 37, 38, 43, 44] plays the 25 
Gal wins the round 

Round 4: Gal      holding [13, 14, 18, 26, 35, 39] plays the 39 
Round 4: Connor   holding [11, 12, 21, 29, 41, 49] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 37 38 43 44 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 4: Eugenius holding [17, 31, 37, 38, 43, 44] plays the 17 
Round 4: Matthew  holding [19, 23, 24, 36, 47, 48] plays the 36 
Gal wins the round which contains 1 penalty points

Round 5: Gal      holding [13, 14, 18, 26, 35] plays the 35 
Round 5: Connor   holding [11, 21, 29, 41, 49] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 38 43 44 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 5: Eugenius holding [31, 37, 38, 43, 44] plays the 31 
Round 5: Matthew  holding [19, 23, 24, 47, 48] plays the 19 
Gal wins the round which contains 2 penalty points

Round 6: Gal      holding [13, 14, 18, 26] plays the 13 
Round 6: Connor   holding [11, 29, 41, 49] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
37 38 43 44 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 6: Eugenius holding [37, 38, 43, 44] plays the 37 
Round 6: Matthew  holding [23, 24, 47, 48] plays the 47 
Matthew wins the round which contains 4 penalty points

Round 7: Matthew  holding [23, 24, 48] plays the 23 
Round 7: Gal      holding [14, 18, 26] plays the 14 
Round 7: Connor   holding [11, 41, 49] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
38 43 44 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 7: Eugenius holding [38, 43, 44] plays the 43 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
38 44 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [38, 44] plays the 38 
Round 8: Matthew  holding [24, 48] plays the 48 
Round 8: Gal      holding [18, 26] plays the 26 
Round 8: Connor   holding [41, 49] plays the 41 
Matthew wins the round which contains 1 penalty points

Round 9: Matthew  holding [24] plays the 24 
Round 9: Gal      holding [18] plays the 18 
Round 9: Connor   holding [49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
44 0 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 9: Eugenius holding [44] plays the 44 
Eugenius wins the round 


Finishing Positions

#1 with 0 penalty points Connor (system)
#2 with 3 penalty points Eugenius (dodo.c)
#2 with 3 penalty points Gal (system)
#4 with 12 penalty points Matthew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3348132 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Zachary : [15, 16, 17, 23, 26, 27, 33, 40, 45, 48]
Table position 1: Marc    : [12, 30, 31, 32, 35, 37, 39, 42, 43, 44]
Table position 2: Finbar  : [13, 14, 18, 21, 25, 29, 36, 46, 47, 49]
Table position 3: Eugenius: [10, 11, 19, 20, 22, 24, 28, 34, 38, 41]

Discards:
Zachary  [23, 26, 27]
Marc     [31, 37, 43]
Finbar   [13, 47, 49]
Eugenius [34, 38, 41]

Round 0: Zachary  holding [15, 16, 17, 33, 34, 38, 40, 41, 45, 48] plays the 48 
Round 0: Marc     holding [12, 23, 26, 27, 30, 32, 35, 39, 42, 44] plays the 42 
Round 0: Finbar   holding [14, 18, 21, 25, 29, 31, 36, 37, 43, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 13 19 20 22 24 28 47 49 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 13, 19, 20, 22, 24, 28, 47, 49] plays the 10 
Zachary wins the round which contains 7 penalty points

Round 1: Zachary  holding [15, 16, 17, 33, 34, 38, 40, 41, 45] plays the 38 
Round 1: Marc     holding [12, 23, 26, 27, 30, 32, 35, 39, 44] plays the 30 
Round 1: Finbar   holding [14, 18, 21, 25, 29, 31, 36, 37, 43] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 20 22 24 28 47 49 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 19, 20, 22, 24, 28, 47, 49] plays the 20 
Zachary wins the round 

Round 2: Zachary  holding [15, 16, 17, 33, 34, 40, 41, 45] plays the 45 
Round 2: Marc     holding [12, 23, 26, 27, 32, 35, 39, 44] plays the 39 
Round 2: Finbar   holding [14, 21, 25, 29, 31, 36, 37, 43] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 22 24 28 47 49 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 19, 22, 24, 28, 47, 49] plays the 24 
Zachary wins the round 

Round 3: Zachary  holding [15, 16, 17, 33, 34, 40, 41] plays the 33 
Round 3: Marc     holding [12, 23, 26, 27, 32, 35, 44] plays the 44 
Round 3: Finbar   holding [14, 21, 25, 29, 31, 37, 43] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 22 28 47 49 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 19, 22, 28, 47, 49] plays the 22 
Marc wins the round 

Round 4: Marc     holding [12, 23, 26, 27, 32, 35] plays the 26 
Round 4: Finbar   holding [14, 25, 29, 31, 37, 43] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 28 47 49 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 19, 28, 47, 49] plays the 28 
Round 4: Zachary  holding [15, 16, 17, 34, 40, 41] plays the 34 
Zachary wins the round 

Round 5: Zachary  holding [15, 16, 17, 40, 41] plays the 16 
Round 5: Marc     holding [12, 23, 27, 32, 35] plays the 12 
Round 5: Finbar   holding [25, 29, 31, 37, 43] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 47 49 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 19, 47, 49] plays the 11 
Zachary wins the round which contains 2 penalty points

Round 6: Zachary  holding [15, 17, 40, 41] plays the 41 
Round 6: Marc     holding [23, 27, 32, 35] plays the 23 
Round 6: Finbar   holding [25, 31, 37, 43] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 47 49 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 19, 47, 49] plays the 13 
Zachary wins the round which contains 4 penalty points

Round 7: Zachary  holding [15, 17, 40] plays the 40 
Round 7: Marc     holding [27, 32, 35] plays the 32 
Round 7: Finbar   holding [25, 31, 43] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
19 47 49 0 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 7: Eugenius holding [19, 47, 49] plays the 19 
Zachary wins the round which contains 1 penalty points

Round 8: Zachary  holding [15, 17] plays the 17 
Round 8: Marc     holding [27, 35] plays the 35 
Round 8: Finbar   holding [31, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
47 49 0 0 0 0 0 0 0 0 

47------------------------------------------------------------------------

Round 8: Eugenius holding [47, 49] plays the 47 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 9: Eugenius holding [49] plays the 49 
Round 9: Zachary  holding [15] plays the 15 
Round 9: Marc     holding [27] plays the 27 
Round 9: Finbar   holding [31] plays the 31 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Marc (system)
#1 with 0 penalty points Finbar (system)
#3 with 4 penalty points Eugenius (dodo.c)
#4 with 14 penalty points Zachary (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9487709 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [13, 14, 20, 24, 38, 43, 45, 47, 48, 49]
Table position 1: Andrew  : [10, 11, 12, 18, 21, 22, 30, 41, 42, 44]
Table position 2: Trung   : [16, 17, 26, 27, 29, 31, 33, 35, 39, 40]
Table position 3: Jamal   : [15, 19, 23, 25, 28, 32, 34, 36, 37, 46]

Discards:
Eugenius [47, 48, 49]
Andrew   [12, 22, 41]
Trung    [17, 27, 35]
Jamal    [19, 25, 36]


Debug output from Eugenius
------------------------------------------------------------------------
13 14 19 20 24 25 36 38 43 45 

14------------------------------------------------------------------------

Round 0: Eugenius holding [13, 14, 19, 20, 24, 25, 36, 38, 43, 45] plays the 14 
Round 0: Andrew   holding [10, 11, 18, 21, 30, 42, 44, 47, 48, 49] plays the 48 
Round 0: Trung    holding [12, 16, 22, 26, 29, 31, 33, 39, 40, 41] plays the 12 
Round 0: Jamal    holding [15, 17, 23, 27, 28, 32, 34, 35, 37, 46] plays the 28 
Andrew wins the round 

Round 1: Andrew   holding [10, 11, 18, 21, 30, 42, 44, 47, 49] plays the 21 
Round 1: Trung    holding [16, 22, 26, 29, 31, 33, 39, 40, 41] plays the 39 
Round 1: Jamal    holding [15, 17, 23, 27, 32, 34, 35, 37, 46] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 20 24 25 36 38 43 45 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [13, 19, 20, 24, 25, 36, 38, 43, 45] plays the 24 
Trung wins the round 

Round 2: Trung    holding [16, 22, 26, 29, 31, 33, 40, 41] plays the 26 
Round 2: Jamal    holding [15, 17, 23, 32, 34, 35, 37, 46] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 20 25 36 38 43 45 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [13, 19, 20, 25, 36, 38, 43, 45] plays the 20 
Round 2: Andrew   holding [10, 11, 18, 30, 42, 44, 47, 49] plays the 10 
Jamal wins the round 

Round 3: Jamal    holding [15, 17, 23, 32, 35, 37, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 36 38 43 45 0 0 0 

36------------------------------------------------------------------------

Round 3: Eugenius holding [13, 19, 25, 36, 38, 43, 45] plays the 36 
Round 3: Andrew   holding [11, 18, 30, 42, 44, 47, 49] plays the 30 
Round 3: Trung    holding [16, 22, 29, 31, 33, 40, 41] plays the 16 
Jamal wins the round 

Round 4: Jamal    holding [15, 17, 23, 32, 35, 37] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 38 43 45 0 0 0 0 

38------------------------------------------------------------------------

Round 4: Eugenius holding [13, 19, 25, 38, 43, 45] plays the 38 
Round 4: Andrew   holding [11, 18, 42, 44, 47, 49] plays the 18 
Round 4: Trung    holding [22, 29, 31, 33, 40, 41] plays the 22 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 19 25 43 45 0 0 0 0 0 

25------------------------------------------------------------------------

Round 5: Eugenius holding [13, 19, 25, 43, 45] plays the 25 
Round 5: Andrew   holding [11, 42, 44, 47, 49] plays the 42 
Round 5: Trung    holding [29, 31, 33, 40, 41] plays the 40 
Round 5: Jamal    holding [15, 17, 23, 35, 37] plays the 35 
Trung wins the round which contains 7 penalty points

Round 6: Trung    holding [29, 31, 33, 41] plays the 33 
Round 6: Jamal    holding [15, 17, 23, 37] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 43 45 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 6: Eugenius holding [13, 19, 43, 45] plays the 45 
Round 6: Andrew   holding [11, 44, 47, 49] plays the 44 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 19 43 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 19, 43] plays the 13 
Round 7: Andrew   holding [11, 47, 49] plays the 47 
Round 7: Trung    holding [29, 31, 41] plays the 41 
Round 7: Jamal    holding [17, 23, 37] plays the 23 
Andrew wins the round which contains 4 penalty points

Round 8: Andrew   holding [11, 49] plays the 49 
Round 8: Trung    holding [29, 31] plays the 29 
Round 8: Jamal    holding [17, 37] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
19 43 0 0 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 8: Eugenius holding [19, 43] plays the 19 
Andrew wins the round which contains 3 penalty points

Round 9: Andrew   holding [11] plays the 11 
Round 9: Trung    holding [31] plays the 31 
Round 9: Jamal    holding [37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Eugenius wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Jamal (system)
#2 with 4 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Andrew (system)
#3 with 7 penalty points Trung (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15536298 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Alex    : [10, 13, 14, 27, 28, 29, 36, 43, 47, 48]
Table position 1: Eugenius: [16, 20, 21, 26, 30, 35, 38, 41, 46, 49]
Table position 2: Sabrina : [11, 17, 18, 19, 22, 24, 25, 34, 37, 42]
Table position 3: Dean    : [12, 15, 23, 31, 32, 33, 39, 40, 44, 45]

Discards:
Alex     [10, 27, 29]
Eugenius [41, 46, 49]
Sabrina  [24, 25, 34]
Dean     [32, 39, 45]

Round 0: Alex     holding [13, 14, 28, 32, 36, 39, 43, 45, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
10 16 20 21 26 27 29 30 35 38 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 16, 20, 21, 26, 27, 29, 30, 35, 38] plays the 10 
Round 0: Sabrina  holding [11, 17, 18, 19, 22, 37, 41, 42, 46, 49] plays the 42 
Round 0: Dean     holding [12, 15, 23, 24, 25, 31, 33, 34, 40, 44] plays the 24 
Alex wins the round which contains 7 penalty points

Round 1: Alex     holding [13, 14, 28, 32, 36, 39, 43, 45, 47] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
16 20 21 26 27 29 30 35 38 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 20, 21, 26, 27, 29, 30, 35, 38] plays the 16 
Round 1: Sabrina  holding [11, 17, 18, 19, 22, 37, 41, 46, 49] plays the 46 
Round 1: Dean     holding [12, 15, 23, 25, 31, 33, 34, 40, 44] plays the 44 
Sabrina wins the round 

Round 2: Sabrina  holding [11, 17, 18, 19, 22, 37, 41, 49] plays the 49 
Round 2: Dean     holding [12, 15, 23, 25, 31, 33, 34, 40] plays the 40 
Round 2: Alex     holding [13, 14, 32, 36, 39, 43, 45, 47] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
20 21 26 27 29 30 35 38 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [20, 21, 26, 27, 29, 30, 35, 38] plays the 21 
Sabrina wins the round 

Round 3: Sabrina  holding [11, 17, 18, 19, 22, 37, 41] plays the 22 
Round 3: Dean     holding [12, 15, 23, 25, 31, 33, 34] plays the 12 
Round 3: Alex     holding [13, 32, 36, 39, 43, 45, 47] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
20 26 27 29 30 35 38 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [20, 26, 27, 29, 30, 35, 38] plays the 20 
Alex wins the round 

Round 4: Alex     holding [13, 36, 39, 43, 45, 47] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
26 27 29 30 35 38 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [26, 27, 29, 30, 35, 38] plays the 26 
Round 4: Sabrina  holding [11, 17, 18, 19, 37, 41] plays the 18 
Round 4: Dean     holding [15, 23, 25, 31, 33, 34] plays the 15 
Alex wins the round 

Round 5: Alex     holding [13, 36, 43, 45, 47] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 30 35 38 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius holding [27, 29, 30, 35, 38] plays the 27 
Round 5: Sabrina  holding [11, 17, 19, 37, 41] plays the 19 
Round 5: Dean     holding [23, 25, 31, 33, 34] plays the 33 
Alex wins the round which contains 1 penalty points

Round 6: Alex     holding [13, 43, 45, 47] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
29 30 35 38 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 6: Eugenius holding [29, 30, 35, 38] plays the 29 
Round 6: Sabrina  holding [11, 17, 37, 41] plays the 37 
Round 6: Dean     holding [23, 25, 31, 34] plays the 31 
Sabrina wins the round which contains 4 penalty points

Round 7: Sabrina  holding [11, 17, 41] plays the 17 
Round 7: Dean     holding [23, 25, 34] plays the 23 
Round 7: Alex     holding [43, 45, 47] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
30 35 38 0 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 7: Eugenius holding [30, 35, 38] plays the 30 
Alex wins the round which contains 3 penalty points

Round 8: Alex     holding [45, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
35 38 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 8: Eugenius holding [35, 38] plays the 35 
Round 8: Sabrina  holding [11, 41] plays the 41 
Round 8: Dean     holding [25, 34] plays the 25 
Alex wins the round which contains 2 penalty points

Round 9: Alex     holding [45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38 chah------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Round 9: Sabrina  holding [11] plays the 11 
Round 9: Dean     holding [34] plays the 34 
Alex wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Dean (system)
#3 with 4 penalty points Sabrina (system)
#4 with 14 penalty points Alex (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6380215 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Zachary : [13, 14, 18, 22, 27, 30, 35, 38, 43, 48]
Table position 1: Claire  : [11, 12, 16, 17, 19, 31, 32, 33, 34, 42]
Table position 2: Eugenius: [10, 21, 24, 29, 36, 37, 40, 41, 44, 47]
Table position 3: Peter   : [15, 20, 23, 25, 26, 28, 39, 45, 46, 49]

Discards:
Zachary  [13, 27, 43]
Claire   [12, 16, 33]
Eugenius [41, 44, 47]
Peter    [15, 20, 46]

Round 0: Zachary  holding [14, 15, 18, 20, 22, 30, 35, 38, 46, 48] plays the 30 
Round 0: Claire   holding [11, 13, 17, 19, 27, 31, 32, 34, 42, 43] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 16 21 24 29 33 36 37 40 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 16, 21, 24, 29, 33, 36, 37, 40] plays the 10 
Round 0: Peter    holding [23, 25, 26, 28, 39, 41, 44, 45, 47, 49] plays the 28 
Claire wins the round 

Round 1: Claire   holding [11, 13, 17, 19, 27, 31, 32, 42, 43] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
12 16 21 24 29 33 36 37 40 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 16, 21, 24, 29, 33, 36, 37, 40] plays the 12 
Round 1: Peter    holding [23, 25, 26, 39, 41, 44, 45, 47, 49] plays the 39 
Round 1: Zachary  holding [14, 15, 18, 20, 22, 35, 38, 46, 48] plays the 48 
Zachary wins the round 

Round 2: Zachary  holding [14, 15, 18, 20, 22, 35, 38, 46] plays the 18 
Round 2: Claire   holding [11, 13, 17, 19, 31, 32, 42, 43] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
16 21 24 29 33 36 37 40 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [16, 21, 24, 29, 33, 36, 37, 40] plays the 16 
Round 2: Peter    holding [23, 25, 26, 41, 44, 45, 47, 49] plays the 45 
Peter wins the round 

Round 3: Peter    holding [23, 25, 26, 41, 44, 47, 49] plays the 44 
Round 3: Zachary  holding [14, 15, 20, 22, 35, 38, 46] plays the 38 
Round 3: Claire   holding [11, 13, 17, 19, 31, 42, 43] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
21 24 29 33 36 37 40 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [21, 24, 29, 33, 36, 37, 40] plays the 24 
Peter wins the round which contains 7 penalty points

Round 4: Peter    holding [23, 25, 26, 41, 47, 49] plays the 49 
Round 4: Zachary  holding [14, 15, 20, 22, 35, 46] plays the 35 
Round 4: Claire   holding [11, 13, 17, 19, 31, 43] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
21 29 33 36 37 40 0 0 0 0 

21------------------------------------------------------------------------

Round 4: Eugenius holding [21, 29, 33, 36, 37, 40] plays the 21 
Peter wins the round which contains 1 penalty points

Round 5: Peter    holding [23, 25, 26, 41, 47] plays the 26 
Round 5: Zachary  holding [14, 15, 20, 22, 46] plays the 46 
Round 5: Claire   holding [11, 13, 17, 19, 43] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
29 33 36 37 40 0 0 0 0 0 

36------------------------------------------------------------------------

Round 5: Eugenius holding [29, 33, 36, 37, 40] plays the 36 
Zachary wins the round which contains 1 penalty points

Round 6: Zachary  holding [14, 15, 20, 22] plays the 22 
Round 6: Claire   holding [11, 13, 19, 43] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
29 33 37 40 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 6: Eugenius holding [29, 33, 37, 40] plays the 33 
Round 6: Peter    holding [23, 25, 41, 47] plays the 47 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
29 37 40 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 37, 40] plays the 29 
Round 7: Peter    holding [23, 25, 41] plays the 41 
Round 7: Zachary  holding [14, 15, 20] plays the 14 
Round 7: Claire   holding [13, 19, 43] plays the 13 
Peter wins the round which contains 3 penalty points

Round 8: Peter    holding [23, 25] plays the 25 
Round 8: Zachary  holding [15, 20] plays the 20 
Round 8: Claire   holding [19, 43] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
37 40 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 8: Eugenius holding [37, 40] plays the 40 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Peter    holding [23] plays the 23 
Round 9: Zachary  holding [15] plays the 15 
Round 9: Claire   holding [43] plays the 43 
Claire wins the round which contains 3 penalty points


Finishing Positions

#1 with 1 penalty points Zachary (system)
#2 with 3 penalty points Claire (system)
#2 with 3 penalty points Eugenius (dodo.c)
#4 with 11 penalty points Peter (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6416172 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 12, 13, 17, 21, 26, 32, 38, 48, 49]
Table position 1: Connor  : [15, 16, 19, 20, 22, 23, 28, 33, 37, 43]
Table position 2: Vincent : [14, 18, 24, 27, 34, 36, 40, 41, 46, 47]
Table position 3: Benjamin: [10, 25, 29, 30, 31, 35, 39, 42, 44, 45]

Discards:
Eugenius [38, 48, 49]
Connor   [28, 37, 43]
Vincent  [24, 40, 47]
Benjamin [25, 29, 35]


Debug output from Eugenius
------------------------------------------------------------------------
11 12 13 17 21 25 26 29 32 35 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 13, 17, 21, 25, 26, 29, 32, 35] plays the 12 
Round 0: Connor   holding [15, 16, 19, 20, 22, 23, 33, 38, 48, 49] plays the 33 
Round 0: Vincent  holding [14, 18, 27, 28, 34, 36, 37, 41, 43, 46] plays the 36 
Round 0: Benjamin holding [10, 24, 30, 31, 39, 40, 42, 44, 45, 47] plays the 30 
Vincent wins the round 

Round 1: Vincent  holding [14, 18, 27, 28, 34, 37, 41, 43, 46] plays the 34 
Round 1: Benjamin holding [10, 24, 31, 39, 40, 42, 44, 45, 47] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 21 25 26 29 32 35 0 

26------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 17, 21, 25, 26, 29, 32, 35] plays the 26 
Round 1: Connor   holding [15, 16, 19, 20, 22, 23, 38, 48, 49] plays the 22 
Benjamin wins the round 

Round 2: Benjamin holding [10, 24, 31, 39, 42, 44, 45, 47] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 21 25 29 32 35 0 0 

25------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 17, 21, 25, 29, 32, 35] plays the 25 
Round 2: Connor   holding [15, 16, 19, 20, 23, 38, 48, 49] plays the 16 
Round 2: Vincent  holding [14, 18, 27, 28, 37, 41, 43, 46] plays the 18 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 21 29 32 35 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 17, 21, 29, 32, 35] plays the 21 
Round 3: Connor   holding [15, 19, 20, 23, 38, 48, 49] plays the 48 
Round 3: Vincent  holding [14, 27, 28, 37, 41, 43, 46] plays the 14 
Round 3: Benjamin holding [24, 31, 39, 42, 44, 45, 47] plays the 39 
Connor wins the round 

Round 4: Connor   holding [15, 19, 20, 23, 38, 49] plays the 38 
Round 4: Vincent  holding [27, 28, 37, 41, 43, 46] plays the 46 
Round 4: Benjamin holding [24, 31, 42, 44, 45, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 29 32 35 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 17, 29, 32, 35] plays the 32 
Vincent wins the round which contains 7 penalty points

Round 5: Vincent  holding [27, 28, 37, 41, 43] plays the 27 
Round 5: Benjamin holding [24, 31, 44, 45, 47] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 29 35 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 17, 29, 35] plays the 11 
Round 5: Connor   holding [15, 19, 20, 23, 49] plays the 15 
Benjamin wins the round which contains 1 penalty points

Round 6: Benjamin holding [24, 31, 44, 47] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 29 35 0 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 6: Eugenius holding [13, 17, 29, 35] plays the 13 
Round 6: Connor   holding [19, 20, 23, 49] plays the 20 
Round 6: Vincent  holding [28, 37, 41, 43] plays the 28 
Benjamin wins the round which contains 1 penalty points

Round 7: Benjamin holding [24, 31, 47] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 35 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 29, 35] plays the 17 
Round 7: Connor   holding [19, 23, 49] plays the 23 
Round 7: Vincent  holding [37, 41, 43] plays the 41 
Vincent wins the round which contains 4 penalty points

Round 8: Vincent  holding [37, 43] plays the 37 
Round 8: Benjamin holding [24, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
29 35 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 35] plays the 29 
Round 8: Connor   holding [19, 49] plays the 19 
Benjamin wins the round which contains 4 penalty points

Round 9: Benjamin holding [24] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35 chah------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Round 9: Connor   holding [49] plays the 49 
Round 9: Vincent  holding [43] plays the 43 
Benjamin wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Connor (system)
#3 with 7 penalty points Benjamin (system)
#4 with 11 penalty points Vincent (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 876543 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Costa   : [11, 12, 15, 16, 22, 26, 29, 31, 46, 48]
Table position 1: Eugenius: [17, 20, 23, 32, 33, 36, 38, 40, 44, 47]
Table position 2: Andrew  : [18, 19, 24, 25, 30, 34, 35, 39, 41, 42]
Table position 3: Trung   : [10, 13, 14, 21, 27, 28, 37, 43, 45, 49]

Discards:
Costa    [12, 16, 26]
Eugenius [40, 44, 47]
Andrew   [24, 25, 42]
Trung    [13, 27, 37]

Round 0: Costa    holding [11, 13, 15, 22, 27, 29, 31, 37, 46, 48] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
12 16 17 20 23 26 32 33 36 38 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 16, 17, 20, 23, 26, 32, 33, 36, 38] plays the 12 
Round 0: Andrew   holding [18, 19, 30, 34, 35, 39, 40, 41, 44, 47] plays the 44 
Round 0: Trung    holding [10, 14, 21, 24, 25, 28, 42, 43, 45, 49] plays the 14 
Andrew wins the round 

Round 1: Andrew   holding [18, 19, 30, 34, 35, 39, 40, 41, 47] plays the 39 
Round 1: Trung    holding [10, 21, 24, 25, 28, 42, 43, 45, 49] plays the 24 
Round 1: Costa    holding [11, 13, 15, 27, 29, 31, 37, 46, 48] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 20 23 26 32 33 36 38 0 

26------------------------------------------------------------------------

Round 1: Eugenius holding [16, 17, 20, 23, 26, 32, 33, 36, 38] plays the 26 
Andrew wins the round 

Round 2: Andrew   holding [18, 19, 30, 34, 35, 40, 41, 47] plays the 34 
Round 2: Trung    holding [10, 21, 25, 28, 42, 43, 45, 49] plays the 42 
Round 2: Costa    holding [11, 13, 15, 29, 31, 37, 46, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 20 23 32 33 36 38 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [16, 17, 20, 23, 32, 33, 36, 38] plays the 16 
Costa wins the round which contains 7 penalty points

Round 3: Costa    holding [11, 13, 15, 29, 31, 37, 46] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
17 20 23 32 33 36 38 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [17, 20, 23, 32, 33, 36, 38] plays the 20 
Round 3: Andrew   holding [18, 19, 30, 35, 40, 41, 47] plays the 40 
Round 3: Trung    holding [10, 21, 25, 28, 43, 45, 49] plays the 21 
Andrew wins the round 

Round 4: Andrew   holding [18, 19, 30, 35, 41, 47] plays the 18 
Round 4: Trung    holding [10, 25, 28, 43, 45, 49] plays the 45 
Round 4: Costa    holding [11, 13, 29, 31, 37, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 32 33 36 38 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [17, 23, 32, 33, 36, 38] plays the 32 
Costa wins the round 

Round 5: Costa    holding [11, 13, 29, 31, 37] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 33 36 38 0 0 0 0 0 

17------------------------------------------------------------------------

Round 5: Eugenius holding [17, 23, 33, 36, 38] plays the 17 
Round 5: Andrew   holding [19, 30, 35, 41, 47] plays the 19 
Round 5: Trung    holding [10, 25, 28, 43, 49] plays the 43 
Trung wins the round which contains 4 penalty points

Round 6: Trung    holding [10, 25, 28, 49] plays the 49 
Round 6: Costa    holding [11, 13, 29, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
23 33 36 38 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 6: Eugenius holding [23, 33, 36, 38] plays the 23 
Round 6: Andrew   holding [30, 35, 41, 47] plays the 35 
Trung wins the round which contains 2 penalty points

Round 7: Trung    holding [10, 25, 28] plays the 10 
Round 7: Costa    holding [11, 13, 29] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
33 36 38 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 7: Eugenius holding [33, 36, 38] plays the 36 
Round 7: Andrew   holding [30, 41, 47] plays the 30 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
33 38 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 8: Eugenius holding [33, 38] plays the 33 
Round 8: Andrew   holding [41, 47] plays the 41 
Round 8: Trung    holding [25, 28] plays the 25 
Round 8: Costa    holding [13, 29] plays the 13 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Round 9: Andrew   holding [47] plays the 47 
Round 9: Trung    holding [28] plays the 28 
Round 9: Costa    holding [29] plays the 29 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Andrew (system)
#2 with 5 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Trung (system)
#4 with 7 penalty points Costa (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16236715 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Stephen : [10, 11, 12, 14, 15, 35, 44, 46, 47, 48]
Table position 1: Reede   : [13, 19, 25, 26, 32, 33, 34, 40, 45, 49]
Table position 2: Heather : [16, 17, 22, 23, 27, 28, 29, 37, 38, 39]
Table position 3: Eugenius: [18, 20, 21, 24, 30, 31, 36, 41, 42, 43]

Discards:
Stephen  [14, 15, 47]
Reede    [13, 40, 49]
Heather  [22, 29, 38]
Eugenius [41, 42, 43]

Round 0: Stephen  holding [10, 11, 12, 35, 41, 42, 43, 44, 46, 48] plays the 48 
Round 0: Reede    holding [14, 15, 19, 25, 26, 32, 33, 34, 45, 47] plays the 14 
Round 0: Heather  holding [13, 16, 17, 23, 27, 28, 37, 39, 40, 49] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
18 20 21 22 24 29 30 31 36 38 

18------------------------------------------------------------------------

Round 0: Eugenius holding [18, 20, 21, 22, 24, 29, 30, 31, 36, 38] plays the 18 
Stephen wins the round 

Round 1: Stephen  holding [10, 11, 12, 35, 41, 42, 43, 44, 46] plays the 46 
Round 1: Reede    holding [15, 19, 25, 26, 32, 33, 34, 45, 47] plays the 34 
Round 1: Heather  holding [13, 16, 17, 23, 27, 37, 39, 40, 49] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
20 21 22 24 29 30 31 36 38 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [20, 21, 22, 24, 29, 30, 31, 36, 38] plays the 20 
Stephen wins the round 

Round 2: Stephen  holding [10, 11, 12, 35, 41, 42, 43, 44] plays the 35 
Round 2: Reede    holding [15, 19, 25, 26, 32, 33, 45, 47] plays the 25 
Round 2: Heather  holding [13, 16, 17, 23, 27, 37, 39, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
21 22 24 29 30 31 36 38 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [21, 22, 24, 29, 30, 31, 36, 38] plays the 21 
Heather wins the round 

Round 3: Heather  holding [13, 16, 17, 23, 27, 37, 39] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
22 24 29 30 31 36 38 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [22, 24, 29, 30, 31, 36, 38] plays the 22 
Round 3: Stephen  holding [10, 11, 12, 41, 42, 43, 44] plays the 42 
Round 3: Reede    holding [15, 19, 26, 32, 33, 45, 47] plays the 26 
Stephen wins the round which contains 7 penalty points

Round 4: Stephen  holding [10, 11, 12, 41, 43, 44] plays the 12 
Round 4: Reede    holding [15, 19, 32, 33, 45, 47] plays the 33 
Round 4: Heather  holding [13, 17, 23, 27, 37, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
24 29 30 31 36 38 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius holding [24, 29, 30, 31, 36, 38] plays the 24 
Heather wins the round 

Round 5: Heather  holding [13, 17, 23, 27, 37] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
29 30 31 36 38 0 0 0 0 0 

30------------------------------------------------------------------------

Round 5: Eugenius holding [29, 30, 31, 36, 38] plays the 30 
Round 5: Stephen  holding [10, 11, 41, 43, 44] plays the 43 
Round 5: Reede    holding [15, 19, 32, 45, 47] plays the 45 
Reede wins the round which contains 1 penalty points

Round 6: Reede    holding [15, 19, 32, 47] plays the 32 
Round 6: Heather  holding [13, 17, 23, 37] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 36 38 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 6: Eugenius holding [29, 31, 36, 38] plays the 36 
Round 6: Stephen  holding [10, 11, 41, 44] plays the 10 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
29 31 38 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 38] plays the 29 
Round 7: Stephen  holding [11, 41, 44] plays the 41 
Round 7: Reede    holding [15, 19, 47] plays the 19 
Round 7: Heather  holding [13, 17, 37] plays the 37 
Stephen wins the round which contains 4 penalty points

Round 8: Stephen  holding [11, 44] plays the 44 
Round 8: Reede    holding [15, 47] plays the 15 
Round 8: Heather  holding [13, 17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
31 38 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [31, 38] plays the 38 
Stephen wins the round which contains 1 penalty points

Round 9: Stephen  holding [11] plays the 11 
Round 9: Reede    holding [47] plays the 47 
Round 9: Heather  holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Reede wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Heather (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 5 penalty points Reede (system)
#4 with 12 penalty points Stephen (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6286733 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Costa   : [10, 12, 23, 24, 25, 27, 32, 34, 39, 44]
Table position 1: Gal     : [11, 15, 19, 28, 37, 40, 41, 43, 47, 49]
Table position 2: Eugenius: [14, 16, 17, 21, 30, 31, 35, 38, 45, 46]
Table position 3: Mitchell: [13, 18, 20, 22, 26, 29, 33, 36, 42, 48]

Discards:
Costa    [24, 25, 32]
Gal      [41, 47, 49]
Eugenius [38, 45, 46]
Mitchell [20, 33, 42]

Round 0: Costa    holding [10, 12, 20, 23, 27, 33, 34, 39, 42, 44] plays the 39 
Round 0: Gal      holding [11, 15, 19, 24, 25, 28, 32, 37, 40, 43] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 17 21 30 31 35 41 47 49 

21------------------------------------------------------------------------

Round 0: Eugenius holding [14, 16, 17, 21, 30, 31, 35, 41, 47, 49] plays the 21 
Round 0: Mitchell holding [13, 18, 22, 26, 29, 36, 38, 45, 46, 48] plays the 48 
Mitchell wins the round 

Round 1: Mitchell holding [13, 18, 22, 26, 29, 36, 38, 45, 46] plays the 38 
Round 1: Costa    holding [10, 12, 20, 23, 27, 33, 34, 42, 44] plays the 42 
Round 1: Gal      holding [11, 19, 24, 25, 28, 32, 37, 40, 43] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 17 30 31 35 41 47 49 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 16, 17, 30, 31, 35, 41, 47, 49] plays the 14 
Costa wins the round which contains 7 penalty points

Round 2: Costa    holding [10, 12, 20, 23, 27, 33, 34, 44] plays the 33 
Round 2: Gal      holding [11, 19, 24, 25, 28, 32, 37, 43] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 30 31 35 41 47 49 0 0 

30------------------------------------------------------------------------

Round 2: Eugenius holding [16, 17, 30, 31, 35, 41, 47, 49] plays the 30 
Round 2: Mitchell holding [13, 18, 22, 26, 29, 36, 45, 46] plays the 22 
Costa wins the round 

Round 3: Costa    holding [10, 12, 20, 23, 27, 34, 44] plays the 27 
Round 3: Gal      holding [11, 19, 25, 28, 32, 37, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 31 35 41 47 49 0 0 0 

16 chah------------------------------------------------------------------------

Round 3: Eugenius holding [16, 17, 31, 35, 41, 47, 49] plays the 16 
Round 3: Mitchell holding [13, 18, 26, 29, 36, 45, 46] plays the 36 
Mitchell wins the round which contains 1 penalty points

Round 4: Mitchell holding [13, 18, 26, 29, 45, 46] plays the 29 
Round 4: Costa    holding [10, 12, 20, 23, 34, 44] plays the 23 
Round 4: Gal      holding [11, 19, 25, 28, 32, 37] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 35 41 47 49 0 0 0 0 

17------------------------------------------------------------------------

Round 4: Eugenius holding [17, 31, 35, 41, 47, 49] plays the 17 
Mitchell wins the round which contains 4 penalty points

Round 5: Mitchell holding [13, 18, 26, 45, 46] plays the 13 
Round 5: Costa    holding [10, 12, 20, 34, 44] plays the 44 
Round 5: Gal      holding [19, 25, 28, 32, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
31 35 41 47 49 0 0 0 0 0 

31------------------------------------------------------------------------

Round 5: Eugenius holding [31, 35, 41, 47, 49] plays the 31 
Gal wins the round which contains 3 penalty points

Round 6: Gal      holding [19, 25, 28, 32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
35 41 47 49 0 0 0 0 0 0 

35 chah------------------------------------------------------------------------

Round 6: Eugenius holding [35, 41, 47, 49] plays the 35 
Round 6: Mitchell holding [18, 26, 45, 46] plays the 18 
Round 6: Costa    holding [10, 12, 20, 34] plays the 12 
Gal wins the round 

Round 7: Gal      holding [19, 25, 28] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
41 47 49 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 7: Eugenius holding [41, 47, 49] plays the 49 
Round 7: Mitchell holding [26, 45, 46] plays the 46 
Round 7: Costa    holding [10, 20, 34] plays the 10 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
41 47 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 8: Eugenius holding [41, 47] plays the 41 
Round 8: Mitchell holding [26, 45] plays the 26 
Round 8: Costa    holding [20, 34] plays the 20 
Round 8: Gal      holding [19, 25] plays the 19 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
47 0 0 0 0 0 0 0 0 0 

47------------------------------------------------------------------------

Round 9: Eugenius holding [47] plays the 47 
Round 9: Mitchell holding [45] plays the 45 
Round 9: Costa    holding [34] plays the 34 
Round 9: Gal      holding [25] plays the 25 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 3 penalty points Gal (system)
#1 with 3 penalty points Eugenius (dodo.c)
#3 with 5 penalty points Mitchell (system)
#4 with 7 penalty points Costa (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12122768 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 11, 16, 17, 27, 31, 37, 38, 47, 48]
Table position 1: Kangying: [13, 20, 23, 26, 34, 35, 36, 41, 42, 49]
Table position 2: Minh    : [14, 18, 19, 25, 29, 32, 33, 39, 43, 45]
Table position 3: Kane    : [12, 15, 21, 22, 24, 28, 30, 40, 44, 46]

Discards:
Eugenius [38, 47, 48]
Kangying [23, 26, 42]
Minh     [25, 39, 43]
Kane     [21, 30, 46]


Debug output from Eugenius
------------------------------------------------------------------------
10 11 16 17 21 27 30 31 37 46 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 16, 17, 21, 27, 30, 31, 37, 46] plays the 10 
Round 0: Kangying holding [13, 20, 34, 35, 36, 38, 41, 47, 48, 49] plays the 48 
Round 0: Minh     holding [14, 18, 19, 23, 26, 29, 32, 33, 42, 45] plays the 32 
Round 0: Kane     holding [12, 15, 22, 24, 25, 28, 39, 40, 43, 44] plays the 28 
Kangying wins the round 

Round 1: Kangying holding [13, 20, 34, 35, 36, 38, 41, 47, 49] plays the 38 
Round 1: Minh     holding [14, 18, 19, 23, 26, 29, 33, 42, 45] plays the 14 
Round 1: Kane     holding [12, 15, 22, 24, 25, 39, 40, 43, 44] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 17 21 27 30 31 37 46 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [11, 16, 17, 21, 27, 30, 31, 37, 46] plays the 16 
Kangying wins the round 

Round 2: Kangying holding [13, 20, 34, 35, 36, 41, 47, 49] plays the 49 
Round 2: Minh     holding [18, 19, 23, 26, 29, 33, 42, 45] plays the 42 
Round 2: Kane     holding [12, 15, 22, 25, 39, 40, 43, 44] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 21 27 30 31 37 46 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [11, 17, 21, 27, 30, 31, 37, 46] plays the 21 
Kangying wins the round which contains 7 penalty points

Round 3: Kangying holding [13, 20, 34, 35, 36, 41, 47] plays the 34 
Round 3: Minh     holding [18, 19, 23, 26, 29, 33, 45] plays the 26 
Round 3: Kane     holding [12, 15, 22, 25, 39, 43, 44] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 27 30 31 37 46 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [11, 17, 27, 30, 31, 37, 46] plays the 30 
Kangying wins the round 

Round 4: Kangying holding [13, 20, 35, 36, 41, 47] plays the 35 
Round 4: Minh     holding [18, 19, 23, 29, 33, 45] plays the 45 
Round 4: Kane     holding [15, 22, 25, 39, 43, 44] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 27 31 37 46 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 4: Eugenius holding [11, 17, 27, 31, 37, 46] plays the 11 
Minh wins the round which contains 1 penalty points

Round 5: Minh     holding [18, 19, 23, 29, 33] plays the 23 
Round 5: Kane     holding [22, 25, 39, 43, 44] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 31 37 46 0 0 0 0 0 

17------------------------------------------------------------------------

Round 5: Eugenius holding [17, 27, 31, 37, 46] plays the 17 
Round 5: Kangying holding [13, 20, 36, 41, 47] plays the 41 
Kane wins the round which contains 4 penalty points

Round 6: Kane     holding [22, 25, 39, 44] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
27 31 37 46 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 6: Eugenius holding [27, 31, 37, 46] plays the 27 
Round 6: Kangying holding [13, 20, 36, 47] plays the 36 
Round 6: Minh     holding [18, 19, 29, 33] plays the 18 
Kane wins the round 

Round 7: Kane     holding [22, 25, 44] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 46 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 7: Eugenius holding [31, 37, 46] plays the 46 
Round 7: Kangying holding [13, 20, 47] plays the 20 
Round 7: Minh     holding [19, 29, 33] plays the 33 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
31 37 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 37] plays the 31 
Round 8: Kangying holding [13, 47] plays the 13 
Round 8: Minh     holding [19, 29] plays the 29 
Round 8: Kane     holding [25, 44] plays the 44 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Kangying holding [47] plays the 47 
Round 9: Minh     holding [19] plays the 19 
Round 9: Kane     holding [25] plays the 25 
Kangying wins the round which contains 3 penalty points


Finishing Positions

#1 with 1 penalty points Minh (system)
#2 with 3 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Kane (system)
#4 with 10 penalty points Kangying (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7769680 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 14, 16, 30, 33, 35, 37, 42, 43, 49]
Table position 1: Heather : [11, 12, 21, 22, 25, 28, 31, 38, 39, 48]
Table position 2: Vincent : [17, 19, 20, 23, 26, 27, 34, 41, 44, 46]
Table position 3: Claire  : [13, 15, 18, 24, 29, 32, 36, 40, 45, 47]

Discards:
Eugenius [42, 43, 49]
Heather  [25, 38, 48]
Vincent  [20, 34, 46]
Claire   [15, 29, 45]


Debug output from Eugenius
------------------------------------------------------------------------
10 14 15 16 29 30 33 35 37 45 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 14, 15, 16, 29, 30, 33, 35, 37, 45] plays the 10 
Round 0: Heather  holding [11, 12, 21, 22, 28, 31, 39, 42, 43, 49] plays the 42 
Round 0: Vincent  holding [17, 19, 23, 25, 26, 27, 38, 41, 44, 48] plays the 25 
Round 0: Claire   holding [13, 18, 20, 24, 32, 34, 36, 40, 46, 47] plays the 36 
Heather wins the round which contains 7 penalty points

Round 1: Heather  holding [11, 12, 21, 22, 28, 31, 39, 43, 49] plays the 28 
Round 1: Vincent  holding [17, 19, 23, 26, 27, 38, 41, 44, 48] plays the 44 
Round 1: Claire   holding [13, 18, 20, 24, 32, 34, 40, 46, 47] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
14 15 16 29 30 33 35 37 45 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 15, 16, 29, 30, 33, 35, 37, 45] plays the 14 
Vincent wins the round 

Round 2: Vincent  holding [17, 19, 23, 26, 27, 38, 41, 48] plays the 48 
Round 2: Claire   holding [13, 18, 20, 32, 34, 40, 46, 47] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
15 16 29 30 33 35 37 45 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius holding [15, 16, 29, 30, 33, 35, 37, 45] plays the 15 
Round 2: Heather  holding [11, 12, 21, 22, 31, 39, 43, 49] plays the 22 
Vincent wins the round 

Round 3: Vincent  holding [17, 19, 23, 26, 27, 38, 41] plays the 38 
Round 3: Claire   holding [13, 18, 20, 34, 40, 46, 47] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
16 29 30 33 35 37 45 0 0 0 

16------------------------------------------------------------------------

Round 3: Eugenius holding [16, 29, 30, 33, 35, 37, 45] plays the 16 
Round 3: Heather  holding [11, 12, 21, 31, 39, 43, 49] plays the 12 
Vincent wins the round 

Round 4: Vincent  holding [17, 19, 23, 26, 27, 41] plays the 26 
Round 4: Claire   holding [13, 20, 34, 40, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
29 30 33 35 37 45 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [29, 30, 33, 35, 37, 45] plays the 30 
Round 4: Heather  holding [11, 21, 31, 39, 43, 49] plays the 39 
Claire wins the round 

Round 5: Claire   holding [13, 20, 34, 40, 47] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
29 33 35 37 45 0 0 0 0 0 

35------------------------------------------------------------------------

Round 5: Eugenius holding [29, 33, 35, 37, 45] plays the 35 
Round 5: Heather  holding [11, 21, 31, 43, 49] plays the 43 
Round 5: Vincent  holding [17, 19, 23, 27, 41] plays the 19 
Claire wins the round which contains 2 penalty points

Round 6: Claire   holding [13, 20, 34, 47] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
29 33 37 45 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 6: Eugenius holding [29, 33, 37, 45] plays the 29 
Round 6: Heather  holding [11, 21, 31, 49] plays the 31 
Round 6: Vincent  holding [17, 23, 27, 41] plays the 41 
Claire wins the round which contains 3 penalty points

Round 7: Claire   holding [13, 20, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
33 37 45 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 7: Eugenius holding [33, 37, 45] plays the 45 
Round 7: Heather  holding [11, 21, 49] plays the 11 
Round 7: Vincent  holding [17, 23, 27] plays the 27 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
33 37 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 8: Eugenius holding [33, 37] plays the 33 
Round 8: Heather  holding [21, 49] plays the 21 
Round 8: Vincent  holding [17, 23] plays the 17 
Round 8: Claire   holding [13, 47] plays the 13 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Heather  holding [49] plays the 49 
Round 9: Vincent  holding [23] plays the 23 
Round 9: Claire   holding [47] plays the 47 
Claire wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Vincent (system)
#2 with 3 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Heather (system)
#4 with 8 penalty points Claire (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15745854 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Zachary : [13, 14, 15, 26, 34, 36, 38, 41, 43, 47]
Table position 1: Mitchell: [12, 16, 20, 21, 29, 30, 31, 32, 44, 45]
Table position 2: Eugenius: [10, 24, 27, 28, 33, 40, 42, 46, 48, 49]
Table position 3: Nathan  : [11, 17, 18, 19, 22, 23, 25, 35, 37, 39]

Discards:
Zachary  [26, 38, 43]
Mitchell [16, 21, 29]
Eugenius [46, 48, 49]
Nathan   [17, 19, 25]

Round 0: Zachary  holding [13, 14, 15, 17, 19, 25, 34, 36, 41, 47] plays the 25 
Round 0: Mitchell holding [12, 20, 26, 30, 31, 32, 38, 43, 44, 45] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
10 16 21 24 27 28 29 33 40 42 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 16, 21, 24, 27, 28, 29, 33, 40, 42] plays the 10 
Round 0: Nathan   holding [11, 18, 22, 23, 35, 37, 39, 46, 48, 49] plays the 35 
Nathan wins the round 

Round 1: Nathan   holding [11, 18, 22, 23, 37, 39, 46, 48, 49] plays the 46 
Round 1: Zachary  holding [13, 14, 15, 17, 19, 34, 36, 41, 47] plays the 14 
Round 1: Mitchell holding [12, 26, 30, 31, 32, 38, 43, 44, 45] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
16 21 24 27 28 29 33 40 42 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 21, 24, 27, 28, 29, 33, 40, 42] plays the 16 
Nathan wins the round 

Round 2: Nathan   holding [11, 18, 22, 23, 37, 39, 48, 49] plays the 18 
Round 2: Zachary  holding [13, 15, 17, 19, 34, 36, 41, 47] plays the 34 
Round 2: Mitchell holding [12, 30, 31, 32, 38, 43, 44, 45] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
21 24 27 28 29 33 40 42 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [21, 24, 27, 28, 29, 33, 40, 42] plays the 21 
Zachary wins the round 

Round 3: Zachary  holding [13, 15, 17, 19, 36, 41, 47] plays the 36 
Round 3: Mitchell holding [12, 30, 31, 38, 43, 44, 45] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
24 27 28 29 33 40 42 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [24, 27, 28, 29, 33, 40, 42] plays the 24 
Round 3: Nathan   holding [11, 22, 23, 37, 39, 48, 49] plays the 39 
Nathan wins the round 

Round 4: Nathan   holding [11, 22, 23, 37, 48, 49] plays the 22 
Round 4: Zachary  holding [13, 15, 17, 19, 41, 47] plays the 15 
Round 4: Mitchell holding [30, 31, 38, 43, 44, 45] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
27 28 29 33 40 42 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [27, 28, 29, 33, 40, 42] plays the 28 
Mitchell wins the round 

Round 5: Mitchell holding [30, 31, 38, 43, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 33 40 42 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius holding [27, 29, 33, 40, 42] plays the 27 
Round 5: Nathan   holding [11, 23, 37, 48, 49] plays the 48 
Round 5: Zachary  holding [13, 17, 19, 41, 47] plays the 41 
Nathan wins the round which contains 1 penalty points

Round 6: Nathan   holding [11, 23, 37, 49] plays the 49 
Round 6: Zachary  holding [13, 17, 19, 47] plays the 47 
Round 6: Mitchell holding [30, 31, 38, 43] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
29 33 40 42 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 6: Eugenius holding [29, 33, 40, 42] plays the 42 
Nathan wins the round which contains 8 penalty points

Round 7: Nathan   holding [11, 23, 37] plays the 37 
Round 7: Zachary  holding [13, 17, 19] plays the 19 
Round 7: Mitchell holding [31, 38, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
29 33 40 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 33, 40] plays the 29 
Mitchell wins the round which contains 4 penalty points

Round 8: Mitchell holding [31, 38] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
33 40 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 8: Eugenius holding [33, 40] plays the 33 
Round 8: Nathan   holding [11, 23] plays the 11 
Round 8: Zachary  holding [13, 17] plays the 13 
Mitchell wins the round which contains 3 penalty points

Round 9: Mitchell holding [38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 9: Eugenius holding [40] plays the 40 
Round 9: Nathan   holding [23] plays the 23 
Round 9: Zachary  holding [17] plays the 17 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Zachary (system)
#2 with 2 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Mitchell (system)
#4 with 9 penalty points Nathan (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2086819 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Nicholas: [10, 11, 18, 21, 22, 29, 35, 41, 43, 46]
Table position 1: Eleni   : [13, 15, 27, 33, 37, 38, 39, 47, 48, 49]
Table position 2: Nathan  : [17, 19, 23, 25, 26, 31, 32, 36, 44, 45]
Table position 3: Eugenius: [12, 14, 16, 20, 24, 28, 30, 34, 40, 42]

Discards:
Nicholas [21, 29, 41]
Eleni    [13, 15, 38]
Nathan   [26, 32, 45]
Eugenius [34, 40, 42]

Round 0: Nicholas holding [10, 11, 18, 22, 34, 35, 40, 42, 43, 46] plays the 18 
Round 0: Eleni    holding [21, 27, 29, 33, 37, 39, 41, 47, 48, 49] plays the 27 
Round 0: Nathan   holding [13, 15, 17, 19, 23, 25, 31, 36, 38, 44] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 16 20 24 26 28 30 32 45 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 14, 16, 20, 24, 26, 28, 30, 32, 45] plays the 12 
Eleni wins the round 

Round 1: Eleni    holding [21, 29, 33, 37, 39, 41, 47, 48, 49] plays the 49 
Round 1: Nathan   holding [13, 17, 19, 23, 25, 31, 36, 38, 44] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 20 24 26 28 30 32 45 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 16, 20, 24, 26, 28, 30, 32, 45] plays the 14 
Round 1: Nicholas holding [10, 11, 22, 34, 35, 40, 42, 43, 46] plays the 42 
Eleni wins the round which contains 8 penalty points

Round 2: Eleni    holding [21, 29, 33, 37, 39, 41, 47, 48] plays the 39 
Round 2: Nathan   holding [13, 19, 23, 25, 31, 36, 38, 44] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
16 20 24 26 28 30 32 45 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [16, 20, 24, 26, 28, 30, 32, 45] plays the 24 
Round 2: Nicholas holding [10, 11, 22, 34, 35, 40, 43, 46] plays the 34 
Eleni wins the round 

Round 3: Eleni    holding [21, 29, 33, 37, 41, 47, 48] plays the 21 
Round 3: Nathan   holding [13, 19, 23, 25, 31, 38, 44] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
16 20 26 28 30 32 45 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [16, 20, 26, 28, 30, 32, 45] plays the 28 
Round 3: Nicholas holding [10, 11, 22, 35, 40, 43, 46] plays the 35 
Nicholas wins the round which contains 1 penalty points

Round 4: Nicholas holding [10, 11, 22, 40, 43, 46] plays the 46 
Round 4: Eleni    holding [29, 33, 37, 41, 47, 48] plays the 48 
Round 4: Nathan   holding [13, 23, 25, 31, 38, 44] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
16 20 26 30 32 45 0 0 0 0 

16------------------------------------------------------------------------

Round 4: Eugenius holding [16, 20, 26, 30, 32, 45] plays the 16 
Eleni wins the round 

Round 5: Eleni    holding [29, 33, 37, 41, 47] plays the 47 
Round 5: Nathan   holding [13, 23, 25, 31, 44] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
20 26 30 32 45 0 0 0 0 0 

20------------------------------------------------------------------------

Round 5: Eugenius holding [20, 26, 30, 32, 45] plays the 20 
Round 5: Nicholas holding [10, 11, 22, 40, 43] plays the 43 
Eleni wins the round which contains 3 penalty points

Round 6: Eleni    holding [29, 33, 37, 41] plays the 29 
Round 6: Nathan   holding [13, 25, 31, 44] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
26 30 32 45 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 6: Eugenius holding [26, 30, 32, 45] plays the 26 
Round 6: Nicholas holding [10, 11, 22, 40] plays the 11 
Nathan wins the round which contains 3 penalty points

Round 7: Nathan   holding [13, 25, 44] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
30 32 45 0 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 7: Eugenius holding [30, 32, 45] plays the 30 
Round 7: Nicholas holding [10, 22, 40] plays the 40 
Round 7: Eleni    holding [33, 37, 41] plays the 41 
Nicholas wins the round which contains 1 penalty points

Round 8: Nicholas holding [10, 22] plays the 22 
Round 8: Eleni    holding [33, 37] plays the 33 
Round 8: Nathan   holding [13, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
32 45 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 8: Eugenius holding [32, 45] plays the 32 
Nathan wins the round 

Round 9: Nathan   holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Round 9: Nicholas holding [10] plays the 10 
Round 9: Eleni    holding [37] plays the 37 
Eleni wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 2 penalty points Nicholas (system)
#3 with 3 penalty points Nathan (system)
#4 with 13 penalty points Eleni (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 362940 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 15, 18, 23, 24, 28, 30, 37, 39, 44]
Table position 1: Peter   : [13, 16, 17, 19, 27, 29, 36, 38, 41, 48]
Table position 2: Nicholas: [10, 14, 20, 21, 32, 35, 42, 45, 46, 47]
Table position 3: Heather : [12, 22, 25, 26, 31, 33, 34, 40, 43, 49]

Discards:
Eugenius [37, 39, 44]
Peter    [16, 27, 41]
Nicholas [32, 35, 46]
Heather  [25, 31, 34]


Debug output from Eugenius
------------------------------------------------------------------------
11 15 18 23 24 25 28 30 31 34 

15------------------------------------------------------------------------

Round 0: Eugenius holding [11, 15, 18, 23, 24, 25, 28, 30, 31, 34] plays the 15 
Round 0: Peter    holding [13, 17, 19, 29, 36, 37, 38, 39, 44, 48] plays the 36 
Round 0: Nicholas holding [10, 14, 16, 20, 21, 27, 41, 42, 45, 47] plays the 27 
Round 0: Heather  holding [12, 22, 26, 32, 33, 35, 40, 43, 46, 49] plays the 40 
Heather wins the round 

Round 1: Heather  holding [12, 22, 26, 32, 33, 35, 43, 46, 49] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
11 18 23 24 25 28 30 31 34 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [11, 18, 23, 24, 25, 28, 30, 31, 34] plays the 18 
Round 1: Peter    holding [13, 17, 19, 29, 37, 38, 39, 44, 48] plays the 38 
Round 1: Nicholas holding [10, 14, 16, 20, 21, 41, 42, 45, 47] plays the 10 
Peter wins the round 

Round 2: Peter    holding [13, 17, 19, 29, 37, 39, 44, 48] plays the 39 
Round 2: Nicholas holding [14, 16, 20, 21, 41, 42, 45, 47] plays the 45 
Round 2: Heather  holding [12, 22, 26, 33, 35, 43, 46, 49] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 24 25 28 30 31 34 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [11, 23, 24, 25, 28, 30, 31, 34] plays the 24 
Nicholas wins the round 

Round 3: Nicholas holding [14, 16, 20, 21, 41, 42, 47] plays the 21 
Round 3: Heather  holding [22, 26, 33, 35, 43, 46, 49] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 25 28 30 31 34 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [11, 23, 25, 28, 30, 31, 34] plays the 28 
Round 3: Peter    holding [13, 17, 19, 29, 37, 44, 48] plays the 48 
Peter wins the round 

Round 4: Peter    holding [13, 17, 19, 29, 37, 44] plays the 44 
Round 4: Nicholas holding [14, 16, 20, 41, 42, 47] plays the 16 
Round 4: Heather  holding [22, 26, 35, 43, 46, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 25 30 31 34 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [11, 23, 25, 30, 31, 34] plays the 30 
Heather wins the round 

Round 5: Heather  holding [22, 26, 35, 43, 49] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 25 31 34 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [11, 23, 25, 31, 34] plays the 34 
Round 5: Peter    holding [13, 17, 19, 29, 37] plays the 13 
Round 5: Nicholas holding [14, 20, 41, 42, 47] plays the 42 
Nicholas wins the round which contains 8 penalty points

Round 6: Nicholas holding [14, 20, 41, 47] plays the 41 
Round 6: Heather  holding [22, 35, 43, 49] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 25 31 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 23, 25, 31] plays the 11 
Round 6: Peter    holding [17, 19, 29, 37] plays the 29 
Heather wins the round which contains 4 penalty points

Round 7: Heather  holding [22, 35, 49] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 31 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 7: Eugenius holding [23, 25, 31] plays the 23 
Round 7: Peter    holding [17, 19, 37] plays the 37 
Round 7: Nicholas holding [14, 20, 47] plays the 20 
Heather wins the round which contains 2 penalty points

Round 8: Heather  holding [35, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
25 31 0 0 0 0 0 0 0 0 

25 chah------------------------------------------------------------------------

Round 8: Eugenius holding [25, 31] plays the 25 
Round 8: Peter    holding [17, 19] plays the 17 
Round 8: Nicholas holding [14, 47] plays the 14 
Heather wins the round which contains 1 penalty points

Round 9: Heather  holding [35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Round 9: Peter    holding [19] plays the 19 
Round 9: Nicholas holding [47] plays the 47 
Heather wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Peter (system)
#3 with 8 penalty points Nicholas (system)
#4 with 10 penalty points Heather (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11207870 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Oscar   : [10, 13, 21, 22, 23, 37, 41, 45, 48, 49]
Table position 1: Dean    : [11, 12, 24, 25, 29, 32, 33, 35, 36, 43]
Table position 2: Minh    : [15, 18, 19, 20, 26, 30, 40, 42, 44, 46]
Table position 3: Eugenius: [14, 16, 17, 27, 28, 31, 34, 38, 39, 47]

Discards:
Oscar    [13, 23, 37]
Dean     [12, 25, 35]
Minh     [20, 40, 44]
Eugenius [38, 39, 47]

Round 0: Oscar    holding [10, 21, 22, 38, 39, 41, 45, 47, 48, 49] plays the 48 
Round 0: Dean     holding [11, 13, 23, 24, 29, 32, 33, 36, 37, 43] plays the 24 
Round 0: Minh     holding [12, 15, 18, 19, 25, 26, 30, 35, 42, 46] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 17 20 27 28 31 34 40 44 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 16, 17, 20, 27, 28, 31, 34, 40, 44] plays the 14 
Oscar wins the round 

Round 1: Oscar    holding [10, 21, 22, 38, 39, 41, 45, 47, 49] plays the 38 
Round 1: Dean     holding [11, 13, 23, 29, 32, 33, 36, 37, 43] plays the 36 
Round 1: Minh     holding [12, 18, 19, 25, 26, 30, 35, 42, 46] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 20 27 28 31 34 40 44 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 17, 20, 27, 28, 31, 34, 40, 44] plays the 16 
Oscar wins the round 

Round 2: Oscar    holding [10, 21, 22, 39, 41, 45, 47, 49] plays the 39 
Round 2: Dean     holding [11, 13, 23, 29, 32, 33, 37, 43] plays the 33 
Round 2: Minh     holding [12, 19, 25, 26, 30, 35, 42, 46] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
17 20 27 28 31 34 40 44 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [17, 20, 27, 28, 31, 34, 40, 44] plays the 27 
Minh wins the round which contains 7 penalty points

Round 3: Minh     holding [12, 19, 25, 26, 30, 35, 46] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
17 20 28 31 34 40 44 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [17, 20, 28, 31, 34, 40, 44] plays the 20 
Round 3: Oscar    holding [10, 21, 22, 41, 45, 47, 49] plays the 49 
Round 3: Dean     holding [11, 13, 23, 29, 32, 37, 43] plays the 23 
Oscar wins the round which contains 1 penalty points

Round 4: Oscar    holding [10, 21, 22, 41, 45, 47] plays the 10 
Round 4: Dean     holding [11, 13, 29, 32, 37, 43] plays the 32 
Round 4: Minh     holding [12, 19, 25, 26, 30, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
17 28 31 34 40 44 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [17, 28, 31, 34, 40, 44] plays the 28 
Minh wins the round 

Round 5: Minh     holding [12, 19, 25, 26, 30] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 34 40 44 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [17, 31, 34, 40, 44] plays the 34 
Round 5: Oscar    holding [21, 22, 41, 45, 47] plays the 22 
Round 5: Dean     holding [11, 13, 29, 37, 43] plays the 11 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
17 31 40 44 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 31, 40, 44] plays the 17 
Round 6: Oscar    holding [21, 41, 45, 47] plays the 47 
Round 6: Dean     holding [13, 29, 37, 43] plays the 37 
Round 6: Minh     holding [12, 19, 25, 30] plays the 19 
Oscar wins the round which contains 4 penalty points

Round 7: Oscar    holding [21, 41, 45] plays the 21 
Round 7: Dean     holding [13, 29, 43] plays the 43 
Round 7: Minh     holding [12, 25, 30] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
31 40 44 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 7: Eugenius holding [31, 40, 44] plays the 31 
Minh wins the round which contains 2 penalty points

Round 8: Minh     holding [12, 25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
40 44 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 8: Eugenius holding [40, 44] plays the 40 
Round 8: Oscar    holding [41, 45] plays the 45 
Round 8: Dean     holding [13, 29] plays the 29 
Oscar wins the round which contains 1 penalty points

Round 9: Oscar    holding [41] plays the 41 
Round 9: Dean     holding [13] plays the 13 
Round 9: Minh     holding [12] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
44 0 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 9: Eugenius holding [44] plays the 44 
Oscar wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Dean (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 8 penalty points Oscar (system)
#4 with 9 penalty points Minh (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1011283 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius : [14, 17, 18, 26, 27, 29, 31, 36, 39, 41]
Table position 1: Gal      : [12, 16, 20, 21, 30, 33, 42, 44, 46, 48]
Table position 2: Elizabeth: [10, 15, 24, 25, 28, 37, 38, 40, 43, 45]
Table position 3: Harrison : [11, 13, 19, 22, 23, 32, 34, 35, 47, 49]

Discards:
Eugenius  [36, 39, 41]
Gal       [16, 20, 44]
Elizabeth [25, 43, 45]
Harrison  [13, 23, 49]


Debug output from Eugenius
------------------------------------------------------------------------
13 14 17 18 23 26 27 29 31 49 

14------------------------------------------------------------------------

Round 0: Eugenius  holding [13, 14, 17, 18, 23, 26, 27, 29, 31, 49] plays the 14 
Round 0: Gal       holding [12, 21, 30, 33, 36, 39, 41, 42, 46, 48] plays the 48 
Round 0: Elizabeth holding [10, 15, 16, 20, 24, 28, 37, 38, 40, 44] plays the 10 
Round 0: Harrison  holding [11, 19, 22, 25, 32, 34, 35, 43, 45, 47] plays the 34 
Gal wins the round 

Round 1: Gal       holding [12, 21, 30, 33, 36, 39, 41, 42, 46] plays the 46 
Round 1: Elizabeth holding [15, 16, 20, 24, 28, 37, 38, 40, 44] plays the 24 
Round 1: Harrison  holding [11, 19, 22, 25, 32, 35, 43, 45, 47] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 18 23 26 27 29 31 49 0 

18------------------------------------------------------------------------

Round 1: Eugenius  holding [13, 17, 18, 23, 26, 27, 29, 31, 49] plays the 18 
Gal wins the round 

Round 2: Gal       holding [12, 21, 30, 33, 36, 39, 41, 42] plays the 36 
Round 2: Elizabeth holding [15, 16, 20, 28, 37, 38, 40, 44] plays the 44 
Round 2: Harrison  holding [11, 19, 25, 32, 35, 43, 45, 47] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 26 27 29 31 49 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius  holding [13, 17, 23, 26, 27, 29, 31, 49] plays the 26 
Harrison wins the round 

Round 3: Harrison  holding [11, 19, 25, 32, 35, 43, 47] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 27 29 31 49 0 0 0 

13 chah------------------------------------------------------------------------

Round 3: Eugenius  holding [13, 17, 23, 27, 29, 31, 49] plays the 13 
Round 3: Gal       holding [12, 21, 30, 33, 39, 41, 42] plays the 30 
Round 3: Elizabeth holding [15, 16, 20, 28, 37, 38, 40] plays the 15 
Gal wins the round which contains 1 penalty points

Round 4: Gal       holding [12, 21, 33, 39, 41, 42] plays the 42 
Round 4: Elizabeth holding [16, 20, 28, 37, 38, 40] plays the 28 
Round 4: Harrison  holding [11, 19, 32, 35, 43, 47] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 27 29 31 49 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius  holding [17, 23, 27, 29, 31, 49] plays the 27 
Gal wins the round which contains 7 penalty points

Round 5: Gal       holding [12, 21, 33, 39, 41] plays the 41 
Round 5: Elizabeth holding [16, 20, 37, 38, 40] plays the 37 
Round 5: Harrison  holding [11, 19, 32, 43, 47] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 29 31 49 0 0 0 0 0 

17------------------------------------------------------------------------

Round 5: Eugenius  holding [17, 23, 29, 31, 49] plays the 17 
Gal wins the round which contains 4 penalty points

Round 6: Gal       holding [12, 21, 33, 39] plays the 12 
Round 6: Elizabeth holding [16, 20, 38, 40] plays the 16 
Round 6: Harrison  holding [19, 32, 43, 47] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 31 49 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 6: Eugenius  holding [23, 29, 31, 49] plays the 23 
Harrison wins the round which contains 1 penalty points

Round 7: Harrison  holding [19, 43, 47] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 49 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius  holding [29, 31, 49] plays the 29 
Round 7: Gal       holding [21, 33, 39] plays the 21 
Round 7: Elizabeth holding [20, 38, 40] plays the 40 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
31 49 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius  holding [31, 49] plays the 31 
Round 8: Gal       holding [33, 39] plays the 33 
Round 8: Elizabeth holding [20, 38] plays the 20 
Round 8: Harrison  holding [43, 47] plays the 47 
Harrison wins the round which contains 2 penalty points

Round 9: Harrison  holding [43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 9: Eugenius  holding [49] plays the 49 
Round 9: Gal       holding [39] plays the 39 
Round 9: Elizabeth holding [38] plays the 38 
Harrison wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Elizabeth (system)
#2 with 2 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Harrison (system)
#4 with 12 penalty points Gal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6575025 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Alex    : [10, 12, 13, 14, 20, 21, 35, 38, 47, 49]
Table position 1: Mitchell: [11, 17, 22, 30, 32, 33, 40, 42, 43, 46]
Table position 2: Stephen : [15, 16, 18, 19, 27, 28, 34, 36, 41, 45]
Table position 3: Eugenius: [23, 24, 25, 26, 29, 31, 37, 39, 44, 48]

Discards:
Alex     [14, 20, 38]
Mitchell [17, 22, 32]
Stephen  [19, 34, 36]
Eugenius [39, 44, 48]

Round 0: Alex     holding [10, 12, 13, 21, 35, 39, 44, 47, 48, 49] plays the 44 
Round 0: Mitchell holding [11, 14, 20, 30, 33, 38, 40, 42, 43, 46] plays the 30 
Round 0: Stephen  holding [15, 16, 17, 18, 22, 27, 28, 32, 41, 45] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 24 25 26 29 31 34 36 37 

24------------------------------------------------------------------------

Round 0: Eugenius holding [19, 23, 24, 25, 26, 29, 31, 34, 36, 37] plays the 24 
Alex wins the round 

Round 1: Alex     holding [10, 12, 13, 21, 35, 39, 47, 48, 49] plays the 49 
Round 1: Mitchell holding [11, 14, 20, 33, 38, 40, 42, 43, 46] plays the 14 
Round 1: Stephen  holding [15, 16, 17, 22, 27, 28, 32, 41, 45] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 25 26 29 31 34 36 37 0 

19 chah------------------------------------------------------------------------

Round 1: Eugenius holding [19, 23, 25, 26, 29, 31, 34, 36, 37] plays the 19 
Alex wins the round which contains 1 penalty points

Round 2: Alex     holding [10, 12, 13, 21, 35, 39, 47, 48] plays the 12 
Round 2: Mitchell holding [11, 20, 33, 38, 40, 42, 43, 46] plays the 46 
Round 2: Stephen  holding [15, 16, 17, 22, 27, 32, 41, 45] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 26 29 31 34 36 37 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [23, 25, 26, 29, 31, 34, 36, 37] plays the 26 
Mitchell wins the round 

Round 3: Mitchell holding [11, 20, 33, 38, 40, 42, 43] plays the 40 
Round 3: Stephen  holding [15, 17, 22, 27, 32, 41, 45] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 29 31 34 36 37 0 0 0 

25------------------------------------------------------------------------

Round 3: Eugenius holding [23, 25, 29, 31, 34, 36, 37] plays the 25 
Round 3: Alex     holding [10, 13, 21, 35, 39, 47, 48] plays the 10 
Mitchell wins the round 

Round 4: Mitchell holding [11, 20, 33, 38, 42, 43] plays the 33 
Round 4: Stephen  holding [15, 17, 22, 27, 41, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 31 34 36 37 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius holding [23, 29, 31, 34, 36, 37] plays the 36 
Round 4: Alex     holding [13, 21, 35, 39, 47, 48] plays the 39 
Stephen wins the round 

Round 5: Stephen  holding [15, 17, 22, 27, 41] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 31 34 37 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 5: Eugenius holding [23, 29, 31, 34, 37] plays the 23 
Round 5: Alex     holding [13, 21, 35, 47, 48] plays the 21 
Round 5: Mitchell holding [11, 20, 38, 42, 43] plays the 42 
Mitchell wins the round which contains 8 penalty points

Round 6: Mitchell holding [11, 20, 38, 43] plays the 20 
Round 6: Stephen  holding [15, 17, 22, 41] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 34 37 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 6: Eugenius holding [29, 31, 34, 37] plays the 34 
Round 6: Alex     holding [13, 35, 47, 48] plays the 35 
Alex wins the round 

Round 7: Alex     holding [13, 47, 48] plays the 13 
Round 7: Mitchell holding [11, 38, 43] plays the 11 
Round 7: Stephen  holding [15, 17, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 37 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 37] plays the 29 
Stephen wins the round which contains 4 penalty points

Round 8: Stephen  holding [15, 17] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius holding [31, 37] plays the 31 
Round 8: Alex     holding [47, 48] plays the 48 
Round 8: Mitchell holding [38, 43] plays the 38 
Alex wins the round which contains 1 penalty points

Round 9: Alex     holding [47] plays the 47 
Round 9: Mitchell holding [43] plays the 43 
Round 9: Stephen  holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Alex wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Stephen (system)
#3 with 6 penalty points Alex (system)
#4 with 8 penalty points Mitchell (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 8089042 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Benjamin: [11, 13, 15, 16, 19, 29, 34, 38, 39, 49]
Table position 1: Emily   : [12, 14, 18, 24, 25, 32, 36, 45, 47, 48]
Table position 2: Eugenius: [22, 23, 26, 30, 31, 33, 35, 42, 43, 44]
Table position 3: Peter   : [10, 17, 20, 21, 27, 28, 37, 40, 41, 46]

Discards:
Benjamin [13, 34, 49]
Emily    [12, 14, 18]
Eugenius [42, 43, 44]
Peter    [17, 40, 46]

Round 0: Benjamin holding [11, 15, 16, 17, 19, 29, 38, 39, 40, 46] plays the 46 
Round 0: Emily    holding [13, 24, 25, 32, 34, 36, 45, 47, 48, 49] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 18 22 23 26 30 31 33 35 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 14, 18, 22, 23, 26, 30, 31, 33, 35] plays the 12 
Round 0: Peter    holding [10, 20, 21, 27, 28, 37, 41, 42, 43, 44] plays the 28 
Benjamin wins the round 

Round 1: Benjamin holding [11, 15, 16, 17, 19, 29, 38, 39, 40] plays the 39 
Round 1: Emily    holding [13, 24, 25, 32, 36, 45, 47, 48, 49] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
14 18 22 23 26 30 31 33 35 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [14, 18, 22, 23, 26, 30, 31, 33, 35] plays the 18 
Round 1: Peter    holding [10, 20, 21, 27, 37, 41, 42, 43, 44] plays the 21 
Benjamin wins the round 

Round 2: Benjamin holding [11, 15, 16, 17, 19, 29, 38, 40] plays the 16 
Round 2: Emily    holding [13, 24, 25, 32, 45, 47, 48, 49] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
14 22 23 26 30 31 33 35 0 0 

14------------------------------------------------------------------------

Round 2: Eugenius holding [14, 22, 23, 26, 30, 31, 33, 35] plays the 14 
Round 2: Peter    holding [10, 20, 27, 37, 41, 42, 43, 44] plays the 20 
Emily wins the round 

Round 3: Emily    holding [13, 24, 25, 45, 47, 48, 49] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
22 23 26 30 31 33 35 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [22, 23, 26, 30, 31, 33, 35] plays the 30 
Round 3: Peter    holding [10, 27, 37, 41, 42, 43, 44] plays the 27 
Round 3: Benjamin holding [11, 15, 17, 19, 29, 38, 40] plays the 15 
Emily wins the round 

Round 4: Emily    holding [13, 24, 25, 47, 48, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
22 23 26 31 33 35 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [22, 23, 26, 31, 33, 35] plays the 35 
Round 4: Peter    holding [10, 37, 41, 42, 43, 44] plays the 42 
Round 4: Benjamin holding [11, 17, 19, 29, 38, 40] plays the 38 
Emily wins the round which contains 7 penalty points

Round 5: Emily    holding [13, 24, 25, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
22 23 26 31 33 0 0 0 0 0 

22------------------------------------------------------------------------

Round 5: Eugenius holding [22, 23, 26, 31, 33] plays the 22 
Round 5: Peter    holding [10, 37, 41, 43, 44] plays the 44 
Round 5: Benjamin holding [11, 17, 19, 29, 40] plays the 40 
Emily wins the round 

Round 6: Emily    holding [13, 24, 25, 47] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
23 26 31 33 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 6: Eugenius holding [23, 26, 31, 33] plays the 26 
Round 6: Peter    holding [10, 37, 41, 43] plays the 10 
Round 6: Benjamin holding [11, 17, 19, 29] plays the 17 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
23 31 33 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius holding [23, 31, 33] plays the 23 
Round 7: Peter    holding [37, 41, 43] plays the 43 
Round 7: Benjamin holding [11, 19, 29] plays the 19 
Round 7: Emily    holding [13, 25, 47] plays the 47 
Emily wins the round which contains 4 penalty points

Round 8: Emily    holding [13, 25] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
31 33 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 33] plays the 31 
Round 8: Peter    holding [37, 41] plays the 37 
Round 8: Benjamin holding [11, 29] plays the 11 
Peter wins the round which contains 4 penalty points

Round 9: Peter    holding [41] plays the 41 
Round 9: Benjamin holding [29] plays the 29 
Round 9: Emily    holding [25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
33 0 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 9: Eugenius holding [33] plays the 33 
Peter wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Benjamin (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Peter (system)
#4 with 11 penalty points Emily (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3321061 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Elizabeth: [10, 12, 26, 37, 38, 39, 42, 45, 46, 49]
Table position 1: Dean     : [14, 17, 18, 22, 23, 27, 28, 32, 43, 47]
Table position 2: Xue      : [13, 15, 20, 29, 30, 31, 33, 36, 41, 48]
Table position 3: Eugenius : [11, 16, 19, 21, 24, 25, 34, 35, 40, 44]

Discards:
Elizabeth [12, 38, 42]
Dean      [17, 27, 47]
Xue       [15, 20, 36]
Eugenius  [35, 40, 44]

Round 0: Elizabeth holding [10, 26, 35, 37, 39, 40, 44, 45, 46, 49] plays the 45 
Round 0: Dean      holding [12, 14, 18, 22, 23, 28, 32, 38, 42, 43] plays the 42 
Round 0: Xue       holding [13, 17, 27, 29, 30, 31, 33, 41, 47, 48] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 16 19 20 21 24 25 34 36 

15------------------------------------------------------------------------

Round 0: Eugenius  holding [11, 15, 16, 19, 20, 21, 24, 25, 34, 36] plays the 15 
Elizabeth wins the round which contains 7 penalty points

Round 1: Elizabeth holding [10, 26, 35, 37, 39, 40, 44, 46, 49] plays the 35 
Round 1: Dean      holding [12, 14, 18, 22, 23, 28, 32, 38, 43] plays the 14 
Round 1: Xue       holding [13, 17, 27, 29, 31, 33, 41, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 19 20 21 24 25 34 36 0 

20------------------------------------------------------------------------

Round 1: Eugenius  holding [11, 16, 19, 20, 21, 24, 25, 34, 36] plays the 20 
Elizabeth wins the round 

Round 2: Elizabeth holding [10, 26, 37, 39, 40, 44, 46, 49] plays the 10 
Round 2: Dean      holding [12, 18, 22, 23, 28, 32, 38, 43] plays the 12 
Round 2: Xue       holding [13, 17, 27, 29, 31, 33, 41, 47] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 19 21 24 25 34 36 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius  holding [11, 16, 19, 21, 24, 25, 34, 36] plays the 16 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
11 19 21 24 25 34 36 0 0 0 

11------------------------------------------------------------------------

Round 3: Eugenius  holding [11, 19, 21, 24, 25, 34, 36] plays the 11 
Round 3: Elizabeth holding [26, 37, 39, 40, 44, 46, 49] plays the 37 
Round 3: Dean      holding [18, 22, 23, 28, 32, 38, 43] plays the 23 
Round 3: Xue       holding [13, 17, 27, 31, 33, 41, 47] plays the 13 
Elizabeth wins the round which contains 4 penalty points

Round 4: Elizabeth holding [26, 39, 40, 44, 46, 49] plays the 26 
Round 4: Dean      holding [18, 22, 28, 32, 38, 43] plays the 32 
Round 4: Xue       holding [17, 27, 31, 33, 41, 47] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
19 21 24 25 34 36 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius  holding [19, 21, 24, 25, 34, 36] plays the 24 
Dean wins the round which contains 1 penalty points

Round 5: Dean      holding [18, 22, 28, 38, 43] plays the 43 
Round 5: Xue       holding [27, 31, 33, 41, 47] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
19 21 25 34 36 0 0 0 0 0 

19------------------------------------------------------------------------

Round 5: Eugenius  holding [19, 21, 25, 34, 36] plays the 19 
Round 5: Elizabeth holding [39, 40, 44, 46, 49] plays the 49 
Dean wins the round which contains 3 penalty points

Round 6: Dean      holding [18, 22, 28, 38] plays the 22 
Round 6: Xue       holding [27, 31, 33, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
21 25 34 36 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 6: Eugenius  holding [21, 25, 34, 36] plays the 34 
Round 6: Elizabeth holding [39, 40, 44, 46] plays the 44 
Elizabeth wins the round 

Round 7: Elizabeth holding [39, 40, 46] plays the 39 
Round 7: Dean      holding [18, 28, 38] plays the 18 
Round 7: Xue       holding [27, 31, 47] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
21 25 36 0 0 0 0 0 0 0 

21------------------------------------------------------------------------

Round 7: Eugenius  holding [21, 25, 36] plays the 21 
Elizabeth wins the round 

Round 8: Elizabeth holding [40, 46] plays the 40 
Round 8: Dean      holding [28, 38] plays the 28 
Round 8: Xue       holding [31, 47] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
25 36 0 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 8: Eugenius  holding [25, 36] plays the 25 
Elizabeth wins the round which contains 1 penalty points

Round 9: Elizabeth holding [46] plays the 46 
Round 9: Dean      holding [38] plays the 38 
Round 9: Xue       holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
36 0 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 9: Eugenius  holding [36] plays the 36 
Elizabeth wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Xue (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Dean (system)
#4 with 13 penalty points Elizabeth (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13948988 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Zachary : [11, 13, 16, 21, 22, 24, 26, 36, 45, 49]
Table position 1: Dylan   : [15, 17, 18, 20, 30, 32, 33, 35, 38, 47]
Table position 2: Eugenius: [10, 12, 14, 23, 25, 29, 34, 42, 43, 46]
Table position 3: Peter   : [19, 27, 28, 31, 37, 39, 40, 41, 44, 48]

Discards:
Zachary  [21, 24, 45]
Dylan    [17, 33, 35]
Eugenius [42, 43, 46]
Peter    [19, 39, 41]

Round 0: Zachary  holding [11, 13, 16, 19, 22, 26, 36, 39, 41, 49] plays the 49 
Round 0: Dylan    holding [15, 18, 20, 21, 24, 30, 32, 38, 45, 47] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 14 17 23 25 29 33 34 35 

14------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 14, 17, 23, 25, 29, 33, 34, 35] plays the 14 
Round 0: Peter    holding [27, 28, 31, 37, 40, 42, 43, 44, 46, 48] plays the 28 
Zachary wins the round 

Round 1: Zachary  holding [11, 13, 16, 19, 22, 26, 36, 39, 41] plays the 36 
Round 1: Dylan    holding [15, 18, 20, 24, 30, 32, 38, 45, 47] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 17 23 25 29 33 34 35 0 

10------------------------------------------------------------------------

Round 1: Eugenius holding [10, 12, 17, 23, 25, 29, 33, 34, 35] plays the 10 
Round 1: Peter    holding [27, 31, 37, 40, 42, 43, 44, 46, 48] plays the 48 
Peter wins the round 

Round 2: Peter    holding [27, 31, 37, 40, 42, 43, 44, 46] plays the 27 
Round 2: Zachary  holding [11, 13, 16, 19, 22, 26, 39, 41] plays the 39 
Round 2: Dylan    holding [15, 18, 20, 24, 30, 38, 45, 47] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
12 17 23 25 29 33 34 35 0 0 

12------------------------------------------------------------------------

Round 2: Eugenius holding [12, 17, 23, 25, 29, 33, 34, 35] plays the 12 
Zachary wins the round 

Round 3: Zachary  holding [11, 13, 16, 19, 22, 26, 41] plays the 26 
Round 3: Dylan    holding [15, 18, 20, 24, 38, 45, 47] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 25 29 33 34 35 0 0 0 

34------------------------------------------------------------------------

Round 3: Eugenius holding [17, 23, 25, 29, 33, 34, 35] plays the 34 
Round 3: Peter    holding [31, 37, 40, 42, 43, 44, 46] plays the 46 
Peter wins the round 

Round 4: Peter    holding [31, 37, 40, 42, 43, 44] plays the 42 
Round 4: Zachary  holding [11, 13, 16, 19, 22, 41] plays the 16 
Round 4: Dylan    holding [15, 18, 20, 38, 45, 47] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 25 29 33 35 0 0 0 0 

33------------------------------------------------------------------------

Round 4: Eugenius holding [17, 23, 25, 29, 33, 35] plays the 33 
Peter wins the round which contains 7 penalty points

Round 5: Peter    holding [31, 37, 40, 43, 44] plays the 44 
Round 5: Zachary  holding [11, 13, 19, 22, 41] plays the 22 
Round 5: Dylan    holding [15, 20, 38, 45, 47] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 25 29 35 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 5: Eugenius holding [17, 23, 25, 29, 35] plays the 17 
Peter wins the round which contains 1 penalty points

Round 6: Peter    holding [31, 37, 40, 43] plays the 37 
Round 6: Zachary  holding [11, 13, 19, 41] plays the 13 
Round 6: Dylan    holding [15, 20, 45, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 29 35 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 25, 29, 35] plays the 23 
Dylan wins the round which contains 4 penalty points

Round 7: Dylan    holding [15, 20, 45] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 35 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 7: Eugenius holding [25, 29, 35] plays the 25 
Round 7: Peter    holding [31, 40, 43] plays the 40 
Round 7: Zachary  holding [11, 19, 41] plays the 11 
Peter wins the round which contains 1 penalty points

Round 8: Peter    holding [31, 43] plays the 43 
Round 8: Zachary  holding [19, 41] plays the 19 
Round 8: Dylan    holding [20, 45] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
29 35 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 35] plays the 29 
Peter wins the round which contains 3 penalty points

Round 9: Peter    holding [31] plays the 31 
Round 9: Zachary  holding [41] plays the 41 
Round 9: Dylan    holding [45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Zachary wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 2 penalty points Zachary (system)
#3 with 4 penalty points Dylan (system)
#4 with 12 penalty points Peter (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11341660 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Minh    : [16, 18, 21, 23, 25, 28, 29, 30, 31, 47]
Table position 1: David   : [10, 14, 19, 22, 24, 32, 38, 42, 48, 49]
Table position 2: Eugenius: [13, 17, 20, 26, 27, 34, 36, 39, 40, 43]
Table position 3: Dylan   : [11, 12, 15, 33, 35, 37, 41, 44, 45, 46]

Discards:
Minh     [16, 18, 23]
David    [24, 42, 49]
Eugenius [39, 40, 43]
Dylan    [15, 41, 46]

Round 0: Minh     holding [15, 21, 25, 28, 29, 30, 31, 41, 46, 47] plays the 28 
Round 0: David    holding [10, 14, 16, 18, 19, 22, 23, 32, 38, 48] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 20 24 26 27 34 36 42 49 

20------------------------------------------------------------------------

Round 0: Eugenius holding [13, 17, 20, 24, 26, 27, 34, 36, 42, 49] plays the 20 
Round 0: Dylan    holding [11, 12, 33, 35, 37, 39, 40, 43, 44, 45] plays the 35 
Dylan wins the round 

Round 1: Dylan    holding [11, 12, 33, 37, 39, 40, 43, 44, 45] plays the 33 
Round 1: Minh     holding [15, 21, 25, 29, 30, 31, 41, 46, 47] plays the 15 
Round 1: David    holding [14, 16, 18, 19, 22, 23, 32, 38, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 24 26 27 34 36 42 49 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [13, 17, 24, 26, 27, 34, 36, 42, 49] plays the 24 
David wins the round 

Round 2: David    holding [14, 16, 18, 19, 22, 23, 32, 38] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 26 27 34 36 42 49 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 26, 27, 34, 36, 42, 49] plays the 26 
Round 2: Dylan    holding [11, 12, 37, 39, 40, 43, 44, 45] plays the 44 
Round 2: Minh     holding [21, 25, 29, 30, 31, 41, 46, 47] plays the 46 
Minh wins the round 

Round 3: Minh     holding [21, 25, 29, 30, 31, 41, 47] plays the 30 
Round 3: David    holding [14, 16, 18, 19, 23, 32, 38] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 27 34 36 42 49 0 0 0 

27------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 27, 34, 36, 42, 49] plays the 27 
Round 3: Dylan    holding [11, 12, 37, 39, 40, 43, 45] plays the 40 
Dylan wins the round 

Round 4: Dylan    holding [11, 12, 37, 39, 43, 45] plays the 39 
Round 4: Minh     holding [21, 25, 29, 31, 41, 47] plays the 21 
Round 4: David    holding [14, 16, 19, 23, 32, 38] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 34 36 42 49 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 34, 36, 42, 49] plays the 36 
Dylan wins the round 

Round 5: Dylan    holding [11, 12, 37, 43, 45] plays the 45 
Round 5: Minh     holding [25, 29, 31, 41, 47] plays the 25 
Round 5: David    holding [16, 19, 23, 32, 38] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 34 42 49 0 0 0 0 0 

42------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 34, 42, 49] plays the 42 
Dylan wins the round which contains 7 penalty points

Round 6: Dylan    holding [11, 12, 37, 43] plays the 12 
Round 6: Minh     holding [29, 31, 41, 47] plays the 31 
Round 6: David    holding [19, 23, 32, 38] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 34 49 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 6: Eugenius holding [13, 17, 34, 49] plays the 34 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 17 49 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 17, 49] plays the 13 
Round 7: Dylan    holding [11, 37, 43] plays the 43 
Round 7: Minh     holding [29, 41, 47] plays the 29 
Round 7: David    holding [19, 23, 38] plays the 19 
Dylan wins the round which contains 4 penalty points

Round 8: Dylan    holding [11, 37] plays the 11 
Round 8: Minh     holding [41, 47] plays the 47 
Round 8: David    holding [23, 38] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
17 49 0 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 8: Eugenius holding [17, 49] plays the 17 
Minh wins the round which contains 4 penalty points

Round 9: Minh     holding [41] plays the 41 
Round 9: David    holding [38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 9: Eugenius holding [49] plays the 49 
Round 9: Dylan    holding [37] plays the 37 
Minh wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points David (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Minh (system)
#4 with 11 penalty points Dylan (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13714597 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 14, 19, 22, 28, 32, 33, 37, 43, 46]
Table position 1: Marc    : [13, 15, 20, 21, 34, 36, 40, 41, 42, 44]
Table position 2: Finbar  : [11, 18, 25, 26, 29, 30, 39, 45, 48, 49]
Table position 3: Benjamin: [12, 16, 17, 23, 24, 27, 31, 35, 38, 47]

Discards:
Eugenius [37, 43, 46]
Marc     [34, 36, 44]
Finbar   [18, 39, 48]
Benjamin [12, 24, 35]


Debug output from Eugenius
------------------------------------------------------------------------
10 12 14 19 22 24 28 32 33 35 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 14, 19, 22, 24, 28, 32, 33, 35] plays the 10 
Round 0: Marc     holding [13, 15, 20, 21, 37, 40, 41, 42, 43, 46] plays the 46 
Round 0: Finbar   holding [11, 25, 26, 29, 30, 34, 36, 44, 45, 49] plays the 25 
Round 0: Benjamin holding [16, 17, 18, 23, 27, 31, 38, 39, 47, 48] plays the 18 
Marc wins the round 

Round 1: Marc     holding [13, 15, 20, 21, 37, 40, 41, 42, 43] plays the 21 
Round 1: Finbar   holding [11, 26, 29, 30, 34, 36, 44, 45, 49] plays the 45 
Round 1: Benjamin holding [16, 17, 23, 27, 31, 38, 39, 47, 48] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 19 22 24 28 32 33 35 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 14, 19, 22, 24, 28, 32, 33, 35] plays the 12 
Finbar wins the round 

Round 2: Finbar   holding [11, 26, 29, 30, 34, 36, 44, 49] plays the 44 
Round 2: Benjamin holding [16, 17, 23, 27, 31, 38, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
14 19 22 24 28 32 33 35 0 0 

14------------------------------------------------------------------------

Round 2: Eugenius holding [14, 19, 22, 24, 28, 32, 33, 35] plays the 14 
Round 2: Marc     holding [13, 15, 20, 37, 40, 41, 42, 43] plays the 40 
Benjamin wins the round 

Round 3: Benjamin holding [16, 17, 23, 27, 31, 38, 47] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 24 28 32 33 35 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [19, 22, 24, 28, 32, 33, 35] plays the 22 
Round 3: Marc     holding [13, 15, 20, 37, 41, 42, 43] plays the 42 
Round 3: Finbar   holding [11, 26, 29, 30, 34, 36, 49] plays the 34 
Marc wins the round which contains 7 penalty points

Round 4: Marc     holding [13, 15, 20, 37, 41, 43] plays the 20 
Round 4: Finbar   holding [11, 26, 29, 30, 36, 49] plays the 26 
Round 4: Benjamin holding [17, 23, 27, 31, 38, 47] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
19 24 28 32 33 35 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius holding [19, 24, 28, 32, 33, 35] plays the 24 
Benjamin wins the round 

Round 5: Benjamin holding [17, 23, 27, 31, 47] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
19 28 32 33 35 0 0 0 0 0 

33------------------------------------------------------------------------

Round 5: Eugenius holding [19, 28, 32, 33, 35] plays the 33 
Round 5: Marc     holding [13, 15, 37, 41, 43] plays the 15 
Round 5: Finbar   holding [11, 29, 30, 36, 49] plays the 30 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
19 28 32 35 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 6: Eugenius holding [19, 28, 32, 35] plays the 28 
Round 6: Marc     holding [13, 37, 41, 43] plays the 43 
Round 6: Finbar   holding [11, 29, 36, 49] plays the 49 
Round 6: Benjamin holding [17, 23, 31, 47] plays the 31 
Finbar wins the round which contains 2 penalty points

Round 7: Finbar   holding [11, 29, 36] plays the 11 
Round 7: Benjamin holding [17, 23, 47] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
19 32 35 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius holding [19, 32, 35] plays the 19 
Round 7: Marc     holding [13, 37, 41] plays the 13 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
32 35 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 8: Eugenius holding [32, 35] plays the 32 
Round 8: Marc     holding [37, 41] plays the 37 
Round 8: Finbar   holding [29, 36] plays the 36 
Round 8: Benjamin holding [23, 47] plays the 47 
Finbar wins the round which contains 2 penalty points

Round 9: Finbar   holding [29] plays the 29 
Round 9: Benjamin holding [23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Round 9: Marc     holding [41] plays the 41 
Marc wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Benjamin (system)
#2 with 4 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Finbar (system)
#4 with 10 penalty points Marc (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5435438 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: George  : [10, 12, 18, 22, 26, 37, 43, 44, 46, 49]
Table position 1: Eleni   : [11, 14, 17, 19, 24, 25, 28, 30, 36, 48]
Table position 2: Reede   : [13, 20, 21, 23, 27, 33, 34, 35, 38, 39]
Table position 3: Eugenius: [15, 16, 29, 31, 32, 40, 41, 42, 45, 47]

Discards:
George   [10, 43, 46]
Eleni    [17, 19, 25]
Reede    [13, 20, 34]
Eugenius [42, 45, 47]

Round 0: George   holding [12, 18, 22, 26, 37, 42, 44, 45, 47, 49] plays the 18 
Round 0: Eleni    holding [10, 11, 14, 24, 28, 30, 36, 43, 46, 48] plays the 46 
Round 0: Reede    holding [17, 19, 21, 23, 25, 27, 33, 35, 38, 39] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 16 20 29 31 32 34 40 41 

15------------------------------------------------------------------------

Round 0: Eugenius holding [13, 15, 16, 20, 29, 31, 32, 34, 40, 41] plays the 15 
Eleni wins the round 

Round 1: Eleni    holding [10, 11, 14, 24, 28, 30, 36, 43, 48] plays the 30 
Round 1: Reede    holding [17, 19, 21, 23, 25, 33, 35, 38, 39] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 20 29 31 32 34 40 41 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [13, 16, 20, 29, 31, 32, 34, 40, 41] plays the 16 
Round 1: George   holding [12, 22, 26, 37, 42, 44, 45, 47, 49] plays the 42 
George wins the round which contains 7 penalty points

Round 2: George   holding [12, 22, 26, 37, 44, 45, 47, 49] plays the 12 
Round 2: Eleni    holding [10, 11, 14, 24, 28, 36, 43, 48] plays the 14 
Round 2: Reede    holding [17, 19, 23, 25, 33, 35, 38, 39] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
13 20 29 31 32 34 40 41 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [13, 20, 29, 31, 32, 34, 40, 41] plays the 20 
Reede wins the round 

Round 3: Reede    holding [17, 19, 23, 25, 35, 38, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 31 32 34 40 41 0 0 0 

13 chah------------------------------------------------------------------------

Round 3: Eugenius holding [13, 29, 31, 32, 34, 40, 41] plays the 13 
Round 3: George   holding [22, 26, 37, 44, 45, 47, 49] plays the 45 
Round 3: Eleni    holding [10, 11, 24, 28, 36, 43, 48] plays the 24 
George wins the round which contains 1 penalty points

Round 4: George   holding [22, 26, 37, 44, 47, 49] plays the 37 
Round 4: Eleni    holding [10, 11, 28, 36, 43, 48] plays the 43 
Round 4: Reede    holding [17, 19, 23, 25, 35, 38] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 32 34 40 41 0 0 0 0 

29------------------------------------------------------------------------

Round 4: Eugenius holding [29, 31, 32, 34, 40, 41] plays the 29 
Eleni wins the round which contains 4 penalty points

Round 5: Eleni    holding [10, 11, 28, 36, 48] plays the 48 
Round 5: Reede    holding [17, 19, 25, 35, 38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
31 32 34 40 41 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [31, 32, 34, 40, 41] plays the 32 
Round 5: George   holding [22, 26, 44, 47, 49] plays the 22 
Eleni wins the round 

Round 6: Eleni    holding [10, 11, 28, 36] plays the 36 
Round 6: Reede    holding [17, 19, 25, 35] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
31 34 40 41 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 6: Eugenius holding [31, 34, 40, 41] plays the 34 
Round 6: George   holding [26, 44, 47, 49] plays the 26 
Eleni wins the round 

Round 7: Eleni    holding [10, 11, 28] plays the 28 
Round 7: Reede    holding [17, 19, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
31 40 41 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 7: Eugenius holding [31, 40, 41] plays the 40 
Round 7: George   holding [44, 47, 49] plays the 49 
George wins the round 

Round 8: George   holding [44, 47] plays the 47 
Round 8: Eleni    holding [10, 11] plays the 11 
Round 8: Reede    holding [17, 19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
31 41 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 41] plays the 31 
George wins the round which contains 4 penalty points

Round 9: George   holding [44] plays the 44 
Round 9: Eleni    holding [10] plays the 10 
Round 9: Reede    holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41 chah------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
George wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Reede (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Eleni (system)
#4 with 14 penalty points George (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15880590 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eleni   : [15, 16, 17, 21, 24, 27, 35, 36, 44, 48]
Table position 1: Andrew  : [13, 20, 23, 28, 32, 33, 34, 37, 43, 45]
Table position 2: Reede   : [14, 18, 19, 26, 30, 31, 39, 41, 46, 49]
Table position 3: Eugenius: [10, 11, 12, 22, 25, 29, 38, 40, 42, 47]

Discards:
Eleni    [15, 16, 24]
Andrew   [23, 37, 45]
Reede    [26, 30, 41]
Eugenius [40, 42, 47]

Round 0: Eleni    holding [17, 21, 27, 35, 36, 40, 42, 44, 47, 48] plays the 40 
Round 0: Andrew   holding [13, 15, 16, 20, 24, 28, 32, 33, 34, 43] plays the 32 
Round 0: Reede    holding [14, 18, 19, 23, 31, 37, 39, 45, 46, 49] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 12 22 25 26 29 30 38 41 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 12, 22, 25, 26, 29, 30, 38, 41] plays the 10 
Eleni wins the round 

Round 1: Eleni    holding [17, 21, 27, 35, 36, 42, 44, 47, 48] plays the 44 
Round 1: Andrew   holding [13, 15, 16, 20, 24, 28, 33, 34, 43] plays the 28 
Round 1: Reede    holding [18, 19, 23, 31, 37, 39, 45, 46, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 22 25 26 29 30 38 41 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [11, 12, 22, 25, 26, 29, 30, 38, 41] plays the 12 
Reede wins the round 

Round 2: Reede    holding [18, 19, 23, 31, 37, 39, 45, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
11 22 25 26 29 30 38 41 0 0 

11 chah------------------------------------------------------------------------

Round 2: Eugenius holding [11, 22, 25, 26, 29, 30, 38, 41] plays the 11 
Round 2: Eleni    holding [17, 21, 27, 35, 36, 42, 47, 48] plays the 35 
Round 2: Andrew   holding [13, 15, 16, 20, 24, 33, 34, 43] plays the 33 
Reede wins the round which contains 1 penalty points

Round 3: Reede    holding [18, 19, 23, 31, 37, 39, 45] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 26 29 30 38 41 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [22, 25, 26, 29, 30, 38, 41] plays the 26 
Round 3: Eleni    holding [17, 21, 27, 36, 42, 47, 48] plays the 42 
Round 3: Andrew   holding [13, 15, 16, 20, 24, 34, 43] plays the 15 
Eleni wins the round which contains 7 penalty points

Round 4: Eleni    holding [17, 21, 27, 36, 47, 48] plays the 27 
Round 4: Andrew   holding [13, 16, 20, 24, 34, 43] plays the 24 
Round 4: Reede    holding [18, 19, 23, 31, 37, 45] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 29 30 38 41 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [22, 25, 29, 30, 38, 41] plays the 30 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
22 25 29 38 41 0 0 0 0 0 

22------------------------------------------------------------------------

Round 5: Eugenius holding [22, 25, 29, 38, 41] plays the 22 
Round 5: Eleni    holding [17, 21, 36, 47, 48] plays the 36 
Round 5: Andrew   holding [13, 16, 20, 34, 43] plays the 34 
Round 5: Reede    holding [19, 23, 31, 37, 45] plays the 45 
Eleni wins the round 

Round 6: Eleni    holding [17, 21, 47, 48] plays the 48 
Round 6: Andrew   holding [13, 16, 20, 43] plays the 16 
Round 6: Reede    holding [19, 23, 31, 37] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 38 41 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 6: Eugenius holding [25, 29, 38, 41] plays the 38 
Eleni wins the round which contains 1 penalty points

Round 7: Eleni    holding [17, 21, 47] plays the 47 
Round 7: Andrew   holding [13, 20, 43] plays the 43 
Round 7: Reede    holding [23, 31, 37] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 41 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [25, 29, 41] plays the 29 
Eleni wins the round which contains 4 penalty points

Round 8: Eleni    holding [17, 21] plays the 21 
Round 8: Andrew   holding [13, 20] plays the 13 
Round 8: Reede    holding [23, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
25 41 0 0 0 0 0 0 0 0 

25 chah------------------------------------------------------------------------

Round 8: Eugenius holding [25, 41] plays the 25 
Eleni wins the round which contains 2 penalty points

Round 9: Eleni    holding [17] plays the 17 
Round 9: Andrew   holding [20] plays the 20 
Round 9: Reede    holding [23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Andrew (system)
#2 with 1 penalty points Reede (system)
#3 with 3 penalty points Eugenius (dodo.c)
#4 with 14 penalty points Eleni (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5808754 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Alex    : [16, 19, 22, 32, 41, 42, 46, 47, 48, 49]
Table position 1: Oscar   : [15, 20, 24, 25, 33, 34, 35, 37, 39, 44]
Table position 2: Michael : [12, 13, 21, 27, 28, 29, 30, 31, 36, 43]
Table position 3: Eugenius: [10, 11, 14, 17, 18, 23, 26, 38, 40, 45]

Discards:
Alex     [16, 19, 47]
Oscar    [24, 25, 37]
Michael  [28, 30, 43]
Eugenius [38, 40, 45]

Round 0: Alex     holding [22, 32, 38, 40, 41, 42, 45, 46, 48, 49] plays the 40 
Round 0: Oscar    holding [15, 16, 19, 20, 33, 34, 35, 39, 44, 47] plays the 35 
Round 0: Michael  holding [12, 13, 21, 24, 25, 27, 29, 31, 36, 37] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 14 17 18 23 26 28 30 43 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 14, 17, 18, 23, 26, 28, 30, 43] plays the 10 
Alex wins the round 

Round 1: Alex     holding [22, 32, 38, 41, 42, 45, 46, 48, 49] plays the 46 
Round 1: Oscar    holding [15, 16, 19, 20, 33, 34, 39, 44, 47] plays the 20 
Round 1: Michael  holding [12, 13, 21, 24, 25, 27, 29, 31, 37] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 17 18 23 26 28 30 43 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [11, 14, 17, 18, 23, 26, 28, 30, 43] plays the 14 
Alex wins the round 

Round 2: Alex     holding [22, 32, 38, 41, 42, 45, 48, 49] plays the 38 
Round 2: Oscar    holding [15, 16, 19, 33, 34, 39, 44, 47] plays the 44 
Round 2: Michael  holding [12, 13, 21, 25, 27, 29, 31, 37] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 18 23 26 28 30 43 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [11, 17, 18, 23, 26, 28, 30, 43] plays the 18 
Oscar wins the round 

Round 3: Oscar    holding [15, 16, 19, 33, 34, 39, 47] plays the 16 
Round 3: Michael  holding [13, 21, 25, 27, 29, 31, 37] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 23 26 28 30 43 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [11, 17, 23, 26, 28, 30, 43] plays the 26 
Round 3: Alex     holding [22, 32, 41, 42, 45, 48, 49] plays the 32 
Alex wins the round which contains 1 penalty points

Round 4: Alex     holding [22, 41, 42, 45, 48, 49] plays the 42 
Round 4: Oscar    holding [15, 19, 33, 34, 39, 47] plays the 33 
Round 4: Michael  holding [13, 21, 25, 27, 31, 37] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 23 28 30 43 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [11, 17, 23, 28, 30, 43] plays the 28 
Alex wins the round which contains 7 penalty points

Round 5: Alex     holding [22, 41, 45, 48, 49] plays the 41 
Round 5: Oscar    holding [15, 19, 34, 39, 47] plays the 19 
Round 5: Michael  holding [13, 21, 25, 31, 37] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 23 30 43 0 0 0 0 0 

11------------------------------------------------------------------------

Round 5: Eugenius holding [11, 17, 23, 30, 43] plays the 11 
Alex wins the round which contains 4 penalty points

Round 6: Alex     holding [22, 45, 48, 49] plays the 48 
Round 6: Oscar    holding [15, 34, 39, 47] plays the 15 
Round 6: Michael  holding [21, 25, 31, 37] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 30 43 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 6: Eugenius holding [17, 23, 30, 43] plays the 30 
Alex wins the round 

Round 7: Alex     holding [22, 45, 49] plays the 49 
Round 7: Oscar    holding [34, 39, 47] plays the 39 
Round 7: Michael  holding [25, 31, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 43 0 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 7: Eugenius holding [17, 23, 43] plays the 17 
Alex wins the round which contains 2 penalty points

Round 8: Alex     holding [22, 45] plays the 22 
Round 8: Oscar    holding [34, 47] plays the 34 
Round 8: Michael  holding [25, 31] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
23 43 0 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 8: Eugenius holding [23, 43] plays the 23 
Oscar wins the round which contains 1 penalty points

Round 9: Oscar    holding [47] plays the 47 
Round 9: Michael  holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Round 9: Alex     holding [45] plays the 45 
Oscar wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Michael (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Oscar (system)
#4 with 14 penalty points Alex (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12619624 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Claire  : [10, 12, 14, 17, 32, 34, 37, 39, 44, 47]
Table position 1: Eugenius: [16, 18, 22, 25, 26, 28, 29, 36, 45, 46]
Table position 2: Stephen : [11, 19, 23, 27, 31, 33, 41, 42, 48, 49]
Table position 3: Dylan   : [13, 15, 20, 21, 24, 30, 35, 38, 40, 43]

Discards:
Claire   [14, 37, 39]
Eugenius [36, 45, 46]
Stephen  [31, 33, 41]
Dylan    [21, 40, 43]

Round 0: Claire   holding [10, 12, 17, 21, 32, 34, 40, 43, 44, 47] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 18 22 25 26 28 29 37 39 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 16, 18, 22, 25, 26, 28, 29, 37, 39] plays the 14 
Round 0: Stephen  holding [11, 19, 23, 27, 36, 42, 45, 46, 48, 49] plays the 42 
Round 0: Dylan    holding [13, 15, 20, 24, 30, 31, 33, 35, 38, 41] plays the 33 
Claire wins the round which contains 7 penalty points

Round 1: Claire   holding [10, 12, 17, 21, 32, 34, 40, 43, 47] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
16 18 22 25 26 28 29 37 39 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 18, 22, 25, 26, 28, 29, 37, 39] plays the 16 
Round 1: Stephen  holding [11, 19, 23, 27, 36, 45, 46, 48, 49] plays the 48 
Round 1: Dylan    holding [13, 15, 20, 24, 30, 31, 35, 38, 41] plays the 38 
Stephen wins the round 

Round 2: Stephen  holding [11, 19, 23, 27, 36, 45, 46, 49] plays the 45 
Round 2: Dylan    holding [13, 15, 20, 24, 30, 31, 35, 41] plays the 35 
Round 2: Claire   holding [10, 12, 17, 21, 32, 34, 43, 47] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
18 22 25 26 28 29 37 39 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [18, 22, 25, 26, 28, 29, 37, 39] plays the 18 
Stephen wins the round 

Round 3: Stephen  holding [11, 19, 23, 27, 36, 46, 49] plays the 49 
Round 3: Dylan    holding [13, 15, 20, 24, 30, 31, 41] plays the 13 
Round 3: Claire   holding [12, 17, 21, 32, 34, 43, 47] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 26 28 29 37 39 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [22, 25, 26, 28, 29, 37, 39] plays the 28 
Stephen wins the round which contains 1 penalty points

Round 4: Stephen  holding [11, 19, 23, 27, 36, 46] plays the 23 
Round 4: Dylan    holding [15, 20, 24, 30, 31, 41] plays the 41 
Round 4: Claire   holding [12, 17, 32, 34, 43, 47] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 26 29 37 39 0 0 0 0 

29------------------------------------------------------------------------

Round 4: Eugenius holding [22, 25, 26, 29, 37, 39] plays the 29 
Claire wins the round which contains 4 penalty points

Round 5: Claire   holding [12, 17, 32, 34, 47] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 26 37 39 0 0 0 0 0 

22------------------------------------------------------------------------

Round 5: Eugenius holding [22, 25, 26, 37, 39] plays the 22 
Round 5: Stephen  holding [11, 19, 27, 36, 46] plays the 36 
Round 5: Dylan    holding [15, 20, 24, 30, 31] plays the 30 
Stephen wins the round 

Round 6: Stephen  holding [11, 19, 27, 46] plays the 46 
Round 6: Dylan    holding [15, 20, 24, 31] plays the 20 
Round 6: Claire   holding [12, 17, 34, 47] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
25 26 37 39 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 6: Eugenius holding [25, 26, 37, 39] plays the 26 
Stephen wins the round 

Round 7: Stephen  holding [11, 19, 27] plays the 19 
Round 7: Dylan    holding [15, 24, 31] plays the 31 
Round 7: Claire   holding [17, 34, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
25 37 39 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 7: Eugenius holding [25, 37, 39] plays the 37 
Claire wins the round which contains 4 penalty points

Round 8: Claire   holding [17, 34] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
25 39 0 0 0 0 0 0 0 0 

25 chah------------------------------------------------------------------------

Round 8: Eugenius holding [25, 39] plays the 25 
Round 8: Stephen  holding [11, 27] plays the 11 
Round 8: Dylan    holding [15, 24] plays the 24 
Claire wins the round which contains 1 penalty points

Round 9: Claire   holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Round 9: Stephen  holding [27] plays the 27 
Round 9: Dylan    holding [15] plays the 15 
Claire wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Dylan (system)
#3 with 1 penalty points Stephen (system)
#4 with 17 penalty points Claire (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1540761 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [12, 14, 21, 30, 33, 37, 41, 42, 43, 49]
Table position 1: Braedon : [13, 19, 23, 28, 29, 34, 35, 36, 39, 47]
Table position 2: David   : [11, 16, 17, 24, 25, 38, 40, 44, 46, 48]
Table position 3: Jamal   : [10, 15, 18, 20, 22, 26, 27, 31, 32, 45]

Discards:
Eugenius [42, 43, 49]
Braedon  [23, 36, 47]
David    [11, 16, 46]
Jamal    [10, 20, 27]


Debug output from Eugenius
------------------------------------------------------------------------
10 12 14 20 21 27 30 33 37 41 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 14, 20, 21, 27, 30, 33, 37, 41] plays the 10 
Round 0: Braedon  holding [13, 19, 28, 29, 34, 35, 39, 42, 43, 49] plays the 34 
Round 0: David    holding [17, 23, 24, 25, 36, 38, 40, 44, 47, 48] plays the 25 
Round 0: Jamal    holding [11, 15, 16, 18, 22, 26, 31, 32, 45, 46] plays the 45 
Jamal wins the round 

Round 1: Jamal    holding [11, 15, 16, 18, 22, 26, 31, 32, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 20 21 27 30 33 37 41 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 14, 20, 21, 27, 30, 33, 37, 41] plays the 12 
Round 1: Braedon  holding [13, 19, 28, 29, 35, 39, 42, 43, 49] plays the 28 
Round 1: David    holding [17, 23, 24, 36, 38, 40, 44, 47, 48] plays the 36 
Jamal wins the round 

Round 2: Jamal    holding [11, 15, 16, 18, 22, 26, 31, 32] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
14 20 21 27 30 33 37 41 0 0 

14------------------------------------------------------------------------

Round 2: Eugenius holding [14, 20, 21, 27, 30, 33, 37, 41] plays the 14 
Round 2: Braedon  holding [13, 19, 29, 35, 39, 42, 43, 49] plays the 42 
Round 2: David    holding [17, 23, 24, 38, 40, 44, 47, 48] plays the 40 
Braedon wins the round which contains 7 penalty points

Round 3: Braedon  holding [13, 19, 29, 35, 39, 43, 49] plays the 49 
Round 3: David    holding [17, 23, 24, 38, 44, 47, 48] plays the 48 
Round 3: Jamal    holding [11, 15, 16, 22, 26, 31, 32] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
20 21 27 30 33 37 41 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [20, 21, 27, 30, 33, 37, 41] plays the 21 
Braedon wins the round which contains 1 penalty points

Round 4: Braedon  holding [13, 19, 29, 35, 39, 43] plays the 29 
Round 4: David    holding [17, 23, 24, 38, 44, 47] plays the 23 
Round 4: Jamal    holding [15, 16, 22, 26, 31, 32] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
20 27 30 33 37 41 0 0 0 0 

37------------------------------------------------------------------------

Round 4: Eugenius holding [20, 27, 30, 33, 37, 41] plays the 37 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
20 27 30 33 41 0 0 0 0 0 

20------------------------------------------------------------------------

Round 5: Eugenius holding [20, 27, 30, 33, 41] plays the 20 
Round 5: Braedon  holding [13, 19, 35, 39, 43] plays the 35 
Round 5: David    holding [17, 24, 38, 44, 47] plays the 44 
Round 5: Jamal    holding [15, 16, 22, 26, 32] plays the 22 
David wins the round 

Round 6: David    holding [17, 24, 38, 47] plays the 17 
Round 6: Jamal    holding [15, 16, 26, 32] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
27 30 33 41 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 6: Eugenius holding [27, 30, 33, 41] plays the 41 
Round 6: Braedon  holding [13, 19, 39, 43] plays the 43 
Braedon wins the round which contains 3 penalty points

Round 7: Braedon  holding [13, 19, 39] plays the 39 
Round 7: David    holding [24, 38, 47] plays the 24 
Round 7: Jamal    holding [15, 16, 32] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
27 30 33 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [27, 30, 33] plays the 27 
Braedon wins the round 

Round 8: Braedon  holding [13, 19] plays the 19 
Round 8: David    holding [38, 47] plays the 47 
Round 8: Jamal    holding [16, 32] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
30 33 0 0 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 8: Eugenius holding [30, 33] plays the 30 
David wins the round which contains 2 penalty points

Round 9: David    holding [38] plays the 38 
Round 9: Jamal    holding [32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
33 0 0 0 0 0 0 0 0 0 

33 chah------------------------------------------------------------------------

Round 9: Eugenius holding [33] plays the 33 
Round 9: Braedon  holding [13] plays the 13 
David wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Jamal (system)
#2 with 3 penalty points David (system)
#3 with 4 penalty points Eugenius (dodo.c)
#4 with 11 penalty points Braedon (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7196718 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 12, 22, 24, 25, 26, 27, 29, 47, 49]
Table position 1: Benjamin: [13, 15, 18, 20, 23, 28, 31, 36, 40, 48]
Table position 2: Heather : [11, 14, 17, 21, 33, 35, 37, 38, 41, 43]
Table position 3: Eleni   : [16, 19, 30, 32, 34, 39, 42, 44, 45, 46]

Discards:
Eugenius [29, 47, 49]
Benjamin [20, 40, 48]
Heather  [33, 35, 38]
Eleni    [30, 34, 44]


Debug output from Eugenius
------------------------------------------------------------------------
10 12 22 24 25 26 27 30 34 44 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 22, 24, 25, 26, 27, 30, 34, 44] plays the 10 
Round 0: Benjamin holding [13, 15, 18, 23, 28, 29, 31, 36, 47, 49] plays the 15 
Round 0: Heather  holding [11, 14, 17, 20, 21, 37, 40, 41, 43, 48] plays the 20 
Round 0: Eleni    holding [16, 19, 32, 33, 35, 38, 39, 42, 45, 46] plays the 46 
Eleni wins the round 

Round 1: Eleni    holding [16, 19, 32, 33, 35, 38, 39, 42, 45] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
12 22 24 25 26 27 30 34 44 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 22, 24, 25, 26, 27, 30, 34, 44] plays the 12 
Round 1: Benjamin holding [13, 18, 23, 28, 29, 31, 36, 47, 49] plays the 36 
Round 1: Heather  holding [11, 14, 17, 21, 37, 40, 41, 43, 48] plays the 14 
Benjamin wins the round 

Round 2: Benjamin holding [13, 18, 23, 28, 29, 31, 47, 49] plays the 49 
Round 2: Heather  holding [11, 17, 21, 37, 40, 41, 43, 48] plays the 21 
Round 2: Eleni    holding [16, 19, 33, 35, 38, 39, 42, 45] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
22 24 25 26 27 30 34 44 0 0 

22 chah------------------------------------------------------------------------

Round 2: Eugenius holding [22, 24, 25, 26, 27, 30, 34, 44] plays the 22 
Benjamin wins the round which contains 7 penalty points

Round 3: Benjamin holding [13, 18, 23, 28, 29, 31, 47] plays the 28 
Round 3: Heather  holding [11, 17, 37, 40, 41, 43, 48] plays the 48 
Round 3: Eleni    holding [16, 19, 33, 35, 38, 39, 45] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
24 25 26 27 30 34 44 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [24, 25, 26, 27, 30, 34, 44] plays the 24 
Heather wins the round 

Round 4: Heather  holding [11, 17, 37, 40, 41, 43] plays the 40 
Round 4: Eleni    holding [16, 19, 33, 35, 39, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
25 26 27 30 34 44 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [25, 26, 27, 30, 34, 44] plays the 25 
Round 4: Benjamin holding [13, 18, 23, 29, 31, 47] plays the 18 
Eleni wins the round 

Round 5: Eleni    holding [16, 19, 33, 35, 39] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
26 27 30 34 44 0 0 0 0 0 

26------------------------------------------------------------------------

Round 5: Eugenius holding [26, 27, 30, 34, 44] plays the 26 
Round 5: Benjamin holding [13, 23, 29, 31, 47] plays the 31 
Round 5: Heather  holding [11, 17, 37, 41, 43] plays the 11 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
27 30 34 44 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 6: Eugenius holding [27, 30, 34, 44] plays the 27 
Round 6: Benjamin holding [13, 23, 29, 47] plays the 13 
Round 6: Heather  holding [17, 37, 41, 43] plays the 43 
Round 6: Eleni    holding [19, 33, 35, 39] plays the 39 
Eleni wins the round which contains 2 penalty points

Round 7: Eleni    holding [19, 33, 35] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
30 34 44 0 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 7: Eugenius holding [30, 34, 44] plays the 30 
Round 7: Benjamin holding [23, 29, 47] plays the 47 
Round 7: Heather  holding [17, 37, 41] plays the 17 
Benjamin wins the round which contains 3 penalty points

Round 8: Benjamin holding [23, 29] plays the 29 
Round 8: Heather  holding [37, 41] plays the 41 
Round 8: Eleni    holding [33, 35] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
34 44 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 8: Eugenius holding [34, 44] plays the 34 
Heather wins the round which contains 2 penalty points

Round 9: Heather  holding [37] plays the 37 
Round 9: Eleni    holding [35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
44 0 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 9: Eugenius holding [44] plays the 44 
Round 9: Benjamin holding [23] plays the 23 
Heather wins the round which contains 2 penalty points


Finishing Positions

#1 with 2 penalty points Eugenius (dodo.c)
#1 with 2 penalty points Eleni (system)
#3 with 4 penalty points Heather (system)
#4 with 10 penalty points Benjamin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9761311 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eleni   : [10, 13, 21, 22, 25, 26, 27, 34, 40, 45]
Table position 1: Alex    : [12, 15, 17, 24, 28, 29, 35, 38, 43, 49]
Table position 2: Eugenius: [11, 16, 19, 23, 30, 31, 33, 37, 41, 46]
Table position 3: Sabrina : [14, 18, 20, 32, 36, 39, 42, 44, 47, 48]

Discards:
Eleni    [13, 21, 34]
Alex     [17, 28, 38]
Eugenius [37, 41, 46]
Sabrina  [14, 44, 47]

Round 0: Eleni    holding [10, 14, 22, 25, 26, 27, 40, 44, 45, 47] plays the 26 
Round 0: Alex     holding [12, 13, 15, 21, 24, 29, 34, 35, 43, 49] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 17 19 23 28 30 31 33 38 

16------------------------------------------------------------------------

Round 0: Eugenius holding [11, 16, 17, 19, 23, 28, 30, 31, 33, 38] plays the 16 
Round 0: Sabrina  holding [18, 20, 32, 36, 37, 39, 41, 42, 46, 48] plays the 42 
Sabrina wins the round which contains 7 penalty points

Round 1: Sabrina  holding [18, 20, 32, 36, 37, 39, 41, 46, 48] plays the 18 
Round 1: Eleni    holding [10, 14, 22, 25, 27, 40, 44, 45, 47] plays the 10 
Round 1: Alex     holding [13, 15, 21, 24, 29, 34, 35, 43, 49] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 19 23 28 30 31 33 38 0 

28------------------------------------------------------------------------

Round 1: Eugenius holding [11, 17, 19, 23, 28, 30, 31, 33, 38] plays the 28 
Alex wins the round 

Round 2: Alex     holding [13, 15, 21, 24, 29, 35, 43, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 19 23 30 31 33 38 0 0 

11 chah------------------------------------------------------------------------

Round 2: Eugenius holding [11, 17, 19, 23, 30, 31, 33, 38] plays the 11 
Round 2: Sabrina  holding [20, 32, 36, 37, 39, 41, 46, 48] plays the 46 
Round 2: Eleni    holding [14, 22, 25, 27, 40, 44, 45, 47] plays the 14 
Alex wins the round which contains 1 penalty points

Round 3: Alex     holding [13, 15, 21, 24, 29, 35, 43] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 30 31 33 38 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 23, 30, 31, 33, 38] plays the 30 
Round 3: Sabrina  holding [20, 32, 36, 37, 39, 41, 48] plays the 36 
Round 3: Eleni    holding [22, 25, 27, 40, 44, 45, 47] plays the 27 
Sabrina wins the round 

Round 4: Sabrina  holding [20, 32, 37, 39, 41, 48] plays the 32 
Round 4: Eleni    holding [22, 25, 40, 44, 45, 47] plays the 44 
Round 4: Alex     holding [13, 15, 24, 29, 35, 43] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 31 33 38 0 0 0 0 

38------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 23, 31, 33, 38] plays the 38 
Eleni wins the round 

Round 5: Eleni    holding [22, 25, 40, 45, 47] plays the 47 
Round 5: Alex     holding [13, 15, 29, 35, 43] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 31 33 0 0 0 0 0 

17------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 23, 31, 33] plays the 17 
Round 5: Sabrina  holding [20, 37, 39, 41, 48] plays the 37 
Eleni wins the round which contains 4 penalty points

Round 6: Eleni    holding [22, 25, 40, 45] plays the 22 
Round 6: Alex     holding [15, 29, 35, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 31 33 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 6: Eugenius holding [19, 23, 31, 33] plays the 33 
Round 6: Sabrina  holding [20, 39, 41, 48] plays the 48 
Sabrina wins the round which contains 1 penalty points

Round 7: Sabrina  holding [20, 39, 41] plays the 41 
Round 7: Eleni    holding [25, 40, 45] plays the 25 
Round 7: Alex     holding [15, 29, 35] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 31 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius holding [19, 23, 31] plays the 19 
Sabrina wins the round which contains 3 penalty points

Round 8: Sabrina  holding [20, 39] plays the 20 
Round 8: Eleni    holding [40, 45] plays the 45 
Round 8: Alex     holding [15, 35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 0 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 8: Eugenius holding [23, 31] plays the 23 
Eleni wins the round which contains 1 penalty points

Round 9: Eleni    holding [40] plays the 40 
Round 9: Alex     holding [15] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Round 9: Sabrina  holding [39] plays the 39 
Eleni wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Alex (system)
#3 with 6 penalty points Eleni (system)
#4 with 11 penalty points Sabrina (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2082136 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Michael : [10, 19, 21, 24, 25, 29, 30, 35, 38, 44]
Table position 1: Matthew : [12, 16, 18, 20, 22, 23, 27, 28, 37, 42]
Table position 2: Eugenius: [11, 26, 31, 32, 33, 40, 41, 43, 46, 49]
Table position 3: Connor  : [13, 14, 15, 17, 34, 36, 39, 45, 47, 48]

Discards:
Michael  [21, 30, 44]
Matthew  [12, 23, 28]
Eugenius [43, 46, 49]
Connor   [15, 45, 48]

Round 0: Michael  holding [10, 15, 19, 24, 25, 29, 35, 38, 45, 48] plays the 48 
Round 0: Matthew  holding [16, 18, 20, 21, 22, 27, 30, 37, 42, 44] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 23 26 28 31 32 33 40 41 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 23, 26, 28, 31, 32, 33, 40, 41] plays the 12 
Round 0: Connor   holding [13, 14, 17, 34, 36, 39, 43, 46, 47, 49] plays the 46 
Michael wins the round 

Round 1: Michael  holding [10, 15, 19, 24, 25, 29, 35, 38, 45] plays the 45 
Round 1: Matthew  holding [16, 18, 20, 21, 22, 27, 37, 42, 44] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 26 28 31 32 33 40 41 0 

33------------------------------------------------------------------------

Round 1: Eugenius holding [11, 23, 26, 28, 31, 32, 33, 40, 41] plays the 33 
Round 1: Connor   holding [13, 14, 17, 34, 36, 39, 43, 47, 49] plays the 39 
Michael wins the round 

Round 2: Michael  holding [10, 15, 19, 24, 25, 29, 35, 38] plays the 25 
Round 2: Matthew  holding [16, 18, 20, 21, 22, 37, 42, 44] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 26 28 31 32 40 41 0 0 

40------------------------------------------------------------------------

Round 2: Eugenius holding [11, 23, 26, 28, 31, 32, 40, 41] plays the 40 
Round 2: Connor   holding [13, 14, 17, 34, 36, 43, 47, 49] plays the 13 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
11 23 26 28 31 32 41 0 0 0 

11------------------------------------------------------------------------

Round 3: Eugenius holding [11, 23, 26, 28, 31, 32, 41] plays the 11 
Round 3: Connor   holding [14, 17, 34, 36, 43, 47, 49] plays the 17 
Round 3: Michael  holding [10, 15, 19, 24, 29, 35, 38] plays the 19 
Round 3: Matthew  holding [16, 18, 21, 22, 37, 42, 44] plays the 37 
Matthew wins the round which contains 4 penalty points

Round 4: Matthew  holding [16, 18, 21, 22, 42, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
23 26 28 31 32 41 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [23, 26, 28, 31, 32, 41] plays the 26 
Round 4: Connor   holding [14, 34, 36, 43, 47, 49] plays the 36 
Round 4: Michael  holding [10, 15, 24, 29, 35, 38] plays the 10 
Matthew wins the round 

Round 5: Matthew  holding [16, 18, 21, 22, 42] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
23 28 31 32 41 0 0 0 0 0 

28------------------------------------------------------------------------

Round 5: Eugenius holding [23, 28, 31, 32, 41] plays the 28 
Round 5: Connor   holding [14, 34, 43, 47, 49] plays the 14 
Round 5: Michael  holding [15, 24, 29, 35, 38] plays the 38 
Michael wins the round 

Round 6: Michael  holding [15, 24, 29, 35] plays the 35 
Round 6: Matthew  holding [18, 21, 22, 42] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 32 41 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 6: Eugenius holding [23, 31, 32, 41] plays the 23 
Round 6: Connor   holding [34, 43, 47, 49] plays the 49 
Connor wins the round which contains 1 penalty points

Round 7: Connor   holding [34, 43, 47] plays the 34 
Round 7: Michael  holding [15, 24, 29] plays the 24 
Round 7: Matthew  holding [18, 22, 42] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
31 32 41 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 7: Eugenius holding [31, 32, 41] plays the 32 
Connor wins the round 

Round 8: Connor   holding [43, 47] plays the 47 
Round 8: Michael  holding [15, 29] plays the 29 
Round 8: Matthew  holding [18, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
31 41 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 41] plays the 31 
Connor wins the round which contains 10 penalty points

Round 9: Connor   holding [43] plays the 43 
Round 9: Michael  holding [15] plays the 15 
Round 9: Matthew  holding [18] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Connor wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Michael (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Matthew (system)
#4 with 13 penalty points Connor (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13800421 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Jamal   : [10, 14, 21, 28, 34, 37, 38, 42, 43, 48]
Table position 1: Aydin   : [17, 19, 20, 25, 32, 36, 39, 44, 45, 47]
Table position 2: Eugenius: [11, 12, 13, 16, 22, 24, 30, 31, 33, 46]
Table position 3: Braedon : [15, 18, 23, 26, 27, 29, 35, 40, 41, 49]

Discards:
Jamal    [38, 42, 43]
Aydin    [19, 44, 45]
Eugenius [31, 33, 46]
Braedon  [35, 40, 41]

Round 0: Jamal    holding [10, 14, 21, 28, 34, 35, 37, 40, 41, 48] plays the 35 
Round 0: Aydin    holding [17, 20, 25, 32, 36, 38, 39, 42, 43, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 13 16 19 22 24 30 44 45 

30------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 13, 16, 19, 22, 24, 30, 44, 45] plays the 30 
Round 0: Braedon  holding [15, 18, 23, 26, 27, 29, 31, 33, 46, 49] plays the 49 
Braedon wins the round 

Round 1: Braedon  holding [15, 18, 23, 26, 27, 29, 31, 33, 46] plays the 46 
Round 1: Jamal    holding [10, 14, 21, 28, 34, 37, 40, 41, 48] plays the 34 
Round 1: Aydin    holding [17, 25, 32, 36, 38, 39, 42, 43, 47] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 13 16 19 22 24 44 45 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [11, 12, 13, 16, 19, 22, 24, 44, 45] plays the 12 
Braedon wins the round 

Round 2: Braedon  holding [15, 18, 23, 26, 27, 29, 31, 33] plays the 33 
Round 2: Jamal    holding [10, 14, 21, 28, 37, 40, 41, 48] plays the 48 
Round 2: Aydin    holding [17, 25, 36, 38, 39, 42, 43, 47] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 16 19 22 24 44 45 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 16, 19, 22, 24, 44, 45] plays the 22 
Jamal wins the round 

Round 3: Jamal    holding [10, 14, 21, 28, 37, 40, 41] plays the 28 
Round 3: Aydin    holding [17, 25, 38, 39, 42, 43, 47] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 16 19 24 44 45 0 0 0 

16------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 16, 19, 24, 44, 45] plays the 16 
Round 3: Braedon  holding [15, 18, 23, 26, 27, 29, 31] plays the 26 
Aydin wins the round 

Round 4: Aydin    holding [17, 25, 39, 42, 43, 47] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 24 44 45 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 19, 24, 44, 45] plays the 24 
Round 4: Braedon  holding [15, 18, 23, 27, 29, 31] plays the 18 
Round 4: Jamal    holding [10, 14, 21, 37, 40, 41] plays the 21 
Aydin wins the round 

Round 5: Aydin    holding [17, 25, 42, 43, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 44 45 0 0 0 0 0 

44------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 19, 44, 45] plays the 44 
Round 5: Braedon  holding [15, 23, 27, 29, 31] plays the 27 
Round 5: Jamal    holding [10, 14, 37, 40, 41] plays the 40 
Eugenius wins the round which contains 7 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 45 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 6: Eugenius holding [11, 13, 19, 45] plays the 45 
Round 6: Braedon  holding [15, 23, 29, 31] plays the 15 
Round 6: Jamal    holding [10, 14, 37, 41] plays the 10 
Round 6: Aydin    holding [17, 25, 43, 47] plays the 25 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 13 19 0 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 7: Eugenius holding [11, 13, 19] plays the 11 
Round 7: Braedon  holding [23, 29, 31] plays the 23 
Round 7: Jamal    holding [14, 37, 41] plays the 41 
Round 7: Aydin    holding [17, 43, 47] plays the 43 
Aydin wins the round which contains 4 penalty points

Round 8: Aydin    holding [17, 47] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 0 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 8: Eugenius holding [13, 19] plays the 13 
Round 8: Braedon  holding [29, 31] plays the 29 
Round 8: Jamal    holding [14, 37] plays the 37 
Jamal wins the round which contains 4 penalty points

Round 9: Jamal    holding [14] plays the 14 
Round 9: Aydin    holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
19 0 0 0 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 9: Eugenius holding [19] plays the 19 
Round 9: Braedon  holding [31] plays the 31 
Jamal wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Braedon (system)
#2 with 4 penalty points Aydin (system)
#3 with 7 penalty points Jamal (system)
#3 with 7 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1534048 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 11, 16, 20, 27, 30, 31, 33, 36, 43]
Table position 1: Andrew  : [12, 13, 15, 17, 23, 25, 29, 40, 47, 48]
Table position 2: Michael : [19, 21, 26, 32, 37, 39, 41, 42, 45, 49]
Table position 3: Nicholas: [14, 18, 22, 24, 28, 34, 35, 38, 44, 46]

Discards:
Eugenius [33, 36, 43]
Andrew   [17, 47, 48]
Michael  [32, 39, 41]
Nicholas [18, 34, 44]


Debug output from Eugenius
------------------------------------------------------------------------
10 11 16 18 20 27 30 31 34 44 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 16, 18, 20, 27, 30, 31, 34, 44] plays the 10 
Round 0: Andrew   holding [12, 13, 15, 23, 25, 29, 33, 36, 40, 43] plays the 25 
Round 0: Michael  holding [17, 19, 21, 26, 37, 42, 45, 47, 48, 49] plays the 42 
Round 0: Nicholas holding [14, 22, 24, 28, 32, 35, 38, 39, 41, 46] plays the 22 
Michael wins the round which contains 7 penalty points

Round 1: Michael  holding [17, 19, 21, 26, 37, 45, 47, 48, 49] plays the 48 
Round 1: Nicholas holding [14, 24, 28, 32, 35, 38, 39, 41, 46] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 18 20 27 30 31 34 44 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [11, 16, 18, 20, 27, 30, 31, 34, 44] plays the 16 
Round 1: Andrew   holding [12, 13, 15, 23, 29, 33, 36, 40, 43] plays the 15 
Michael wins the round 

Round 2: Michael  holding [17, 19, 21, 26, 37, 45, 47, 49] plays the 45 
Round 2: Nicholas holding [14, 24, 28, 32, 35, 38, 41, 46] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
11 18 20 27 30 31 34 44 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [11, 18, 20, 27, 30, 31, 34, 44] plays the 18 
Round 2: Andrew   holding [12, 13, 23, 29, 33, 36, 40, 43] plays the 36 
Michael wins the round 

Round 3: Michael  holding [17, 19, 21, 26, 37, 47, 49] plays the 49 
Round 3: Nicholas holding [14, 24, 28, 32, 38, 41, 46] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 20 27 30 31 34 44 0 0 0 

11 chah------------------------------------------------------------------------

Round 3: Eugenius holding [11, 20, 27, 30, 31, 34, 44] plays the 11 
Round 3: Andrew   holding [12, 13, 23, 29, 33, 40, 43] plays the 29 
Michael wins the round which contains 2 penalty points

Round 4: Michael  holding [17, 19, 21, 26, 37, 47] plays the 37 
Round 4: Nicholas holding [14, 24, 32, 38, 41, 46] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
20 27 30 31 34 44 0 0 0 0 

31------------------------------------------------------------------------

Round 4: Eugenius holding [20, 27, 30, 31, 34, 44] plays the 31 
Round 4: Andrew   holding [12, 13, 23, 33, 40, 43] plays the 13 
Nicholas wins the round which contains 4 penalty points

Round 5: Nicholas holding [14, 24, 32, 38, 46] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
20 27 30 34 44 0 0 0 0 0 

20------------------------------------------------------------------------

Round 5: Eugenius holding [20, 27, 30, 34, 44] plays the 20 
Round 5: Andrew   holding [12, 23, 33, 40, 43] plays the 12 
Round 5: Michael  holding [17, 19, 21, 26, 47] plays the 26 
Nicholas wins the round 

Round 6: Nicholas holding [14, 24, 38, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
27 30 34 44 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 6: Eugenius holding [27, 30, 34, 44] plays the 30 
Round 6: Andrew   holding [23, 33, 40, 43] plays the 40 
Round 6: Michael  holding [17, 19, 21, 47] plays the 47 
Nicholas wins the round which contains 1 penalty points

Round 7: Nicholas holding [14, 24, 38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
27 34 44 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 7: Eugenius holding [27, 34, 44] plays the 34 
Round 7: Andrew   holding [23, 33, 43] plays the 23 
Round 7: Michael  holding [17, 19, 21] plays the 17 
Nicholas wins the round which contains 2 penalty points

Round 8: Nicholas holding [14, 24] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
27 44 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 8: Eugenius holding [27, 44] plays the 44 
Round 8: Andrew   holding [33, 43] plays the 43 
Round 8: Michael  holding [19, 21] plays the 21 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
27 0 0 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 9: Eugenius holding [27] plays the 27 
Round 9: Andrew   holding [33] plays the 33 
Round 9: Michael  holding [19] plays the 19 
Round 9: Nicholas holding [24] plays the 24 
Andrew wins the round which contains 1 penalty points


Finishing Positions

#1 with 1 penalty points Eugenius (dodo.c)
#1 with 1 penalty points Andrew (system)
#3 with 7 penalty points Nicholas (system)
#4 with 9 penalty points Michael (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5487245 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Oscar    : [10, 11, 17, 19, 25, 26, 30, 31, 33, 37]
Table position 1: Eugenius : [15, 18, 22, 27, 35, 39, 45, 46, 47, 49]
Table position 2: Elizabeth: [13, 14, 20, 24, 28, 32, 38, 41, 44, 48]
Table position 3: Dean     : [12, 16, 21, 23, 29, 34, 36, 40, 42, 43]

Discards:
Oscar     [25, 26, 37]
Eugenius  [46, 47, 49]
Elizabeth [32, 41, 44]
Dean      [12, 23, 36]

Round 0: Oscar     holding [10, 11, 12, 17, 19, 23, 30, 31, 33, 36] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
15 18 22 25 26 27 35 37 39 45 

15------------------------------------------------------------------------

Round 0: Eugenius  holding [15, 18, 22, 25, 26, 27, 35, 37, 39, 45] plays the 15 
Round 0: Elizabeth holding [13, 14, 20, 24, 28, 38, 46, 47, 48, 49] plays the 24 
Round 0: Dean      holding [16, 21, 29, 32, 34, 40, 41, 42, 43, 44] plays the 32 
Dean wins the round 

Round 1: Dean      holding [16, 21, 29, 34, 40, 41, 42, 43, 44] plays the 21 
Round 1: Oscar     holding [11, 12, 17, 19, 23, 30, 31, 33, 36] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
18 22 25 26 27 35 37 39 45 0 

18------------------------------------------------------------------------

Round 1: Eugenius  holding [18, 22, 25, 26, 27, 35, 37, 39, 45] plays the 18 
Round 1: Elizabeth holding [13, 14, 20, 28, 38, 46, 47, 48, 49] plays the 14 
Dean wins the round 

Round 2: Dean      holding [16, 29, 34, 40, 41, 42, 43, 44] plays the 16 
Round 2: Oscar     holding [11, 17, 19, 23, 30, 31, 33, 36] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 26 27 35 37 39 45 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius  holding [22, 25, 26, 27, 35, 37, 39, 45] plays the 22 
Round 2: Elizabeth holding [13, 20, 28, 38, 46, 47, 48, 49] plays the 48 
Elizabeth wins the round 

Round 3: Elizabeth holding [13, 20, 28, 38, 46, 47, 49] plays the 46 
Round 3: Dean      holding [29, 34, 40, 41, 42, 43, 44] plays the 34 
Round 3: Oscar     holding [11, 17, 19, 23, 30, 31, 33] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
25 26 27 35 37 39 45 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius  holding [25, 26, 27, 35, 37, 39, 45] plays the 26 
Elizabeth wins the round 

Round 4: Elizabeth holding [13, 20, 28, 38, 47, 49] plays the 28 
Round 4: Dean      holding [29, 40, 41, 42, 43, 44] plays the 40 
Round 4: Oscar     holding [11, 17, 19, 23, 31, 33] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
25 27 35 37 39 45 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius  holding [25, 27, 35, 37, 39, 45] plays the 35 
Dean wins the round which contains 1 penalty points

Round 5: Dean      holding [29, 41, 42, 43, 44] plays the 42 
Round 5: Oscar     holding [11, 17, 23, 31, 33] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
25 27 37 39 45 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius  holding [25, 27, 37, 39, 45] plays the 27 
Round 5: Elizabeth holding [13, 20, 38, 47, 49] plays the 20 
Dean wins the round which contains 7 penalty points

Round 6: Dean      holding [29, 41, 43, 44] plays the 41 
Round 6: Oscar     holding [11, 17, 23, 31] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
25 37 39 45 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 6: Eugenius  holding [25, 37, 39, 45] plays the 37 
Round 6: Elizabeth holding [13, 38, 47, 49] plays the 13 
Dean wins the round which contains 4 penalty points

Round 7: Dean      holding [29, 43, 44] plays the 29 
Round 7: Oscar     holding [17, 23, 31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
25 39 45 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 7: Eugenius  holding [25, 39, 45] plays the 25 
Round 7: Elizabeth holding [38, 47, 49] plays the 47 
Elizabeth wins the round which contains 3 penalty points

Round 8: Elizabeth holding [38, 49] plays the 49 
Round 8: Dean      holding [43, 44] plays the 43 
Round 8: Oscar     holding [17, 23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
39 45 0 0 0 0 0 0 0 0 

39 chah------------------------------------------------------------------------

Round 8: Eugenius  holding [39, 45] plays the 39 
Elizabeth wins the round which contains 2 penalty points

Round 9: Elizabeth holding [38] plays the 38 
Round 9: Dean      holding [44] plays the 44 
Round 9: Oscar     holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45 chah------------------------------------------------------------------------

Round 9: Eugenius  holding [45] plays the 45 
Dean wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Oscar (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 5 penalty points Elizabeth (system)
#4 with 13 penalty points Dean (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10098821 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Michael : [12, 13, 15, 21, 24, 33, 39, 41, 42, 46]
Table position 1: Braedon : [10, 14, 16, 18, 22, 29, 37, 38, 40, 43]
Table position 2: Dylan   : [11, 26, 28, 30, 31, 34, 36, 44, 48, 49]
Table position 3: Eugenius: [17, 19, 20, 23, 25, 27, 32, 35, 45, 47]

Discards:
Michael  [13, 33, 41]
Braedon  [16, 22, 40]
Dylan    [26, 36, 48]
Eugenius [35, 45, 47]

Round 0: Michael  holding [12, 15, 21, 24, 35, 39, 42, 45, 46, 47] plays the 24 
Round 0: Braedon  holding [10, 13, 14, 18, 29, 33, 37, 38, 41, 43] plays the 38 
Round 0: Dylan    holding [11, 16, 22, 28, 30, 31, 34, 40, 44, 49] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 20 23 25 26 27 32 36 48 

20------------------------------------------------------------------------

Round 0: Eugenius holding [17, 19, 20, 23, 25, 26, 27, 32, 36, 48] plays the 20 
Braedon wins the round 

Round 1: Braedon  holding [10, 13, 14, 18, 29, 33, 37, 41, 43] plays the 33 
Round 1: Dylan    holding [11, 16, 22, 28, 30, 31, 40, 44, 49] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 25 26 27 32 36 48 0 

27------------------------------------------------------------------------

Round 1: Eugenius holding [17, 19, 23, 25, 26, 27, 32, 36, 48] plays the 27 
Round 1: Michael  holding [12, 15, 21, 35, 39, 42, 45, 46, 47] plays the 39 
Dylan wins the round 

Round 2: Dylan    holding [11, 16, 22, 28, 30, 31, 40, 49] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 25 26 32 36 48 0 0 

25------------------------------------------------------------------------

Round 2: Eugenius holding [17, 19, 23, 25, 26, 32, 36, 48] plays the 25 
Round 2: Michael  holding [12, 15, 21, 35, 42, 45, 46, 47] plays the 46 
Round 2: Braedon  holding [10, 13, 14, 18, 29, 37, 41, 43] plays the 18 
Michael wins the round 

Round 3: Michael  holding [12, 15, 21, 35, 42, 45, 47] plays the 45 
Round 3: Braedon  holding [10, 13, 14, 29, 37, 41, 43] plays the 10 
Round 3: Dylan    holding [11, 16, 22, 28, 31, 40, 49] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 26 32 36 48 0 0 0 

36------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 23, 26, 32, 36, 48] plays the 36 
Michael wins the round 

Round 4: Michael  holding [12, 15, 21, 35, 42, 47] plays the 21 
Round 4: Braedon  holding [13, 14, 29, 37, 41, 43] plays the 14 
Round 4: Dylan    holding [11, 16, 22, 28, 31, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 26 32 48 0 0 0 0 

48------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 23, 26, 32, 48] plays the 48 
Dylan wins the round 

Round 5: Dylan    holding [11, 16, 22, 28, 31] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 26 32 0 0 0 0 0 

26------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 23, 26, 32] plays the 26 
Round 5: Michael  holding [12, 15, 35, 42, 47] plays the 42 
Round 5: Braedon  holding [13, 29, 37, 41, 43] plays the 13 
Michael wins the round which contains 8 penalty points

Round 6: Michael  holding [12, 15, 35, 47] plays the 12 
Round 6: Braedon  holding [29, 37, 41, 43] plays the 41 
Round 6: Dylan    holding [11, 22, 28, 31] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 32 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 6: Eugenius holding [17, 19, 23, 32] plays the 32 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 19, 23] plays the 17 
Round 7: Michael  holding [15, 35, 47] plays the 47 
Round 7: Braedon  holding [29, 37, 43] plays the 43 
Round 7: Dylan    holding [11, 28, 31] plays the 11 
Michael wins the round which contains 4 penalty points

Round 8: Michael  holding [15, 35] plays the 35 
Round 8: Braedon  holding [29, 37] plays the 29 
Round 8: Dylan    holding [28, 31] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 0 0 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 8: Eugenius holding [19, 23] plays the 19 
Michael wins the round which contains 2 penalty points

Round 9: Michael  holding [15] plays the 15 
Round 9: Braedon  holding [37] plays the 37 
Round 9: Dylan    holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
23 0 0 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 9: Eugenius holding [23] plays the 23 
Michael wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Braedon (system)
#1 with 0 penalty points Dylan (system)
#3 with 1 penalty points Eugenius (dodo.c)
#4 with 17 penalty points Michael (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15693909 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Dylan   : [17, 20, 22, 26, 28, 31, 32, 40, 42, 46]
Table position 1: Eugenius: [11, 19, 24, 25, 27, 34, 35, 44, 45, 49]
Table position 2: Trung   : [10, 12, 14, 15, 18, 21, 29, 36, 38, 39]
Table position 3: Michael : [13, 16, 23, 30, 33, 37, 41, 43, 47, 48]

Discards:
Dylan    [22, 32, 40]
Eugenius [44, 45, 49]
Trung    [10, 18, 38]
Michael  [33, 41, 47]

Round 0: Dylan    holding [17, 20, 26, 28, 31, 33, 41, 42, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 22 24 25 27 32 34 35 40 

22------------------------------------------------------------------------

Round 0: Eugenius holding [11, 19, 22, 24, 25, 27, 32, 34, 35, 40] plays the 22 
Round 0: Trung    holding [12, 14, 15, 21, 29, 36, 39, 44, 45, 49] plays the 12 
Round 0: Michael  holding [10, 13, 16, 18, 23, 30, 37, 38, 43, 48] plays the 16 
Dylan wins the round 

Round 1: Dylan    holding [17, 20, 26, 28, 31, 33, 41, 42, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 24 25 27 32 34 35 40 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [11, 19, 24, 25, 27, 32, 34, 35, 40] plays the 24 
Round 1: Trung    holding [14, 15, 21, 29, 36, 39, 44, 45, 49] plays the 15 
Round 1: Michael  holding [10, 13, 18, 23, 30, 37, 38, 43, 48] plays the 18 
Dylan wins the round 

Round 2: Dylan    holding [17, 20, 26, 28, 31, 41, 42, 47] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 25 27 32 34 35 40 0 0 

32------------------------------------------------------------------------

Round 2: Eugenius holding [11, 19, 25, 27, 32, 34, 35, 40] plays the 32 
Round 2: Trung    holding [14, 21, 29, 36, 39, 44, 45, 49] plays the 49 
Round 2: Michael  holding [10, 13, 23, 30, 37, 38, 43, 48] plays the 38 
Trung wins the round 

Round 3: Trung    holding [14, 21, 29, 36, 39, 44, 45] plays the 14 
Round 3: Michael  holding [10, 13, 23, 30, 37, 43, 48] plays the 48 
Round 3: Dylan    holding [17, 20, 26, 31, 41, 42, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 25 27 34 35 40 0 0 0 

34------------------------------------------------------------------------

Round 3: Eugenius holding [11, 19, 25, 27, 34, 35, 40] plays the 34 
Michael wins the round which contains 7 penalty points

Round 4: Michael  holding [10, 13, 23, 30, 37, 43] plays the 10 
Round 4: Dylan    holding [17, 20, 26, 31, 41, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 25 27 35 40 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [11, 19, 25, 27, 35, 40] plays the 25 
Round 4: Trung    holding [21, 29, 36, 39, 44, 45] plays the 45 
Trung wins the round 

Round 5: Trung    holding [21, 29, 36, 39, 44] plays the 44 
Round 5: Michael  holding [13, 23, 30, 37, 43] plays the 30 
Round 5: Dylan    holding [17, 20, 31, 41, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 27 35 40 0 0 0 0 0 

40------------------------------------------------------------------------

Round 5: Eugenius holding [11, 19, 27, 35, 40] plays the 40 
Trung wins the round 

Round 6: Trung    holding [21, 29, 36, 39] plays the 21 
Round 6: Michael  holding [13, 23, 37, 43] plays the 37 
Round 6: Dylan    holding [17, 31, 41, 47] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 27 35 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 6: Eugenius holding [11, 19, 27, 35] plays the 27 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
11 19 35 0 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 7: Eugenius holding [11, 19, 35] plays the 11 
Round 7: Trung    holding [29, 36, 39] plays the 29 
Round 7: Michael  holding [13, 23, 43] plays the 43 
Round 7: Dylan    holding [31, 41, 47] plays the 41 
Michael wins the round which contains 4 penalty points

Round 8: Michael  holding [13, 23] plays the 13 
Round 8: Dylan    holding [31, 47] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
19 35 0 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 8: Eugenius holding [19, 35] plays the 19 
Round 8: Trung    holding [36, 39] plays the 39 
Dylan wins the round which contains 3 penalty points

Round 9: Dylan    holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Round 9: Trung    holding [36] plays the 36 
Round 9: Michael  holding [23] plays the 23 
Dylan wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Trung (system)
#2 with 2 penalty points Eugenius (dodo.c)
#3 with 5 penalty points Dylan (system)
#4 with 11 penalty points Michael (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9974532 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Braedon : [10, 12, 24, 29, 34, 35, 36, 44, 47, 48]
Table position 1: Matthew : [11, 20, 22, 23, 30, 33, 37, 42, 45, 49]
Table position 2: Zachary : [16, 17, 18, 19, 21, 31, 39, 40, 43, 46]
Table position 3: Eugenius: [13, 14, 15, 25, 26, 27, 28, 32, 38, 41]

Discards:
Braedon  [12, 29, 34]
Matthew  [20, 42, 49]
Zachary  [16, 19, 21]
Eugenius [32, 38, 41]

Round 0: Braedon  holding [10, 24, 32, 35, 36, 38, 41, 44, 47, 48] plays the 35 
Round 0: Matthew  holding [11, 12, 22, 23, 29, 30, 33, 34, 37, 45] plays the 30 
Round 0: Zachary  holding [17, 18, 20, 31, 39, 40, 42, 43, 46, 49] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
13 14 15 16 19 21 25 26 27 28 

14------------------------------------------------------------------------

Round 0: Eugenius holding [13, 14, 15, 16, 19, 21, 25, 26, 27, 28] plays the 14 
Zachary wins the round which contains 7 penalty points

Round 1: Zachary  holding [17, 18, 20, 31, 39, 40, 43, 46, 49] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 16 19 21 25 26 27 28 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [13, 15, 16, 19, 21, 25, 26, 27, 28] plays the 15 
Round 1: Braedon  holding [10, 24, 32, 36, 38, 41, 44, 47, 48] plays the 44 
Round 1: Matthew  holding [11, 12, 22, 23, 29, 33, 34, 37, 45] plays the 12 
Braedon wins the round 

Round 2: Braedon  holding [10, 24, 32, 36, 38, 41, 47, 48] plays the 48 
Round 2: Matthew  holding [11, 22, 23, 29, 33, 34, 37, 45] plays the 34 
Round 2: Zachary  holding [17, 18, 31, 39, 40, 43, 46, 49] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 19 21 25 26 27 28 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [13, 16, 19, 21, 25, 26, 27, 28] plays the 16 
Braedon wins the round 

Round 3: Braedon  holding [10, 24, 32, 36, 38, 41, 47] plays the 32 
Round 3: Matthew  holding [11, 22, 23, 29, 33, 37, 45] plays the 22 
Round 3: Zachary  holding [17, 18, 31, 39, 43, 46, 49] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 21 25 26 27 28 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [13, 19, 21, 25, 26, 27, 28] plays the 26 
Braedon wins the round 

Round 4: Braedon  holding [10, 24, 36, 38, 41, 47] plays the 10 
Round 4: Matthew  holding [11, 23, 29, 33, 37, 45] plays the 45 
Round 4: Zachary  holding [17, 31, 39, 43, 46, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 21 25 27 28 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [13, 19, 21, 25, 27, 28] plays the 25 
Zachary wins the round 

Round 5: Zachary  holding [17, 31, 39, 43, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 21 27 28 0 0 0 0 0 

21------------------------------------------------------------------------

Round 5: Eugenius holding [13, 19, 21, 27, 28] plays the 21 
Round 5: Braedon  holding [24, 36, 38, 41, 47] plays the 36 
Round 5: Matthew  holding [11, 23, 29, 33, 37] plays the 33 
Zachary wins the round 

Round 6: Zachary  holding [17, 31, 39, 43] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 27 28 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 6: Eugenius holding [13, 19, 27, 28] plays the 27 
Round 6: Braedon  holding [24, 38, 41, 47] plays the 24 
Round 6: Matthew  holding [11, 23, 29, 37] plays the 11 
Zachary wins the round which contains 1 penalty points

Round 7: Zachary  holding [17, 31, 43] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 28 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 19, 28] plays the 13 
Round 7: Braedon  holding [38, 41, 47] plays the 41 
Round 7: Matthew  holding [23, 29, 37] plays the 37 
Braedon wins the round which contains 4 penalty points

Round 8: Braedon  holding [38, 47] plays the 47 
Round 8: Matthew  holding [23, 29] plays the 23 
Round 8: Zachary  holding [31, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
19 28 0 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 8: Eugenius holding [19, 28] plays the 19 
Braedon wins the round which contains 4 penalty points

Round 9: Braedon  holding [38] plays the 38 
Round 9: Matthew  holding [29] plays the 29 
Round 9: Zachary  holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
28 0 0 0 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 9: Eugenius holding [28] plays the 28 
Braedon wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Matthew (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 8 penalty points Zachary (system)
#4 with 10 penalty points Braedon (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6170811 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Matthew : [13, 15, 18, 25, 30, 32, 35, 37, 38, 39]
Table position 1: Eugenius: [12, 14, 21, 23, 24, 26, 28, 34, 44, 45]
Table position 2: Nicholas: [10, 17, 20, 22, 29, 31, 41, 42, 46, 48]
Table position 3: Oscar   : [11, 16, 19, 27, 33, 36, 40, 43, 47, 49]

Discards:
Matthew  [32, 35, 38]
Eugenius [34, 44, 45]
Nicholas [17, 22, 48]
Oscar    [16, 27, 36]

Round 0: Matthew  holding [13, 15, 16, 18, 25, 27, 30, 36, 37, 39] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 21 23 24 26 28 32 35 38 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 14, 21, 23, 24, 26, 28, 32, 35, 38] plays the 12 
Round 0: Nicholas holding [10, 20, 29, 31, 34, 41, 42, 44, 45, 46] plays the 45 
Round 0: Oscar    holding [11, 17, 19, 22, 33, 40, 43, 47, 48, 49] plays the 40 
Nicholas wins the round 

Round 1: Nicholas holding [10, 20, 29, 31, 34, 41, 42, 44, 46] plays the 46 
Round 1: Oscar    holding [11, 17, 19, 22, 33, 43, 47, 48, 49] plays the 48 
Round 1: Matthew  holding [13, 15, 16, 18, 25, 27, 30, 37, 39] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
14 21 23 24 26 28 32 35 38 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 21, 23, 24, 26, 28, 32, 35, 38] plays the 14 
Oscar wins the round 

Round 2: Oscar    holding [11, 17, 19, 22, 33, 43, 47, 49] plays the 22 
Round 2: Matthew  holding [13, 15, 18, 25, 27, 30, 37, 39] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
21 23 24 26 28 32 35 38 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [21, 23, 24, 26, 28, 32, 35, 38] plays the 24 
Round 2: Nicholas holding [10, 20, 29, 31, 34, 41, 42, 44] plays the 34 
Nicholas wins the round 

Round 3: Nicholas holding [10, 20, 29, 31, 41, 42, 44] plays the 20 
Round 3: Oscar    holding [11, 17, 19, 33, 43, 47, 49] plays the 11 
Round 3: Matthew  holding [13, 15, 25, 27, 30, 37, 39] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
21 23 26 28 32 35 38 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [21, 23, 26, 28, 32, 35, 38] plays the 26 
Matthew wins the round which contains 1 penalty points

Round 4: Matthew  holding [13, 15, 25, 27, 37, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
21 23 28 32 35 38 0 0 0 0 

21------------------------------------------------------------------------

Round 4: Eugenius holding [21, 23, 28, 32, 35, 38] plays the 21 
Round 4: Nicholas holding [10, 29, 31, 41, 42, 44] plays the 42 
Round 4: Oscar    holding [17, 19, 33, 43, 47, 49] plays the 33 
Nicholas wins the round which contains 7 penalty points

Round 5: Nicholas holding [10, 29, 31, 41, 44] plays the 31 
Round 5: Oscar    holding [17, 19, 43, 47, 49] plays the 43 
Round 5: Matthew  holding [13, 15, 25, 27, 37] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
23 28 32 35 38 0 0 0 0 0 

23------------------------------------------------------------------------

Round 5: Eugenius holding [23, 28, 32, 35, 38] plays the 23 
Oscar wins the round which contains 4 penalty points

Round 6: Oscar    holding [17, 19, 47, 49] plays the 17 
Round 6: Matthew  holding [15, 25, 27, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
28 32 35 38 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 6: Eugenius holding [28, 32, 35, 38] plays the 28 
Round 6: Nicholas holding [10, 29, 41, 44] plays the 41 
Nicholas wins the round which contains 3 penalty points

Round 7: Nicholas holding [10, 29, 44] plays the 29 
Round 7: Oscar    holding [19, 47, 49] plays the 19 
Round 7: Matthew  holding [15, 25, 27] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
32 35 38 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 7: Eugenius holding [32, 35, 38] plays the 32 
Nicholas wins the round which contains 2 penalty points

Round 8: Nicholas holding [10, 44] plays the 44 
Round 8: Oscar    holding [47, 49] plays the 47 
Round 8: Matthew  holding [15, 27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
35 38 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [35, 38] plays the 38 
Nicholas wins the round which contains 1 penalty points

Round 9: Nicholas holding [10] plays the 10 
Round 9: Oscar    holding [49] plays the 49 
Round 9: Matthew  holding [15] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Eugenius wins the round 


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Matthew (system)
#3 with 4 penalty points Oscar (system)
#4 with 13 penalty points Nicholas (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3657026 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Nicholas: [10, 12, 16, 18, 20, 22, 23, 25, 26, 46]
Table position 1: Reede   : [17, 21, 24, 28, 29, 37, 41, 43, 45, 48]
Table position 2: Eugenius: [14, 15, 19, 30, 32, 36, 39, 40, 42, 47]
Table position 3: Braedon : [11, 13, 27, 31, 33, 34, 35, 38, 44, 49]

Discards:
Nicholas [10, 18, 26]
Reede    [24, 28, 45]
Eugenius [40, 42, 47]
Braedon  [11, 35, 49]

Round 0: Nicholas holding [11, 12, 16, 20, 22, 23, 25, 35, 46, 49] plays the 46 
Round 0: Reede    holding [10, 17, 18, 21, 26, 29, 37, 41, 43, 48] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
14 15 19 24 28 30 32 36 39 45 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 15, 19, 24, 28, 30, 32, 36, 39, 45] plays the 14 
Round 0: Braedon  holding [13, 27, 31, 33, 34, 38, 40, 42, 44, 47] plays the 42 
Nicholas wins the round which contains 7 penalty points

Round 1: Nicholas holding [11, 12, 16, 20, 22, 23, 25, 35, 49] plays the 25 
Round 1: Reede    holding [10, 17, 21, 26, 29, 37, 41, 43, 48] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
15 19 24 28 30 32 36 39 45 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [15, 19, 24, 28, 30, 32, 36, 39, 45] plays the 15 
Round 1: Braedon  holding [13, 27, 31, 33, 34, 38, 40, 44, 47] plays the 40 
Braedon wins the round 

Round 2: Braedon  holding [13, 27, 31, 33, 34, 38, 44, 47] plays the 33 
Round 2: Nicholas holding [11, 12, 16, 20, 22, 23, 35, 49] plays the 22 
Round 2: Reede    holding [17, 21, 26, 29, 37, 41, 43, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
19 24 28 30 32 36 39 45 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [19, 24, 28, 30, 32, 36, 39, 45] plays the 24 
Reede wins the round 

Round 3: Reede    holding [17, 21, 26, 29, 37, 41, 43] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
19 28 30 32 36 39 45 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [19, 28, 30, 32, 36, 39, 45] plays the 28 
Round 3: Braedon  holding [13, 27, 31, 34, 38, 44, 47] plays the 27 
Round 3: Nicholas holding [11, 12, 16, 20, 23, 35, 49] plays the 49 
Nicholas wins the round 

Round 4: Nicholas holding [11, 12, 16, 20, 23, 35] plays the 35 
Round 4: Reede    holding [17, 26, 29, 37, 41, 43] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
19 30 32 36 39 45 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [19, 30, 32, 36, 39, 45] plays the 30 
Round 4: Braedon  holding [13, 31, 34, 38, 44, 47] plays the 13 
Nicholas wins the round which contains 1 penalty points

Round 5: Nicholas holding [11, 12, 16, 20, 23] plays the 16 
Round 5: Reede    holding [17, 29, 37, 41, 43] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
19 32 36 39 45 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [19, 32, 36, 39, 45] plays the 32 
Round 5: Braedon  holding [31, 34, 38, 44, 47] plays the 44 
Braedon wins the round which contains 1 penalty points

Round 6: Braedon  holding [31, 34, 38, 47] plays the 34 
Round 6: Nicholas holding [11, 12, 20, 23] plays the 12 
Round 6: Reede    holding [29, 37, 41, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
19 36 39 45 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 6: Eugenius holding [19, 36, 39, 45] plays the 36 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
19 39 45 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius holding [19, 39, 45] plays the 19 
Round 7: Braedon  holding [31, 38, 47] plays the 47 
Round 7: Nicholas holding [11, 20, 23] plays the 23 
Round 7: Reede    holding [29, 37, 41] plays the 37 
Braedon wins the round which contains 4 penalty points

Round 8: Braedon  holding [31, 38] plays the 38 
Round 8: Nicholas holding [11, 20] plays the 20 
Round 8: Reede    holding [29, 41] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
39 45 0 0 0 0 0 0 0 0 

39 chah------------------------------------------------------------------------

Round 8: Eugenius holding [39, 45] plays the 39 
Braedon wins the round which contains 1 penalty points

Round 9: Braedon  holding [31] plays the 31 
Round 9: Nicholas holding [11] plays the 11 
Round 9: Reede    holding [41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Reede wins the round which contains 3 penalty points


Finishing Positions

#1 with 1 penalty points Eugenius (dodo.c)
#2 with 3 penalty points Reede (system)
#3 with 6 penalty points Braedon (system)
#4 with 8 penalty points Nicholas (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11389970 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [15, 18, 21, 22, 24, 25, 27, 32, 36, 41]
Table position 1: Dylan   : [10, 13, 14, 31, 34, 35, 38, 40, 45, 46]
Table position 2: Xue     : [12, 16, 17, 20, 26, 28, 29, 33, 47, 49]
Table position 3: Dean    : [11, 19, 23, 30, 37, 39, 42, 43, 44, 48]

Discards:
Eugenius [32, 36, 41]
Dylan    [10, 31, 46]
Xue      [12, 20, 49]
Dean     [19, 23, 48]


Debug output from Eugenius
------------------------------------------------------------------------
15 18 19 21 22 23 24 25 27 48 

15------------------------------------------------------------------------

Round 0: Eugenius holding [15, 18, 19, 21, 22, 23, 24, 25, 27, 48] plays the 15 
Round 0: Dylan    holding [13, 14, 32, 34, 35, 36, 38, 40, 41, 45] plays the 40 
Round 0: Xue      holding [10, 16, 17, 26, 28, 29, 31, 33, 46, 47] plays the 33 
Round 0: Dean     holding [11, 12, 20, 30, 37, 39, 42, 43, 44, 49] plays the 30 
Dylan wins the round 

Round 1: Dylan    holding [13, 14, 32, 34, 35, 36, 38, 41, 45] plays the 45 
Round 1: Xue      holding [10, 16, 17, 26, 28, 29, 31, 46, 47] plays the 10 
Round 1: Dean     holding [11, 12, 20, 37, 39, 42, 43, 44, 49] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
18 19 21 22 23 24 25 27 48 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [18, 19, 21, 22, 23, 24, 25, 27, 48] plays the 18 
Dylan wins the round 

Round 2: Dylan    holding [13, 14, 32, 34, 35, 36, 38, 41] plays the 32 
Round 2: Xue      holding [16, 17, 26, 28, 29, 31, 46, 47] plays the 26 
Round 2: Dean     holding [11, 12, 37, 39, 42, 43, 44, 49] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
19 21 22 23 24 25 27 48 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [19, 21, 22, 23, 24, 25, 27, 48] plays the 22 
Dylan wins the round 

Round 3: Dylan    holding [13, 14, 34, 35, 36, 38, 41] plays the 14 
Round 3: Xue      holding [16, 17, 28, 29, 31, 46, 47] plays the 46 
Round 3: Dean     holding [11, 37, 39, 42, 43, 44, 49] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
19 21 23 24 25 27 48 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [19, 21, 23, 24, 25, 27, 48] plays the 21 
Xue wins the round which contains 7 penalty points

Round 4: Xue      holding [16, 17, 28, 29, 31, 47] plays the 16 
Round 4: Dean     holding [11, 37, 39, 43, 44, 49] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 24 25 27 48 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius holding [19, 23, 24, 25, 27, 48] plays the 24 
Round 4: Dylan    holding [13, 34, 35, 36, 38, 41] plays the 34 
Dean wins the round 

Round 5: Dean     holding [11, 37, 39, 43, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 25 27 48 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 5: Eugenius holding [19, 23, 25, 27, 48] plays the 19 
Round 5: Dylan    holding [13, 35, 36, 38, 41] plays the 35 
Round 5: Xue      holding [17, 28, 29, 31, 47] plays the 28 
Dean wins the round which contains 1 penalty points

Round 6: Dean     holding [11, 37, 39, 43] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 27 48 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 6: Eugenius holding [23, 25, 27, 48] plays the 27 
Round 6: Dylan    holding [13, 36, 38, 41] plays the 36 
Round 6: Xue      holding [17, 29, 31, 47] plays the 31 
Dean wins the round which contains 1 penalty points

Round 7: Dean     holding [11, 37, 43] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 48 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius holding [23, 25, 48] plays the 23 
Round 7: Dylan    holding [13, 38, 41] plays the 41 
Round 7: Xue      holding [17, 29, 47] plays the 17 
Dylan wins the round which contains 4 penalty points

Round 8: Dylan    holding [13, 38] plays the 13 
Round 8: Xue      holding [29, 47] plays the 47 
Round 8: Dean     holding [11, 43] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
25 48 0 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 8: Eugenius holding [25, 48] plays the 25 
Xue wins the round which contains 3 penalty points

Round 9: Xue      holding [29] plays the 29 
Round 9: Dean     holding [43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
48 0 0 0 0 0 0 0 0 0 

48------------------------------------------------------------------------

Round 9: Eugenius holding [48] plays the 48 
Round 9: Dylan    holding [38] plays the 38 
Dean wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Dylan (system)
#2 with 4 penalty points Dean (system)
#4 with 10 penalty points Xue (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13223089 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Oscar   : [11, 13, 15, 19, 24, 27, 32, 35, 39, 46]
Table position 1: Zachary : [10, 12, 16, 17, 18, 21, 22, 29, 44, 48]
Table position 2: Xue     : [14, 28, 31, 34, 40, 41, 42, 43, 47, 49]
Table position 3: Eugenius: [20, 23, 25, 26, 30, 33, 36, 37, 38, 45]

Discards:
Oscar    [27, 39, 46]
Zachary  [16, 17, 22]
Xue      [28, 34, 42]
Eugenius [37, 38, 45]

Round 0: Oscar    holding [11, 13, 15, 19, 24, 32, 35, 37, 38, 45] plays the 15 
Round 0: Zachary  holding [10, 12, 18, 21, 27, 29, 39, 44, 46, 48] plays the 21 
Round 0: Xue      holding [14, 16, 17, 22, 31, 40, 41, 43, 47, 49] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
20 23 25 26 28 30 33 34 36 42 

20------------------------------------------------------------------------

Round 0: Eugenius holding [20, 23, 25, 26, 28, 30, 33, 34, 36, 42] plays the 20 
Xue wins the round 

Round 1: Xue      holding [14, 16, 17, 22, 31, 41, 43, 47, 49] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 26 28 30 33 34 36 42 0 

26------------------------------------------------------------------------

Round 1: Eugenius holding [23, 25, 26, 28, 30, 33, 34, 36, 42] plays the 26 
Round 1: Oscar    holding [11, 13, 19, 24, 32, 35, 37, 38, 45] plays the 24 
Round 1: Zachary  holding [10, 12, 18, 27, 29, 39, 44, 46, 48] plays the 46 
Zachary wins the round 

Round 2: Zachary  holding [10, 12, 18, 27, 29, 39, 44, 48] plays the 44 
Round 2: Xue      holding [16, 17, 22, 31, 41, 43, 47, 49] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 28 30 33 34 36 42 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [23, 25, 28, 30, 33, 34, 36, 42] plays the 28 
Round 2: Oscar    holding [11, 13, 19, 32, 35, 37, 38, 45] plays the 38 
Zachary wins the round 

Round 3: Zachary  holding [10, 12, 18, 27, 29, 39, 48] plays the 39 
Round 3: Xue      holding [17, 22, 31, 41, 43, 47, 49] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 30 33 34 36 42 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [23, 25, 30, 33, 34, 36, 42] plays the 30 
Round 3: Oscar    holding [11, 13, 19, 32, 35, 37, 45] plays the 45 
Oscar wins the round which contains 1 penalty points

Round 4: Oscar    holding [11, 13, 19, 32, 35, 37] plays the 32 
Round 4: Zachary  holding [10, 12, 18, 27, 29, 48] plays the 18 
Round 4: Xue      holding [17, 22, 41, 43, 47, 49] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 33 34 36 42 0 0 0 0 

34------------------------------------------------------------------------

Round 4: Eugenius holding [23, 25, 33, 34, 36, 42] plays the 34 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
23 25 33 36 42 0 0 0 0 0 

23------------------------------------------------------------------------

Round 5: Eugenius holding [23, 25, 33, 36, 42] plays the 23 
Round 5: Oscar    holding [11, 13, 19, 35, 37] plays the 37 
Round 5: Zachary  holding [10, 12, 27, 29, 48] plays the 29 
Round 5: Xue      holding [17, 41, 43, 47, 49] plays the 43 
Xue wins the round which contains 4 penalty points

Round 6: Xue      holding [17, 41, 47, 49] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
25 33 36 42 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 6: Eugenius holding [25, 33, 36, 42] plays the 25 
Round 6: Oscar    holding [11, 13, 19, 35] plays the 13 
Round 6: Zachary  holding [10, 12, 27, 48] plays the 12 
Xue wins the round which contains 2 penalty points

Round 7: Xue      holding [17, 41, 49] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
33 36 42 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 7: Eugenius holding [33, 36, 42] plays the 33 
Round 7: Oscar    holding [11, 19, 35] plays the 11 
Round 7: Zachary  holding [10, 27, 48] plays the 48 
Xue wins the round which contains 2 penalty points

Round 8: Xue      holding [41, 49] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
36 42 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [36, 42] plays the 36 
Round 8: Oscar    holding [19, 35] plays the 19 
Round 8: Zachary  holding [10, 27] plays the 27 
Xue wins the round which contains 2 penalty points

Round 9: Xue      holding [49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
42 0 0 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 9: Eugenius holding [42] plays the 42 
Round 9: Oscar    holding [35] plays the 35 
Round 9: Zachary  holding [10] plays the 10 
Xue wins the round which contains 7 penalty points


Finishing Positions

#1 with 0 penalty points Zachary (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 1 penalty points Oscar (system)
#4 with 17 penalty points Xue (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 973145 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: George  : [12, 15, 22, 28, 31, 34, 38, 43, 48, 49]
Table position 1: Eugenius: [13, 18, 23, 24, 25, 29, 33, 37, 42, 46]
Table position 2: Trung   : [10, 16, 17, 19, 20, 21, 35, 39, 40, 47]
Table position 3: Connor  : [11, 14, 26, 27, 30, 32, 36, 41, 44, 45]

Discards:
George   [22, 28, 49]
Eugenius [37, 42, 46]
Trung    [16, 17, 21]
Connor   [11, 41, 45]

Round 0: George   holding [11, 12, 15, 31, 34, 38, 41, 43, 45, 48] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 18 22 23 24 25 28 29 33 49 

18------------------------------------------------------------------------

Round 0: Eugenius holding [13, 18, 22, 23, 24, 25, 28, 29, 33, 49] plays the 18 
Round 0: Trung    holding [10, 19, 20, 35, 37, 39, 40, 42, 46, 47] plays the 10 
Round 0: Connor   holding [14, 16, 17, 21, 26, 27, 30, 32, 36, 44] plays the 44 
Connor wins the round 

Round 1: Connor   holding [14, 16, 17, 21, 26, 27, 30, 32, 36] plays the 36 
Round 1: George   holding [11, 12, 15, 31, 38, 41, 43, 45, 48] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
13 22 23 24 25 28 29 33 49 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [13, 22, 23, 24, 25, 28, 29, 33, 49] plays the 22 
Round 1: Trung    holding [19, 20, 35, 37, 39, 40, 42, 46, 47] plays the 40 
Trung wins the round 

Round 2: Trung    holding [19, 20, 35, 37, 39, 42, 46, 47] plays the 46 
Round 2: Connor   holding [14, 16, 17, 21, 26, 27, 30, 32] plays the 30 
Round 2: George   holding [11, 12, 31, 38, 41, 43, 45, 48] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 24 25 28 29 33 49 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [13, 23, 24, 25, 28, 29, 33, 49] plays the 24 
Trung wins the round 

Round 3: Trung    holding [19, 20, 35, 37, 39, 42, 47] plays the 20 
Round 3: Connor   holding [14, 16, 17, 21, 26, 27, 32] plays the 26 
Round 3: George   holding [11, 12, 31, 41, 43, 45, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 25 28 29 33 49 0 0 0 

25------------------------------------------------------------------------

Round 3: Eugenius holding [13, 23, 25, 28, 29, 33, 49] plays the 25 
George wins the round 

Round 4: George   holding [11, 12, 31, 41, 43, 45] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 28 29 33 49 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [13, 23, 28, 29, 33, 49] plays the 28 
Round 4: Trung    holding [19, 35, 37, 39, 42, 47] plays the 42 
Round 4: Connor   holding [14, 16, 17, 21, 27, 32] plays the 14 
Trung wins the round which contains 7 penalty points

Round 5: Trung    holding [19, 35, 37, 39, 47] plays the 35 
Round 5: Connor   holding [16, 17, 21, 27, 32] plays the 21 
Round 5: George   holding [11, 31, 41, 43, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 29 33 49 0 0 0 0 0 

49------------------------------------------------------------------------

Round 5: Eugenius holding [13, 23, 29, 33, 49] plays the 49 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 23 29 33 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 6: Eugenius holding [13, 23, 29, 33] plays the 33 
Round 6: Trung    holding [19, 37, 39, 47] plays the 39 
Round 6: Connor   holding [16, 17, 27, 32] plays the 27 
Round 6: George   holding [11, 31, 41, 43] plays the 41 
Trung wins the round which contains 1 penalty points

Round 7: Trung    holding [19, 37, 47] plays the 47 
Round 7: Connor   holding [16, 17, 32] plays the 17 
Round 7: George   holding [11, 31, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 29 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 23, 29] plays the 13 
Trung wins the round which contains 4 penalty points

Round 8: Trung    holding [19, 37] plays the 37 
Round 8: Connor   holding [16, 32] plays the 16 
Round 8: George   holding [11, 31] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 8: Eugenius holding [23, 29] plays the 23 
Trung wins the round which contains 3 penalty points

Round 9: Trung    holding [19] plays the 19 
Round 9: Connor   holding [32] plays the 32 
Round 9: George   holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
29 0 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 9: Eugenius holding [29] plays the 29 
George wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Connor (system)
#3 with 3 penalty points George (system)
#4 with 15 penalty points Trung (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10035278 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 14, 16, 25, 28, 31, 32, 36, 42, 46]
Table position 1: Gal     : [18, 23, 26, 35, 37, 41, 43, 44, 47, 48]
Table position 2: Minh    : [11, 12, 15, 24, 30, 33, 34, 38, 39, 45]
Table position 3: Harrison: [13, 17, 19, 20, 21, 22, 27, 29, 40, 49]

Discards:
Eugenius [36, 42, 46]
Gal      [18, 26, 35]
Minh     [12, 38, 39]
Harrison [13, 17, 49]


Debug output from Eugenius
------------------------------------------------------------------------
10 13 14 16 17 25 28 31 32 49 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 13, 14, 16, 17, 25, 28, 31, 32, 49] plays the 10 
Round 0: Gal      holding [23, 36, 37, 41, 42, 43, 44, 46, 47, 48] plays the 48 
Round 0: Minh     holding [11, 15, 18, 24, 26, 30, 33, 34, 35, 45] plays the 26 
Round 0: Harrison holding [12, 19, 20, 21, 22, 27, 29, 38, 39, 40] plays the 12 
Gal wins the round 

Round 1: Gal      holding [23, 36, 37, 41, 42, 43, 44, 46, 47] plays the 42 
Round 1: Minh     holding [11, 15, 18, 24, 30, 33, 34, 35, 45] plays the 35 
Round 1: Harrison holding [19, 20, 21, 22, 27, 29, 38, 39, 40] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
13 14 16 17 25 28 31 32 49 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [13, 14, 16, 17, 25, 28, 31, 32, 49] plays the 14 
Gal wins the round which contains 7 penalty points

Round 2: Gal      holding [23, 36, 37, 41, 43, 44, 46, 47] plays the 44 
Round 2: Minh     holding [11, 15, 18, 24, 30, 33, 34, 45] plays the 30 
Round 2: Harrison holding [19, 21, 22, 27, 29, 38, 39, 40] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 17 25 28 31 32 49 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [13, 16, 17, 25, 28, 31, 32, 49] plays the 16 
Gal wins the round 

Round 3: Gal      holding [23, 36, 37, 41, 43, 46, 47] plays the 36 
Round 3: Minh     holding [11, 15, 18, 24, 33, 34, 45] plays the 34 
Round 3: Harrison holding [19, 21, 27, 29, 38, 39, 40] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 25 28 31 32 49 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 25, 28, 31, 32, 49] plays the 28 
Gal wins the round 

Round 4: Gal      holding [23, 37, 41, 43, 46, 47] plays the 46 
Round 4: Minh     holding [11, 15, 18, 24, 33, 45] plays the 18 
Round 4: Harrison holding [19, 21, 29, 38, 39, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 25 31 32 49 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 25, 31, 32, 49] plays the 32 
Gal wins the round 

Round 5: Gal      holding [23, 37, 41, 43, 47] plays the 37 
Round 5: Minh     holding [11, 15, 24, 33, 45] plays the 11 
Round 5: Harrison holding [19, 21, 29, 38, 39] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 25 31 49 0 0 0 0 0 

13------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 25, 31, 49] plays the 13 
Gal wins the round which contains 4 penalty points

Round 6: Gal      holding [23, 41, 43, 47] plays the 43 
Round 6: Minh     holding [15, 24, 33, 45] plays the 45 
Round 6: Harrison holding [19, 21, 38, 39] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 31 49 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 25, 31, 49] plays the 17 
Gal wins the round which contains 3 penalty points

Round 7: Gal      holding [23, 41, 47] plays the 41 
Round 7: Minh     holding [15, 24, 33] plays the 33 
Round 7: Harrison holding [21, 38, 39] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
25 31 49 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [25, 31, 49] plays the 31 
Gal wins the round which contains 2 penalty points

Round 8: Gal      holding [23, 47] plays the 23 
Round 8: Minh     holding [15, 24] plays the 15 
Round 8: Harrison holding [21, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
25 49 0 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 8: Eugenius holding [25, 49] plays the 25 
Gal wins the round which contains 1 penalty points

Round 9: Gal      holding [47] plays the 47 
Round 9: Minh     holding [24] plays the 24 
Round 9: Harrison holding [21] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 9: Eugenius holding [49] plays the 49 
Gal wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Minh (system)
#1 with 0 penalty points Harrison (system)
#4 with 18 penalty points Gal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 538358 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Heather : [10, 14, 15, 20, 25, 27, 33, 41, 44, 49]
Table position 1: Eugenius: [11, 12, 22, 24, 28, 29, 30, 40, 45, 47]
Table position 2: Dean    : [18, 21, 31, 32, 34, 36, 38, 39, 43, 46]
Table position 3: Kane    : [13, 16, 17, 19, 23, 26, 35, 37, 42, 48]

Discards:
Heather  [15, 20, 49]
Eugenius [40, 45, 47]
Dean     [32, 34, 43]
Kane     [26, 42, 48]

Round 0: Heather  holding [10, 14, 25, 26, 27, 33, 41, 42, 44, 48] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 15 20 22 24 28 29 30 49 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 15, 20, 22, 24, 28, 29, 30, 49] plays the 12 
Round 0: Dean     holding [18, 21, 31, 36, 38, 39, 40, 45, 46, 47] plays the 36 
Round 0: Kane     holding [13, 16, 17, 19, 23, 32, 34, 35, 37, 43] plays the 32 
Heather wins the round which contains 7 penalty points

Round 1: Heather  holding [10, 14, 25, 26, 27, 33, 41, 44, 48] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 20 22 24 28 29 30 49 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [11, 15, 20, 22, 24, 28, 29, 30, 49] plays the 20 
Round 1: Dean     holding [18, 21, 31, 38, 39, 40, 45, 46, 47] plays the 18 
Round 1: Kane     holding [13, 16, 17, 19, 23, 34, 35, 37, 43] plays the 34 
Heather wins the round 

Round 2: Heather  holding [10, 14, 25, 26, 27, 33, 41, 48] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 22 24 28 29 30 49 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [11, 15, 22, 24, 28, 29, 30, 49] plays the 22 
Round 2: Dean     holding [21, 31, 38, 39, 40, 45, 46, 47] plays the 40 
Round 2: Kane     holding [13, 16, 17, 19, 23, 35, 37, 43] plays the 16 
Dean wins the round 

Round 3: Dean     holding [21, 31, 38, 39, 45, 46, 47] plays the 46 
Round 3: Kane     holding [13, 17, 19, 23, 35, 37, 43] plays the 13 
Round 3: Heather  holding [10, 25, 26, 27, 33, 41, 48] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 24 28 29 30 49 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [11, 15, 24, 28, 29, 30, 49] plays the 24 
Dean wins the round which contains 1 penalty points

Round 4: Dean     holding [21, 31, 38, 39, 45, 47] plays the 31 
Round 4: Kane     holding [17, 19, 23, 35, 37, 43] plays the 43 
Round 4: Heather  holding [10, 25, 27, 33, 41, 48] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 28 29 30 49 0 0 0 0 

11------------------------------------------------------------------------

Round 4: Eugenius holding [11, 15, 28, 29, 30, 49] plays the 11 
Kane wins the round which contains 4 penalty points

Round 5: Kane     holding [17, 19, 23, 35, 37] plays the 19 
Round 5: Heather  holding [10, 25, 27, 33, 48] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
15 28 29 30 49 0 0 0 0 0 

29------------------------------------------------------------------------

Round 5: Eugenius holding [15, 28, 29, 30, 49] plays the 29 
Round 5: Dean     holding [21, 38, 39, 45, 47] plays the 47 
Dean wins the round which contains 3 penalty points

Round 6: Dean     holding [21, 38, 39, 45] plays the 38 
Round 6: Kane     holding [17, 23, 35, 37] plays the 35 
Round 6: Heather  holding [10, 27, 33, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
15 28 30 49 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 6: Eugenius holding [15, 28, 30, 49] plays the 28 
Heather wins the round 

Round 7: Heather  holding [10, 27, 33] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
15 30 49 0 0 0 0 0 0 0 

15------------------------------------------------------------------------

Round 7: Eugenius holding [15, 30, 49] plays the 15 
Round 7: Dean     holding [21, 39, 45] plays the 39 
Round 7: Kane     holding [17, 23, 37] plays the 17 
Dean wins the round which contains 1 penalty points

Round 8: Dean     holding [21, 45] plays the 45 
Round 8: Kane     holding [23, 37] plays the 23 
Round 8: Heather  holding [10, 27] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
30 49 0 0 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 8: Eugenius holding [30, 49] plays the 30 
Dean wins the round which contains 1 penalty points

Round 9: Dean     holding [21] plays the 21 
Round 9: Kane     holding [37] plays the 37 
Round 9: Heather  holding [27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 9: Eugenius holding [49] plays the 49 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 1 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Kane (system)
#3 with 6 penalty points Dean (system)
#4 with 7 penalty points Heather (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6419282 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [12, 13, 14, 17, 21, 25, 36, 42, 44, 48]
Table position 1: Connor  : [11, 19, 23, 24, 26, 27, 32, 37, 38, 49]
Table position 2: Stephen : [10, 16, 20, 22, 31, 33, 39, 41, 45, 47]
Table position 3: Gal     : [15, 18, 28, 29, 30, 34, 35, 40, 43, 46]

Discards:
Eugenius [42, 44, 48]
Connor   [11, 27, 38]
Stephen  [31, 33, 47]
Gal      [30, 40, 46]


Debug output from Eugenius
------------------------------------------------------------------------
12 13 14 17 21 25 30 36 40 46 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 13, 14, 17, 21, 25, 30, 36, 40, 46] plays the 12 
Round 0: Connor   holding [19, 23, 24, 26, 32, 37, 42, 44, 48, 49] plays the 48 
Round 0: Stephen  holding [10, 11, 16, 20, 22, 27, 38, 39, 41, 45] plays the 20 
Round 0: Gal      holding [15, 18, 28, 29, 31, 33, 34, 35, 43, 47] plays the 34 
Connor wins the round 

Round 1: Connor   holding [19, 23, 24, 26, 32, 37, 42, 44, 49] plays the 42 
Round 1: Stephen  holding [10, 11, 16, 22, 27, 38, 39, 41, 45] plays the 27 
Round 1: Gal      holding [15, 18, 28, 29, 31, 33, 35, 43, 47] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
13 14 17 21 25 30 36 40 46 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [13, 14, 17, 21, 25, 30, 36, 40, 46] plays the 14 
Connor wins the round which contains 7 penalty points

Round 2: Connor   holding [19, 23, 24, 26, 32, 37, 44, 49] plays the 44 
Round 2: Stephen  holding [10, 11, 16, 22, 38, 39, 41, 45] plays the 22 
Round 2: Gal      holding [15, 28, 29, 31, 33, 35, 43, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 21 25 30 36 40 46 0 0 

30------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 21, 25, 30, 36, 40, 46] plays the 30 
Connor wins the round 

Round 3: Connor   holding [19, 23, 24, 26, 32, 37, 49] plays the 32 
Round 3: Stephen  holding [10, 11, 16, 38, 39, 41, 45] plays the 38 
Round 3: Gal      holding [15, 28, 29, 31, 35, 43, 47] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 21 25 36 40 46 0 0 0 

36------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 21, 25, 36, 40, 46] plays the 36 
Stephen wins the round 

Round 4: Stephen  holding [10, 11, 16, 39, 41, 45] plays the 10 
Round 4: Gal      holding [15, 29, 31, 35, 43, 47] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 21 25 40 46 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 21, 25, 40, 46] plays the 25 
Round 4: Connor   holding [19, 23, 24, 26, 37, 49] plays the 24 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 17 21 40 46 0 0 0 0 0 

21------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 21, 40, 46] plays the 21 
Round 5: Connor   holding [19, 23, 26, 37, 49] plays the 49 
Round 5: Stephen  holding [11, 16, 39, 41, 45] plays the 45 
Round 5: Gal      holding [29, 31, 35, 43, 47] plays the 35 
Connor wins the round 

Round 6: Connor   holding [19, 23, 26, 37] plays the 26 
Round 6: Stephen  holding [11, 16, 39, 41] plays the 39 
Round 6: Gal      holding [29, 31, 43, 47] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 40 46 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 6: Eugenius holding [13, 17, 40, 46] plays the 40 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 17 46 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 17, 46] plays the 13 
Round 7: Connor   holding [19, 23, 37] plays the 37 
Round 7: Stephen  holding [11, 16, 41] plays the 41 
Round 7: Gal      holding [29, 43, 47] plays the 29 
Stephen wins the round which contains 4 penalty points

Round 8: Stephen  holding [11, 16] plays the 16 
Round 8: Gal      holding [43, 47] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
17 46 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 8: Eugenius holding [17, 46] plays the 46 
Round 8: Connor   holding [19, 23] plays the 19 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
17 0 0 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 9: Eugenius holding [17] plays the 17 
Round 9: Connor   holding [23] plays the 23 
Round 9: Stephen  holding [11] plays the 11 
Round 9: Gal      holding [47] plays the 47 
Gal wins the round which contains 4 penalty points


Finishing Positions

#1 with 3 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Stephen (system)
#2 with 4 penalty points Gal (system)
#4 with 7 penalty points Connor (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11056814 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Jamal   : [15, 19, 25, 27, 34, 35, 37, 39, 41, 48]
Table position 1: Eugenius: [11, 23, 31, 32, 33, 40, 42, 45, 46, 49]
Table position 2: Kane    : [13, 16, 18, 21, 22, 24, 28, 29, 30, 38]
Table position 3: Reede   : [10, 12, 14, 17, 20, 26, 36, 43, 44, 47]

Discards:
Jamal    [19, 37, 48]
Eugenius [45, 46, 49]
Kane     [18, 22, 28]
Reede    [12, 17, 20]

Round 0: Jamal    holding [12, 15, 17, 20, 25, 27, 34, 35, 39, 41] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 31 32 33 37 40 42 48 

32------------------------------------------------------------------------

Round 0: Eugenius holding [11, 19, 23, 31, 32, 33, 37, 40, 42, 48] plays the 32 
Round 0: Kane     holding [13, 16, 21, 24, 29, 30, 38, 45, 46, 49] plays the 38 
Round 0: Reede    holding [10, 14, 18, 22, 26, 28, 36, 43, 44, 47] plays the 18 
Kane wins the round 

Round 1: Kane     holding [13, 16, 21, 24, 29, 30, 45, 46, 49] plays the 49 
Round 1: Reede    holding [10, 14, 22, 26, 28, 36, 43, 44, 47] plays the 28 
Round 1: Jamal    holding [12, 15, 17, 25, 27, 34, 35, 39, 41] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 31 33 37 40 42 48 0 

42------------------------------------------------------------------------

Round 1: Eugenius holding [11, 19, 23, 31, 33, 37, 40, 42, 48] plays the 42 
Kane wins the round which contains 7 penalty points

Round 2: Kane     holding [13, 16, 21, 24, 29, 30, 45, 46] plays the 24 
Round 2: Reede    holding [10, 14, 22, 26, 36, 43, 44, 47] plays the 22 
Round 2: Jamal    holding [12, 15, 17, 25, 27, 34, 39, 41] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 31 33 37 40 48 0 0 

33------------------------------------------------------------------------

Round 2: Eugenius holding [11, 19, 23, 31, 33, 37, 40, 48] plays the 33 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 31 37 40 48 0 0 0 

40------------------------------------------------------------------------

Round 3: Eugenius holding [11, 19, 23, 31, 37, 40, 48] plays the 40 
Round 3: Kane     holding [13, 16, 21, 29, 30, 45, 46] plays the 30 
Round 3: Reede    holding [10, 14, 26, 36, 43, 44, 47] plays the 14 
Round 3: Jamal    holding [12, 17, 25, 27, 34, 39, 41] plays the 34 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 31 37 48 0 0 0 0 

48------------------------------------------------------------------------

Round 4: Eugenius holding [11, 19, 23, 31, 37, 48] plays the 48 
Round 4: Kane     holding [13, 16, 21, 29, 45, 46] plays the 46 
Round 4: Reede    holding [10, 26, 36, 43, 44, 47] plays the 36 
Round 4: Jamal    holding [12, 17, 25, 27, 39, 41] plays the 27 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 31 37 0 0 0 0 0 

11------------------------------------------------------------------------

Round 5: Eugenius holding [11, 19, 23, 31, 37] plays the 11 
Round 5: Kane     holding [13, 16, 21, 29, 45] plays the 13 
Round 5: Reede    holding [10, 26, 43, 44, 47] plays the 43 
Round 5: Jamal    holding [12, 17, 25, 39, 41] plays the 17 
Reede wins the round which contains 4 penalty points

Round 6: Reede    holding [10, 26, 44, 47] plays the 47 
Round 6: Jamal    holding [12, 25, 39, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 31 37 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 23, 31, 37] plays the 19 
Round 6: Kane     holding [16, 21, 29, 45] plays the 29 
Reede wins the round which contains 4 penalty points

Round 7: Reede    holding [10, 26, 44] plays the 44 
Round 7: Jamal    holding [12, 25, 39] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 37 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 7: Eugenius holding [23, 31, 37] plays the 23 
Round 7: Kane     holding [16, 21, 45] plays the 16 
Reede wins the round which contains 1 penalty points

Round 8: Reede    holding [10, 26] plays the 10 
Round 8: Jamal    holding [25, 39] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius holding [31, 37] plays the 31 
Round 8: Kane     holding [21, 45] plays the 45 
Kane wins the round which contains 1 penalty points

Round 9: Kane     holding [21] plays the 21 
Round 9: Reede    holding [26] plays the 26 
Round 9: Jamal    holding [39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Jamal wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Jamal (system)
#3 with 8 penalty points Kane (system)
#4 with 9 penalty points Reede (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2577244 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius : [10, 12, 14, 20, 24, 30, 31, 32, 33, 37]
Table position 1: Elizabeth: [17, 21, 23, 26, 29, 34, 39, 42, 43, 49]
Table position 2: Connor   : [11, 16, 18, 19, 22, 27, 28, 36, 38, 41]
Table position 3: Sabrina  : [13, 15, 25, 35, 40, 44, 45, 46, 47, 48]

Discards:
Eugenius  [32, 33, 37]
Elizabeth [21, 23, 26]
Connor    [16, 19, 38]
Sabrina   [15, 40, 45]


Debug output from Eugenius
------------------------------------------------------------------------
10 12 14 15 20 24 30 31 40 45 

10------------------------------------------------------------------------

Round 0: Eugenius  holding [10, 12, 14, 15, 20, 24, 30, 31, 40, 45] plays the 10 
Round 0: Elizabeth holding [17, 29, 32, 33, 34, 37, 39, 42, 43, 49] plays the 34 
Round 0: Connor    holding [11, 18, 21, 22, 23, 26, 27, 28, 36, 41] plays the 36 
Round 0: Sabrina   holding [13, 16, 19, 25, 35, 38, 44, 46, 47, 48] plays the 25 
Connor wins the round 

Round 1: Connor    holding [11, 18, 21, 22, 23, 26, 27, 28, 41] plays the 27 
Round 1: Sabrina   holding [13, 16, 19, 35, 38, 44, 46, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 15 20 24 30 31 40 45 0 

12------------------------------------------------------------------------

Round 1: Eugenius  holding [12, 14, 15, 20, 24, 30, 31, 40, 45] plays the 12 
Round 1: Elizabeth holding [17, 29, 32, 33, 37, 39, 42, 43, 49] plays the 33 
Sabrina wins the round 

Round 2: Sabrina   holding [13, 16, 19, 35, 38, 44, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
14 15 20 24 30 31 40 45 0 0 

14------------------------------------------------------------------------

Round 2: Eugenius  holding [14, 15, 20, 24, 30, 31, 40, 45] plays the 14 
Round 2: Elizabeth holding [17, 29, 32, 37, 39, 42, 43, 49] plays the 42 
Round 2: Connor    holding [11, 18, 21, 22, 23, 26, 28, 41] plays the 18 
Sabrina wins the round which contains 7 penalty points

Round 3: Sabrina   holding [13, 16, 19, 35, 38, 44, 47] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
15 20 24 30 31 40 45 0 0 0 

15------------------------------------------------------------------------

Round 3: Eugenius  holding [15, 20, 24, 30, 31, 40, 45] plays the 15 
Round 3: Elizabeth holding [17, 29, 32, 37, 39, 43, 49] plays the 49 
Round 3: Connor    holding [11, 21, 22, 23, 26, 28, 41] plays the 28 
Elizabeth wins the round 

Round 4: Elizabeth holding [17, 29, 32, 37, 39, 43] plays the 32 
Round 4: Connor    holding [11, 21, 22, 23, 26, 41] plays the 22 
Round 4: Sabrina   holding [13, 16, 19, 38, 44, 47] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
20 24 30 31 40 45 0 0 0 0 

20------------------------------------------------------------------------

Round 4: Eugenius  holding [20, 24, 30, 31, 40, 45] plays the 20 
Elizabeth wins the round 

Round 5: Elizabeth holding [17, 29, 37, 39, 43] plays the 39 
Round 5: Connor    holding [11, 21, 23, 26, 41] plays the 26 
Round 5: Sabrina   holding [13, 19, 38, 44, 47] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
24 30 31 40 45 0 0 0 0 0 

24------------------------------------------------------------------------

Round 5: Eugenius  holding [24, 30, 31, 40, 45] plays the 24 
Elizabeth wins the round 

Round 6: Elizabeth holding [17, 29, 37, 43] plays the 17 
Round 6: Connor    holding [11, 21, 23, 41] plays the 41 
Round 6: Sabrina   holding [13, 19, 38, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
30 31 40 45 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 6: Eugenius  holding [30, 31, 40, 45] plays the 31 
Sabrina wins the round which contains 4 penalty points

Round 7: Sabrina   holding [13, 19, 38] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
30 40 45 0 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 7: Eugenius  holding [30, 40, 45] plays the 30 
Round 7: Elizabeth holding [29, 37, 43] plays the 29 
Round 7: Connor    holding [11, 21, 23] plays the 11 
Elizabeth wins the round which contains 3 penalty points

Round 8: Elizabeth holding [37, 43] plays the 37 
Round 8: Connor    holding [21, 23] plays the 23 
Round 8: Sabrina   holding [19, 38] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
40 45 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 8: Eugenius  holding [40, 45] plays the 40 
Elizabeth wins the round which contains 3 penalty points

Round 9: Elizabeth holding [43] plays the 43 
Round 9: Connor    holding [21] plays the 21 
Round 9: Sabrina   holding [38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius  holding [45] plays the 45 
Elizabeth wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Connor (system)
#3 with 7 penalty points Elizabeth (system)
#4 with 11 penalty points Sabrina (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2418802 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Xue     : [19, 20, 29, 30, 37, 38, 40, 41, 45, 47]
Table position 1: Eugenius: [10, 16, 22, 25, 27, 28, 31, 39, 43, 46]
Table position 2: Finbar  : [11, 12, 13, 14, 18, 21, 32, 36, 44, 48]
Table position 3: Costa   : [15, 17, 23, 24, 26, 33, 34, 35, 42, 49]

Discards:
Xue      [37, 38, 41]
Eugenius [39, 43, 46]
Finbar   [11, 14, 21]
Costa    [17, 34, 42]

Round 0: Xue      holding [17, 19, 20, 29, 30, 34, 40, 42, 45, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
10 16 22 25 27 28 31 37 38 41 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 16, 22, 25, 27, 28, 31, 37, 38, 41] plays the 10 
Round 0: Finbar   holding [12, 13, 18, 32, 36, 39, 43, 44, 46, 48] plays the 12 
Round 0: Costa    holding [11, 14, 15, 21, 23, 24, 26, 33, 35, 49] plays the 35 
Xue wins the round which contains 7 penalty points

Round 1: Xue      holding [17, 19, 20, 29, 30, 34, 40, 45, 47] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
16 22 25 27 28 31 37 38 41 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 22, 25, 27, 28, 31, 37, 38, 41] plays the 16 
Round 1: Finbar   holding [13, 18, 32, 36, 39, 43, 44, 46, 48] plays the 32 
Round 1: Costa    holding [11, 14, 15, 21, 23, 24, 26, 33, 49] plays the 33 
Costa wins the round 

Round 2: Costa    holding [11, 14, 15, 21, 23, 24, 26, 49] plays the 26 
Round 2: Xue      holding [17, 19, 20, 29, 34, 40, 45, 47] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 27 28 31 37 38 41 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [22, 25, 27, 28, 31, 37, 38, 41] plays the 22 
Round 2: Finbar   holding [13, 18, 36, 39, 43, 44, 46, 48] plays the 36 
Finbar wins the round 

Round 3: Finbar   holding [13, 18, 39, 43, 44, 46, 48] plays the 18 
Round 3: Costa    holding [11, 14, 15, 21, 23, 24, 49] plays the 24 
Round 3: Xue      holding [17, 19, 20, 29, 40, 45, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
25 27 28 31 37 38 41 0 0 0 

27------------------------------------------------------------------------

Round 3: Eugenius holding [25, 27, 28, 31, 37, 38, 41] plays the 27 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
25 28 31 37 38 41 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [25, 28, 31, 37, 38, 41] plays the 25 
Round 4: Finbar   holding [13, 39, 43, 44, 46, 48] plays the 46 
Round 4: Costa    holding [11, 14, 15, 21, 23, 49] plays the 15 
Round 4: Xue      holding [17, 19, 29, 40, 45, 47] plays the 45 
Xue wins the round 

Round 5: Xue      holding [17, 19, 29, 40, 47] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
28 31 37 38 41 0 0 0 0 0 

28------------------------------------------------------------------------

Round 5: Eugenius holding [28, 31, 37, 38, 41] plays the 28 
Round 5: Finbar   holding [13, 39, 43, 44, 48] plays the 44 
Round 5: Costa    holding [11, 14, 21, 23, 49] plays the 14 
Finbar wins the round 

Round 6: Finbar   holding [13, 39, 43, 48] plays the 39 
Round 6: Costa    holding [11, 21, 23, 49] plays the 21 
Round 6: Xue      holding [17, 19, 29, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 38 41 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 6: Eugenius holding [31, 37, 38, 41] plays the 31 
Finbar wins the round which contains 2 penalty points

Round 7: Finbar   holding [13, 43, 48] plays the 43 
Round 7: Costa    holding [11, 23, 49] plays the 23 
Round 7: Xue      holding [17, 19, 29] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
37 38 41 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 7: Eugenius holding [37, 38, 41] plays the 37 
Finbar wins the round which contains 4 penalty points

Round 8: Finbar   holding [13, 48] plays the 48 
Round 8: Costa    holding [11, 49] plays the 49 
Round 8: Xue      holding [17, 29] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
38 41 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [38, 41] plays the 38 
Finbar wins the round which contains 1 penalty points

Round 9: Finbar   holding [13] plays the 13 
Round 9: Costa    holding [11] plays the 11 
Round 9: Xue      holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Eugenius wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Costa (system)
#2 with 4 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Xue (system)
#3 with 7 penalty points Finbar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 811737 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Marc    : [12, 19, 20, 21, 27, 32, 34, 35, 44, 47]
Table position 1: Andrew  : [14, 16, 17, 23, 26, 28, 33, 41, 45, 46]
Table position 2: Vincent : [15, 18, 24, 29, 30, 37, 39, 40, 43, 49]
Table position 3: Eugenius: [10, 11, 13, 22, 25, 31, 36, 38, 42, 48]

Discards:
Marc     [19, 27, 35]
Andrew   [14, 28, 46]
Vincent  [29, 39, 43]
Eugenius [38, 42, 48]

Round 0: Marc     holding [12, 20, 21, 32, 34, 38, 42, 44, 47, 48] plays the 20 
Round 0: Andrew   holding [16, 17, 19, 23, 26, 27, 33, 35, 41, 45] plays the 16 
Round 0: Vincent  holding [14, 15, 18, 24, 28, 30, 37, 40, 46, 49] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 13 22 25 29 31 36 39 43 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 13, 22, 25, 29, 31, 36, 39, 43] plays the 10 
Vincent wins the round 

Round 1: Vincent  holding [14, 15, 18, 28, 30, 37, 40, 46, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 22 25 29 31 36 39 43 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 22, 25, 29, 31, 36, 39, 43] plays the 22 
Round 1: Marc     holding [12, 21, 32, 34, 38, 42, 44, 47, 48] plays the 32 
Round 1: Andrew   holding [17, 19, 23, 26, 27, 33, 35, 41, 45] plays the 26 
Vincent wins the round 

Round 2: Vincent  holding [14, 15, 18, 28, 30, 37, 40, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 25 29 31 36 39 43 0 0 

11 chah------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 25, 29, 31, 36, 39, 43] plays the 11 
Round 2: Marc     holding [12, 21, 34, 38, 42, 44, 47, 48] plays the 42 
Round 2: Andrew   holding [17, 19, 23, 27, 33, 35, 41, 45] plays the 35 
Vincent wins the round which contains 8 penalty points

Round 3: Vincent  holding [14, 15, 18, 28, 30, 37, 40] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
13 25 29 31 36 39 43 0 0 0 

36------------------------------------------------------------------------

Round 3: Eugenius holding [13, 25, 29, 31, 36, 39, 43] plays the 36 
Round 3: Marc     holding [12, 21, 34, 38, 44, 47, 48] plays the 38 
Round 3: Andrew   holding [17, 19, 23, 27, 33, 41, 45] plays the 27 
Marc wins the round 

Round 4: Marc     holding [12, 21, 34, 44, 47, 48] plays the 44 
Round 4: Andrew   holding [17, 19, 23, 33, 41, 45] plays the 33 
Round 4: Vincent  holding [15, 18, 28, 30, 37, 40] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
13 25 29 31 39 43 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 4: Eugenius holding [13, 25, 29, 31, 39, 43] plays the 13 
Marc wins the round which contains 1 penalty points

Round 5: Marc     holding [12, 21, 34, 47, 48] plays the 34 
Round 5: Andrew   holding [17, 19, 23, 41, 45] plays the 17 
Round 5: Vincent  holding [15, 18, 28, 37, 40] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 31 39 43 0 0 0 0 0 

25 chah------------------------------------------------------------------------

Round 5: Eugenius holding [25, 29, 31, 39, 43] plays the 25 
Marc wins the round which contains 1 penalty points

Round 6: Marc     holding [12, 21, 47, 48] plays the 48 
Round 6: Andrew   holding [19, 23, 41, 45] plays the 45 
Round 6: Vincent  holding [15, 28, 37, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 39 43 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 6: Eugenius holding [29, 31, 39, 43] plays the 39 
Marc wins the round 

Round 7: Marc     holding [12, 21, 47] plays the 47 
Round 7: Andrew   holding [19, 23, 41] plays the 41 
Round 7: Vincent  holding [15, 28, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 43 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 43] plays the 29 
Marc wins the round which contains 4 penalty points

Round 8: Marc     holding [12, 21] plays the 12 
Round 8: Andrew   holding [19, 23] plays the 23 
Round 8: Vincent  holding [15, 28] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
31 43 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius holding [31, 43] plays the 31 
Vincent wins the round which contains 2 penalty points

Round 9: Vincent  holding [28] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43 chah------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Round 9: Marc     holding [21] plays the 21 
Round 9: Andrew   holding [19] plays the 19 
Vincent wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Andrew (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Marc (system)
#4 with 12 penalty points Vincent (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14305100 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Emily   : [14, 17, 20, 22, 26, 30, 33, 38, 44, 48]
Table position 1: Kane    : [10, 11, 15, 18, 23, 27, 35, 41, 45, 49]
Table position 2: Nicholas: [13, 16, 19, 21, 25, 28, 31, 32, 40, 43]
Table position 3: Eugenius: [12, 24, 29, 34, 36, 37, 39, 42, 46, 47]

Discards:
Emily    [17, 22, 30]
Kane     [15, 41, 45]
Nicholas [16, 28, 43]
Eugenius [42, 46, 47]

Round 0: Emily    holding [14, 20, 26, 33, 38, 42, 44, 46, 47, 48] plays the 33 
Round 0: Kane     holding [10, 11, 17, 18, 22, 23, 27, 30, 35, 49] plays the 30 
Round 0: Nicholas holding [13, 15, 19, 21, 25, 31, 32, 40, 41, 45] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
12 16 24 28 29 34 36 37 39 43 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 16, 24, 28, 29, 34, 36, 37, 39, 43] plays the 12 
Emily wins the round 

Round 1: Emily    holding [14, 20, 26, 38, 42, 44, 46, 47, 48] plays the 26 
Round 1: Kane     holding [10, 11, 17, 18, 22, 23, 27, 35, 49] plays the 18 
Round 1: Nicholas holding [13, 19, 21, 25, 31, 32, 40, 41, 45] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
16 24 28 29 34 36 37 39 43 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 24, 28, 29, 34, 36, 37, 39, 43] plays the 16 
Nicholas wins the round 

Round 2: Nicholas holding [13, 19, 21, 25, 31, 32, 41, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
24 28 29 34 36 37 39 43 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [24, 28, 29, 34, 36, 37, 39, 43] plays the 24 
Round 2: Emily    holding [14, 20, 38, 42, 44, 46, 47, 48] plays the 48 
Round 2: Kane     holding [10, 11, 17, 22, 23, 27, 35, 49] plays the 10 
Emily wins the round 

Round 3: Emily    holding [14, 20, 38, 42, 44, 46, 47] plays the 20 
Round 3: Kane     holding [11, 17, 22, 23, 27, 35, 49] plays the 35 
Round 3: Nicholas holding [13, 19, 21, 25, 31, 32, 41] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
28 29 34 36 37 39 43 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [28, 29, 34, 36, 37, 39, 43] plays the 28 
Kane wins the round 

Round 4: Kane     holding [11, 17, 22, 23, 27, 49] plays the 49 
Round 4: Nicholas holding [13, 19, 21, 25, 31, 41] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
29 34 36 37 39 43 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 4: Eugenius holding [29, 34, 36, 37, 39, 43] plays the 29 
Round 4: Emily    holding [14, 38, 42, 44, 46, 47] plays the 14 
Kane wins the round which contains 1 penalty points

Round 5: Kane     holding [11, 17, 22, 23, 27] plays the 23 
Round 5: Nicholas holding [13, 19, 25, 31, 41] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
34 36 37 39 43 0 0 0 0 0 

37------------------------------------------------------------------------

Round 5: Eugenius holding [34, 36, 37, 39, 43] plays the 37 
Round 5: Emily    holding [38, 42, 44, 46, 47] plays the 47 
Emily wins the round which contains 4 penalty points

Round 6: Emily    holding [38, 42, 44, 46] plays the 42 
Round 6: Kane     holding [11, 17, 22, 27] plays the 27 
Round 6: Nicholas holding [19, 25, 31, 41] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
34 36 39 43 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 6: Eugenius holding [34, 36, 39, 43] plays the 34 
Emily wins the round which contains 8 penalty points

Round 7: Emily    holding [38, 44, 46] plays the 46 
Round 7: Kane     holding [11, 17, 22] plays the 22 
Round 7: Nicholas holding [25, 31, 41] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
36 39 43 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 7: Eugenius holding [36, 39, 43] plays the 36 
Emily wins the round which contains 1 penalty points

Round 8: Emily    holding [38, 44] plays the 44 
Round 8: Kane     holding [11, 17] plays the 11 
Round 8: Nicholas holding [25, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
39 43 0 0 0 0 0 0 0 0 

39 chah------------------------------------------------------------------------

Round 8: Eugenius holding [39, 43] plays the 39 
Emily wins the round which contains 2 penalty points

Round 9: Emily    holding [38] plays the 38 
Round 9: Kane     holding [17] plays the 17 
Round 9: Nicholas holding [25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43 chah------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Emily wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Nicholas (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 1 penalty points Kane (system)
#4 with 17 penalty points Emily (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10545304 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Claire  : [11, 14, 15, 26, 27, 30, 31, 32, 34, 38]
Table position 1: Andrew  : [13, 19, 20, 21, 23, 24, 33, 42, 43, 49]
Table position 2: Peter   : [12, 16, 17, 18, 40, 41, 44, 46, 47, 48]
Table position 3: Eugenius: [10, 22, 25, 28, 29, 35, 36, 37, 39, 45]

Discards:
Claire   [26, 31, 32]
Andrew   [23, 24, 43]
Peter    [12, 17, 46]
Eugenius [37, 39, 45]

Round 0: Claire   holding [11, 14, 15, 27, 30, 34, 37, 38, 39, 45] plays the 30 
Round 0: Andrew   holding [13, 19, 20, 21, 26, 31, 32, 33, 42, 49] plays the 26 
Round 0: Peter    holding [16, 18, 23, 24, 40, 41, 43, 44, 47, 48] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 17 22 25 28 29 35 36 46 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 17, 22, 25, 28, 29, 35, 36, 46] plays the 10 
Claire wins the round 

Round 1: Claire   holding [11, 14, 15, 27, 34, 37, 38, 39, 45] plays the 45 
Round 1: Andrew   holding [13, 19, 20, 21, 31, 32, 33, 42, 49] plays the 20 
Round 1: Peter    holding [16, 18, 23, 40, 41, 43, 44, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
12 17 22 25 28 29 35 36 46 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 17, 22, 25, 28, 29, 35, 36, 46] plays the 12 
Peter wins the round 

Round 2: Peter    holding [16, 18, 23, 40, 41, 43, 44, 47] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 25 28 29 35 36 46 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [17, 22, 25, 28, 29, 35, 36, 46] plays the 22 
Round 2: Claire   holding [11, 14, 15, 27, 34, 37, 38, 39] plays the 38 
Round 2: Andrew   holding [13, 19, 21, 31, 32, 33, 42, 49] plays the 32 
Peter wins the round 

Round 3: Peter    holding [16, 18, 23, 40, 41, 43, 47] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 28 29 35 36 46 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [17, 25, 28, 29, 35, 36, 46] plays the 28 
Round 3: Claire   holding [11, 14, 15, 27, 34, 37, 39] plays the 14 
Round 3: Andrew   holding [13, 19, 21, 31, 33, 42, 49] plays the 42 
Andrew wins the round which contains 7 penalty points

Round 4: Andrew   holding [13, 19, 21, 31, 33, 49] plays the 33 
Round 4: Peter    holding [18, 23, 40, 41, 43, 47] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 29 35 36 46 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius holding [17, 25, 29, 35, 36, 46] plays the 36 
Round 4: Claire   holding [11, 15, 27, 34, 37, 39] plays the 39 
Claire wins the round 

Round 5: Claire   holding [11, 15, 27, 34, 37] plays the 34 
Round 5: Andrew   holding [13, 19, 21, 31, 49] plays the 13 
Round 5: Peter    holding [23, 40, 41, 43, 47] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 29 35 46 0 0 0 0 0 

46------------------------------------------------------------------------

Round 5: Eugenius holding [17, 25, 29, 35, 46] plays the 46 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
17 25 29 35 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 25, 29, 35] plays the 17 
Round 6: Claire   holding [11, 15, 27, 37] plays the 11 
Round 6: Andrew   holding [19, 21, 31, 49] plays the 31 
Round 6: Peter    holding [23, 41, 43, 47] plays the 43 
Peter wins the round which contains 4 penalty points

Round 7: Peter    holding [23, 41, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 35 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [25, 29, 35] plays the 29 
Round 7: Claire   holding [15, 27, 37] plays the 37 
Round 7: Andrew   holding [19, 21, 49] plays the 19 
Peter wins the round which contains 4 penalty points

Round 8: Peter    holding [23, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
25 35 0 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 8: Eugenius holding [25, 35] plays the 25 
Round 8: Claire   holding [15, 27] plays the 27 
Round 8: Andrew   holding [21, 49] plays the 21 
Peter wins the round which contains 1 penalty points

Round 9: Peter    holding [23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Round 9: Claire   holding [15] plays the 15 
Round 9: Andrew   holding [49] plays the 49 
Peter wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Claire (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Andrew (system)
#4 with 10 penalty points Peter (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9341426 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 28, 31, 32, 35, 39, 41, 45, 46, 49]
Table position 1: Zachary : [14, 17, 18, 21, 22, 25, 30, 36, 37, 43]
Table position 2: Mitchell: [11, 12, 15, 19, 23, 29, 33, 42, 44, 48]
Table position 3: George  : [13, 16, 20, 24, 26, 27, 34, 38, 40, 47]

Discards:
Eugenius [45, 46, 49]
Zachary  [17, 18, 25]
Mitchell [23, 33, 42]
George   [24, 27, 40]


Debug output from Eugenius
------------------------------------------------------------------------
10 24 27 28 31 32 35 39 40 41 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 24, 27, 28, 31, 32, 35, 39, 40, 41] plays the 10 
Round 0: Zachary  holding [14, 21, 22, 30, 36, 37, 43, 45, 46, 49] plays the 30 
Round 0: Mitchell holding [11, 12, 15, 17, 18, 19, 25, 29, 44, 48] plays the 15 
Round 0: George   holding [13, 16, 20, 23, 26, 33, 34, 38, 42, 47] plays the 26 
Zachary wins the round 

Round 1: Zachary  holding [14, 21, 22, 36, 37, 43, 45, 46, 49] plays the 36 
Round 1: Mitchell holding [11, 12, 17, 18, 19, 25, 29, 44, 48] plays the 44 
Round 1: George   holding [13, 16, 20, 23, 33, 34, 38, 42, 47] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
24 27 28 31 32 35 39 40 41 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [24, 27, 28, 31, 32, 35, 39, 40, 41] plays the 24 
Mitchell wins the round 

Round 2: Mitchell holding [11, 12, 17, 18, 19, 25, 29, 48] plays the 25 
Round 2: George   holding [13, 16, 20, 23, 33, 34, 42, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
27 28 31 32 35 39 40 41 0 0 

35------------------------------------------------------------------------

Round 2: Eugenius holding [27, 28, 31, 32, 35, 39, 40, 41] plays the 35 
Round 2: Zachary  holding [14, 21, 22, 37, 43, 45, 46, 49] plays the 45 
Zachary wins the round 

Round 3: Zachary  holding [14, 21, 22, 37, 43, 46, 49] plays the 49 
Round 3: Mitchell holding [11, 12, 17, 18, 19, 29, 48] plays the 17 
Round 3: George   holding [13, 16, 23, 33, 34, 42, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
27 28 31 32 39 40 41 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [27, 28, 31, 32, 39, 40, 41] plays the 28 
Zachary wins the round which contains 8 penalty points

Round 4: Zachary  holding [14, 21, 22, 37, 43, 46] plays the 21 
Round 4: Mitchell holding [11, 12, 18, 19, 29, 48] plays the 12 
Round 4: George   holding [13, 16, 23, 33, 34, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
27 31 32 39 40 41 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [27, 31, 32, 39, 40, 41] plays the 27 
George wins the round 

Round 5: George   holding [13, 16, 23, 34, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
31 32 39 40 41 0 0 0 0 0 

31------------------------------------------------------------------------

Round 5: Eugenius holding [31, 32, 39, 40, 41] plays the 31 
Round 5: Zachary  holding [14, 22, 37, 43, 46] plays the 37 
Round 5: Mitchell holding [11, 18, 19, 29, 48] plays the 29 
George wins the round which contains 4 penalty points

Round 6: George   holding [13, 16, 23, 34] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
32 39 40 41 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 6: Eugenius holding [32, 39, 40, 41] plays the 32 
Round 6: Zachary  holding [14, 22, 43, 46] plays the 22 
Round 6: Mitchell holding [11, 18, 19, 48] plays the 48 
Mitchell wins the round 

Round 7: Mitchell holding [11, 18, 19] plays the 19 
Round 7: George   holding [13, 23, 34] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
39 40 41 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 7: Eugenius holding [39, 40, 41] plays the 41 
Round 7: Zachary  holding [14, 43, 46] plays the 43 
Zachary wins the round which contains 4 penalty points

Round 8: Zachary  holding [14, 46] plays the 46 
Round 8: Mitchell holding [11, 18] plays the 18 
Round 8: George   holding [13, 34] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
39 40 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 8: Eugenius holding [39, 40] plays the 40 
Zachary wins the round 

Round 9: Zachary  holding [14] plays the 14 
Round 9: Mitchell holding [11] plays the 11 
Round 9: George   holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39 chah------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Zachary wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Mitchell (system)
#3 with 4 penalty points George (system)
#4 with 14 penalty points Zachary (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3180611 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [12, 15, 16, 18, 22, 23, 33, 38, 46, 47]
Table position 1: Michael : [10, 13, 25, 26, 31, 32, 37, 41, 43, 49]
Table position 2: Finbar  : [17, 20, 27, 28, 29, 36, 40, 44, 45, 48]
Table position 3: David   : [11, 14, 19, 21, 24, 30, 34, 35, 39, 42]

Discards:
Eugenius [38, 46, 47]
Michael  [13, 32, 37]
Finbar   [27, 45, 48]
David    [11, 14, 19]


Debug output from Eugenius
------------------------------------------------------------------------
11 12 14 15 16 18 19 22 23 33 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 14, 15, 16, 18, 19, 22, 23, 33] plays the 12 
Round 0: Michael  holding [10, 25, 26, 31, 38, 41, 43, 46, 47, 49] plays the 26 
Round 0: Finbar   holding [13, 17, 20, 28, 29, 32, 36, 37, 40, 44] plays the 40 
Round 0: David    holding [21, 24, 27, 30, 34, 35, 39, 42, 45, 48] plays the 34 
Finbar wins the round 

Round 1: Finbar   holding [13, 17, 20, 28, 29, 32, 36, 37, 44] plays the 20 
Round 1: David    holding [21, 24, 27, 30, 35, 39, 42, 45, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 15 16 18 19 22 23 33 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [11, 14, 15, 16, 18, 19, 22, 23, 33] plays the 14 
Round 1: Michael  holding [10, 25, 31, 38, 41, 43, 46, 47, 49] plays the 46 
David wins the round 

Round 2: David    holding [21, 24, 27, 30, 35, 39, 42, 45] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 15 16 18 19 22 23 33 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius holding [11, 15, 16, 18, 19, 22, 23, 33] plays the 15 
Round 2: Michael  holding [10, 25, 31, 38, 41, 43, 47, 49] plays the 10 
Round 2: Finbar   holding [13, 17, 28, 29, 32, 36, 37, 44] plays the 28 
David wins the round which contains 7 penalty points

Round 3: David    holding [21, 24, 27, 30, 35, 39, 45] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 18 19 22 23 33 0 0 0 

16------------------------------------------------------------------------

Round 3: Eugenius holding [11, 16, 18, 19, 22, 23, 33] plays the 16 
Round 3: Michael  holding [25, 31, 38, 41, 43, 47, 49] plays the 38 
Round 3: Finbar   holding [13, 17, 29, 32, 36, 37, 44] plays the 36 
Michael wins the round 

Round 4: Michael  holding [25, 31, 41, 43, 47, 49] plays the 49 
Round 4: Finbar   holding [13, 17, 29, 32, 37, 44] plays the 29 
Round 4: David    holding [21, 27, 30, 35, 39, 45] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
11 18 19 22 23 33 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 4: Eugenius holding [11, 18, 19, 22, 23, 33] plays the 11 
Michael wins the round which contains 2 penalty points

Round 5: Michael  holding [25, 31, 41, 43, 47] plays the 31 
Round 5: Finbar   holding [13, 17, 32, 37, 44] plays the 13 
Round 5: David    holding [27, 30, 35, 39, 45] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
18 19 22 23 33 0 0 0 0 0 

19------------------------------------------------------------------------

Round 5: Eugenius holding [18, 19, 22, 23, 33] plays the 19 
Michael wins the round which contains 3 penalty points

Round 6: Michael  holding [25, 41, 43, 47] plays the 47 
Round 6: Finbar   holding [17, 32, 37, 44] plays the 17 
Round 6: David    holding [27, 35, 39, 45] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
18 22 23 33 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [18, 22, 23, 33] plays the 23 
Michael wins the round which contains 3 penalty points

Round 7: Michael  holding [25, 41, 43] plays the 41 
Round 7: Finbar   holding [32, 37, 44] plays the 37 
Round 7: David    holding [27, 35, 45] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
18 22 33 0 0 0 0 0 0 0 

18------------------------------------------------------------------------

Round 7: Eugenius holding [18, 22, 33] plays the 18 
Michael wins the round which contains 2 penalty points

Round 8: Michael  holding [25, 43] plays the 43 
Round 8: Finbar   holding [32, 44] plays the 32 
Round 8: David    holding [27, 45] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
22 33 0 0 0 0 0 0 0 0 

22------------------------------------------------------------------------

Round 8: Eugenius holding [22, 33] plays the 22 
Michael wins the round which contains 1 penalty points

Round 9: Michael  holding [25] plays the 25 
Round 9: Finbar   holding [44] plays the 44 
Round 9: David    holding [45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
33 0 0 0 0 0 0 0 0 0 

33 chah------------------------------------------------------------------------

Round 9: Eugenius holding [33] plays the 33 
David wins the round 


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Finbar (system)
#3 with 7 penalty points David (system)
#4 with 11 penalty points Michael (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15215437 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Aydin   : [10, 13, 14, 27, 29, 38, 42, 43, 47, 49]
Table position 1: Emily   : [11, 12, 16, 21, 22, 23, 32, 37, 44, 48]
Table position 2: Eugenius: [17, 19, 24, 25, 28, 30, 34, 36, 40, 46]
Table position 3: Alex    : [15, 18, 20, 26, 31, 33, 35, 39, 41, 45]

Discards:
Aydin    [13, 47, 49]
Emily    [12, 22, 23]
Eugenius [36, 40, 46]
Alex     [18, 31, 39]

Round 0: Aydin    holding [10, 14, 18, 27, 29, 31, 38, 39, 42, 43] plays the 27 
Round 0: Emily    holding [11, 13, 16, 21, 32, 37, 44, 47, 48, 49] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
12 17 19 22 23 24 25 28 30 34 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 17, 19, 22, 23, 24, 25, 28, 30, 34] plays the 12 
Round 0: Alex     holding [15, 20, 26, 33, 35, 36, 40, 41, 45, 46] plays the 33 
Emily wins the round 

Round 1: Emily    holding [11, 13, 16, 21, 32, 37, 44, 47, 49] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 22 23 24 25 28 30 34 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [17, 19, 22, 23, 24, 25, 28, 30, 34] plays the 24 
Round 1: Alex     holding [15, 20, 26, 35, 36, 40, 41, 45, 46] plays the 35 
Round 1: Aydin    holding [10, 14, 18, 29, 31, 38, 39, 42, 43] plays the 14 
Alex wins the round 

Round 2: Alex     holding [15, 20, 26, 36, 40, 41, 45, 46] plays the 26 
Round 2: Aydin    holding [10, 18, 29, 31, 38, 39, 42, 43] plays the 10 
Round 2: Emily    holding [11, 13, 16, 32, 37, 44, 47, 49] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 22 23 25 28 30 34 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [17, 19, 22, 23, 25, 28, 30, 34] plays the 22 
Emily wins the round 

Round 3: Emily    holding [11, 13, 16, 37, 44, 47, 49] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 25 28 30 34 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 23, 25, 28, 30, 34] plays the 28 
Round 3: Alex     holding [15, 20, 36, 40, 41, 45, 46] plays the 46 
Round 3: Aydin    holding [18, 29, 31, 38, 39, 42, 43] plays the 18 
Alex wins the round 

Round 4: Alex     holding [15, 20, 36, 40, 41, 45] plays the 15 
Round 4: Aydin    holding [29, 31, 38, 39, 42, 43] plays the 39 
Round 4: Emily    holding [11, 13, 37, 44, 47, 49] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 25 30 34 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 23, 25, 30, 34] plays the 25 
Aydin wins the round which contains 1 penalty points

Round 5: Aydin    holding [29, 31, 38, 42, 43] plays the 42 
Round 5: Emily    holding [11, 13, 37, 44, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 30 34 0 0 0 0 0 

30------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 23, 30, 34] plays the 30 
Round 5: Alex     holding [20, 36, 40, 41, 45] plays the 36 
Emily wins the round which contains 7 penalty points

Round 6: Emily    holding [11, 13, 37, 44] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 34 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 19, 23, 34] plays the 17 
Round 6: Alex     holding [20, 40, 41, 45] plays the 41 
Round 6: Aydin    holding [29, 31, 38, 43] plays the 31 
Alex wins the round which contains 4 penalty points

Round 7: Alex     holding [20, 40, 45] plays the 20 
Round 7: Aydin    holding [29, 38, 43] plays the 38 
Round 7: Emily    holding [11, 13, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 34 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 7: Eugenius holding [19, 23, 34] plays the 34 
Emily wins the round 

Round 8: Emily    holding [11, 13] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 0 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 8: Eugenius holding [19, 23] plays the 19 
Round 8: Alex     holding [40, 45] plays the 40 
Round 8: Aydin    holding [29, 43] plays the 29 
Aydin wins the round which contains 3 penalty points

Round 9: Aydin    holding [43] plays the 43 
Round 9: Emily    holding [13] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
23 0 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 9: Eugenius holding [23] plays the 23 
Round 9: Alex     holding [45] plays the 45 
Aydin wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Alex (system)
#3 with 7 penalty points Aydin (system)
#3 with 7 penalty points Emily (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1918105 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: David   : [17, 20, 26, 29, 33, 36, 38, 40, 41, 44]
Table position 1: Eugenius: [13, 18, 22, 24, 30, 31, 32, 35, 43, 46]
Table position 2: Alex    : [12, 14, 16, 23, 27, 28, 37, 39, 42, 45]
Table position 3: Kangying: [10, 11, 15, 19, 21, 25, 34, 47, 48, 49]

Discards:
David    [36, 38, 41]
Eugenius [35, 43, 46]
Alex     [12, 28, 39]
Kangying [21, 25, 47]

Round 0: David    holding [17, 20, 21, 25, 26, 29, 33, 40, 44, 47] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
13 18 22 24 30 31 32 36 38 41 

30------------------------------------------------------------------------

Round 0: Eugenius holding [13, 18, 22, 24, 30, 31, 32, 36, 38, 41] plays the 30 
Round 0: Alex     holding [14, 16, 23, 27, 35, 37, 42, 43, 45, 46] plays the 35 
Round 0: Kangying holding [10, 11, 12, 15, 19, 28, 34, 39, 48, 49] plays the 15 
Alex wins the round 

Round 1: Alex     holding [14, 16, 23, 27, 37, 42, 43, 45, 46] plays the 14 
Round 1: Kangying holding [10, 11, 12, 19, 28, 34, 39, 48, 49] plays the 10 
Round 1: David    holding [17, 20, 21, 26, 29, 33, 40, 44, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
13 18 22 24 31 32 36 38 41 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [13, 18, 22, 24, 31, 32, 36, 38, 41] plays the 18 
David wins the round 

Round 2: David    holding [17, 21, 26, 29, 33, 40, 44, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
13 22 24 31 32 36 38 41 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [13, 22, 24, 31, 32, 36, 38, 41] plays the 22 
Round 2: Alex     holding [16, 23, 27, 37, 42, 43, 45, 46] plays the 45 
Round 2: Kangying holding [11, 12, 19, 28, 34, 39, 48, 49] plays the 48 
Kangying wins the round 

Round 3: Kangying holding [11, 12, 19, 28, 34, 39, 49] plays the 28 
Round 3: David    holding [17, 21, 26, 29, 40, 44, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
13 24 31 32 36 38 41 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [13, 24, 31, 32, 36, 38, 41] plays the 24 
Round 3: Alex     holding [16, 23, 27, 37, 42, 43, 46] plays the 46 
Alex wins the round 

Round 4: Alex     holding [16, 23, 27, 37, 42, 43] plays the 27 
Round 4: Kangying holding [11, 12, 19, 34, 39, 49] plays the 12 
Round 4: David    holding [17, 21, 29, 40, 44, 47] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
13 31 32 36 38 41 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius holding [13, 31, 32, 36, 38, 41] plays the 36 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 31 32 38 41 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [13, 31, 32, 38, 41] plays the 32 
Round 5: Alex     holding [16, 23, 37, 42, 43] plays the 42 
Round 5: Kangying holding [11, 19, 34, 39, 49] plays the 34 
Round 5: David    holding [17, 29, 40, 44, 47] plays the 44 
David wins the round which contains 7 penalty points

Round 6: David    holding [17, 29, 40, 47] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
13 31 38 41 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 6: Eugenius holding [13, 31, 38, 41] plays the 38 
Round 6: Alex     holding [16, 23, 37, 43] plays the 16 
Round 6: Kangying holding [11, 19, 39, 49] plays the 11 
David wins the round which contains 1 penalty points

Round 7: David    holding [17, 29, 47] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
13 31 41 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 31, 41] plays the 13 
Round 7: Alex     holding [23, 37, 43] plays the 37 
Round 7: Kangying holding [19, 39, 49] plays the 19 
Alex wins the round which contains 4 penalty points

Round 8: Alex     holding [23, 43] plays the 23 
Round 8: Kangying holding [39, 49] plays the 39 
Round 8: David    holding [17, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
31 41 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 41] plays the 31 
David wins the round which contains 3 penalty points

Round 9: David    holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Round 9: Alex     holding [43] plays the 43 
Round 9: Kangying holding [49] plays the 49 
Alex wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Kangying (system)
#3 with 7 penalty points Alex (system)
#4 with 11 penalty points David (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10243835 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Sabrina : [11, 17, 19, 21, 31, 33, 39, 40, 43, 46]
Table position 1: Eugenius: [14, 24, 25, 26, 27, 29, 30, 32, 36, 42]
Table position 2: Kane    : [13, 15, 16, 20, 22, 23, 34, 38, 41, 48]
Table position 3: Nathan  : [10, 12, 18, 28, 35, 37, 44, 45, 47, 49]

Discards:
Sabrina  [17, 19, 33]
Eugenius [32, 36, 42]
Kane     [22, 34, 41]
Nathan   [10, 28, 44]

Round 0: Sabrina  holding [10, 11, 21, 28, 31, 39, 40, 43, 44, 46] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 19 24 25 26 27 29 30 33 

24------------------------------------------------------------------------

Round 0: Eugenius holding [14, 17, 19, 24, 25, 26, 27, 29, 30, 33] plays the 24 
Round 0: Kane     holding [13, 15, 16, 20, 23, 32, 36, 38, 42, 48] plays the 42 
Round 0: Nathan   holding [12, 18, 22, 34, 35, 37, 41, 45, 47, 49] plays the 18 
Kane wins the round which contains 7 penalty points

Round 1: Kane     holding [13, 15, 16, 20, 23, 32, 36, 38, 48] plays the 15 
Round 1: Nathan   holding [12, 22, 34, 35, 37, 41, 45, 47, 49] plays the 12 
Round 1: Sabrina  holding [10, 11, 21, 28, 31, 40, 43, 44, 46] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 19 25 26 27 29 30 33 0 

25------------------------------------------------------------------------

Round 1: Eugenius holding [14, 17, 19, 25, 26, 27, 29, 30, 33] plays the 25 
Sabrina wins the round 

Round 2: Sabrina  holding [10, 11, 21, 28, 31, 43, 44, 46] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 19 26 27 29 30 33 0 0 

14------------------------------------------------------------------------

Round 2: Eugenius holding [14, 17, 19, 26, 27, 29, 30, 33] plays the 14 
Round 2: Kane     holding [13, 16, 20, 23, 32, 36, 38, 48] plays the 48 
Round 2: Nathan   holding [22, 34, 35, 37, 41, 45, 47, 49] plays the 34 
Kane wins the round 

Round 3: Kane     holding [13, 16, 20, 23, 32, 36, 38] plays the 38 
Round 3: Nathan   holding [22, 35, 37, 41, 45, 47, 49] plays the 22 
Round 3: Sabrina  holding [10, 11, 21, 28, 31, 43, 46] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 26 27 29 30 33 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 26, 27, 29, 30, 33] plays the 26 
Kane wins the round 

Round 4: Kane     holding [13, 16, 20, 23, 32, 36] plays the 16 
Round 4: Nathan   holding [35, 37, 41, 45, 47, 49] plays the 45 
Round 4: Sabrina  holding [11, 21, 28, 31, 43, 46] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 27 29 30 33 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 27, 29, 30, 33] plays the 30 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
17 19 27 29 33 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 27, 29, 33] plays the 27 
Round 5: Kane     holding [13, 20, 23, 32, 36] plays the 36 
Round 5: Nathan   holding [35, 37, 41, 47, 49] plays the 47 
Round 5: Sabrina  holding [11, 21, 31, 43, 46] plays the 21 
Kane wins the round which contains 1 penalty points

Round 6: Kane     holding [13, 20, 23, 32] plays the 23 
Round 6: Nathan   holding [35, 37, 41, 49] plays the 37 
Round 6: Sabrina  holding [11, 31, 43, 46] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 33 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 19, 29, 33] plays the 17 
Nathan wins the round which contains 4 penalty points

Round 7: Nathan   holding [35, 41, 49] plays the 49 
Round 7: Sabrina  holding [11, 43, 46] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 33 0 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 7: Eugenius holding [19, 29, 33] plays the 19 
Round 7: Kane     holding [13, 20, 32] plays the 20 
Nathan wins the round which contains 2 penalty points

Round 8: Nathan   holding [35, 41] plays the 35 
Round 8: Sabrina  holding [43, 46] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
29 33 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 8: Eugenius holding [29, 33] plays the 29 
Round 8: Kane     holding [13, 32] plays the 13 
Nathan wins the round which contains 3 penalty points

Round 9: Nathan   holding [41] plays the 41 
Round 9: Sabrina  holding [46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
33 0 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 9: Eugenius holding [33] plays the 33 
Round 9: Kane     holding [32] plays the 32 
Nathan wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Sabrina (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 8 penalty points Kane (system)
#4 with 10 penalty points Nathan (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 4615463 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [14, 16, 18, 26, 28, 32, 34, 36, 40, 41]
Table position 1: Stephen : [13, 20, 24, 35, 37, 42, 44, 45, 46, 48]
Table position 2: Andrew  : [11, 12, 23, 25, 29, 30, 31, 33, 39, 47]
Table position 3: Aydin   : [10, 15, 17, 19, 21, 22, 27, 38, 43, 49]

Discards:
Eugenius [36, 40, 41]
Stephen  [35, 45, 46]
Andrew   [11, 25, 39]
Aydin    [19, 38, 49]


Debug output from Eugenius
------------------------------------------------------------------------
14 16 18 19 26 28 32 34 38 49 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 16, 18, 19, 26, 28, 32, 34, 38, 49] plays the 14 
Round 0: Stephen  holding [13, 20, 24, 36, 37, 40, 41, 42, 44, 48] plays the 48 
Round 0: Andrew   holding [12, 23, 29, 30, 31, 33, 35, 45, 46, 47] plays the 46 
Round 0: Aydin    holding [10, 11, 15, 17, 21, 22, 25, 27, 39, 43] plays the 22 
Stephen wins the round 

Round 1: Stephen  holding [13, 20, 24, 36, 37, 40, 41, 42, 44] plays the 24 
Round 1: Andrew   holding [12, 23, 29, 30, 31, 33, 35, 45, 47] plays the 45 
Round 1: Aydin    holding [10, 11, 15, 17, 21, 25, 27, 39, 43] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
16 18 19 26 28 32 34 38 49 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 18, 19, 26, 28, 32, 34, 38, 49] plays the 16 
Andrew wins the round 

Round 2: Andrew   holding [12, 23, 29, 30, 31, 33, 35, 47] plays the 35 
Round 2: Aydin    holding [10, 11, 15, 17, 21, 25, 27, 43] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
18 19 26 28 32 34 38 49 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [18, 19, 26, 28, 32, 34, 38, 49] plays the 28 
Round 2: Stephen  holding [13, 20, 36, 37, 40, 41, 42, 44] plays the 40 
Stephen wins the round 

Round 3: Stephen  holding [13, 20, 36, 37, 41, 42, 44] plays the 44 
Round 3: Andrew   holding [12, 23, 29, 30, 31, 33, 47] plays the 33 
Round 3: Aydin    holding [10, 11, 15, 17, 25, 27, 43] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
18 19 26 32 34 38 49 0 0 0 

18------------------------------------------------------------------------

Round 3: Eugenius holding [18, 19, 26, 32, 34, 38, 49] plays the 18 
Stephen wins the round 

Round 4: Stephen  holding [13, 20, 36, 37, 41, 42] plays the 20 
Round 4: Andrew   holding [12, 23, 29, 30, 31, 47] plays the 12 
Round 4: Aydin    holding [11, 15, 17, 25, 27, 43] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
19 26 32 34 38 49 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [19, 26, 32, 34, 38, 49] plays the 26 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
19 32 34 38 49 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [19, 32, 34, 38, 49] plays the 32 
Round 5: Stephen  holding [13, 36, 37, 41, 42] plays the 42 
Round 5: Andrew   holding [23, 29, 30, 31, 47] plays the 30 
Round 5: Aydin    holding [11, 15, 17, 27, 43] plays the 17 
Stephen wins the round which contains 8 penalty points

Round 6: Stephen  holding [13, 36, 37, 41] plays the 13 
Round 6: Andrew   holding [23, 29, 31, 47] plays the 29 
Round 6: Aydin    holding [11, 15, 27, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
19 34 38 49 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 34, 38, 49] plays the 19 
Aydin wins the round which contains 4 penalty points

Round 7: Aydin    holding [11, 15, 27] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
34 38 49 0 0 0 0 0 0 0 

34 chah------------------------------------------------------------------------

Round 7: Eugenius holding [34, 38, 49] plays the 34 
Round 7: Stephen  holding [36, 37, 41] plays the 36 
Round 7: Andrew   holding [23, 31, 47] plays the 47 
Stephen wins the round which contains 1 penalty points

Round 8: Stephen  holding [37, 41] plays the 41 
Round 8: Andrew   holding [23, 31] plays the 23 
Round 8: Aydin    holding [11, 27] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
38 49 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [38, 49] plays the 38 
Stephen wins the round which contains 3 penalty points

Round 9: Stephen  holding [37] plays the 37 
Round 9: Andrew   holding [31] plays the 31 
Round 9: Aydin    holding [27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 9: Eugenius holding [49] plays the 49 
Stephen wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Andrew (system)
#3 with 4 penalty points Aydin (system)
#4 with 14 penalty points Stephen (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5886352 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Marc    : [11, 12, 20, 27, 33, 37, 43, 45, 47, 48]
Table position 1: Eugenius: [10, 14, 22, 24, 25, 26, 30, 34, 40, 41]
Table position 2: Harrison: [15, 17, 18, 19, 28, 29, 31, 35, 38, 42]
Table position 3: Livia   : [13, 16, 21, 23, 32, 36, 39, 44, 46, 49]

Discards:
Marc     [11, 12, 45]
Eugenius [34, 40, 41]
Harrison [18, 29, 42]
Livia    [23, 44, 49]

Round 0: Marc     holding [20, 23, 27, 33, 37, 43, 44, 47, 48, 49] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 12 14 22 24 25 26 30 45 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 12, 14, 22, 24, 25, 26, 30, 45] plays the 10 
Round 0: Harrison holding [15, 17, 19, 28, 31, 34, 35, 38, 40, 41] plays the 35 
Round 0: Livia    holding [13, 16, 18, 21, 29, 32, 36, 39, 42, 46] plays the 16 
Harrison wins the round 

Round 1: Harrison holding [15, 17, 19, 28, 31, 34, 38, 40, 41] plays the 28 
Round 1: Livia    holding [13, 18, 21, 29, 32, 36, 39, 42, 46] plays the 36 
Round 1: Marc     holding [23, 27, 33, 37, 43, 44, 47, 48, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 14 22 24 25 26 30 45 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [11, 12, 14, 22, 24, 25, 26, 30, 45] plays the 12 
Marc wins the round 

Round 2: Marc     holding [23, 27, 33, 37, 43, 44, 47, 48] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 22 24 25 26 30 45 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [11, 14, 22, 24, 25, 26, 30, 45] plays the 24 
Round 2: Harrison holding [15, 17, 19, 31, 34, 38, 40, 41] plays the 15 
Round 2: Livia    holding [13, 18, 21, 29, 32, 39, 42, 46] plays the 18 
Marc wins the round 

Round 3: Marc     holding [23, 33, 37, 43, 44, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 22 25 26 30 45 0 0 0 

14------------------------------------------------------------------------

Round 3: Eugenius holding [11, 14, 22, 25, 26, 30, 45] plays the 14 
Round 3: Harrison holding [17, 19, 31, 34, 38, 40, 41] plays the 34 
Round 3: Livia    holding [13, 21, 29, 32, 39, 42, 46] plays the 46 
Marc wins the round 

Round 4: Marc     holding [23, 33, 37, 43, 44, 47] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
11 22 25 26 30 45 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius holding [11, 22, 25, 26, 30, 45] plays the 22 
Round 4: Harrison holding [17, 19, 31, 38, 40, 41] plays the 40 
Round 4: Livia    holding [13, 21, 29, 32, 39, 42] plays the 32 
Marc wins the round 

Round 5: Marc     holding [23, 33, 37, 43, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 25 26 30 45 0 0 0 0 0 

30------------------------------------------------------------------------

Round 5: Eugenius holding [11, 25, 26, 30, 45] plays the 30 
Round 5: Harrison holding [17, 19, 31, 38, 41] plays the 38 
Round 5: Livia    holding [13, 21, 29, 39, 42] plays the 21 
Marc wins the round 

Round 6: Marc     holding [23, 37, 43, 47] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
11 25 26 45 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 25, 26, 45] plays the 11 
Round 6: Harrison holding [17, 19, 31, 41] plays the 19 
Round 6: Livia    holding [13, 29, 39, 42] plays the 13 
Marc wins the round which contains 4 penalty points

Round 7: Marc     holding [37, 43, 47] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
25 26 45 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 7: Eugenius holding [25, 26, 45] plays the 25 
Round 7: Harrison holding [17, 31, 41] plays the 31 
Round 7: Livia    holding [29, 39, 42] plays the 29 
Marc wins the round which contains 3 penalty points

Round 8: Marc     holding [43, 47] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
26 45 0 0 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 8: Eugenius holding [26, 45] plays the 26 
Round 8: Harrison holding [17, 41] plays the 17 
Round 8: Livia    holding [39, 42] plays the 42 
Marc wins the round which contains 9 penalty points

Round 9: Marc     holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Round 9: Harrison holding [41] plays the 41 
Round 9: Livia    holding [39] plays the 39 
Marc wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Harrison (system)
#1 with 0 penalty points Livia (system)
#4 with 18 penalty points Marc (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 4167352 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 12, 14, 18, 23, 24, 25, 40, 42, 43]
Table position 1: Livia   : [10, 16, 19, 22, 28, 32, 33, 38, 39, 46]
Table position 2: Vincent : [13, 20, 26, 30, 34, 35, 36, 37, 45, 47]
Table position 3: Xue     : [15, 17, 21, 27, 29, 31, 41, 44, 48, 49]

Discards:
Eugenius [40, 42, 43]
Livia    [28, 33, 46]
Vincent  [30, 34, 37]
Xue      [29, 44, 49]


Debug output from Eugenius
------------------------------------------------------------------------
11 12 14 18 23 24 25 29 44 49 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 14, 18, 23, 24, 25, 29, 44, 49] plays the 12 
Round 0: Livia    holding [10, 16, 19, 22, 32, 38, 39, 40, 42, 43] plays the 39 
Round 0: Vincent  holding [13, 20, 26, 28, 33, 35, 36, 45, 46, 47] plays the 36 
Round 0: Xue      holding [15, 17, 21, 27, 30, 31, 34, 37, 41, 48] plays the 30 
Livia wins the round 

Round 1: Livia    holding [10, 16, 19, 22, 32, 38, 40, 42, 43] plays the 16 
Round 1: Vincent  holding [13, 20, 26, 28, 33, 35, 45, 46, 47] plays the 20 
Round 1: Xue      holding [15, 17, 21, 27, 31, 34, 37, 41, 48] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 18 23 24 25 29 44 49 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [11, 14, 18, 23, 24, 25, 29, 44, 49] plays the 14 
Xue wins the round 

Round 2: Xue      holding [15, 17, 21, 27, 31, 37, 41, 48] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 18 23 24 25 29 44 49 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [11, 18, 23, 24, 25, 29, 44, 49] plays the 18 
Round 2: Livia    holding [10, 19, 22, 32, 38, 40, 42, 43] plays the 40 
Round 2: Vincent  holding [13, 26, 28, 33, 35, 45, 46, 47] plays the 45 
Vincent wins the round 

Round 3: Vincent  holding [13, 26, 28, 33, 35, 46, 47] plays the 28 
Round 3: Xue      holding [17, 21, 27, 31, 37, 41, 48] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 24 25 29 44 49 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [11, 23, 24, 25, 29, 44, 49] plays the 24 
Round 3: Livia    holding [10, 19, 22, 32, 38, 42, 43] plays the 42 
Livia wins the round which contains 7 penalty points

Round 4: Livia    holding [10, 19, 22, 32, 38, 43] plays the 22 
Round 4: Vincent  holding [13, 26, 33, 35, 46, 47] plays the 26 
Round 4: Xue      holding [17, 27, 31, 37, 41, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 25 29 44 49 0 0 0 0 

44------------------------------------------------------------------------

Round 4: Eugenius holding [11, 23, 25, 29, 44, 49] plays the 44 
Xue wins the round 

Round 5: Xue      holding [17, 27, 31, 37, 41] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 25 29 49 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 23, 25, 29, 49] plays the 11 
Round 5: Livia    holding [10, 19, 32, 38, 43] plays the 10 
Round 5: Vincent  holding [13, 33, 35, 46, 47] plays the 33 
Vincent wins the round which contains 1 penalty points

Round 6: Vincent  holding [13, 35, 46, 47] plays the 13 
Round 6: Xue      holding [17, 31, 37, 41] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 29 49 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 25, 29, 49] plays the 23 
Round 6: Livia    holding [19, 32, 38, 43] plays the 19 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
25 29 49 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 7: Eugenius holding [25, 29, 49] plays the 25 
Round 7: Livia    holding [32, 38, 43] plays the 43 
Round 7: Vincent  holding [35, 46, 47] plays the 35 
Round 7: Xue      holding [31, 37, 41] plays the 31 
Vincent wins the round which contains 2 penalty points

Round 8: Vincent  holding [46, 47] plays the 46 
Round 8: Xue      holding [37, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
29 49 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 8: Eugenius holding [29, 49] plays the 29 
Round 8: Livia    holding [32, 38] plays the 38 
Vincent wins the round which contains 2 penalty points

Round 9: Vincent  holding [47] plays the 47 
Round 9: Xue      holding [37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 9: Eugenius holding [49] plays the 49 
Round 9: Livia    holding [32] plays the 32 
Vincent wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Xue (system)
#2 with 4 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Livia (system)
#3 with 7 penalty points Vincent (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12765768 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Dylan   : [11, 12, 13, 15, 22, 25, 31, 36, 43, 47]
Table position 1: Kangying: [17, 20, 21, 26, 28, 29, 33, 37, 42, 49]
Table position 2: Braedon : [10, 14, 16, 18, 19, 30, 38, 39, 41, 48]
Table position 3: Eugenius: [23, 24, 27, 32, 34, 35, 40, 44, 45, 46]

Discards:
Dylan    [12, 36, 47]
Kangying [28, 37, 42]
Braedon  [19, 38, 48]
Eugenius [44, 45, 46]

Round 0: Dylan    holding [11, 13, 15, 22, 25, 31, 43, 44, 45, 46] plays the 15 
Round 0: Kangying holding [12, 17, 20, 21, 26, 29, 33, 36, 47, 49] plays the 36 
Round 0: Braedon  holding [10, 14, 16, 18, 28, 30, 37, 39, 41, 42] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 24 27 32 34 35 38 40 48 

24------------------------------------------------------------------------

Round 0: Eugenius holding [19, 23, 24, 27, 32, 34, 35, 38, 40, 48] plays the 24 
Kangying wins the round 

Round 1: Kangying holding [12, 17, 20, 21, 26, 29, 33, 47, 49] plays the 21 
Round 1: Braedon  holding [10, 14, 16, 18, 28, 37, 39, 41, 42] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 27 32 34 35 38 40 48 0 

27------------------------------------------------------------------------

Round 1: Eugenius holding [19, 23, 27, 32, 34, 35, 38, 40, 48] plays the 27 
Round 1: Dylan    holding [11, 13, 22, 25, 31, 43, 44, 45, 46] plays the 45 
Dylan wins the round 

Round 2: Dylan    holding [11, 13, 22, 25, 31, 43, 44, 46] plays the 46 
Round 2: Kangying holding [12, 17, 20, 26, 29, 33, 47, 49] plays the 20 
Round 2: Braedon  holding [10, 16, 18, 28, 37, 39, 41, 42] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 32 34 35 38 40 48 0 0 

32------------------------------------------------------------------------

Round 2: Eugenius holding [19, 23, 32, 34, 35, 38, 40, 48] plays the 32 
Dylan wins the round 

Round 3: Dylan    holding [11, 13, 22, 25, 31, 43, 44] plays the 44 
Round 3: Kangying holding [12, 17, 26, 29, 33, 47, 49] plays the 33 
Round 3: Braedon  holding [16, 18, 28, 37, 39, 41, 42] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 34 35 38 40 48 0 0 0 

34------------------------------------------------------------------------

Round 3: Eugenius holding [19, 23, 34, 35, 38, 40, 48] plays the 34 
Dylan wins the round 

Round 4: Dylan    holding [11, 13, 22, 25, 31, 43] plays the 25 
Round 4: Kangying holding [12, 17, 26, 29, 47, 49] plays the 17 
Round 4: Braedon  holding [16, 18, 37, 39, 41, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 35 38 40 48 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [19, 23, 35, 38, 40, 48] plays the 35 
Eugenius wins the round which contains 8 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
19 23 38 40 48 0 0 0 0 0 

19------------------------------------------------------------------------

Round 5: Eugenius holding [19, 23, 38, 40, 48] plays the 19 
Round 5: Dylan    holding [11, 13, 22, 31, 43] plays the 43 
Round 5: Kangying holding [12, 26, 29, 47, 49] plays the 29 
Round 5: Braedon  holding [16, 18, 37, 39, 41] plays the 37 
Dylan wins the round which contains 4 penalty points

Round 6: Dylan    holding [11, 13, 22, 31] plays the 13 
Round 6: Kangying holding [12, 26, 47, 49] plays the 47 
Round 6: Braedon  holding [16, 18, 39, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
23 38 40 48 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 38, 40, 48] plays the 23 
Kangying wins the round which contains 4 penalty points

Round 7: Kangying holding [12, 26, 49] plays the 49 
Round 7: Braedon  holding [16, 18, 39] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
38 40 48 0 0 0 0 0 0 0 

38 chah------------------------------------------------------------------------

Round 7: Eugenius holding [38, 40, 48] plays the 38 
Round 7: Dylan    holding [11, 22, 31] plays the 22 
Kangying wins the round 

Round 8: Kangying holding [12, 26] plays the 12 
Round 8: Braedon  holding [18, 39] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
40 48 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 8: Eugenius holding [40, 48] plays the 40 
Round 8: Dylan    holding [11, 31] plays the 31 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
48 0 0 0 0 0 0 0 0 0 

48------------------------------------------------------------------------

Round 9: Eugenius holding [48] plays the 48 
Round 9: Dylan    holding [11] plays the 11 
Round 9: Kangying holding [26] plays the 26 
Round 9: Braedon  holding [39] plays the 39 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Braedon (system)
#2 with 4 penalty points Dylan (system)
#2 with 4 penalty points Kangying (system)
#4 with 10 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14528609 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [14, 15, 17, 24, 28, 29, 30, 37, 41, 45]
Table position 1: Heather : [19, 20, 21, 22, 25, 34, 35, 44, 48, 49]
Table position 2: Trung   : [12, 13, 23, 26, 31, 33, 36, 39, 40, 43]
Table position 3: Oscar   : [10, 11, 16, 18, 27, 32, 38, 42, 46, 47]

Discards:
Eugenius [37, 41, 45]
Heather  [34, 35, 49]
Trung    [23, 26, 40]
Oscar    [32, 38, 46]


Debug output from Eugenius
------------------------------------------------------------------------
14 15 17 24 28 29 30 32 38 46 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 15, 17, 24, 28, 29, 30, 32, 38, 46] plays the 14 
Round 0: Heather  holding [19, 20, 21, 22, 25, 37, 41, 44, 45, 48] plays the 44 
Round 0: Trung    holding [12, 13, 31, 33, 34, 35, 36, 39, 43, 49] plays the 36 
Round 0: Oscar    holding [10, 11, 16, 18, 23, 26, 27, 40, 42, 47] plays the 42 
Heather wins the round which contains 7 penalty points

Round 1: Heather  holding [19, 20, 21, 22, 25, 37, 41, 45, 48] plays the 48 
Round 1: Trung    holding [12, 13, 31, 33, 34, 35, 39, 43, 49] plays the 39 
Round 1: Oscar    holding [10, 11, 16, 18, 23, 26, 27, 40, 47] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
15 17 24 28 29 30 32 38 46 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [15, 17, 24, 28, 29, 30, 32, 38, 46] plays the 15 
Heather wins the round 

Round 2: Heather  holding [19, 20, 21, 22, 25, 37, 41, 45] plays the 25 
Round 2: Trung    holding [12, 13, 31, 33, 34, 35, 43, 49] plays the 35 
Round 2: Oscar    holding [10, 11, 16, 18, 23, 26, 27, 47] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
17 24 28 29 30 32 38 46 0 0 

30------------------------------------------------------------------------

Round 2: Eugenius holding [17, 24, 28, 29, 30, 32, 38, 46] plays the 30 
Trung wins the round 

Round 3: Trung    holding [12, 13, 31, 33, 34, 43, 49] plays the 49 
Round 3: Oscar    holding [11, 16, 18, 23, 26, 27, 47] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
17 24 28 29 32 38 46 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [17, 24, 28, 29, 32, 38, 46] plays the 28 
Round 3: Heather  holding [19, 20, 21, 22, 37, 41, 45] plays the 21 
Trung wins the round 

Round 4: Trung    holding [12, 13, 31, 33, 34, 43] plays the 34 
Round 4: Oscar    holding [11, 16, 23, 26, 27, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
17 24 29 32 38 46 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius holding [17, 24, 29, 32, 38, 46] plays the 24 
Round 4: Heather  holding [19, 20, 22, 37, 41, 45] plays the 22 
Trung wins the round 

Round 5: Trung    holding [12, 13, 31, 33, 43] plays the 33 
Round 5: Oscar    holding [11, 16, 23, 27, 47] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 32 38 46 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 5: Eugenius holding [17, 29, 32, 38, 46] plays the 17 
Round 5: Heather  holding [19, 20, 37, 41, 45] plays the 45 
Heather wins the round which contains 1 penalty points

Round 6: Heather  holding [19, 20, 37, 41] plays the 20 
Round 6: Trung    holding [12, 13, 31, 43] plays the 12 
Round 6: Oscar    holding [11, 16, 23, 47] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
29 32 38 46 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 6: Eugenius holding [29, 32, 38, 46] plays the 32 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
29 38 46 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 38, 46] plays the 29 
Round 7: Heather  holding [19, 37, 41] plays the 37 
Round 7: Trung    holding [13, 31, 43] plays the 43 
Round 7: Oscar    holding [11, 23, 47] plays the 23 
Trung wins the round which contains 4 penalty points

Round 8: Trung    holding [13, 31] plays the 13 
Round 8: Oscar    holding [11, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
38 46 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [38, 46] plays the 38 
Round 8: Heather  holding [19, 41] plays the 41 
Oscar wins the round which contains 3 penalty points

Round 9: Oscar    holding [11] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
46 0 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 9: Eugenius holding [46] plays the 46 
Round 9: Heather  holding [19] plays the 19 
Round 9: Trung    holding [31] plays the 31 
Trung wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 3 penalty points Oscar (system)
#3 with 7 penalty points Trung (system)
#4 with 8 penalty points Heather (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6489390 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Harrison: [11, 15, 16, 21, 22, 28, 39, 40, 43, 44]
Table position 1: Eugenius: [10, 30, 31, 37, 38, 41, 45, 46, 48, 49]
Table position 2: Finbar  : [12, 14, 17, 18, 20, 23, 26, 29, 32, 34]
Table position 3: Connor  : [13, 19, 24, 25, 27, 33, 35, 36, 42, 47]

Discards:
Harrison [21, 43, 44]
Eugenius [46, 48, 49]
Finbar   [14, 18, 34]
Connor   [25, 35, 47]

Round 0: Harrison holding [11, 15, 16, 22, 25, 28, 35, 39, 40, 47] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
10 21 30 31 37 38 41 43 44 45 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 21, 30, 31, 37, 38, 41, 43, 44, 45] plays the 10 
Round 0: Finbar   holding [12, 17, 20, 23, 26, 29, 32, 46, 48, 49] plays the 20 
Round 0: Connor   holding [13, 14, 18, 19, 24, 27, 33, 34, 36, 42] plays the 13 
Harrison wins the round which contains 1 penalty points

Round 1: Harrison holding [11, 15, 16, 22, 28, 35, 39, 40, 47] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
21 30 31 37 38 41 43 44 45 0 

21------------------------------------------------------------------------

Round 1: Eugenius holding [21, 30, 31, 37, 38, 41, 43, 44, 45] plays the 21 
Round 1: Finbar   holding [12, 17, 23, 26, 29, 32, 46, 48, 49] plays the 12 
Round 1: Connor   holding [14, 18, 19, 24, 27, 33, 34, 36, 42] plays the 42 
Connor wins the round which contains 7 penalty points

Round 2: Connor   holding [14, 18, 19, 24, 27, 33, 34, 36] plays the 24 
Round 2: Harrison holding [11, 16, 22, 28, 35, 39, 40, 47] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
30 31 37 38 41 43 44 45 0 0 

30------------------------------------------------------------------------

Round 2: Eugenius holding [30, 31, 37, 38, 41, 43, 44, 45] plays the 30 
Round 2: Finbar   holding [17, 23, 26, 29, 32, 46, 48, 49] plays the 48 
Finbar wins the round 

Round 3: Finbar   holding [17, 23, 26, 29, 32, 46, 49] plays the 26 
Round 3: Connor   holding [14, 18, 19, 27, 33, 34, 36] plays the 36 
Round 3: Harrison holding [11, 16, 28, 35, 39, 40, 47] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 38 41 43 44 45 0 0 0 

38------------------------------------------------------------------------

Round 3: Eugenius holding [31, 37, 38, 41, 43, 44, 45] plays the 38 
Harrison wins the round 

Round 4: Harrison holding [11, 16, 28, 35, 40, 47] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 41 43 44 45 0 0 0 0 

31------------------------------------------------------------------------

Round 4: Eugenius holding [31, 37, 41, 43, 44, 45] plays the 31 
Round 4: Finbar   holding [17, 23, 29, 32, 46, 49] plays the 23 
Round 4: Connor   holding [14, 18, 19, 27, 33, 34] plays the 19 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
37 41 43 44 45 0 0 0 0 0 

37------------------------------------------------------------------------

Round 5: Eugenius holding [37, 41, 43, 44, 45] plays the 37 
Round 5: Finbar   holding [17, 29, 32, 46, 49] plays the 17 
Round 5: Connor   holding [14, 18, 27, 33, 34] plays the 34 
Round 5: Harrison holding [16, 28, 35, 40, 47] plays the 47 
Harrison wins the round which contains 3 penalty points

Round 6: Harrison holding [16, 28, 35, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
41 43 44 45 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 6: Eugenius holding [41, 43, 44, 45] plays the 44 
Round 6: Finbar   holding [29, 32, 46, 49] plays the 32 
Round 6: Connor   holding [14, 18, 27, 33] plays the 18 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
41 43 45 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 7: Eugenius holding [41, 43, 45] plays the 41 
Round 7: Finbar   holding [29, 46, 49] plays the 29 
Round 7: Connor   holding [14, 27, 33] plays the 14 
Round 7: Harrison holding [16, 28, 35] plays the 28 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
43 45 0 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 8: Eugenius holding [43, 45] plays the 43 
Round 8: Finbar   holding [46, 49] plays the 49 
Round 8: Connor   holding [27, 33] plays the 27 
Round 8: Harrison holding [16, 35] plays the 16 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Round 9: Finbar   holding [46] plays the 46 
Round 9: Connor   holding [33] plays the 33 
Round 9: Harrison holding [35] plays the 35 
Eugenius wins the round 


Finishing Positions

#1 with 0 penalty points Finbar (system)
#2 with 4 penalty points Harrison (system)
#3 with 7 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Connor (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16046923 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Elizabeth: [12, 13, 31, 32, 37, 38, 39, 40, 46, 49]
Table position 1: Vincent  : [10, 11, 19, 20, 25, 28, 30, 34, 41, 44]
Table position 2: Eugenius : [16, 18, 21, 22, 23, 27, 42, 43, 47, 48]
Table position 3: Zachary  : [14, 15, 17, 24, 26, 29, 33, 35, 36, 45]

Discards:
Elizabeth [12, 40, 49]
Vincent   [19, 20, 41]
Eugenius  [43, 47, 48]
Zachary   [29, 33, 35]

Round 0: Elizabeth holding [13, 29, 31, 32, 33, 35, 37, 38, 39, 46] plays the 38 
Round 0: Vincent   holding [10, 11, 12, 25, 28, 30, 34, 40, 44, 49] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
16 18 19 20 21 22 23 27 41 42 

16------------------------------------------------------------------------

Round 0: Eugenius  holding [16, 18, 19, 20, 21, 22, 23, 27, 41, 42] plays the 16 
Round 0: Zachary   holding [14, 15, 17, 24, 26, 36, 43, 45, 47, 48] plays the 14 
Elizabeth wins the round 

Round 1: Elizabeth holding [13, 29, 31, 32, 33, 35, 37, 39, 46] plays the 32 
Round 1: Vincent   holding [10, 11, 25, 28, 30, 34, 40, 44, 49] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
18 19 20 21 22 23 27 41 42 0 

18------------------------------------------------------------------------

Round 1: Eugenius  holding [18, 19, 20, 21, 22, 23, 27, 41, 42] plays the 18 
Round 1: Zachary   holding [15, 17, 24, 26, 36, 43, 45, 47, 48] plays the 48 
Zachary wins the round 

Round 2: Zachary   holding [15, 17, 24, 26, 36, 43, 45, 47] plays the 26 
Round 2: Elizabeth holding [13, 29, 31, 33, 35, 37, 39, 46] plays the 39 
Round 2: Vincent   holding [10, 11, 25, 28, 30, 34, 40, 49] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
19 20 21 22 23 27 41 42 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius  holding [19, 20, 21, 22, 23, 27, 41, 42] plays the 20 
Vincent wins the round 

Round 3: Vincent   holding [10, 11, 25, 28, 30, 34, 49] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
19 21 22 23 27 41 42 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius  holding [19, 21, 22, 23, 27, 41, 42] plays the 21 
Round 3: Zachary   holding [15, 17, 24, 36, 43, 45, 47] plays the 36 
Round 3: Elizabeth holding [13, 29, 31, 33, 35, 37, 46] plays the 46 
Elizabeth wins the round 

Round 4: Elizabeth holding [13, 29, 31, 33, 35, 37] plays the 35 
Round 4: Vincent   holding [10, 11, 25, 28, 34, 49] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 23 27 41 42 0 0 0 0 

42------------------------------------------------------------------------

Round 4: Eugenius  holding [19, 22, 23, 27, 41, 42] plays the 42 
Round 4: Zachary   holding [15, 17, 24, 43, 45, 47] plays the 45 
Zachary wins the round which contains 7 penalty points

Round 5: Zachary   holding [15, 17, 24, 43, 47] plays the 15 
Round 5: Elizabeth holding [13, 29, 31, 33, 37] plays the 33 
Round 5: Vincent   holding [10, 11, 28, 34, 49] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 23 27 41 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius  holding [19, 22, 23, 27, 41] plays the 27 
Elizabeth wins the round 

Round 6: Elizabeth holding [13, 29, 31, 37] plays the 37 
Round 6: Vincent   holding [11, 28, 34, 49] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 23 41 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius  holding [19, 22, 23, 41] plays the 19 
Round 6: Zachary   holding [17, 24, 43, 47] plays the 47 
Zachary wins the round which contains 4 penalty points

Round 7: Zachary   holding [17, 24, 43] plays the 17 
Round 7: Elizabeth holding [13, 29, 31] plays the 31 
Round 7: Vincent   holding [28, 34, 49] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
22 23 41 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius  holding [22, 23, 41] plays the 23 
Elizabeth wins the round which contains 3 penalty points

Round 8: Elizabeth holding [13, 29] plays the 29 
Round 8: Vincent   holding [34, 49] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
22 41 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 8: Eugenius  holding [22, 41] plays the 41 
Round 8: Zachary   holding [24, 43] plays the 43 
Zachary wins the round which contains 3 penalty points

Round 9: Zachary   holding [24] plays the 24 
Round 9: Elizabeth holding [13] plays the 13 
Round 9: Vincent   holding [49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
22 0 0 0 0 0 0 0 0 0 

22------------------------------------------------------------------------

Round 9: Eugenius  holding [22] plays the 22 
Zachary wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Vincent (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 3 penalty points Elizabeth (system)
#4 with 15 penalty points Zachary (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5814348 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Alex    : [13, 21, 24, 28, 38, 40, 45, 46, 47, 48]
Table position 1: Eugenius: [10, 14, 15, 20, 23, 32, 33, 36, 37, 41]
Table position 2: Aydin   : [11, 12, 17, 19, 22, 27, 29, 42, 43, 44]
Table position 3: Peter   : [16, 18, 25, 26, 30, 31, 34, 35, 39, 49]

Discards:
Alex     [13, 46, 47]
Eugenius [36, 37, 41]
Aydin    [12, 17, 29]
Peter    [30, 31, 39]

Round 0: Alex     holding [21, 24, 28, 30, 31, 38, 39, 40, 45, 48] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
10 13 14 15 20 23 32 33 46 47 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 13, 14, 15, 20, 23, 32, 33, 46, 47] plays the 10 
Round 0: Aydin    holding [11, 19, 22, 27, 36, 37, 41, 42, 43, 44] plays the 36 
Round 0: Peter    holding [12, 16, 17, 18, 25, 26, 29, 34, 35, 49] plays the 34 
Aydin wins the round 

Round 1: Aydin    holding [11, 19, 22, 27, 37, 41, 42, 43, 44] plays the 42 
Round 1: Peter    holding [12, 16, 17, 18, 25, 26, 29, 35, 49] plays the 12 
Round 1: Alex     holding [21, 28, 30, 31, 38, 39, 40, 45, 48] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
13 14 15 20 23 32 33 46 47 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [13, 14, 15, 20, 23, 32, 33, 46, 47] plays the 14 
Aydin wins the round which contains 7 penalty points

Round 2: Aydin    holding [11, 19, 22, 27, 37, 41, 43, 44] plays the 22 
Round 2: Peter    holding [16, 17, 18, 25, 26, 29, 35, 49] plays the 18 
Round 2: Alex     holding [28, 30, 31, 38, 39, 40, 45, 48] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 20 23 32 33 46 47 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [13, 15, 20, 23, 32, 33, 46, 47] plays the 20 
Alex wins the round 

Round 3: Alex     holding [28, 30, 31, 39, 40, 45, 48] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 23 32 33 46 47 0 0 0 

32------------------------------------------------------------------------

Round 3: Eugenius holding [13, 15, 23, 32, 33, 46, 47] plays the 32 
Round 3: Aydin    holding [11, 19, 27, 37, 41, 43, 44] plays the 44 
Round 3: Peter    holding [16, 17, 25, 26, 29, 35, 49] plays the 49 
Peter wins the round 

Round 4: Peter    holding [16, 17, 25, 26, 29, 35] plays the 16 
Round 4: Alex     holding [30, 31, 39, 40, 45, 48] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 23 33 46 47 0 0 0 0 

46------------------------------------------------------------------------

Round 4: Eugenius holding [13, 15, 23, 33, 46, 47] plays the 46 
Round 4: Aydin    holding [11, 19, 27, 37, 41, 43] plays the 41 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 15 23 33 47 0 0 0 0 0 

13------------------------------------------------------------------------

Round 5: Eugenius holding [13, 15, 23, 33, 47] plays the 13 
Round 5: Aydin    holding [11, 19, 27, 37, 43] plays the 43 
Round 5: Peter    holding [17, 25, 26, 29, 35] plays the 17 
Round 5: Alex     holding [31, 39, 40, 45, 48] plays the 31 
Aydin wins the round which contains 4 penalty points

Round 6: Aydin    holding [11, 19, 27, 37] plays the 27 
Round 6: Peter    holding [25, 26, 29, 35] plays the 26 
Round 6: Alex     holding [39, 40, 45, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
15 23 33 47 0 0 0 0 0 0 

15------------------------------------------------------------------------

Round 6: Eugenius holding [15, 23, 33, 47] plays the 15 
Alex wins the round 

Round 7: Alex     holding [39, 40, 45] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
23 33 47 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 7: Eugenius holding [23, 33, 47] plays the 23 
Round 7: Aydin    holding [11, 19, 37] plays the 19 
Round 7: Peter    holding [25, 29, 35] plays the 25 
Alex wins the round which contains 2 penalty points

Round 8: Alex     holding [39, 45] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
33 47 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 8: Eugenius holding [33, 47] plays the 33 
Round 8: Aydin    holding [11, 37] plays the 11 
Round 8: Peter    holding [29, 35] plays the 35 
Alex wins the round which contains 1 penalty points

Round 9: Alex     holding [45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
47 0 0 0 0 0 0 0 0 0 

47 chah------------------------------------------------------------------------

Round 9: Eugenius holding [47] plays the 47 
Round 9: Aydin    holding [37] plays the 37 
Round 9: Peter    holding [29] plays the 29 
Alex wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Peter (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Alex (system)
#4 with 11 penalty points Aydin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9465258 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Sabrina : [10, 11, 12, 13, 14, 21, 22, 33, 46, 47]
Table position 1: Dylan   : [15, 17, 23, 28, 29, 30, 35, 39, 41, 43]
Table position 2: Eugenius: [19, 20, 24, 27, 34, 36, 37, 38, 42, 48]
Table position 3: Braedon : [16, 18, 25, 26, 31, 32, 40, 44, 45, 49]

Discards:
Sabrina  [11, 12, 33]
Dylan    [29, 30, 41]
Eugenius [38, 42, 48]
Braedon  [25, 40, 44]

Round 0: Sabrina  holding [10, 13, 14, 21, 22, 25, 40, 44, 46, 47] plays the 40 
Round 0: Dylan    holding [11, 12, 15, 17, 23, 28, 33, 35, 39, 43] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
19 20 24 27 29 30 34 36 37 41 

20------------------------------------------------------------------------

Round 0: Eugenius holding [19, 20, 24, 27, 29, 30, 34, 36, 37, 41] plays the 20 
Round 0: Braedon  holding [16, 18, 26, 31, 32, 38, 42, 45, 48, 49] plays the 26 
Sabrina wins the round 

Round 1: Sabrina  holding [10, 13, 14, 21, 22, 25, 44, 46, 47] plays the 46 
Round 1: Dylan    holding [11, 12, 15, 17, 23, 28, 33, 39, 43] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
19 24 27 29 30 34 36 37 41 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [19, 24, 27, 29, 30, 34, 36, 37, 41] plays the 24 
Round 1: Braedon  holding [16, 18, 31, 32, 38, 42, 45, 48, 49] plays the 48 
Braedon wins the round 

Round 2: Braedon  holding [16, 18, 31, 32, 38, 42, 45, 49] plays the 45 
Round 2: Sabrina  holding [10, 13, 14, 21, 22, 25, 44, 47] plays the 25 
Round 2: Dylan    holding [11, 12, 15, 17, 23, 33, 39, 43] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
19 27 29 30 34 36 37 41 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [19, 27, 29, 30, 34, 36, 37, 41] plays the 27 
Braedon wins the round 

Round 3: Braedon  holding [16, 18, 31, 32, 38, 42, 49] plays the 16 
Round 3: Sabrina  holding [10, 13, 14, 21, 22, 44, 47] plays the 44 
Round 3: Dylan    holding [11, 12, 15, 17, 23, 33, 43] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 30 34 36 37 41 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [19, 29, 30, 34, 36, 37, 41] plays the 30 
Sabrina wins the round 

Round 4: Sabrina  holding [10, 13, 14, 21, 22, 47] plays the 21 
Round 4: Dylan    holding [11, 15, 17, 23, 33, 43] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 34 36 37 41 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius holding [19, 29, 34, 36, 37, 41] plays the 36 
Round 4: Braedon  holding [18, 31, 32, 38, 42, 49] plays the 49 
Braedon wins the round 

Round 5: Braedon  holding [18, 31, 32, 38, 42] plays the 18 
Round 5: Sabrina  holding [10, 13, 14, 22, 47] plays the 10 
Round 5: Dylan    holding [11, 15, 17, 23, 43] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 34 37 41 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [19, 29, 34, 37, 41] plays the 34 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
19 29 37 41 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 29, 37, 41] plays the 19 
Round 6: Braedon  holding [31, 32, 38, 42] plays the 31 
Round 6: Sabrina  holding [13, 14, 22, 47] plays the 47 
Round 6: Dylan    holding [11, 17, 23, 43] plays the 23 
Sabrina wins the round which contains 4 penalty points

Round 7: Sabrina  holding [13, 14, 22] plays the 22 
Round 7: Dylan    holding [11, 17, 43] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
29 37 41 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 7: Eugenius holding [29, 37, 41] plays the 29 
Round 7: Braedon  holding [32, 38, 42] plays the 42 
Braedon wins the round which contains 9 penalty points

Round 8: Braedon  holding [32, 38] plays the 32 
Round 8: Sabrina  holding [13, 14] plays the 14 
Round 8: Dylan    holding [11, 43] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
37 41 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 8: Eugenius holding [37, 41] plays the 37 
Braedon wins the round which contains 2 penalty points

Round 9: Braedon  holding [38] plays the 38 
Round 9: Sabrina  holding [13] plays the 13 
Round 9: Dylan    holding [43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41 chah------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Braedon wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Dylan (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Sabrina (system)
#4 with 14 penalty points Braedon (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7525615 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Xue     : [15, 20, 26, 27, 33, 40, 43, 46, 48, 49]
Table position 1: Heather : [12, 13, 18, 21, 23, 34, 35, 36, 37, 41]
Table position 2: Eleni   : [11, 14, 19, 22, 24, 28, 31, 32, 42, 47]
Table position 3: Eugenius: [10, 16, 17, 25, 29, 30, 38, 39, 44, 45]

Discards:
Xue      [26, 33, 43]
Heather  [13, 18, 21]
Eleni    [24, 42, 47]
Eugenius [39, 44, 45]

Round 0: Xue      holding [15, 20, 27, 39, 40, 44, 45, 46, 48, 49] plays the 39 
Round 0: Heather  holding [12, 23, 26, 33, 34, 35, 36, 37, 41, 43] plays the 26 
Round 0: Eleni    holding [11, 13, 14, 18, 19, 21, 22, 28, 31, 32] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
10 16 17 24 25 29 30 38 42 47 

24------------------------------------------------------------------------

Round 0: Eugenius holding [10, 16, 17, 24, 25, 29, 30, 38, 42, 47] plays the 24 
Xue wins the round 

Round 1: Xue      holding [15, 20, 27, 40, 44, 45, 46, 48, 49] plays the 46 
Round 1: Heather  holding [12, 23, 33, 34, 35, 36, 37, 41, 43] plays the 34 
Round 1: Eleni    holding [11, 13, 14, 18, 19, 22, 28, 31, 32] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
10 16 17 25 29 30 38 42 47 0 

10------------------------------------------------------------------------

Round 1: Eugenius holding [10, 16, 17, 25, 29, 30, 38, 42, 47] plays the 10 
Xue wins the round 

Round 2: Xue      holding [15, 20, 27, 40, 44, 45, 48, 49] plays the 40 
Round 2: Heather  holding [12, 23, 33, 35, 36, 37, 41, 43] plays the 12 
Round 2: Eleni    holding [11, 13, 14, 18, 19, 28, 31, 32] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 25 29 30 38 42 47 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [16, 17, 25, 29, 30, 38, 42, 47] plays the 16 
Xue wins the round 

Round 3: Xue      holding [15, 20, 27, 44, 45, 48, 49] plays the 49 
Round 3: Heather  holding [23, 33, 35, 36, 37, 41, 43] plays the 35 
Round 3: Eleni    holding [11, 13, 14, 19, 28, 31, 32] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 29 30 38 42 47 0 0 0 

42------------------------------------------------------------------------

Round 3: Eugenius holding [17, 25, 29, 30, 38, 42, 47] plays the 42 
Xue wins the round which contains 7 penalty points

Round 4: Xue      holding [15, 20, 27, 44, 45, 48] plays the 48 
Round 4: Heather  holding [23, 33, 36, 37, 41, 43] plays the 33 
Round 4: Eleni    holding [11, 13, 19, 28, 31, 32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 29 30 38 47 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [17, 25, 29, 30, 38, 47] plays the 30 
Xue wins the round 

Round 5: Xue      holding [15, 20, 27, 44, 45] plays the 20 
Round 5: Heather  holding [23, 36, 37, 41, 43] plays the 36 
Round 5: Eleni    holding [11, 13, 19, 28, 31] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 29 38 47 0 0 0 0 0 

25------------------------------------------------------------------------

Round 5: Eugenius holding [17, 25, 29, 38, 47] plays the 25 
Heather wins the round 

Round 6: Heather  holding [23, 37, 41, 43] plays the 23 
Round 6: Eleni    holding [11, 13, 19, 31] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 38 47 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 29, 38, 47] plays the 17 
Round 6: Xue      holding [15, 27, 44, 45] plays the 45 
Heather wins the round which contains 3 penalty points

Round 7: Heather  holding [37, 41, 43] plays the 41 
Round 7: Eleni    holding [11, 13, 31] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
29 38 47 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 38, 47] plays the 29 
Round 7: Xue      holding [15, 27, 44] plays the 44 
Heather wins the round which contains 3 penalty points

Round 8: Heather  holding [37, 43] plays the 43 
Round 8: Eleni    holding [11, 31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
38 47 0 0 0 0 0 0 0 0 

47------------------------------------------------------------------------

Round 8: Eugenius holding [38, 47] plays the 47 
Round 8: Xue      holding [15, 27] plays the 15 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Round 9: Xue      holding [27] plays the 27 
Round 9: Heather  holding [37] plays the 37 
Round 9: Eleni    holding [11] plays the 11 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eleni (system)
#2 with 5 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Heather (system)
#4 with 7 penalty points Xue (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13348077 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: David    : [21, 22, 29, 30, 36, 38, 39, 43, 48, 49]
Table position 1: Emily    : [16, 17, 25, 31, 32, 33, 34, 40, 41, 44]
Table position 2: Elizabeth: [11, 14, 18, 19, 20, 28, 37, 42, 45, 47]
Table position 3: Eugenius : [10, 12, 13, 15, 23, 24, 26, 27, 35, 46]

Discards:
David     [22, 29, 38]
Emily     [16, 31, 34]
Elizabeth [18, 19, 28]
Eugenius  [27, 35, 46]

Round 0: David     holding [21, 27, 30, 35, 36, 39, 43, 46, 48, 49] plays the 36 
Round 0: Emily     holding [17, 22, 25, 29, 32, 33, 38, 40, 41, 44] plays the 22 
Round 0: Elizabeth holding [11, 14, 16, 20, 31, 34, 37, 42, 45, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 13 15 18 19 23 24 26 28 

10------------------------------------------------------------------------

Round 0: Eugenius  holding [10, 12, 13, 15, 18, 19, 23, 24, 26, 28] plays the 10 
Elizabeth wins the round which contains 7 penalty points

Round 1: Elizabeth holding [11, 14, 16, 20, 31, 34, 37, 45, 47] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 15 18 19 23 24 26 28 0 

12------------------------------------------------------------------------

Round 1: Eugenius  holding [12, 13, 15, 18, 19, 23, 24, 26, 28] plays the 12 
Round 1: David     holding [21, 27, 30, 35, 39, 43, 46, 48, 49] plays the 46 
Round 1: Emily     holding [17, 25, 29, 32, 33, 38, 40, 41, 44] plays the 32 
David wins the round 

Round 2: David     holding [21, 27, 30, 35, 39, 43, 48, 49] plays the 35 
Round 2: Emily     holding [17, 25, 29, 33, 38, 40, 41, 44] plays the 25 
Round 2: Elizabeth holding [11, 14, 20, 31, 34, 37, 45, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 18 19 23 24 26 28 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius  holding [13, 15, 18, 19, 23, 24, 26, 28] plays the 15 
David wins the round 

Round 3: David     holding [21, 27, 30, 39, 43, 48, 49] plays the 39 
Round 3: Emily     holding [17, 29, 33, 38, 40, 41, 44] plays the 33 
Round 3: Elizabeth holding [11, 14, 31, 34, 37, 45, 47] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
13 18 19 23 24 26 28 0 0 0 

18------------------------------------------------------------------------

Round 3: Eugenius  holding [13, 18, 19, 23, 24, 26, 28] plays the 18 
Elizabeth wins the round 

Round 4: Elizabeth holding [11, 14, 31, 34, 37, 47] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 23 24 26 28 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius  holding [13, 19, 23, 24, 26, 28] plays the 24 
Round 4: David     holding [21, 27, 30, 43, 48, 49] plays the 48 
Round 4: Emily     holding [17, 29, 38, 40, 41, 44] plays the 38 
David wins the round 

Round 5: David     holding [21, 27, 30, 43, 49] plays the 27 
Round 5: Emily     holding [17, 29, 40, 41, 44] plays the 41 
Round 5: Elizabeth holding [11, 14, 31, 37, 47] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 23 26 28 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 5: Eugenius  holding [13, 19, 23, 26, 28] plays the 13 
David wins the round which contains 3 penalty points

Round 6: David     holding [21, 30, 43, 49] plays the 21 
Round 6: Emily     holding [17, 29, 40, 44] plays the 40 
Round 6: Elizabeth holding [14, 31, 37, 47] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 26 28 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 6: Eugenius  holding [19, 23, 26, 28] plays the 28 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
19 23 26 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius  holding [19, 23, 26] plays the 19 
Round 7: David     holding [30, 43, 49] plays the 43 
Round 7: Emily     holding [17, 29, 44] plays the 29 
Round 7: Elizabeth holding [31, 37, 47] plays the 47 
Elizabeth wins the round which contains 4 penalty points

Round 8: Elizabeth holding [31, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
23 26 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 8: Eugenius  holding [23, 26] plays the 23 
Round 8: David     holding [30, 49] plays the 49 
Round 8: Emily     holding [17, 44] plays the 17 
Elizabeth wins the round which contains 3 penalty points

Round 9: Elizabeth holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
26 0 0 0 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 9: Eugenius  holding [26] plays the 26 
Round 9: David     holding [30] plays the 30 
Round 9: Emily     holding [44] plays the 44 
Elizabeth wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Emily (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 3 penalty points David (system)
#4 with 15 penalty points Elizabeth (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1224289 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Matthew : [13, 20, 22, 25, 27, 29, 32, 35, 41, 43]
Table position 1: Eugenius: [14, 21, 23, 28, 31, 37, 40, 42, 45, 49]
Table position 2: Xue     : [11, 17, 18, 24, 30, 33, 38, 39, 44, 48]
Table position 3: Mitchell: [10, 12, 15, 16, 19, 26, 34, 36, 46, 47]

Discards:
Matthew  [20, 22, 35]
Eugenius [42, 45, 49]
Xue      [24, 38, 39]
Mitchell [16, 36, 46]

Round 0: Matthew  holding [13, 16, 25, 27, 29, 32, 36, 41, 43, 46] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
14 20 21 22 23 28 31 35 37 40 

20------------------------------------------------------------------------

Round 0: Eugenius holding [14, 20, 21, 22, 23, 28, 31, 35, 37, 40] plays the 20 
Round 0: Xue      holding [11, 17, 18, 30, 33, 42, 44, 45, 48, 49] plays the 30 
Round 0: Mitchell holding [10, 12, 15, 19, 24, 26, 34, 38, 39, 47] plays the 15 
Xue wins the round 

Round 1: Xue      holding [11, 17, 18, 33, 42, 44, 45, 48, 49] plays the 44 
Round 1: Mitchell holding [10, 12, 19, 24, 26, 34, 38, 39, 47] plays the 34 
Round 1: Matthew  holding [13, 16, 27, 29, 32, 36, 41, 43, 46] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
14 21 22 23 28 31 35 37 40 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 21, 22, 23, 28, 31, 35, 37, 40] plays the 14 
Xue wins the round 

Round 2: Xue      holding [11, 17, 18, 33, 42, 45, 48, 49] plays the 33 
Round 2: Mitchell holding [10, 12, 19, 24, 26, 38, 39, 47] plays the 39 
Round 2: Matthew  holding [13, 16, 27, 29, 36, 41, 43, 46] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
21 22 23 28 31 35 37 40 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [21, 22, 23, 28, 31, 35, 37, 40] plays the 21 
Mitchell wins the round 

Round 3: Mitchell holding [10, 12, 19, 24, 26, 38, 47] plays the 12 
Round 3: Matthew  holding [13, 16, 27, 29, 41, 43, 46] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
22 23 28 31 35 37 40 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [22, 23, 28, 31, 35, 37, 40] plays the 22 
Round 3: Xue      holding [11, 17, 18, 42, 45, 48, 49] plays the 45 
Xue wins the round 

Round 4: Xue      holding [11, 17, 18, 42, 48, 49] plays the 48 
Round 4: Mitchell holding [10, 19, 24, 26, 38, 47] plays the 24 
Round 4: Matthew  holding [13, 27, 29, 41, 43, 46] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
23 28 31 35 37 40 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [23, 28, 31, 35, 37, 40] plays the 28 
Xue wins the round 

Round 5: Xue      holding [11, 17, 18, 42, 49] plays the 42 
Round 5: Mitchell holding [10, 19, 26, 38, 47] plays the 10 
Round 5: Matthew  holding [13, 29, 41, 43, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 35 37 40 0 0 0 0 0 

35------------------------------------------------------------------------

Round 5: Eugenius holding [23, 31, 35, 37, 40] plays the 35 
Matthew wins the round which contains 7 penalty points

Round 6: Matthew  holding [13, 29, 41, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 37 40 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 31, 37, 40] plays the 23 
Round 6: Xue      holding [11, 17, 18, 49] plays the 11 
Round 6: Mitchell holding [19, 26, 38, 47] plays the 19 
Matthew wins the round which contains 4 penalty points

Round 7: Matthew  holding [13, 29, 41] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 40 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [31, 37, 40] plays the 31 
Round 7: Xue      holding [17, 18, 49] plays the 17 
Round 7: Mitchell holding [26, 38, 47] plays the 47 
Mitchell wins the round which contains 4 penalty points

Round 8: Mitchell holding [26, 38] plays the 26 
Round 8: Matthew  holding [29, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
37 40 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 8: Eugenius holding [37, 40] plays the 40 
Round 8: Xue      holding [18, 49] plays the 18 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Xue      holding [49] plays the 49 
Round 9: Mitchell holding [38] plays the 38 
Round 9: Matthew  holding [29] plays the 29 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Xue (system)
#2 with 3 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Mitchell (system)
#4 with 11 penalty points Matthew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 8551021 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Minh    : [10, 11, 14, 21, 22, 23, 37, 39, 42, 43]
Table position 1: Peter   : [19, 20, 26, 28, 30, 33, 35, 44, 45, 47]
Table position 2: Eugenius: [13, 15, 17, 27, 32, 34, 40, 41, 46, 49]
Table position 3: Nathan  : [12, 16, 18, 24, 25, 29, 31, 36, 38, 48]

Discards:
Minh     [14, 22, 37]
Peter    [26, 35, 47]
Eugenius [41, 46, 49]
Nathan   [12, 24, 29]

Round 0: Minh     holding [10, 11, 12, 21, 23, 24, 29, 39, 42, 43] plays the 39 
Round 0: Peter    holding [14, 19, 20, 22, 28, 30, 33, 37, 44, 45] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 17 26 27 32 34 35 40 47 

15------------------------------------------------------------------------

Round 0: Eugenius holding [13, 15, 17, 26, 27, 32, 34, 35, 40, 47] plays the 15 
Round 0: Nathan   holding [16, 18, 25, 31, 36, 38, 41, 46, 48, 49] plays the 48 
Nathan wins the round 

Round 1: Nathan   holding [16, 18, 25, 31, 36, 38, 41, 46, 49] plays the 49 
Round 1: Minh     holding [10, 11, 12, 21, 23, 24, 29, 42, 43] plays the 42 
Round 1: Peter    holding [14, 19, 20, 22, 28, 33, 37, 44, 45] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 26 27 32 34 35 40 47 0 

35------------------------------------------------------------------------

Round 1: Eugenius holding [13, 17, 26, 27, 32, 34, 35, 40, 47] plays the 35 
Nathan wins the round which contains 7 penalty points

Round 2: Nathan   holding [16, 18, 25, 31, 36, 38, 41, 46] plays the 16 
Round 2: Minh     holding [10, 11, 12, 21, 23, 24, 29, 43] plays the 24 
Round 2: Peter    holding [14, 19, 20, 22, 33, 37, 44, 45] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 26 27 32 34 40 47 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 26, 27, 32, 34, 40, 47] plays the 26 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 17 27 32 34 40 47 0 0 0 

27------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 27, 32, 34, 40, 47] plays the 27 
Round 3: Nathan   holding [18, 25, 31, 36, 38, 41, 46] plays the 18 
Round 3: Minh     holding [10, 11, 12, 21, 23, 29, 43] plays the 21 
Round 3: Peter    holding [14, 19, 20, 33, 37, 44, 45] plays the 33 
Peter wins the round 

Round 4: Peter    holding [14, 19, 20, 37, 44, 45] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 32 34 40 47 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 32, 34, 40, 47] plays the 32 
Round 4: Nathan   holding [25, 31, 36, 38, 41, 46] plays the 38 
Round 4: Minh     holding [10, 11, 12, 23, 29, 43] plays the 12 
Nathan wins the round 

Round 5: Nathan   holding [25, 31, 36, 41, 46] plays the 46 
Round 5: Minh     holding [10, 11, 23, 29, 43] plays the 10 
Round 5: Peter    holding [14, 19, 37, 44, 45] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 34 40 47 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 34, 40, 47] plays the 34 
Nathan wins the round 

Round 6: Nathan   holding [25, 31, 36, 41] plays the 25 
Round 6: Minh     holding [11, 23, 29, 43] plays the 11 
Round 6: Peter    holding [19, 37, 44, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 40 47 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 6: Eugenius holding [13, 17, 40, 47] plays the 40 
Peter wins the round which contains 1 penalty points

Round 7: Peter    holding [19, 37, 44] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 47 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 17, 47] plays the 13 
Round 7: Nathan   holding [31, 36, 41] plays the 41 
Round 7: Minh     holding [23, 29, 43] plays the 23 
Nathan wins the round which contains 4 penalty points

Round 8: Nathan   holding [31, 36] plays the 31 
Round 8: Minh     holding [29, 43] plays the 43 
Round 8: Peter    holding [37, 44] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
17 47 0 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 8: Eugenius holding [17, 47] plays the 17 
Minh wins the round which contains 4 penalty points

Round 9: Minh     holding [29] plays the 29 
Round 9: Peter    holding [44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
47 0 0 0 0 0 0 0 0 0 

47------------------------------------------------------------------------

Round 9: Eugenius holding [47] plays the 47 
Round 9: Nathan   holding [36] plays the 36 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 1 penalty points Peter (system)
#2 with 2 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Minh (system)
#4 with 11 penalty points Nathan (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11302872 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Stephen : [25, 26, 28, 29, 30, 31, 34, 37, 42, 49]
Table position 1: Marc    : [10, 20, 23, 24, 27, 36, 38, 39, 40, 41]
Table position 2: Eugenius: [12, 15, 17, 19, 21, 35, 44, 45, 46, 48]
Table position 3: Kane    : [11, 13, 14, 16, 18, 22, 32, 33, 43, 47]

Discards:
Stephen  [28, 30, 34]
Marc     [20, 27, 38]
Eugenius [45, 46, 48]
Kane     [14, 16, 47]

Round 0: Stephen  holding [14, 16, 25, 26, 29, 31, 37, 42, 47, 49] plays the 49 
Round 0: Marc     holding [10, 23, 24, 28, 30, 34, 36, 39, 40, 41] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
12 15 17 19 20 21 27 35 38 44 

21------------------------------------------------------------------------

Round 0: Eugenius holding [12, 15, 17, 19, 20, 21, 27, 35, 38, 44] plays the 21 
Round 0: Kane     holding [11, 13, 18, 22, 32, 33, 43, 45, 46, 48] plays the 18 
Stephen wins the round 

Round 1: Stephen  holding [14, 16, 25, 26, 29, 31, 37, 42, 47] plays the 26 
Round 1: Marc     holding [10, 23, 24, 30, 34, 36, 39, 40, 41] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
12 15 17 19 20 27 35 38 44 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 15, 17, 19, 20, 27, 35, 38, 44] plays the 12 
Round 1: Kane     holding [11, 13, 22, 32, 33, 43, 45, 46, 48] plays the 22 
Marc wins the round 

Round 2: Marc     holding [10, 23, 24, 30, 34, 39, 40, 41] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
15 17 19 20 27 35 38 44 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius holding [15, 17, 19, 20, 27, 35, 38, 44] plays the 15 
Round 2: Kane     holding [11, 13, 32, 33, 43, 45, 46, 48] plays the 33 
Round 2: Stephen  holding [14, 16, 25, 29, 31, 37, 42, 47] plays the 16 
Kane wins the round 

Round 3: Kane     holding [11, 13, 32, 43, 45, 46, 48] plays the 48 
Round 3: Stephen  holding [14, 25, 29, 31, 37, 42, 47] plays the 42 
Round 3: Marc     holding [10, 23, 30, 34, 39, 40, 41] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 20 27 35 38 44 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 20, 27, 35, 38, 44] plays the 20 
Kane wins the round which contains 7 penalty points

Round 4: Kane     holding [11, 13, 32, 43, 45, 46] plays the 32 
Round 4: Stephen  holding [14, 25, 29, 31, 37, 47] plays the 14 
Round 4: Marc     holding [10, 23, 30, 34, 40, 41] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 27 35 38 44 0 0 0 0 

38------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 27, 35, 38, 44] plays the 38 
Marc wins the round 

Round 5: Marc     holding [10, 23, 30, 34, 41] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 27 35 44 0 0 0 0 0 

35------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 27, 35, 44] plays the 35 
Round 5: Kane     holding [11, 13, 43, 45, 46] plays the 45 
Round 5: Stephen  holding [25, 29, 31, 37, 47] plays the 25 
Kane wins the round 

Round 6: Kane     holding [11, 13, 43, 46] plays the 46 
Round 6: Stephen  holding [29, 31, 37, 47] plays the 47 
Round 6: Marc     holding [23, 30, 34, 41] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 27 44 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 6: Eugenius holding [17, 19, 27, 44] plays the 44 
Kane wins the round which contains 1 penalty points

Round 7: Kane     holding [11, 13, 43] plays the 43 
Round 7: Stephen  holding [29, 31, 37] plays the 31 
Round 7: Marc     holding [23, 30, 41] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 27 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 19, 27] plays the 17 
Kane wins the round which contains 4 penalty points

Round 8: Kane     holding [11, 13] plays the 11 
Round 8: Stephen  holding [29, 37] plays the 37 
Round 8: Marc     holding [30, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
19 27 0 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 8: Eugenius holding [19, 27] plays the 19 
Marc wins the round which contains 4 penalty points

Round 9: Marc     holding [30] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
27 0 0 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 9: Eugenius holding [27] plays the 27 
Round 9: Kane     holding [13] plays the 13 
Round 9: Stephen  holding [29] plays the 29 
Marc wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Stephen (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Marc (system)
#4 with 12 penalty points Kane (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3355285 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Dylan   : [10, 11, 12, 14, 15, 21, 27, 32, 37, 42]
Table position 1: Michael : [17, 20, 22, 23, 26, 29, 30, 31, 36, 43]
Table position 2: Kane    : [13, 18, 24, 25, 34, 40, 44, 46, 47, 48]
Table position 3: Eugenius: [16, 19, 28, 33, 35, 38, 39, 41, 45, 49]

Discards:
Dylan    [11, 12, 14]
Michael  [23, 29, 31]
Kane     [18, 24, 25]
Eugenius [41, 45, 49]

Round 0: Dylan    holding [10, 15, 21, 27, 32, 37, 41, 42, 45, 49] plays the 15 
Round 0: Michael  holding [11, 12, 14, 17, 20, 22, 26, 30, 36, 43] plays the 36 
Round 0: Kane     holding [13, 23, 29, 31, 34, 40, 44, 46, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
16 18 19 24 25 28 33 35 38 39 

18------------------------------------------------------------------------

Round 0: Eugenius holding [16, 18, 19, 24, 25, 28, 33, 35, 38, 39] plays the 18 
Kane wins the round 

Round 1: Kane     holding [13, 23, 29, 31, 34, 40, 44, 46, 47] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
16 19 24 25 28 33 35 38 39 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 19, 24, 25, 28, 33, 35, 38, 39] plays the 16 
Round 1: Dylan    holding [10, 21, 27, 32, 37, 41, 42, 45, 49] plays the 32 
Round 1: Michael  holding [11, 12, 14, 17, 20, 22, 26, 30, 43] plays the 30 
Kane wins the round 

Round 2: Kane     holding [13, 23, 29, 31, 34, 40, 46, 47] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
19 24 25 28 33 35 38 39 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [19, 24, 25, 28, 33, 35, 38, 39] plays the 24 
Round 2: Dylan    holding [10, 21, 27, 37, 41, 42, 45, 49] plays the 45 
Round 2: Michael  holding [11, 12, 14, 17, 20, 22, 26, 43] plays the 20 
Dylan wins the round 

Round 3: Dylan    holding [10, 21, 27, 37, 41, 42, 49] plays the 10 
Round 3: Michael  holding [11, 12, 14, 17, 22, 26, 43] plays the 26 
Round 3: Kane     holding [13, 23, 29, 31, 34, 46, 47] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
19 25 28 33 35 38 39 0 0 0 

25------------------------------------------------------------------------

Round 3: Eugenius holding [19, 25, 28, 33, 35, 38, 39] plays the 25 
Kane wins the round 

Round 4: Kane     holding [13, 23, 29, 31, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
19 28 33 35 38 39 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [19, 28, 33, 35, 38, 39] plays the 28 
Round 4: Dylan    holding [21, 27, 37, 41, 42, 49] plays the 42 
Round 4: Michael  holding [11, 12, 14, 17, 22, 43] plays the 12 
Kane wins the round which contains 7 penalty points

Round 5: Kane     holding [13, 23, 29, 31, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
19 33 35 38 39 0 0 0 0 0 

19------------------------------------------------------------------------

Round 5: Eugenius holding [19, 33, 35, 38, 39] plays the 19 
Round 5: Dylan    holding [21, 27, 37, 41, 49] plays the 37 
Round 5: Michael  holding [11, 14, 17, 22, 43] plays the 17 
Kane wins the round which contains 4 penalty points

Round 6: Kane     holding [13, 23, 29, 31] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
33 35 38 39 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 6: Eugenius holding [33, 35, 38, 39] plays the 33 
Round 6: Dylan    holding [21, 27, 41, 49] plays the 41 
Round 6: Michael  holding [11, 14, 22, 43] plays the 11 
Dylan wins the round which contains 3 penalty points

Round 7: Dylan    holding [21, 27, 49] plays the 27 
Round 7: Michael  holding [14, 22, 43] plays the 43 
Round 7: Kane     holding [13, 23, 31] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
35 38 39 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 7: Eugenius holding [35, 38, 39] plays the 39 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
35 38 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 8: Eugenius holding [35, 38] plays the 35 
Round 8: Dylan    holding [21, 49] plays the 21 
Round 8: Michael  holding [14, 22] plays the 14 
Round 8: Kane     holding [13, 31] plays the 31 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Round 9: Dylan    holding [49] plays the 49 
Round 9: Michael  holding [22] plays the 22 
Round 9: Kane     holding [13] plays the 13 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Michael (system)
#2 with 3 penalty points Dylan (system)
#3 with 4 penalty points Eugenius (dodo.c)
#4 with 11 penalty points Kane (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2769342 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Dean    : [12, 25, 27, 29, 34, 35, 39, 45, 47, 49]
Table position 1: Harrison: [11, 13, 17, 18, 19, 20, 21, 30, 37, 44]
Table position 2: Matthew : [14, 16, 22, 23, 26, 28, 36, 40, 41, 46]
Table position 3: Eugenius: [10, 15, 24, 31, 32, 33, 38, 42, 43, 48]

Discards:
Dean     [27, 29, 49]
Harrison [11, 21, 44]
Matthew  [22, 23, 46]
Eugenius [42, 43, 48]

Round 0: Dean     holding [12, 25, 34, 35, 39, 42, 43, 45, 47, 48] plays the 45 
Round 0: Harrison holding [13, 17, 18, 19, 20, 27, 29, 30, 37, 49] plays the 27 
Round 0: Matthew  holding [11, 14, 16, 21, 26, 28, 36, 40, 41, 44] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
10 15 22 23 24 31 32 33 38 46 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 15, 22, 23, 24, 31, 32, 33, 38, 46] plays the 10 
Dean wins the round 

Round 1: Dean     holding [12, 25, 34, 35, 39, 42, 43, 47, 48] plays the 42 
Round 1: Harrison holding [13, 17, 18, 19, 20, 29, 30, 37, 49] plays the 30 
Round 1: Matthew  holding [11, 14, 16, 21, 26, 28, 40, 41, 44] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
15 22 23 24 31 32 33 38 46 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [15, 22, 23, 24, 31, 32, 33, 38, 46] plays the 15 
Dean wins the round which contains 7 penalty points

Round 2: Dean     holding [12, 25, 34, 35, 39, 43, 47, 48] plays the 35 
Round 2: Harrison holding [13, 17, 18, 19, 20, 29, 37, 49] plays the 49 
Round 2: Matthew  holding [11, 14, 16, 21, 26, 40, 41, 44] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
22 23 24 31 32 33 38 46 0 0 

22 chah------------------------------------------------------------------------

Round 2: Eugenius holding [22, 23, 24, 31, 32, 33, 38, 46] plays the 22 
Harrison wins the round 

Round 3: Harrison holding [13, 17, 18, 19, 20, 29, 37] plays the 20 
Round 3: Matthew  holding [11, 14, 16, 21, 26, 41, 44] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
23 24 31 32 33 38 46 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [23, 24, 31, 32, 33, 38, 46] plays the 24 
Round 3: Dean     holding [12, 25, 34, 39, 43, 47, 48] plays the 25 
Dean wins the round 

Round 4: Dean     holding [12, 34, 39, 43, 47, 48] plays the 48 
Round 4: Harrison holding [13, 17, 18, 19, 29, 37] plays the 18 
Round 4: Matthew  holding [11, 16, 21, 26, 41, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 32 33 38 46 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [23, 31, 32, 33, 38, 46] plays the 32 
Dean wins the round 

Round 5: Dean     holding [12, 34, 39, 43, 47] plays the 39 
Round 5: Harrison holding [13, 17, 19, 29, 37] plays the 29 
Round 5: Matthew  holding [11, 16, 21, 26, 41] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 33 38 46 0 0 0 0 0 

33------------------------------------------------------------------------

Round 5: Eugenius holding [23, 31, 33, 38, 46] plays the 33 
Dean wins the round which contains 1 penalty points

Round 6: Dean     holding [12, 34, 43, 47] plays the 43 
Round 6: Harrison holding [13, 17, 19, 37] plays the 19 
Round 6: Matthew  holding [11, 16, 26, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 38 46 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 31, 38, 46] plays the 23 
Dean wins the round which contains 4 penalty points

Round 7: Dean     holding [12, 34, 47] plays the 34 
Round 7: Harrison holding [13, 17, 37] plays the 17 
Round 7: Matthew  holding [11, 16, 26] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
31 38 46 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 7: Eugenius holding [31, 38, 46] plays the 38 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
31 46 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 46] plays the 31 
Round 8: Dean     holding [12, 47] plays the 47 
Round 8: Harrison holding [13, 37] plays the 37 
Round 8: Matthew  holding [11, 16] plays the 11 
Dean wins the round which contains 4 penalty points

Round 9: Dean     holding [12] plays the 12 
Round 9: Harrison holding [13] plays the 13 
Round 9: Matthew  holding [16] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
46 0 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 9: Eugenius holding [46] plays the 46 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Harrison (system)
#1 with 0 penalty points Matthew (system)
#3 with 2 penalty points Eugenius (dodo.c)
#4 with 16 penalty points Dean (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13481330 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: George  : [12, 19, 20, 22, 30, 31, 40, 41, 43, 48]
Table position 1: Eugenius: [14, 18, 21, 27, 29, 32, 42, 46, 47, 49]
Table position 2: Gal     : [10, 11, 13, 15, 24, 26, 37, 39, 44, 45]
Table position 3: Mitchell: [16, 17, 23, 25, 28, 33, 34, 35, 36, 38]

Discards:
George   [31, 43, 48]
Eugenius [46, 47, 49]
Gal      [10, 11, 15]
Mitchell [16, 17, 34]

Round 0: George   holding [12, 16, 17, 19, 20, 22, 30, 34, 40, 41] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
14 18 21 27 29 31 32 42 43 48 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 18, 21, 27, 29, 31, 32, 42, 43, 48] plays the 14 
Round 0: Gal      holding [13, 24, 26, 37, 39, 44, 45, 46, 47, 49] plays the 26 
Round 0: Mitchell holding [10, 11, 15, 23, 25, 28, 33, 35, 36, 38] plays the 10 
George wins the round 

Round 1: George   holding [12, 16, 17, 19, 20, 22, 30, 40, 41] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
18 21 27 29 31 32 42 43 48 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [18, 21, 27, 29, 31, 32, 42, 43, 48] plays the 18 
Round 1: Gal      holding [13, 24, 37, 39, 44, 45, 46, 47, 49] plays the 46 
Round 1: Mitchell holding [11, 15, 23, 25, 28, 33, 35, 36, 38] plays the 28 
Gal wins the round 

Round 2: Gal      holding [13, 24, 37, 39, 44, 45, 47, 49] plays the 39 
Round 2: Mitchell holding [11, 15, 23, 25, 33, 35, 36, 38] plays the 15 
Round 2: George   holding [12, 16, 17, 19, 20, 30, 40, 41] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
21 27 29 31 32 42 43 48 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [21, 27, 29, 31, 32, 42, 43, 48] plays the 21 
Gal wins the round 

Round 3: Gal      holding [13, 24, 37, 44, 45, 47, 49] plays the 49 
Round 3: Mitchell holding [11, 23, 25, 33, 35, 36, 38] plays the 35 
Round 3: George   holding [12, 16, 17, 19, 20, 40, 41] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 31 32 42 43 48 0 0 0 

42------------------------------------------------------------------------

Round 3: Eugenius holding [27, 29, 31, 32, 42, 43, 48] plays the 42 
Gal wins the round which contains 7 penalty points

Round 4: Gal      holding [13, 24, 37, 44, 45, 47] plays the 45 
Round 4: Mitchell holding [11, 23, 25, 33, 36, 38] plays the 33 
Round 4: George   holding [12, 16, 17, 19, 20, 41] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 31 32 43 48 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [27, 29, 31, 32, 43, 48] plays the 27 
Gal wins the round 

Round 5: Gal      holding [13, 24, 37, 44, 47] plays the 44 
Round 5: Mitchell holding [11, 23, 25, 36, 38] plays the 38 
Round 5: George   holding [16, 17, 19, 20, 41] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 32 43 48 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [29, 31, 32, 43, 48] plays the 32 
Gal wins the round 

Round 6: Gal      holding [13, 24, 37, 47] plays the 24 
Round 6: Mitchell holding [11, 23, 25, 36] plays the 36 
Round 6: George   holding [17, 19, 20, 41] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 43 48 0 0 0 0 0 0 

48------------------------------------------------------------------------

Round 6: Eugenius holding [29, 31, 43, 48] plays the 48 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
29 31 43 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 43] plays the 29 
Round 7: Gal      holding [13, 37, 47] plays the 13 
Round 7: Mitchell holding [11, 23, 25] plays the 23 
Round 7: George   holding [17, 19, 41] plays the 19 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
31 43 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 43] plays the 31 
Round 8: Gal      holding [37, 47] plays the 37 
Round 8: Mitchell holding [11, 25] plays the 11 
Round 8: George   holding [17, 41] plays the 41 
George wins the round which contains 4 penalty points

Round 9: George   holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Round 9: Gal      holding [47] plays the 47 
Round 9: Mitchell holding [25] plays the 25 
Gal wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Mitchell (system)
#2 with 4 penalty points George (system)
#2 with 4 penalty points Eugenius (dodo.c)
#4 with 10 penalty points Gal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 8139908 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Matthew : [15, 24, 28, 31, 33, 35, 39, 40, 45, 49]
Table position 1: Mitchell: [13, 17, 19, 20, 22, 27, 29, 36, 43, 46]
Table position 2: Eugenius: [11, 12, 16, 18, 30, 37, 38, 41, 42, 48]
Table position 3: Oscar   : [10, 14, 21, 23, 25, 26, 32, 34, 44, 47]

Discards:
Matthew  [31, 33, 45]
Mitchell [13, 17, 19]
Eugenius [41, 42, 48]
Oscar    [10, 21, 32]

Round 0: Matthew  holding [10, 15, 21, 24, 28, 32, 35, 39, 40, 49] plays the 40 
Round 0: Mitchell holding [20, 22, 27, 29, 31, 33, 36, 43, 45, 46] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 13 16 17 18 19 30 37 38 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 13, 16, 17, 18, 19, 30, 37, 38] plays the 12 
Round 0: Oscar    holding [14, 23, 25, 26, 34, 41, 42, 44, 47, 48] plays the 25 
Matthew wins the round 

Round 1: Matthew  holding [10, 15, 21, 24, 28, 32, 35, 39, 49] plays the 39 
Round 1: Mitchell holding [22, 27, 29, 31, 33, 36, 43, 45, 46] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 16 17 18 19 30 37 38 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 16, 17, 18, 19, 30, 37, 38] plays the 18 
Round 1: Oscar    holding [14, 23, 26, 34, 41, 42, 44, 47, 48] plays the 48 
Oscar wins the round 

Round 2: Oscar    holding [14, 23, 26, 34, 41, 42, 44, 47] plays the 34 
Round 2: Matthew  holding [10, 15, 21, 24, 28, 32, 35, 49] plays the 10 
Round 2: Mitchell holding [22, 27, 29, 31, 36, 43, 45, 46] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 16 17 19 30 37 38 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 16, 17, 19, 30, 37, 38] plays the 16 
Mitchell wins the round 

Round 3: Mitchell holding [22, 27, 29, 31, 43, 45, 46] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 19 30 37 38 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 17, 19, 30, 37, 38] plays the 30 
Round 3: Oscar    holding [14, 23, 26, 41, 42, 44, 47] plays the 14 
Round 3: Matthew  holding [15, 21, 24, 28, 32, 35, 49] plays the 32 
Matthew wins the round 

Round 4: Matthew  holding [15, 21, 24, 28, 35, 49] plays the 15 
Round 4: Mitchell holding [27, 29, 31, 43, 45, 46] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 19 37 38 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 17, 19, 37, 38] plays the 11 
Round 4: Oscar    holding [23, 26, 41, 42, 44, 47] plays the 42 
Oscar wins the round which contains 8 penalty points

Round 5: Oscar    holding [23, 26, 41, 44, 47] plays the 47 
Round 5: Matthew  holding [21, 24, 28, 35, 49] plays the 49 
Round 5: Mitchell holding [29, 31, 43, 45, 46] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 37 38 0 0 0 0 0 

13------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 19, 37, 38] plays the 13 
Oscar wins the round which contains 3 penalty points

Round 6: Oscar    holding [23, 26, 41, 44] plays the 26 
Round 6: Matthew  holding [21, 24, 28, 35] plays the 24 
Round 6: Mitchell holding [29, 43, 45, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 37 38 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 6: Eugenius holding [17, 19, 37, 38] plays the 38 
Mitchell wins the round 

Round 7: Mitchell holding [29, 43, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 37 0 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 7: Eugenius holding [17, 19, 37] plays the 17 
Round 7: Oscar    holding [23, 41, 44] plays the 44 
Round 7: Matthew  holding [21, 28, 35] plays the 21 
Mitchell wins the round which contains 1 penalty points

Round 8: Mitchell holding [29, 43] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
19 37 0 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 8: Eugenius holding [19, 37] plays the 19 
Round 8: Oscar    holding [23, 41] plays the 23 
Round 8: Matthew  holding [28, 35] plays the 35 
Mitchell wins the round which contains 3 penalty points

Round 9: Mitchell holding [43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Oscar    holding [41] plays the 41 
Round 9: Matthew  holding [28] plays the 28 
Mitchell wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Matthew (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Mitchell (system)
#4 with 11 penalty points Oscar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 8497749 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Aydin   : [10, 11, 14, 20, 27, 29, 30, 32, 41, 42]
Table position 1: Eugenius: [16, 18, 24, 37, 40, 43, 44, 47, 48, 49]
Table position 2: Alex    : [12, 13, 17, 21, 23, 28, 33, 34, 36, 45]
Table position 3: George  : [15, 19, 22, 25, 26, 31, 35, 38, 39, 46]

Discards:
Aydin    [10, 11, 41]
Eugenius [47, 48, 49]
Alex     [13, 21, 45]
George   [26, 38, 46]

Round 0: Aydin    holding [14, 20, 26, 27, 29, 30, 32, 38, 42, 46] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 16 18 24 37 40 41 43 44 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 16, 18, 24, 37, 40, 41, 43, 44] plays the 10 
Round 0: Alex     holding [12, 17, 23, 28, 33, 34, 36, 47, 48, 49] plays the 49 
Round 0: George   holding [13, 15, 19, 21, 22, 25, 31, 35, 39, 45] plays the 21 
Alex wins the round 

Round 1: Alex     holding [12, 17, 23, 28, 33, 34, 36, 47, 48] plays the 12 
Round 1: George   holding [13, 15, 19, 22, 25, 31, 35, 39, 45] plays the 15 
Round 1: Aydin    holding [20, 26, 27, 29, 30, 32, 38, 42, 46] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 18 24 37 40 41 43 44 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [11, 16, 18, 24, 37, 40, 41, 43, 44] plays the 16 
Aydin wins the round 

Round 2: Aydin    holding [20, 26, 27, 29, 30, 32, 42, 46] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
11 18 24 37 40 41 43 44 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [11, 18, 24, 37, 40, 41, 43, 44] plays the 18 
Round 2: Alex     holding [17, 23, 28, 33, 34, 36, 47, 48] plays the 34 
Round 2: George   holding [13, 19, 22, 25, 31, 35, 39, 45] plays the 45 
George wins the round 

Round 3: George   holding [13, 19, 22, 25, 31, 35, 39] plays the 25 
Round 3: Aydin    holding [26, 27, 29, 30, 32, 42, 46] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
11 24 37 40 41 43 44 0 0 0 

40------------------------------------------------------------------------

Round 3: Eugenius holding [11, 24, 37, 40, 41, 43, 44] plays the 40 
Round 3: Alex     holding [17, 23, 28, 33, 36, 47, 48] plays the 23 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
11 24 37 41 43 44 0 0 0 0 

11------------------------------------------------------------------------

Round 4: Eugenius holding [11, 24, 37, 41, 43, 44] plays the 11 
Round 4: Alex     holding [17, 28, 33, 36, 47, 48] plays the 47 
Round 4: George   holding [13, 19, 22, 31, 35, 39] plays the 31 
Round 4: Aydin    holding [26, 27, 29, 32, 42, 46] plays the 29 
Alex wins the round which contains 4 penalty points

Round 5: Alex     holding [17, 28, 33, 36, 48] plays the 48 
Round 5: George   holding [13, 19, 22, 35, 39] plays the 39 
Round 5: Aydin    holding [26, 27, 32, 42, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
24 37 41 43 44 0 0 0 0 0 

24------------------------------------------------------------------------

Round 5: Eugenius holding [24, 37, 41, 43, 44] plays the 24 
Alex wins the round 

Round 6: Alex     holding [17, 28, 33, 36] plays the 36 
Round 6: George   holding [13, 19, 22, 35] plays the 22 
Round 6: Aydin    holding [26, 27, 32, 42] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
37 41 43 44 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 6: Eugenius holding [37, 41, 43, 44] plays the 44 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
37 41 43 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 7: Eugenius holding [37, 41, 43] plays the 37 
Round 7: Alex     holding [17, 28, 33] plays the 17 
Round 7: George   holding [13, 19, 35] plays the 13 
Round 7: Aydin    holding [26, 27, 42] plays the 27 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
41 43 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 8: Eugenius holding [41, 43] plays the 41 
Round 8: Alex     holding [28, 33] plays the 33 
Round 8: George   holding [19, 35] plays the 19 
Round 8: Aydin    holding [26, 42] plays the 42 
Eugenius wins the round which contains 9 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Round 9: Alex     holding [28] plays the 28 
Round 9: George   holding [35] plays the 35 
Round 9: Aydin    holding [26] plays the 26 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Aydin (system)
#1 with 0 penalty points George (system)
#3 with 4 penalty points Alex (system)
#4 with 14 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2661368 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Braedon : [14, 15, 21, 26, 28, 34, 38, 41, 46, 49]
Table position 1: Harrison: [10, 11, 13, 24, 29, 31, 35, 37, 47, 48]
Table position 2: Zachary : [17, 18, 19, 20, 22, 23, 25, 30, 32, 45]
Table position 3: Eugenius: [12, 16, 27, 33, 36, 39, 40, 42, 43, 44]

Discards:
Braedon  [15, 21, 38]
Harrison [13, 24, 31]
Zachary  [19, 20, 45]
Eugenius [42, 43, 44]

Round 0: Braedon  holding [14, 26, 28, 34, 41, 42, 43, 44, 46, 49] plays the 14 
Round 0: Harrison holding [10, 11, 15, 21, 29, 35, 37, 38, 47, 48] plays the 10 
Round 0: Zachary  holding [13, 17, 18, 22, 23, 24, 25, 30, 31, 32] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
12 16 19 20 27 33 36 39 40 45 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 16, 19, 20, 27, 33, 36, 39, 40, 45] plays the 12 
Zachary wins the round 

Round 1: Zachary  holding [13, 17, 18, 22, 23, 25, 30, 31, 32] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
16 19 20 27 33 36 39 40 45 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [16, 19, 20, 27, 33, 36, 39, 40, 45] plays the 20 
Round 1: Braedon  holding [26, 28, 34, 41, 42, 43, 44, 46, 49] plays the 41 
Round 1: Harrison holding [11, 15, 21, 29, 35, 37, 38, 47, 48] plays the 15 
Zachary wins the round which contains 1 penalty points

Round 2: Zachary  holding [13, 17, 18, 22, 23, 30, 31, 32] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
16 19 27 33 36 39 40 45 0 0 

19------------------------------------------------------------------------

Round 2: Eugenius holding [16, 19, 27, 33, 36, 39, 40, 45] plays the 19 
Round 2: Braedon  holding [26, 28, 34, 42, 43, 44, 46, 49] plays the 43 
Round 2: Harrison holding [11, 21, 29, 35, 37, 38, 47, 48] plays the 47 
Harrison wins the round which contains 4 penalty points

Round 3: Harrison holding [11, 21, 29, 35, 37, 38, 48] plays the 37 
Round 3: Zachary  holding [13, 18, 22, 23, 30, 31, 32] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
16 27 33 36 39 40 45 0 0 0 

16------------------------------------------------------------------------

Round 3: Eugenius holding [16, 27, 33, 36, 39, 40, 45] plays the 16 
Round 3: Braedon  holding [26, 28, 34, 42, 44, 46, 49] plays the 44 
Harrison wins the round which contains 2 penalty points

Round 4: Harrison holding [11, 21, 29, 35, 38, 48] plays the 35 
Round 4: Zachary  holding [13, 18, 22, 30, 31, 32] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
27 33 36 39 40 45 0 0 0 0 

40------------------------------------------------------------------------

Round 4: Eugenius holding [27, 33, 36, 39, 40, 45] plays the 40 
Round 4: Braedon  holding [26, 28, 34, 42, 46, 49] plays the 49 
Braedon wins the round 

Round 5: Braedon  holding [26, 28, 34, 42, 46] plays the 46 
Round 5: Harrison holding [11, 21, 29, 38, 48] plays the 38 
Round 5: Zachary  holding [13, 18, 22, 31, 32] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
27 33 36 39 45 0 0 0 0 0 

36------------------------------------------------------------------------

Round 5: Eugenius holding [27, 33, 36, 39, 45] plays the 36 
Braedon wins the round 

Round 6: Braedon  holding [26, 28, 34, 42] plays the 26 
Round 6: Harrison holding [11, 21, 29, 48] plays the 48 
Round 6: Zachary  holding [13, 18, 31, 32] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
27 33 39 45 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 6: Eugenius holding [27, 33, 39, 45] plays the 39 
Harrison wins the round 

Round 7: Harrison holding [11, 21, 29] plays the 29 
Round 7: Zachary  holding [13, 31, 32] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
27 33 45 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [27, 33, 45] plays the 27 
Round 7: Braedon  holding [28, 34, 42] plays the 42 
Harrison wins the round which contains 9 penalty points

Round 8: Harrison holding [11, 21] plays the 21 
Round 8: Zachary  holding [31, 32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
33 45 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 8: Eugenius holding [33, 45] plays the 33 
Round 8: Braedon  holding [28, 34] plays the 28 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius holding [45] plays the 45 
Round 9: Braedon  holding [34] plays the 34 
Round 9: Harrison holding [11] plays the 11 
Round 9: Zachary  holding [31] plays the 31 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Braedon (system)
#2 with 1 penalty points Zachary (system)
#3 with 2 penalty points Eugenius (dodo.c)
#4 with 15 penalty points Harrison (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 333114 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Livia   : [11, 13, 15, 21, 25, 26, 28, 33, 35, 46]
Table position 1: Benjamin: [16, 17, 20, 22, 24, 31, 34, 40, 43, 48]
Table position 2: Eugenius: [12, 18, 19, 29, 36, 37, 41, 42, 45, 49]
Table position 3: Kane    : [10, 14, 23, 27, 30, 32, 38, 39, 44, 47]

Discards:
Livia    [21, 25, 35]
Benjamin [22, 31, 48]
Eugenius [42, 45, 49]
Kane     [14, 39, 47]

Round 0: Livia    holding [11, 13, 14, 15, 26, 28, 33, 39, 46, 47] plays the 15 
Round 0: Benjamin holding [16, 17, 20, 21, 24, 25, 34, 35, 40, 43] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
12 18 19 22 29 31 36 37 41 48 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 18, 19, 22, 29, 31, 36, 37, 41, 48] plays the 12 
Round 0: Kane     holding [10, 23, 27, 30, 32, 38, 42, 44, 45, 49] plays the 10 
Benjamin wins the round 

Round 1: Benjamin holding [16, 17, 20, 21, 24, 25, 34, 35, 43] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
18 19 22 29 31 36 37 41 48 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [18, 19, 22, 29, 31, 36, 37, 41, 48] plays the 18 
Round 1: Kane     holding [23, 27, 30, 32, 38, 42, 44, 45, 49] plays the 42 
Round 1: Livia    holding [11, 13, 14, 26, 28, 33, 39, 46, 47] plays the 26 
Kane wins the round which contains 7 penalty points

Round 2: Kane     holding [23, 27, 30, 32, 38, 44, 45, 49] plays the 27 
Round 2: Livia    holding [11, 13, 14, 28, 33, 39, 46, 47] plays the 39 
Round 2: Benjamin holding [17, 20, 21, 24, 25, 34, 35, 43] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 29 31 36 37 41 48 0 0 

36------------------------------------------------------------------------

Round 2: Eugenius holding [19, 22, 29, 31, 36, 37, 41, 48] plays the 36 
Livia wins the round 

Round 3: Livia    holding [11, 13, 14, 28, 33, 46, 47] plays the 46 
Round 3: Benjamin holding [17, 20, 21, 25, 34, 35, 43] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 29 31 37 41 48 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [19, 22, 29, 31, 37, 41, 48] plays the 22 
Round 3: Kane     holding [23, 30, 32, 38, 44, 45, 49] plays the 44 
Livia wins the round 

Round 4: Livia    holding [11, 13, 14, 28, 33, 47] plays the 28 
Round 4: Benjamin holding [17, 20, 21, 25, 35, 43] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 31 37 41 48 0 0 0 0 

48------------------------------------------------------------------------

Round 4: Eugenius holding [19, 29, 31, 37, 41, 48] plays the 48 
Round 4: Kane     holding [23, 30, 32, 38, 45, 49] plays the 49 
Kane wins the round 

Round 5: Kane     holding [23, 30, 32, 38, 45] plays the 32 
Round 5: Livia    holding [11, 13, 14, 33, 47] plays the 14 
Round 5: Benjamin holding [17, 20, 21, 25, 43] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 31 37 41 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 5: Eugenius holding [19, 29, 31, 37, 41] plays the 19 
Kane wins the round which contains 1 penalty points

Round 6: Kane     holding [23, 30, 38, 45] plays the 45 
Round 6: Livia    holding [11, 13, 33, 47] plays the 33 
Round 6: Benjamin holding [17, 21, 25, 43] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 37 41 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 6: Eugenius holding [29, 31, 37, 41] plays the 29 
Kane wins the round which contains 1 penalty points

Round 7: Kane     holding [23, 30, 38] plays the 30 
Round 7: Livia    holding [11, 13, 47] plays the 13 
Round 7: Benjamin holding [17, 21, 43] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 41 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 7: Eugenius holding [31, 37, 41] plays the 31 
Kane wins the round which contains 2 penalty points

Round 8: Kane     holding [23, 38] plays the 23 
Round 8: Livia    holding [11, 47] plays the 11 
Round 8: Benjamin holding [17, 43] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
37 41 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 8: Eugenius holding [37, 41] plays the 37 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Round 9: Kane     holding [38] plays the 38 
Round 9: Livia    holding [47] plays the 47 
Round 9: Benjamin holding [43] plays the 43 
Livia wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Benjamin (system)
#2 with 3 penalty points Livia (system)
#3 with 4 penalty points Eugenius (dodo.c)
#4 with 11 penalty points Kane (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 434951 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Alex    : [10, 16, 21, 26, 27, 28, 31, 44, 47, 49]
Table position 1: Aydin   : [14, 15, 19, 24, 25, 32, 36, 38, 46, 48]
Table position 2: Eugenius: [11, 12, 17, 20, 22, 23, 37, 41, 42, 43]
Table position 3: Nicholas: [13, 18, 29, 30, 33, 34, 35, 39, 40, 45]

Discards:
Alex     [21, 27, 49]
Aydin    [14, 25, 46]
Eugenius [41, 42, 43]
Nicholas [18, 29, 30]

Round 0: Alex     holding [10, 16, 18, 26, 28, 29, 30, 31, 44, 47] plays the 26 
Round 0: Aydin    holding [15, 19, 21, 24, 27, 32, 36, 38, 48, 49] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 14 17 20 22 23 25 37 46 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 14, 17, 20, 22, 23, 25, 37, 46] plays the 12 
Round 0: Nicholas holding [13, 33, 34, 35, 39, 40, 41, 42, 43, 45] plays the 42 
Nicholas wins the round which contains 7 penalty points

Round 1: Nicholas holding [13, 33, 34, 35, 39, 40, 41, 43, 45] plays the 39 
Round 1: Alex     holding [10, 16, 18, 28, 29, 30, 31, 44, 47] plays the 18 
Round 1: Aydin    holding [15, 19, 21, 27, 32, 36, 38, 48, 49] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 17 20 22 23 25 37 46 0 

11 chah------------------------------------------------------------------------

Round 1: Eugenius holding [11, 14, 17, 20, 22, 23, 25, 37, 46] plays the 11 
Nicholas wins the round which contains 1 penalty points

Round 2: Nicholas holding [13, 33, 34, 35, 40, 41, 43, 45] plays the 45 
Round 2: Alex     holding [10, 16, 28, 29, 30, 31, 44, 47] plays the 10 
Round 2: Aydin    holding [15, 19, 21, 27, 32, 38, 48, 49] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 20 22 23 25 37 46 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [14, 17, 20, 22, 23, 25, 37, 46] plays the 20 
Aydin wins the round 

Round 3: Aydin    holding [15, 19, 21, 27, 32, 38, 49] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 22 23 25 37 46 0 0 0 

14------------------------------------------------------------------------

Round 3: Eugenius holding [14, 17, 22, 23, 25, 37, 46] plays the 14 
Round 3: Nicholas holding [13, 33, 34, 35, 40, 41, 43] plays the 34 
Round 3: Alex     holding [16, 28, 29, 30, 31, 44, 47] plays the 44 
Alex wins the round 

Round 4: Alex     holding [16, 28, 29, 30, 31, 47] plays the 47 
Round 4: Aydin    holding [15, 19, 21, 27, 38, 49] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 23 25 37 46 0 0 0 0 

17------------------------------------------------------------------------

Round 4: Eugenius holding [17, 22, 23, 25, 37, 46] plays the 17 
Round 4: Nicholas holding [13, 33, 35, 40, 41, 43] plays the 13 
Alex wins the round which contains 4 penalty points

Round 5: Alex     holding [16, 28, 29, 30, 31] plays the 16 
Round 5: Aydin    holding [15, 21, 27, 38, 49] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
22 23 25 37 46 0 0 0 0 0 

22------------------------------------------------------------------------

Round 5: Eugenius holding [22, 23, 25, 37, 46] plays the 22 
Round 5: Nicholas holding [33, 35, 40, 41, 43] plays the 40 
Nicholas wins the round 

Round 6: Nicholas holding [33, 35, 41, 43] plays the 35 
Round 6: Alex     holding [28, 29, 30, 31] plays the 30 
Round 6: Aydin    holding [15, 21, 27, 49] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 37 46 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 6: Eugenius holding [23, 25, 37, 46] plays the 25 
Nicholas wins the round 

Round 7: Nicholas holding [33, 41, 43] plays the 43 
Round 7: Alex     holding [28, 29, 31] plays the 31 
Round 7: Aydin    holding [15, 27, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
23 37 46 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius holding [23, 37, 46] plays the 23 
Nicholas wins the round which contains 3 penalty points

Round 8: Nicholas holding [33, 41] plays the 33 
Round 8: Alex     holding [28, 29] plays the 29 
Round 8: Aydin    holding [27, 49] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
37 46 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 8: Eugenius holding [37, 46] plays the 37 
Nicholas wins the round which contains 2 penalty points

Round 9: Nicholas holding [41] plays the 41 
Round 9: Alex     holding [28] plays the 28 
Round 9: Aydin    holding [49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
46 0 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 9: Eugenius holding [46] plays the 46 
Nicholas wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Aydin (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Alex (system)
#4 with 14 penalty points Nicholas (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11035842 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 13, 15, 17, 19, 22, 24, 31, 36, 42]
Table position 1: Kane    : [12, 18, 21, 29, 30, 34, 35, 39, 41, 45]
Table position 2: Matthew : [14, 20, 23, 25, 32, 37, 40, 46, 47, 48]
Table position 3: Peter   : [10, 16, 26, 27, 28, 33, 38, 43, 44, 49]

Discards:
Eugenius [31, 36, 42]
Kane     [18, 30, 34]
Matthew  [20, 23, 40]
Peter    [16, 27, 44]


Debug output from Eugenius
------------------------------------------------------------------------
11 13 15 16 17 19 22 24 27 44 

15------------------------------------------------------------------------

Round 0: Eugenius holding [11, 13, 15, 16, 17, 19, 22, 24, 27, 44] plays the 15 
Round 0: Kane     holding [12, 21, 29, 31, 35, 36, 39, 41, 42, 45] plays the 21 
Round 0: Matthew  holding [14, 18, 25, 30, 32, 34, 37, 46, 47, 48] plays the 25 
Round 0: Peter    holding [10, 20, 23, 26, 28, 33, 38, 40, 43, 49] plays the 20 
Matthew wins the round 

Round 1: Matthew  holding [14, 18, 30, 32, 34, 37, 46, 47, 48] plays the 46 
Round 1: Peter    holding [10, 23, 26, 28, 33, 38, 40, 43, 49] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 16 17 19 22 24 27 44 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 16, 17, 19, 22, 24, 27, 44] plays the 16 
Round 1: Kane     holding [12, 29, 31, 35, 36, 39, 41, 42, 45] plays the 12 
Matthew wins the round 

Round 2: Matthew  holding [14, 18, 30, 32, 34, 37, 47, 48] plays the 48 
Round 2: Peter    holding [10, 23, 26, 28, 33, 40, 43, 49] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 19 22 24 27 44 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 17, 19, 22, 24, 27, 44] plays the 22 
Round 2: Kane     holding [29, 31, 35, 36, 39, 41, 42, 45] plays the 39 
Matthew wins the round 

Round 3: Matthew  holding [14, 18, 30, 32, 34, 37, 47] plays the 14 
Round 3: Peter    holding [10, 23, 26, 33, 40, 43, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 19 24 27 44 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 17, 19, 24, 27, 44] plays the 24 
Round 3: Kane     holding [29, 31, 35, 36, 41, 42, 45] plays the 42 
Peter wins the round which contains 7 penalty points

Round 4: Peter    holding [10, 23, 26, 33, 40, 43] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 19 27 44 0 0 0 0 

44------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 17, 19, 27, 44] plays the 44 
Round 4: Kane     holding [29, 31, 35, 36, 41, 45] plays the 36 
Round 4: Matthew  holding [18, 30, 32, 34, 37, 47] plays the 32 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 19 27 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 17, 19, 27] plays the 27 
Round 5: Kane     holding [29, 31, 35, 41, 45] plays the 45 
Round 5: Matthew  holding [18, 30, 34, 37, 47] plays the 18 
Round 5: Peter    holding [10, 23, 33, 40, 43] plays the 33 
Kane wins the round 

Round 6: Kane     holding [29, 31, 35, 41] plays the 35 
Round 6: Matthew  holding [30, 34, 37, 47] plays the 30 
Round 6: Peter    holding [10, 23, 40, 43] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 19 0 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 6: Eugenius holding [11, 13, 17, 19] plays the 11 
Kane wins the round which contains 1 penalty points

Round 7: Kane     holding [29, 31, 41] plays the 41 
Round 7: Matthew  holding [34, 37, 47] plays the 37 
Round 7: Peter    holding [23, 40, 43] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 17, 19] plays the 13 
Kane wins the round which contains 4 penalty points

Round 8: Kane     holding [29, 31] plays the 29 
Round 8: Matthew  holding [34, 47] plays the 47 
Round 8: Peter    holding [40, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 0 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 8: Eugenius holding [17, 19] plays the 17 
Matthew wins the round which contains 4 penalty points

Round 9: Matthew  holding [34] plays the 34 
Round 9: Peter    holding [40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
19 0 0 0 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 9: Eugenius holding [19] plays the 19 
Round 9: Kane     holding [31] plays the 31 
Peter wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Matthew (system)
#3 with 5 penalty points Kane (system)
#4 with 9 penalty points Peter (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12175816 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Gal     : [10, 11, 12, 14, 17, 23, 26, 36, 45, 46]
Table position 1: Eugenius: [20, 21, 22, 25, 27, 28, 30, 32, 39, 47]
Table position 2: Dean    : [15, 16, 18, 24, 29, 34, 37, 40, 42, 49]
Table position 3: Michael : [13, 19, 31, 33, 35, 38, 41, 43, 44, 48]

Discards:
Gal      [14, 17, 46]
Eugenius [32, 39, 47]
Dean     [18, 37, 49]
Michael  [13, 41, 48]

Round 0: Gal      holding [10, 11, 12, 13, 23, 26, 36, 41, 45, 48] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 20 21 22 25 27 28 30 46 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 17, 20, 21, 22, 25, 27, 28, 30, 46] plays the 14 
Round 0: Dean     holding [15, 16, 24, 29, 32, 34, 39, 40, 42, 47] plays the 15 
Round 0: Michael  holding [18, 19, 31, 33, 35, 37, 38, 43, 44, 49] plays the 33 
Gal wins the round 

Round 1: Gal      holding [10, 11, 12, 13, 23, 26, 41, 45, 48] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
17 20 21 22 25 27 28 30 46 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [17, 20, 21, 22, 25, 27, 28, 30, 46] plays the 20 
Round 1: Dean     holding [16, 24, 29, 32, 34, 39, 40, 42, 47] plays the 24 
Round 1: Michael  holding [18, 19, 31, 35, 37, 38, 43, 44, 49] plays the 38 
Michael wins the round 

Round 2: Michael  holding [18, 19, 31, 35, 37, 43, 44, 49] plays the 49 
Round 2: Gal      holding [11, 12, 13, 23, 26, 41, 45, 48] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
17 21 22 25 27 28 30 46 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [17, 21, 22, 25, 27, 28, 30, 46] plays the 21 
Round 2: Dean     holding [16, 29, 32, 34, 39, 40, 42, 47] plays the 42 
Michael wins the round which contains 8 penalty points

Round 3: Michael  holding [18, 19, 31, 35, 37, 43, 44] plays the 19 
Round 3: Gal      holding [11, 12, 13, 23, 26, 45, 48] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 25 27 28 30 46 0 0 0 

17------------------------------------------------------------------------

Round 3: Eugenius holding [17, 22, 25, 27, 28, 30, 46] plays the 17 
Round 3: Dean     holding [16, 29, 32, 34, 39, 40, 47] plays the 47 
Dean wins the round which contains 4 penalty points

Round 4: Dean     holding [16, 29, 32, 34, 39, 40] plays the 40 
Round 4: Michael  holding [18, 31, 35, 37, 43, 44] plays the 35 
Round 4: Gal      holding [12, 13, 23, 26, 45, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 27 28 30 46 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius holding [22, 25, 27, 28, 30, 46] plays the 22 
Gal wins the round 

Round 5: Gal      holding [12, 13, 23, 26, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
25 27 28 30 46 0 0 0 0 0 

25------------------------------------------------------------------------

Round 5: Eugenius holding [25, 27, 28, 30, 46] plays the 25 
Round 5: Dean     holding [16, 29, 32, 34, 39] plays the 39 
Round 5: Michael  holding [18, 31, 37, 43, 44] plays the 18 
Gal wins the round 

Round 6: Gal      holding [12, 13, 23, 26] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
27 28 30 46 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 6: Eugenius holding [27, 28, 30, 46] plays the 27 
Round 6: Dean     holding [16, 29, 32, 34] plays the 29 
Round 6: Michael  holding [31, 37, 43, 44] plays the 43 
Michael wins the round which contains 3 penalty points

Round 7: Michael  holding [31, 37, 44] plays the 44 
Round 7: Gal      holding [12, 13, 26] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
28 30 46 0 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 7: Eugenius holding [28, 30, 46] plays the 28 
Round 7: Dean     holding [16, 32, 34] plays the 16 
Michael wins the round 

Round 8: Michael  holding [31, 37] plays the 37 
Round 8: Gal      holding [13, 26] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
30 46 0 0 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 8: Eugenius holding [30, 46] plays the 30 
Round 8: Dean     holding [32, 34] plays the 32 
Michael wins the round which contains 2 penalty points

Round 9: Michael  holding [31] plays the 31 
Round 9: Gal      holding [26] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
46 0 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 9: Eugenius holding [46] plays the 46 
Round 9: Dean     holding [34] plays the 34 
Michael wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Gal (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Dean (system)
#4 with 14 penalty points Michael (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10669350 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [13, 17, 23, 29, 31, 33, 40, 44, 47, 48]
Table position 1: Minh    : [15, 20, 21, 26, 27, 35, 37, 38, 45, 49]
Table position 2: Finbar  : [10, 11, 14, 19, 22, 24, 30, 32, 36, 41]
Table position 3: Jamal   : [12, 16, 18, 25, 28, 34, 39, 42, 43, 46]

Discards:
Eugenius [44, 47, 48]
Minh     [21, 26, 35]
Finbar   [11, 19, 24]
Jamal    [12, 34, 39]


Debug output from Eugenius
------------------------------------------------------------------------
12 13 17 23 29 31 33 34 39 40 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 13, 17, 23, 29, 31, 33, 34, 39, 40] plays the 12 
Round 0: Minh     holding [15, 20, 27, 37, 38, 44, 45, 47, 48, 49] plays the 38 
Round 0: Finbar   holding [10, 14, 21, 22, 26, 30, 32, 35, 36, 41] plays the 22 
Round 0: Jamal    holding [11, 16, 18, 19, 24, 25, 28, 42, 43, 46] plays the 18 
Minh wins the round 

Round 1: Minh     holding [15, 20, 27, 37, 44, 45, 47, 48, 49] plays the 48 
Round 1: Finbar   holding [10, 14, 21, 26, 30, 32, 35, 36, 41] plays the 32 
Round 1: Jamal    holding [11, 16, 19, 24, 25, 28, 42, 43, 46] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 29 31 33 34 39 40 0 

33------------------------------------------------------------------------

Round 1: Eugenius holding [13, 17, 23, 29, 31, 33, 34, 39, 40] plays the 33 
Minh wins the round 

Round 2: Minh     holding [15, 20, 27, 37, 44, 45, 47, 49] plays the 27 
Round 2: Finbar   holding [10, 14, 21, 26, 30, 35, 36, 41] plays the 21 
Round 2: Jamal    holding [11, 16, 19, 24, 25, 42, 43, 46] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 29 31 34 39 40 0 0 

39------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 23, 29, 31, 34, 39, 40] plays the 39 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 29 31 34 40 0 0 0 

34------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 23, 29, 31, 34, 40] plays the 34 
Round 3: Minh     holding [15, 20, 37, 44, 45, 47, 49] plays the 20 
Round 3: Finbar   holding [10, 14, 26, 30, 35, 36, 41] plays the 30 
Round 3: Jamal    holding [11, 16, 19, 25, 42, 43, 46] plays the 42 
Jamal wins the round which contains 7 penalty points

Round 4: Jamal    holding [11, 16, 19, 25, 43, 46] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 29 31 40 0 0 0 0 

40------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 23, 29, 31, 40] plays the 40 
Round 4: Minh     holding [15, 37, 44, 45, 47, 49] plays the 45 
Round 4: Finbar   holding [10, 14, 26, 35, 36, 41] plays the 35 
Minh wins the round 

Round 5: Minh     holding [15, 37, 44, 47, 49] plays the 49 
Round 5: Finbar   holding [10, 14, 26, 36, 41] plays the 14 
Round 5: Jamal    holding [11, 16, 19, 43, 46] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 29 31 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 23, 29, 31] plays the 13 
Minh wins the round which contains 2 penalty points

Round 6: Minh     holding [15, 37, 44, 47] plays the 15 
Round 6: Finbar   holding [10, 26, 36, 41] plays the 36 
Round 6: Jamal    holding [16, 19, 43, 46] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 29 31 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 6: Eugenius holding [17, 23, 29, 31] plays the 17 
Finbar wins the round which contains 1 penalty points

Round 7: Finbar   holding [10, 26, 41] plays the 10 
Round 7: Jamal    holding [19, 43, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 31 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 7: Eugenius holding [23, 29, 31] plays the 23 
Round 7: Minh     holding [37, 44, 47] plays the 44 
Jamal wins the round which contains 1 penalty points

Round 8: Jamal    holding [19, 43] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 31] plays the 29 
Round 8: Minh     holding [37, 47] plays the 47 
Round 8: Finbar   holding [26, 41] plays the 41 
Minh wins the round which contains 4 penalty points

Round 9: Minh     holding [37] plays the 37 
Round 9: Finbar   holding [26] plays the 26 
Round 9: Jamal    holding [43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Jamal wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Finbar (system)
#3 with 6 penalty points Minh (system)
#4 with 11 penalty points Jamal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5115468 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 15, 17, 24, 35, 36, 37, 40, 42, 49]
Table position 1: Gal     : [19, 20, 21, 23, 25, 31, 32, 38, 41, 46]
Table position 2: Heather : [11, 12, 22, 26, 30, 39, 43, 44, 45, 48]
Table position 3: Benjamin: [13, 14, 16, 18, 27, 28, 29, 33, 34, 47]

Discards:
Eugenius [40, 42, 49]
Gal      [20, 25, 38]
Heather  [26, 39, 43]
Benjamin [13, 16, 27]


Debug output from Eugenius
------------------------------------------------------------------------
10 13 15 16 17 24 27 35 36 37 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 13, 15, 16, 17, 24, 27, 35, 36, 37] plays the 10 
Round 0: Gal      holding [19, 21, 23, 31, 32, 40, 41, 42, 46, 49] plays the 40 
Round 0: Heather  holding [11, 12, 20, 22, 25, 30, 38, 44, 45, 48] plays the 20 
Round 0: Benjamin holding [14, 18, 26, 28, 29, 33, 34, 39, 43, 47] plays the 26 
Gal wins the round 

Round 1: Gal      holding [19, 21, 23, 31, 32, 41, 42, 46, 49] plays the 42 
Round 1: Heather  holding [11, 12, 22, 25, 30, 38, 44, 45, 48] plays the 48 
Round 1: Benjamin holding [14, 18, 28, 29, 33, 34, 39, 43, 47] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 16 17 24 27 35 36 37 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [13, 15, 16, 17, 24, 27, 35, 36, 37] plays the 15 
Heather wins the round which contains 7 penalty points

Round 2: Heather  holding [11, 12, 22, 25, 30, 38, 44, 45] plays the 12 
Round 2: Benjamin holding [14, 18, 28, 29, 33, 39, 43, 47] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 17 24 27 35 36 37 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [13, 16, 17, 24, 27, 35, 36, 37] plays the 16 
Round 2: Gal      holding [19, 21, 23, 31, 32, 41, 46, 49] plays the 46 
Gal wins the round 

Round 3: Gal      holding [19, 21, 23, 31, 32, 41, 49] plays the 49 
Round 3: Heather  holding [11, 22, 25, 30, 38, 44, 45] plays the 22 
Round 3: Benjamin holding [18, 28, 29, 33, 39, 43, 47] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 24 27 35 36 37 0 0 0 

35------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 24, 27, 35, 36, 37] plays the 35 
Gal wins the round 

Round 4: Gal      holding [19, 21, 23, 31, 32, 41] plays the 21 
Round 4: Heather  holding [11, 25, 30, 38, 44, 45] plays the 45 
Round 4: Benjamin holding [18, 29, 33, 39, 43, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 24 27 36 37 0 0 0 0 

24------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 24, 27, 36, 37] plays the 24 
Heather wins the round 

Round 5: Heather  holding [11, 25, 30, 38, 44] plays the 30 
Round 5: Benjamin holding [18, 29, 39, 43, 47] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 27 36 37 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 27, 36, 37] plays the 27 
Round 5: Gal      holding [19, 23, 31, 32, 41] plays the 32 
Benjamin wins the round 

Round 6: Benjamin holding [18, 29, 43, 47] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 36 37 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 6: Eugenius holding [13, 17, 36, 37] plays the 36 
Round 6: Gal      holding [19, 23, 31, 41] plays the 19 
Round 6: Heather  holding [11, 25, 38, 44] plays the 44 
Heather wins the round which contains 1 penalty points

Round 7: Heather  holding [11, 25, 38] plays the 11 
Round 7: Benjamin holding [29, 43, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 37 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 17, 37] plays the 13 
Round 7: Gal      holding [23, 31, 41] plays the 23 
Benjamin wins the round which contains 4 penalty points

Round 8: Benjamin holding [29, 43] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
17 37 0 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 8: Eugenius holding [17, 37] plays the 17 
Round 8: Gal      holding [31, 41] plays the 41 
Round 8: Heather  holding [25, 38] plays the 38 
Gal wins the round which contains 3 penalty points

Round 9: Gal      holding [31] plays the 31 
Round 9: Heather  holding [25] plays the 25 
Round 9: Benjamin holding [43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Benjamin wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 3 penalty points Gal (system)
#3 with 7 penalty points Benjamin (system)
#4 with 8 penalty points Heather (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3321759 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Minh    : [11, 13, 18, 24, 25, 27, 30, 35, 38, 44]
Table position 1: Eugenius: [12, 16, 20, 21, 28, 34, 42, 43, 45, 48]
Table position 2: Gal     : [10, 14, 15, 17, 22, 23, 26, 36, 39, 49]
Table position 3: Matthew : [19, 29, 31, 32, 33, 37, 40, 41, 46, 47]

Discards:
Minh     [13, 35, 44]
Eugenius [43, 45, 48]
Gal      [26, 36, 49]
Matthew  [31, 37, 40]

Round 0: Minh     holding [11, 18, 24, 25, 27, 30, 31, 37, 38, 40] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 16 20 21 28 34 35 42 44 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 13, 16, 20, 21, 28, 34, 35, 42, 44] plays the 12 
Round 0: Gal      holding [10, 14, 15, 17, 22, 23, 39, 43, 45, 48] plays the 10 
Round 0: Matthew  holding [19, 26, 29, 32, 33, 36, 41, 46, 47, 49] plays the 32 
Minh wins the round 

Round 1: Minh     holding [11, 18, 24, 25, 27, 30, 31, 37, 40] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 20 21 28 34 35 42 44 0 

21------------------------------------------------------------------------

Round 1: Eugenius holding [13, 16, 20, 21, 28, 34, 35, 42, 44] plays the 21 
Round 1: Gal      holding [14, 15, 17, 22, 23, 39, 43, 45, 48] plays the 39 
Round 1: Matthew  holding [19, 26, 29, 33, 36, 41, 46, 47, 49] plays the 36 
Gal wins the round 

Round 2: Gal      holding [14, 15, 17, 22, 23, 43, 45, 48] plays the 45 
Round 2: Matthew  holding [19, 26, 29, 33, 41, 46, 47, 49] plays the 33 
Round 2: Minh     holding [11, 18, 24, 25, 30, 31, 37, 40] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 20 28 34 35 42 44 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [13, 16, 20, 28, 34, 35, 42, 44] plays the 20 
Gal wins the round 

Round 3: Gal      holding [14, 15, 17, 22, 23, 43, 48] plays the 48 
Round 3: Matthew  holding [19, 26, 29, 41, 46, 47, 49] plays the 46 
Round 3: Minh     holding [11, 18, 24, 25, 31, 37, 40] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 28 34 35 42 44 0 0 0 

16------------------------------------------------------------------------

Round 3: Eugenius holding [13, 16, 28, 34, 35, 42, 44] plays the 16 
Gal wins the round 

Round 4: Gal      holding [14, 15, 17, 22, 23, 43] plays the 14 
Round 4: Matthew  holding [19, 26, 29, 41, 47, 49] plays the 26 
Round 4: Minh     holding [11, 18, 25, 31, 37, 40] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
13 28 34 35 42 44 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [13, 28, 34, 35, 42, 44] plays the 28 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 34 35 42 44 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [13, 34, 35, 42, 44] plays the 34 
Round 5: Gal      holding [15, 17, 22, 23, 43] plays the 22 
Round 5: Matthew  holding [19, 29, 41, 47, 49] plays the 47 
Round 5: Minh     holding [11, 25, 31, 37, 40] plays the 40 
Minh wins the round which contains 1 penalty points

Round 6: Minh     holding [11, 25, 31, 37] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
13 35 42 44 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 6: Eugenius holding [13, 35, 42, 44] plays the 35 
Round 6: Gal      holding [15, 17, 23, 43] plays the 15 
Round 6: Matthew  holding [19, 29, 41, 49] plays the 49 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 42 44 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 42, 44] plays the 13 
Round 7: Gal      holding [17, 23, 43] plays the 17 
Round 7: Matthew  holding [19, 29, 41] plays the 41 
Round 7: Minh     holding [11, 31, 37] plays the 37 
Matthew wins the round which contains 4 penalty points

Round 8: Matthew  holding [19, 29] plays the 29 
Round 8: Minh     holding [11, 31] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
42 44 0 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 8: Eugenius holding [42, 44] plays the 42 
Round 8: Gal      holding [23, 43] plays the 43 
Gal wins the round which contains 10 penalty points

Round 9: Gal      holding [23] plays the 23 
Round 9: Matthew  holding [19] plays the 19 
Round 9: Minh     holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
44 0 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 9: Eugenius holding [44] plays the 44 
Minh wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Minh (system)
#2 with 4 penalty points Matthew (system)
#4 with 10 penalty points Gal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3382677 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eleni   : [14, 25, 27, 28, 29, 35, 36, 37, 44, 47]
Table position 1: David   : [12, 19, 23, 24, 30, 33, 38, 39, 40, 43]
Table position 2: Eugenius: [10, 13, 15, 17, 21, 22, 31, 32, 41, 45]
Table position 3: Zachary : [11, 16, 18, 20, 26, 34, 42, 46, 48, 49]

Discards:
Eleni    [14, 36, 37]
David    [24, 40, 43]
Eugenius [32, 41, 45]
Zachary  [18, 46, 48]

Round 0: Eleni    holding [18, 25, 27, 28, 29, 35, 44, 46, 47, 48] plays the 48 
Round 0: David    holding [12, 14, 19, 23, 30, 33, 36, 37, 38, 39] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
10 13 15 17 21 22 24 31 40 43 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 13, 15, 17, 21, 22, 24, 31, 40, 43] plays the 10 
Round 0: Zachary  holding [11, 16, 20, 26, 32, 34, 41, 42, 45, 49] plays the 16 
Eleni wins the round 

Round 1: Eleni    holding [18, 25, 27, 28, 29, 35, 44, 46, 47] plays the 46 
Round 1: David    holding [12, 14, 19, 23, 30, 33, 37, 38, 39] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 17 21 22 24 31 40 43 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [13, 15, 17, 21, 22, 24, 31, 40, 43] plays the 22 
Round 1: Zachary  holding [11, 20, 26, 32, 34, 41, 42, 45, 49] plays the 26 
Eleni wins the round 

Round 2: Eleni    holding [18, 25, 27, 28, 29, 35, 44, 47] plays the 27 
Round 2: David    holding [12, 14, 19, 23, 33, 37, 38, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 17 21 24 31 40 43 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius holding [13, 15, 17, 21, 24, 31, 40, 43] plays the 15 
Round 2: Zachary  holding [11, 20, 32, 34, 41, 42, 45, 49] plays the 45 
Zachary wins the round 

Round 3: Zachary  holding [11, 20, 32, 34, 41, 42, 49] plays the 32 
Round 3: Eleni    holding [18, 25, 28, 29, 35, 44, 47] plays the 44 
Round 3: David    holding [12, 14, 19, 23, 33, 37, 38] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 21 24 31 40 43 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 21, 24, 31, 40, 43] plays the 24 
Eleni wins the round 

Round 4: Eleni    holding [18, 25, 28, 29, 35, 47] plays the 25 
Round 4: David    holding [14, 19, 23, 33, 37, 38] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 21 31 40 43 0 0 0 0 

40------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 21, 31, 40, 43] plays the 40 
Round 4: Zachary  holding [11, 20, 34, 41, 42, 49] plays the 20 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 17 21 31 43 0 0 0 0 0 

21------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 21, 31, 43] plays the 21 
Round 5: Zachary  holding [11, 34, 41, 42, 49] plays the 49 
Round 5: Eleni    holding [18, 28, 29, 35, 47] plays the 35 
Round 5: David    holding [19, 23, 33, 37, 38] plays the 33 
Zachary wins the round 

Round 6: Zachary  holding [11, 34, 41, 42] plays the 34 
Round 6: Eleni    holding [18, 28, 29, 47] plays the 28 
Round 6: David    holding [19, 23, 37, 38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 31 43 0 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 6: Eugenius holding [13, 17, 31, 43] plays the 13 
David wins the round which contains 1 penalty points

Round 7: David    holding [19, 23, 37] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 43 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 31, 43] plays the 17 
Round 7: Zachary  holding [11, 41, 42] plays the 11 
Round 7: Eleni    holding [18, 29, 47] plays the 47 
Eleni wins the round which contains 4 penalty points

Round 8: Eleni    holding [18, 29] plays the 29 
Round 8: David    holding [23, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
31 43 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 43] plays the 31 
Round 8: Zachary  holding [41, 42] plays the 41 
Zachary wins the round which contains 4 penalty points

Round 9: Zachary  holding [42] plays the 42 
Round 9: Eleni    holding [18] plays the 18 
Round 9: David    holding [23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43 chah------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Zachary wins the round which contains 9 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points David (system)
#3 with 4 penalty points Eleni (system)
#4 with 13 penalty points Zachary (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 3966327 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [12, 14, 26, 27, 33, 34, 38, 40, 44, 47]
Table position 1: Reede   : [10, 13, 16, 21, 24, 25, 35, 39, 46, 49]
Table position 2: Michael : [11, 15, 18, 20, 22, 29, 42, 43, 45, 48]
Table position 3: Matthew : [17, 19, 23, 28, 30, 31, 32, 36, 37, 41]

Discards:
Eugenius [40, 44, 47]
Reede    [10, 21, 24]
Michael  [18, 20, 48]
Matthew  [30, 32, 37]


Debug output from Eugenius
------------------------------------------------------------------------
12 14 26 27 30 32 33 34 37 38 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 14, 26, 27, 30, 32, 33, 34, 37, 38] plays the 12 
Round 0: Reede    holding [13, 16, 25, 35, 39, 40, 44, 46, 47, 49] plays the 46 
Round 0: Michael  holding [10, 11, 15, 21, 22, 24, 29, 42, 43, 45] plays the 10 
Round 0: Matthew  holding [17, 18, 19, 20, 23, 28, 31, 36, 41, 48] plays the 36 
Reede wins the round 

Round 1: Reede    holding [13, 16, 25, 35, 39, 40, 44, 47, 49] plays the 25 
Round 1: Michael  holding [11, 15, 21, 22, 24, 29, 42, 43, 45] plays the 15 
Round 1: Matthew  holding [17, 18, 19, 20, 23, 28, 31, 41, 48] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
14 26 27 30 32 33 34 37 38 0 

30------------------------------------------------------------------------

Round 1: Eugenius holding [14, 26, 27, 30, 32, 33, 34, 37, 38] plays the 30 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
14 26 27 32 33 34 37 38 0 0 

14------------------------------------------------------------------------

Round 2: Eugenius holding [14, 26, 27, 32, 33, 34, 37, 38] plays the 14 
Round 2: Reede    holding [13, 16, 35, 39, 40, 44, 47, 49] plays the 35 
Round 2: Michael  holding [11, 21, 22, 24, 29, 42, 43, 45] plays the 21 
Round 2: Matthew  holding [17, 18, 19, 23, 28, 31, 41, 48] plays the 28 
Reede wins the round 

Round 3: Reede    holding [13, 16, 39, 40, 44, 47, 49] plays the 44 
Round 3: Michael  holding [11, 22, 24, 29, 42, 43, 45] plays the 22 
Round 3: Matthew  holding [17, 18, 19, 23, 31, 41, 48] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
26 27 32 33 34 37 38 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [26, 27, 32, 33, 34, 37, 38] plays the 26 
Reede wins the round 

Round 4: Reede    holding [13, 16, 39, 40, 47, 49] plays the 40 
Round 4: Michael  holding [11, 24, 29, 42, 43, 45] plays the 24 
Round 4: Matthew  holding [17, 19, 23, 31, 41, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
27 32 33 34 37 38 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [27, 32, 33, 34, 37, 38] plays the 32 
Matthew wins the round 

Round 5: Matthew  holding [17, 19, 23, 31, 41] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
27 33 34 37 38 0 0 0 0 0 

37------------------------------------------------------------------------

Round 5: Eugenius holding [27, 33, 34, 37, 38] plays the 37 
Round 5: Reede    holding [13, 16, 39, 47, 49] plays the 13 
Round 5: Michael  holding [11, 29, 42, 43, 45] plays the 29 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
27 33 34 38 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 6: Eugenius holding [27, 33, 34, 38] plays the 27 
Round 6: Reede    holding [16, 39, 47, 49] plays the 39 
Round 6: Michael  holding [11, 42, 43, 45] plays the 45 
Round 6: Matthew  holding [19, 23, 31, 41] plays the 23 
Michael wins the round which contains 1 penalty points

Round 7: Michael  holding [11, 42, 43] plays the 43 
Round 7: Matthew  holding [19, 31, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
33 34 38 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 7: Eugenius holding [33, 34, 38] plays the 33 
Round 7: Reede    holding [16, 47, 49] plays the 47 
Reede wins the round which contains 3 penalty points

Round 8: Reede    holding [16, 49] plays the 49 
Round 8: Michael  holding [11, 42] plays the 42 
Round 8: Matthew  holding [19, 31] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
34 38 0 0 0 0 0 0 0 0 

34 chah------------------------------------------------------------------------

Round 8: Eugenius holding [34, 38] plays the 34 
Reede wins the round which contains 8 penalty points

Round 9: Reede    holding [16] plays the 16 
Round 9: Michael  holding [11] plays the 11 
Round 9: Matthew  holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Matthew (system)
#2 with 1 penalty points Michael (system)
#3 with 6 penalty points Eugenius (dodo.c)
#4 with 11 penalty points Reede (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11858389 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Benjamin: [15, 16, 17, 21, 22, 24, 34, 43, 46, 47]
Table position 1: Eugenius: [13, 20, 27, 30, 31, 38, 39, 40, 41, 42]
Table position 2: Connor  : [12, 14, 18, 23, 25, 28, 37, 44, 45, 49]
Table position 3: Eleni   : [10, 11, 19, 26, 29, 32, 33, 35, 36, 48]

Discards:
Benjamin [17, 34, 47]
Eugenius [40, 41, 42]
Connor   [14, 23, 28]
Eleni    [11, 29, 35]

Round 0: Benjamin holding [11, 15, 16, 21, 22, 24, 29, 35, 43, 46] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 20 27 30 31 34 38 39 47 

20------------------------------------------------------------------------

Round 0: Eugenius holding [13, 17, 20, 27, 30, 31, 34, 38, 39, 47] plays the 20 
Round 0: Connor   holding [12, 18, 25, 37, 40, 41, 42, 44, 45, 49] plays the 42 
Round 0: Eleni    holding [10, 14, 19, 23, 26, 28, 32, 33, 36, 48] plays the 33 
Connor wins the round which contains 7 penalty points

Round 1: Connor   holding [12, 18, 25, 37, 40, 41, 44, 45, 49] plays the 45 
Round 1: Eleni    holding [10, 14, 19, 23, 26, 28, 32, 36, 48] plays the 36 
Round 1: Benjamin holding [11, 15, 16, 21, 22, 29, 35, 43, 46] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 27 30 31 34 38 39 47 0 

27------------------------------------------------------------------------

Round 1: Eugenius holding [13, 17, 27, 30, 31, 34, 38, 39, 47] plays the 27 
Connor wins the round 

Round 2: Connor   holding [12, 18, 25, 37, 40, 41, 44, 49] plays the 49 
Round 2: Eleni    holding [10, 14, 19, 23, 26, 28, 32, 48] plays the 28 
Round 2: Benjamin holding [11, 15, 16, 21, 22, 29, 43, 46] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 30 31 34 38 39 47 0 0 

13 chah------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 30, 31, 34, 38, 39, 47] plays the 13 
Connor wins the round which contains 1 penalty points

Round 3: Connor   holding [12, 18, 25, 37, 40, 41, 44] plays the 41 
Round 3: Eleni    holding [10, 14, 19, 23, 26, 32, 48] plays the 19 
Round 3: Benjamin holding [11, 15, 16, 22, 29, 43, 46] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
17 30 31 34 38 39 47 0 0 0 

17------------------------------------------------------------------------

Round 3: Eugenius holding [17, 30, 31, 34, 38, 39, 47] plays the 17 
Connor wins the round which contains 4 penalty points

Round 4: Connor   holding [12, 18, 25, 37, 40, 44] plays the 37 
Round 4: Eleni    holding [10, 14, 23, 26, 32, 48] plays the 23 
Round 4: Benjamin holding [15, 16, 22, 29, 43, 46] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
30 31 34 38 39 47 0 0 0 0 

31------------------------------------------------------------------------

Round 4: Eugenius holding [30, 31, 34, 38, 39, 47] plays the 31 
Connor wins the round which contains 4 penalty points

Round 5: Connor   holding [12, 18, 25, 40, 44] plays the 40 
Round 5: Eleni    holding [10, 14, 26, 32, 48] plays the 14 
Round 5: Benjamin holding [15, 16, 22, 43, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
30 34 38 39 47 0 0 0 0 0 

30------------------------------------------------------------------------

Round 5: Eugenius holding [30, 34, 38, 39, 47] plays the 30 
Benjamin wins the round 

Round 6: Benjamin holding [15, 16, 22, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
34 38 39 47 0 0 0 0 0 0 

47------------------------------------------------------------------------

Round 6: Eugenius holding [34, 38, 39, 47] plays the 47 
Round 6: Connor   holding [12, 18, 25, 44] plays the 25 
Round 6: Eleni    holding [10, 26, 32, 48] plays the 10 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
34 38 39 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 7: Eugenius holding [34, 38, 39] plays the 34 
Round 7: Connor   holding [12, 18, 44] plays the 44 
Round 7: Eleni    holding [26, 32, 48] plays the 32 
Round 7: Benjamin holding [15, 16, 22] plays the 16 
Connor wins the round 

Round 8: Connor   holding [12, 18] plays the 18 
Round 8: Eleni    holding [26, 48] plays the 26 
Round 8: Benjamin holding [15, 22] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
38 39 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [38, 39] plays the 38 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Round 9: Connor   holding [12] plays the 12 
Round 9: Eleni    holding [48] plays the 48 
Round 9: Benjamin holding [22] plays the 22 
Eleni wins the round 


Finishing Positions

#1 with 0 penalty points Benjamin (system)
#1 with 0 penalty points Eleni (system)
#3 with 2 penalty points Eugenius (dodo.c)
#4 with 16 penalty points Connor (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13267637 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Dean    : [10, 15, 18, 22, 26, 35, 40, 42, 46, 48]
Table position 1: Eugenius: [19, 21, 27, 29, 30, 31, 37, 38, 44, 45]
Table position 2: Minh    : [12, 13, 14, 17, 24, 25, 28, 33, 39, 41]
Table position 3: Braedon : [11, 16, 20, 23, 32, 34, 36, 43, 47, 49]

Discards:
Dean     [35, 42, 48]
Eugenius [38, 44, 45]
Minh     [13, 14, 39]
Braedon  [16, 36, 49]

Round 0: Dean     holding [10, 15, 16, 18, 22, 26, 36, 40, 46, 49] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
19 21 27 29 30 31 35 37 42 48 

30------------------------------------------------------------------------

Round 0: Eugenius holding [19, 21, 27, 29, 30, 31, 35, 37, 42, 48] plays the 30 
Round 0: Minh     holding [12, 17, 24, 25, 28, 33, 38, 41, 44, 45] plays the 44 
Round 0: Braedon  holding [11, 13, 14, 20, 23, 32, 34, 39, 43, 47] plays the 34 
Minh wins the round 

Round 1: Minh     holding [12, 17, 24, 25, 28, 33, 38, 41, 45] plays the 28 
Round 1: Braedon  holding [11, 13, 14, 20, 23, 32, 39, 43, 47] plays the 14 
Round 1: Dean     holding [10, 15, 16, 18, 22, 36, 40, 46, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
19 21 27 29 31 35 37 42 48 0 

21------------------------------------------------------------------------

Round 1: Eugenius holding [19, 21, 27, 29, 31, 35, 37, 42, 48] plays the 21 
Dean wins the round 

Round 2: Dean     holding [10, 15, 16, 18, 22, 36, 40, 49] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
19 27 29 31 35 37 42 48 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [19, 27, 29, 31, 35, 37, 42, 48] plays the 27 
Round 2: Minh     holding [12, 17, 24, 25, 33, 38, 41, 45] plays the 33 
Round 2: Braedon  holding [11, 13, 20, 23, 32, 39, 43, 47] plays the 39 
Braedon wins the round 

Round 3: Braedon  holding [11, 13, 20, 23, 32, 43, 47] plays the 32 
Round 3: Dean     holding [10, 16, 18, 22, 36, 40, 49] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 31 35 37 42 48 0 0 0 

42------------------------------------------------------------------------

Round 3: Eugenius holding [19, 29, 31, 35, 37, 42, 48] plays the 42 
Round 3: Minh     holding [12, 17, 24, 25, 38, 41, 45] plays the 38 
Eugenius wins the round which contains 7 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
19 29 31 35 37 48 0 0 0 0 

35------------------------------------------------------------------------

Round 4: Eugenius holding [19, 29, 31, 35, 37, 48] plays the 35 
Round 4: Minh     holding [12, 17, 24, 25, 41, 45] plays the 45 
Round 4: Braedon  holding [11, 13, 20, 23, 43, 47] plays the 20 
Round 4: Dean     holding [10, 16, 18, 22, 40, 49] plays the 40 
Minh wins the round 

Round 5: Minh     holding [12, 17, 24, 25, 41] plays the 12 
Round 5: Braedon  holding [11, 13, 23, 43, 47] plays the 11 
Round 5: Dean     holding [10, 16, 18, 22, 49] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 31 37 48 0 0 0 0 0 

48------------------------------------------------------------------------

Round 5: Eugenius holding [19, 29, 31, 37, 48] plays the 48 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
19 29 31 37 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 29, 31, 37] plays the 19 
Round 6: Minh     holding [17, 24, 25, 41] plays the 17 
Round 6: Braedon  holding [13, 23, 43, 47] plays the 43 
Round 6: Dean     holding [10, 16, 22, 49] plays the 49 
Braedon wins the round which contains 3 penalty points

Round 7: Braedon  holding [13, 23, 47] plays the 13 
Round 7: Dean     holding [10, 16, 22] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 37 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 37] plays the 29 
Round 7: Minh     holding [24, 25, 41] plays the 41 
Minh wins the round which contains 3 penalty points

Round 8: Minh     holding [24, 25] plays the 24 
Round 8: Braedon  holding [23, 47] plays the 47 
Round 8: Dean     holding [10, 22] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius holding [31, 37] plays the 31 
Minh wins the round which contains 2 penalty points

Round 9: Minh     holding [25] plays the 25 
Round 9: Braedon  holding [23] plays the 23 
Round 9: Dean     holding [10] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Minh wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Dean (system)
#2 with 3 penalty points Braedon (system)
#3 with 7 penalty points Minh (system)
#4 with 8 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5690929 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [20, 29, 30, 31, 32, 36, 38, 44, 46, 47]
Table position 1: George  : [10, 14, 15, 18, 19, 21, 23, 28, 48, 49]
Table position 2: Stephen : [11, 17, 22, 27, 37, 39, 40, 41, 42, 45]
Table position 3: David   : [12, 13, 16, 24, 25, 26, 33, 34, 35, 43]

Discards:
Eugenius [44, 46, 47]
George   [15, 21, 23]
Stephen  [11, 27, 39]
David    [13, 35, 43]


Debug output from Eugenius
------------------------------------------------------------------------
13 20 29 30 31 32 35 36 38 43 

20------------------------------------------------------------------------

Round 0: Eugenius holding [13, 20, 29, 30, 31, 32, 35, 36, 38, 43] plays the 20 
Round 0: George   holding [10, 14, 18, 19, 28, 44, 46, 47, 48, 49] plays the 46 
Round 0: Stephen  holding [15, 17, 21, 22, 23, 37, 40, 41, 42, 45] plays the 22 
Round 0: David    holding [11, 12, 16, 24, 25, 26, 27, 33, 34, 39] plays the 12 
George wins the round 

Round 1: George   holding [10, 14, 18, 19, 28, 44, 47, 48, 49] plays the 28 
Round 1: Stephen  holding [15, 17, 21, 23, 37, 40, 41, 42, 45] plays the 42 
Round 1: David    holding [11, 16, 24, 25, 26, 27, 33, 34, 39] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 30 31 32 35 36 38 43 0 

30------------------------------------------------------------------------

Round 1: Eugenius holding [13, 29, 30, 31, 32, 35, 36, 38, 43] plays the 30 
Stephen wins the round which contains 7 penalty points

Round 2: Stephen  holding [15, 17, 21, 23, 37, 40, 41, 45] plays the 45 
Round 2: David    holding [11, 16, 24, 25, 27, 33, 34, 39] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 31 32 35 36 38 43 0 0 

35------------------------------------------------------------------------

Round 2: Eugenius holding [13, 29, 31, 32, 35, 36, 38, 43] plays the 35 
Round 2: George   holding [10, 14, 18, 19, 44, 47, 48, 49] plays the 10 
Stephen wins the round 

Round 3: Stephen  holding [15, 17, 21, 23, 37, 40, 41] plays the 21 
Round 3: David    holding [11, 16, 25, 27, 33, 34, 39] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 31 32 36 38 43 0 0 0 

36------------------------------------------------------------------------

Round 3: Eugenius holding [13, 29, 31, 32, 36, 38, 43] plays the 36 
Round 3: George   holding [14, 18, 19, 44, 47, 48, 49] plays the 14 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 29 31 32 38 43 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [13, 29, 31, 32, 38, 43] plays the 32 
Round 4: George   holding [18, 19, 44, 47, 48, 49] plays the 48 
Round 4: Stephen  holding [15, 17, 23, 37, 40, 41] plays the 40 
Round 4: David    holding [11, 16, 25, 33, 34, 39] plays the 16 
George wins the round 

Round 5: George   holding [18, 19, 44, 47, 49] plays the 49 
Round 5: Stephen  holding [15, 17, 23, 37, 41] plays the 15 
Round 5: David    holding [11, 25, 33, 34, 39] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 31 38 43 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 5: Eugenius holding [13, 29, 31, 38, 43] plays the 13 
George wins the round which contains 1 penalty points

Round 6: George   holding [18, 19, 44, 47] plays the 18 
Round 6: Stephen  holding [17, 23, 37, 41] plays the 41 
Round 6: David    holding [11, 33, 34, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 38 43 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 6: Eugenius holding [29, 31, 38, 43] plays the 38 
David wins the round which contains 1 penalty points

Round 7: David    holding [11, 33, 34] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 43 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 43] plays the 29 
Round 7: George   holding [19, 44, 47] plays the 19 
Round 7: Stephen  holding [17, 23, 37] plays the 23 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
31 43 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 43] plays the 31 
Round 8: George   holding [44, 47] plays the 47 
Round 8: Stephen  holding [17, 37] plays the 37 
Round 8: David    holding [33, 34] plays the 34 
George wins the round which contains 3 penalty points

Round 9: George   holding [44] plays the 44 
Round 9: Stephen  holding [17] plays the 17 
Round 9: David    holding [33] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43 chah------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
George wins the round which contains 2 penalty points


Finishing Positions

#1 with 1 penalty points David (system)
#2 with 4 penalty points Eugenius (dodo.c)
#3 with 6 penalty points George (system)
#4 with 7 penalty points Stephen (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2303229 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Dylan   : [10, 12, 15, 22, 26, 27, 29, 32, 44, 49]
Table position 1: Eugenius: [11, 16, 19, 23, 28, 31, 33, 36, 41, 45]
Table position 2: Emily   : [18, 20, 30, 34, 35, 38, 39, 42, 47, 48]
Table position 3: Michael : [13, 14, 17, 21, 24, 25, 37, 40, 43, 46]

Discards:
Dylan    [29, 44, 49]
Eugenius [36, 41, 45]
Emily    [18, 38, 47]
Michael  [13, 17, 46]

Round 0: Dylan    holding [10, 12, 13, 15, 17, 22, 26, 27, 32, 46] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 19 23 28 29 31 33 44 49 

16------------------------------------------------------------------------

Round 0: Eugenius holding [11, 16, 19, 23, 28, 29, 31, 33, 44, 49] plays the 16 
Round 0: Emily    holding [20, 30, 34, 35, 36, 39, 41, 42, 45, 48] plays the 20 
Round 0: Michael  holding [14, 18, 21, 24, 25, 37, 38, 40, 43, 47] plays the 38 
Michael wins the round 

Round 1: Michael  holding [14, 18, 21, 24, 25, 37, 40, 43, 47] plays the 21 
Round 1: Dylan    holding [10, 12, 13, 15, 17, 22, 27, 32, 46] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 28 29 31 33 44 49 0 

28------------------------------------------------------------------------

Round 1: Eugenius holding [11, 19, 23, 28, 29, 31, 33, 44, 49] plays the 28 
Round 1: Emily    holding [30, 34, 35, 36, 39, 41, 42, 45, 48] plays the 35 
Emily wins the round 

Round 2: Emily    holding [30, 34, 36, 39, 41, 42, 45, 48] plays the 45 
Round 2: Michael  holding [14, 18, 24, 25, 37, 40, 43, 47] plays the 24 
Round 2: Dylan    holding [10, 12, 13, 17, 22, 27, 32, 46] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 29 31 33 44 49 0 0 

33------------------------------------------------------------------------

Round 2: Eugenius holding [11, 19, 23, 29, 31, 33, 44, 49] plays the 33 
Emily wins the round 

Round 3: Emily    holding [30, 34, 36, 39, 41, 42, 48] plays the 48 
Round 3: Michael  holding [14, 18, 25, 37, 40, 43, 47] plays the 40 
Round 3: Dylan    holding [10, 12, 13, 17, 22, 32, 46] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 29 31 44 49 0 0 0 

44------------------------------------------------------------------------

Round 3: Eugenius holding [11, 19, 23, 29, 31, 44, 49] plays the 44 
Emily wins the round 

Round 4: Emily    holding [30, 34, 36, 39, 41, 42] plays the 39 
Round 4: Michael  holding [14, 18, 25, 37, 43, 47] plays the 18 
Round 4: Dylan    holding [10, 12, 13, 17, 32, 46] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
11 19 23 29 31 49 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 4: Eugenius holding [11, 19, 23, 29, 31, 49] plays the 11 
Emily wins the round which contains 1 penalty points

Round 5: Emily    holding [30, 34, 36, 41, 42] plays the 41 
Round 5: Michael  holding [14, 25, 37, 43, 47] plays the 47 
Round 5: Dylan    holding [10, 13, 17, 32, 46] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 29 31 49 0 0 0 0 0 

19------------------------------------------------------------------------

Round 5: Eugenius holding [19, 23, 29, 31, 49] plays the 19 
Michael wins the round which contains 4 penalty points

Round 6: Michael  holding [14, 25, 37, 43] plays the 37 
Round 6: Dylan    holding [10, 13, 32, 46] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 31 49 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 29, 31, 49] plays the 23 
Round 6: Emily    holding [30, 34, 36, 42] plays the 34 
Michael wins the round which contains 3 penalty points

Round 7: Michael  holding [14, 25, 43] plays the 25 
Round 7: Dylan    holding [10, 32, 46] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 49 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 49] plays the 29 
Round 7: Emily    holding [30, 36, 42] plays the 30 
Emily wins the round which contains 1 penalty points

Round 8: Emily    holding [36, 42] plays the 36 
Round 8: Michael  holding [14, 43] plays the 14 
Round 8: Dylan    holding [32, 46] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
31 49 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius holding [31, 49] plays the 31 
Emily wins the round which contains 1 penalty points

Round 9: Emily    holding [42] plays the 42 
Round 9: Michael  holding [43] plays the 43 
Round 9: Dylan    holding [46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
49 0 0 0 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 9: Eugenius holding [49] plays the 49 
Eugenius wins the round which contains 8 penalty points


Finishing Positions

#1 with 0 penalty points Dylan (system)
#2 with 3 penalty points Emily (system)
#3 with 7 penalty points Michael (system)
#4 with 8 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1616896 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Jamal   : [10, 11, 12, 16, 23, 24, 26, 34, 44, 47]
Table position 1: Dean    : [17, 21, 25, 30, 33, 35, 38, 39, 41, 48]
Table position 2: Eugenius: [13, 14, 15, 18, 19, 20, 22, 31, 42, 43]
Table position 3: George  : [27, 28, 29, 32, 36, 37, 40, 45, 46, 49]

Discards:
Jamal    [11, 16, 24]
Dean     [35, 38, 48]
Eugenius [31, 42, 43]
George   [32, 46, 49]

Round 0: Jamal    holding [10, 12, 23, 26, 32, 34, 44, 46, 47, 49] plays the 49 
Round 0: Dean     holding [11, 16, 17, 21, 24, 25, 30, 33, 39, 41] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
13 14 15 18 19 20 22 35 38 48 

14------------------------------------------------------------------------

Round 0: Eugenius holding [13, 14, 15, 18, 19, 20, 22, 35, 38, 48] plays the 14 
Round 0: George   holding [27, 28, 29, 31, 36, 37, 40, 42, 43, 45] plays the 28 
Jamal wins the round 

Round 1: Jamal    holding [10, 12, 23, 26, 32, 34, 44, 46, 47] plays the 10 
Round 1: Dean     holding [11, 16, 17, 24, 25, 30, 33, 39, 41] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 18 19 20 22 35 38 48 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [13, 15, 18, 19, 20, 22, 35, 38, 48] plays the 15 
Round 1: George   holding [27, 29, 31, 36, 37, 40, 42, 43, 45] plays the 40 
George wins the round 

Round 2: George   holding [27, 29, 31, 36, 37, 42, 43, 45] plays the 36 
Round 2: Jamal    holding [12, 23, 26, 32, 34, 44, 46, 47] plays the 34 
Round 2: Dean     holding [11, 16, 17, 25, 30, 33, 39, 41] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
13 18 19 20 22 35 38 48 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [13, 18, 19, 20, 22, 35, 38, 48] plays the 18 
George wins the round 

Round 3: George   holding [27, 29, 31, 37, 42, 43, 45] plays the 45 
Round 3: Jamal    holding [12, 23, 26, 32, 44, 46, 47] plays the 12 
Round 3: Dean     holding [11, 17, 25, 30, 33, 39, 41] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 20 22 35 38 48 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [13, 19, 20, 22, 35, 38, 48] plays the 20 
George wins the round 

Round 4: George   holding [27, 29, 31, 37, 42, 43] plays the 27 
Round 4: Jamal    holding [23, 26, 32, 44, 46, 47] plays the 47 
Round 4: Dean     holding [11, 17, 25, 30, 39, 41] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 22 35 38 48 0 0 0 0 

48------------------------------------------------------------------------

Round 4: Eugenius holding [13, 19, 22, 35, 38, 48] plays the 48 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 19 22 35 38 0 0 0 0 0 

13------------------------------------------------------------------------

Round 5: Eugenius holding [13, 19, 22, 35, 38] plays the 13 
Round 5: George   holding [29, 31, 37, 42, 43] plays the 31 
Round 5: Jamal    holding [23, 26, 32, 44, 46] plays the 23 
Round 5: Dean     holding [11, 17, 25, 39, 41] plays the 41 
Dean wins the round which contains 4 penalty points

Round 6: Dean     holding [11, 17, 25, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 35 38 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 6: Eugenius holding [19, 22, 35, 38] plays the 19 
Round 6: George   holding [29, 37, 42, 43] plays the 42 
Round 6: Jamal    holding [26, 32, 44, 46] plays the 26 
George wins the round which contains 8 penalty points

Round 7: George   holding [29, 37, 43] plays the 29 
Round 7: Jamal    holding [32, 44, 46] plays the 32 
Round 7: Dean     holding [11, 17, 25] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
22 35 38 0 0 0 0 0 0 0 

22------------------------------------------------------------------------

Round 7: Eugenius holding [22, 35, 38] plays the 22 
George wins the round which contains 2 penalty points

Round 8: George   holding [37, 43] plays the 43 
Round 8: Jamal    holding [44, 46] plays the 44 
Round 8: Dean     holding [11, 25] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
35 38 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 8: Eugenius holding [35, 38] plays the 35 
George wins the round which contains 2 penalty points

Round 9: George   holding [37] plays the 37 
Round 9: Jamal    holding [46] plays the 46 
Round 9: Dean     holding [25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
George wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Jamal (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Dean (system)
#4 with 13 penalty points George (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 8705093 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: George  : [11, 13, 14, 16, 24, 31, 39, 40, 43, 46]
Table position 1: Eugenius: [17, 18, 20, 22, 29, 33, 36, 41, 45, 48]
Table position 2: Costa   : [10, 12, 19, 23, 25, 26, 28, 34, 37, 42]
Table position 3: Minh    : [15, 21, 27, 30, 32, 35, 38, 44, 47, 49]

Discards:
George   [16, 40, 46]
Eugenius [41, 45, 48]
Costa    [12, 23, 25]
Minh     [21, 30, 44]

Round 0: George   holding [11, 13, 14, 21, 24, 30, 31, 39, 43, 44] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 18 20 22 29 33 36 40 46 

16------------------------------------------------------------------------

Round 0: Eugenius holding [16, 17, 18, 20, 22, 29, 33, 36, 40, 46] plays the 16 
Round 0: Costa    holding [10, 19, 26, 28, 34, 37, 41, 42, 45, 48] plays the 48 
Round 0: Minh     holding [12, 15, 23, 25, 27, 32, 35, 38, 47, 49] plays the 32 
Costa wins the round 

Round 1: Costa    holding [10, 19, 26, 28, 34, 37, 41, 42, 45] plays the 10 
Round 1: Minh     holding [12, 15, 23, 25, 27, 35, 38, 47, 49] plays the 12 
Round 1: George   holding [11, 13, 14, 21, 30, 31, 39, 43, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
17 18 20 22 29 33 36 40 46 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [17, 18, 20, 22, 29, 33, 36, 40, 46] plays the 18 
George wins the round 

Round 2: George   holding [11, 13, 14, 21, 30, 31, 39, 43] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
17 20 22 29 33 36 40 46 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [17, 20, 22, 29, 33, 36, 40, 46] plays the 20 
Round 2: Costa    holding [19, 26, 28, 34, 37, 41, 42, 45] plays the 28 
Round 2: Minh     holding [15, 23, 25, 27, 35, 38, 47, 49] plays the 35 
Minh wins the round 

Round 3: Minh     holding [15, 23, 25, 27, 38, 47, 49] plays the 38 
Round 3: George   holding [11, 13, 21, 30, 31, 39, 43] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 29 33 36 40 46 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [17, 22, 29, 33, 36, 40, 46] plays the 22 
Round 3: Costa    holding [19, 26, 34, 37, 41, 42, 45] plays the 42 
Costa wins the round which contains 7 penalty points

Round 4: Costa    holding [19, 26, 34, 37, 41, 45] plays the 26 
Round 4: Minh     holding [15, 23, 25, 27, 47, 49] plays the 23 
Round 4: George   holding [11, 13, 21, 31, 39, 43] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 33 36 40 46 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius holding [17, 29, 33, 36, 40, 46] plays the 36 
George wins the round which contains 1 penalty points

Round 5: George   holding [11, 13, 21, 31, 43] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 33 40 46 0 0 0 0 0 

17------------------------------------------------------------------------

Round 5: Eugenius holding [17, 29, 33, 40, 46] plays the 17 
Round 5: Costa    holding [19, 34, 37, 41, 45] plays the 19 
Round 5: Minh     holding [15, 25, 27, 47, 49] plays the 47 
Minh wins the round which contains 4 penalty points

Round 6: Minh     holding [15, 25, 27, 49] plays the 15 
Round 6: George   holding [11, 13, 21, 43] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
29 33 40 46 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 6: Eugenius holding [29, 33, 40, 46] plays the 33 
Round 6: Costa    holding [34, 37, 41, 45] plays the 45 
Costa wins the round 

Round 7: Costa    holding [34, 37, 41] plays the 37 
Round 7: Minh     holding [25, 27, 49] plays the 25 
Round 7: George   holding [11, 13, 43] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
29 40 46 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 40, 46] plays the 29 
Costa wins the round which contains 3 penalty points

Round 8: Costa    holding [34, 41] plays the 41 
Round 8: Minh     holding [27, 49] plays the 27 
Round 8: George   holding [11, 43] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
40 46 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 8: Eugenius holding [40, 46] plays the 40 
Costa wins the round which contains 2 penalty points

Round 9: Costa    holding [34] plays the 34 
Round 9: Minh     holding [49] plays the 49 
Round 9: George   holding [43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
46 0 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 9: Eugenius holding [46] plays the 46 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 1 penalty points George (system)
#1 with 1 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Minh (system)
#4 with 12 penalty points Costa (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14357484 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Kangying: [21, 22, 23, 24, 28, 31, 35, 45, 47, 49]
Table position 1: Kane    : [10, 12, 14, 16, 25, 26, 29, 37, 42, 44]
Table position 2: Eugenius: [19, 20, 27, 30, 34, 36, 38, 39, 40, 46]
Table position 3: Braedon : [11, 13, 15, 17, 18, 32, 33, 41, 43, 48]

Discards:
Kangying [31, 45, 47]
Kane     [14, 16, 29]
Eugenius [39, 40, 46]
Braedon  [11, 13, 18]

Round 0: Kangying holding [11, 13, 18, 21, 22, 23, 24, 28, 35, 49] plays the 49 
Round 0: Kane     holding [10, 12, 25, 26, 31, 37, 42, 44, 45, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
14 16 19 20 27 29 30 34 36 38 

14------------------------------------------------------------------------

Round 0: Eugenius holding [14, 16, 19, 20, 27, 29, 30, 34, 36, 38] plays the 14 
Round 0: Braedon  holding [15, 17, 32, 33, 39, 40, 41, 43, 46, 48] plays the 32 
Kangying wins the round which contains 7 penalty points

Round 1: Kangying holding [11, 13, 18, 21, 22, 23, 24, 28, 35] plays the 18 
Round 1: Kane     holding [10, 12, 25, 26, 31, 37, 44, 45, 47] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
16 19 20 27 29 30 34 36 38 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 19, 20, 27, 29, 30, 34, 36, 38] plays the 16 
Round 1: Braedon  holding [15, 17, 33, 39, 40, 41, 43, 46, 48] plays the 48 
Braedon wins the round 

Round 2: Braedon  holding [15, 17, 33, 39, 40, 41, 43, 46] plays the 15 
Round 2: Kangying holding [11, 13, 21, 22, 23, 24, 28, 35] plays the 21 
Round 2: Kane     holding [10, 25, 26, 31, 37, 44, 45, 47] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
19 20 27 29 30 34 36 38 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [19, 20, 27, 29, 30, 34, 36, 38] plays the 20 
Kane wins the round 

Round 3: Kane     holding [10, 26, 31, 37, 44, 45, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
19 27 29 30 34 36 38 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [19, 27, 29, 30, 34, 36, 38] plays the 30 
Round 3: Braedon  holding [17, 33, 39, 40, 41, 43, 46] plays the 40 
Round 3: Kangying holding [11, 13, 22, 23, 24, 28, 35] plays the 24 
Braedon wins the round 

Round 4: Braedon  holding [17, 33, 39, 41, 43, 46] plays the 33 
Round 4: Kangying holding [11, 13, 22, 23, 28, 35] plays the 22 
Round 4: Kane     holding [10, 31, 37, 44, 45, 47] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
19 27 29 34 36 38 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [19, 27, 29, 34, 36, 38] plays the 27 
Kane wins the round 

Round 5: Kane     holding [10, 31, 37, 44, 47] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 34 36 38 0 0 0 0 0 

34------------------------------------------------------------------------

Round 5: Eugenius holding [19, 29, 34, 36, 38] plays the 34 
Round 5: Braedon  holding [17, 39, 41, 43, 46] plays the 46 
Round 5: Kangying holding [11, 13, 23, 28, 35] plays the 28 
Braedon wins the round 

Round 6: Braedon  holding [17, 39, 41, 43] plays the 39 
Round 6: Kangying holding [11, 13, 23, 35] plays the 13 
Round 6: Kane     holding [31, 37, 44, 47] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 36 38 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 6: Eugenius holding [19, 29, 36, 38] plays the 36 
Braedon wins the round which contains 2 penalty points

Round 7: Braedon  holding [17, 41, 43] plays the 43 
Round 7: Kangying holding [11, 23, 35] plays the 11 
Round 7: Kane     holding [37, 44, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 38 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 7: Eugenius holding [19, 29, 38] plays the 19 
Kane wins the round which contains 4 penalty points

Round 8: Kane     holding [37, 44] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
29 38 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 38] plays the 29 
Round 8: Braedon  holding [17, 41] plays the 41 
Round 8: Kangying holding [23, 35] plays the 23 
Braedon wins the round which contains 4 penalty points

Round 9: Braedon  holding [17] plays the 17 
Round 9: Kangying holding [35] plays the 35 
Round 9: Kane     holding [44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Braedon wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Kane (system)
#3 with 7 penalty points Kangying (system)
#3 with 7 penalty points Braedon (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5282438 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Reede   : [10, 11, 13, 15, 21, 29, 33, 38, 39, 48]
Table position 1: David   : [12, 18, 19, 24, 27, 28, 30, 32, 35, 42]
Table position 2: Eugenius: [16, 17, 20, 22, 23, 31, 41, 43, 46, 47]
Table position 3: Gal     : [14, 25, 26, 34, 36, 37, 40, 44, 45, 49]

Discards:
Reede    [11, 39, 48]
David    [12, 18, 32]
Eugenius [43, 46, 47]
Gal      [34, 36, 45]

Round 0: Reede    holding [10, 13, 15, 21, 29, 33, 34, 36, 38, 45] plays the 10 
Round 0: David    holding [11, 19, 24, 27, 28, 30, 35, 39, 42, 48] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
12 16 17 18 20 22 23 31 32 41 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 16, 17, 18, 20, 22, 23, 31, 32, 41] plays the 12 
Round 0: Gal      holding [14, 25, 26, 37, 40, 43, 44, 46, 47, 49] plays the 25 
Gal wins the round 

Round 1: Gal      holding [14, 26, 37, 40, 43, 44, 46, 47, 49] plays the 14 
Round 1: Reede    holding [13, 15, 21, 29, 33, 34, 36, 38, 45] plays the 36 
Round 1: David    holding [11, 19, 27, 28, 30, 35, 39, 42, 48] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
16 17 18 20 22 23 31 32 41 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 17, 18, 20, 22, 23, 31, 32, 41] plays the 16 
Reede wins the round 

Round 2: Reede    holding [13, 15, 21, 29, 33, 34, 38, 45] plays the 21 
Round 2: David    holding [11, 19, 27, 28, 35, 39, 42, 48] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
17 18 20 22 23 31 32 41 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [17, 18, 20, 22, 23, 31, 32, 41] plays the 18 
Round 2: Gal      holding [26, 37, 40, 43, 44, 46, 47, 49] plays the 49 
Gal wins the round which contains 7 penalty points

Round 3: Gal      holding [26, 37, 40, 43, 44, 46, 47] plays the 44 
Round 3: Reede    holding [13, 15, 29, 33, 34, 38, 45] plays the 38 
Round 3: David    holding [11, 19, 27, 28, 35, 39, 48] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
17 20 22 23 31 32 41 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [17, 20, 22, 23, 31, 32, 41] plays the 20 
Gal wins the round 

Round 4: Gal      holding [26, 37, 40, 43, 46, 47] plays the 26 
Round 4: Reede    holding [13, 15, 29, 33, 34, 45] plays the 34 
Round 4: David    holding [11, 19, 27, 35, 39, 48] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 23 31 32 41 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius holding [17, 22, 23, 31, 32, 41] plays the 22 
David wins the round 

Round 5: David    holding [11, 19, 27, 35, 48] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 31 32 41 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 5: Eugenius holding [17, 23, 31, 32, 41] plays the 17 
Round 5: Gal      holding [37, 40, 43, 46, 47] plays the 40 
Round 5: Reede    holding [13, 15, 29, 33, 45] plays the 45 
Reede wins the round which contains 1 penalty points

Round 6: Reede    holding [13, 15, 29, 33] plays the 29 
Round 6: David    holding [11, 19, 27, 48] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 32 41 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 31, 32, 41] plays the 23 
Round 6: Gal      holding [37, 43, 46, 47] plays the 37 
Gal wins the round which contains 4 penalty points

Round 7: Gal      holding [43, 46, 47] plays the 46 
Round 7: Reede    holding [13, 15, 33] plays the 13 
Round 7: David    holding [11, 27, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
31 32 41 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 7: Eugenius holding [31, 32, 41] plays the 32 
David wins the round which contains 1 penalty points

Round 8: David    holding [11, 27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
31 41 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius holding [31, 41] plays the 31 
Round 8: Gal      holding [43, 47] plays the 47 
Round 8: Reede    holding [15, 33] plays the 15 
David wins the round which contains 2 penalty points

Round 9: David    holding [11] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Round 9: Gal      holding [43] plays the 43 
Round 9: Reede    holding [33] plays the 33 
Gal wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Reede (system)
#3 with 3 penalty points David (system)
#4 with 14 penalty points Gal (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10117698 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Mitchell: [13, 15, 17, 21, 24, 31, 32, 36, 46, 49]
Table position 1: Andrew  : [10, 11, 14, 16, 26, 27, 28, 30, 39, 40]
Table position 2: Eugenius: [12, 18, 20, 33, 37, 38, 41, 43, 45, 47]
Table position 3: Connor  : [19, 22, 23, 25, 29, 34, 35, 42, 44, 48]

Discards:
Mitchell [24, 36, 49]
Andrew   [14, 26, 40]
Eugenius [43, 45, 47]
Connor   [25, 35, 44]

Round 0: Mitchell holding [13, 15, 17, 21, 25, 31, 32, 35, 44, 46] plays the 15 
Round 0: Andrew   holding [10, 11, 16, 24, 27, 28, 30, 36, 39, 49] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 18 20 26 33 37 38 40 41 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 14, 18, 20, 26, 33, 37, 38, 40, 41] plays the 12 
Round 0: Connor   holding [19, 22, 23, 29, 34, 42, 43, 45, 47, 48] plays the 48 
Connor wins the round 

Round 1: Connor   holding [19, 22, 23, 29, 34, 42, 43, 45, 47] plays the 22 
Round 1: Mitchell holding [13, 17, 21, 25, 31, 32, 35, 44, 46] plays the 44 
Round 1: Andrew   holding [10, 11, 16, 24, 27, 28, 30, 36, 49] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
14 18 20 26 33 37 38 40 41 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 18, 20, 26, 33, 37, 38, 40, 41] plays the 14 
Mitchell wins the round 

Round 2: Mitchell holding [13, 17, 21, 25, 31, 32, 35, 46] plays the 32 
Round 2: Andrew   holding [10, 11, 16, 27, 28, 30, 36, 49] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
18 20 26 33 37 38 40 41 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [18, 20, 26, 33, 37, 38, 40, 41] plays the 18 
Round 2: Connor   holding [19, 23, 29, 34, 42, 43, 45, 47] plays the 34 
Connor wins the round 

Round 3: Connor   holding [19, 23, 29, 42, 43, 45, 47] plays the 45 
Round 3: Mitchell holding [13, 17, 21, 25, 31, 35, 46] plays the 35 
Round 3: Andrew   holding [11, 16, 27, 28, 30, 36, 49] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
20 26 33 37 38 40 41 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [20, 26, 33, 37, 38, 40, 41] plays the 20 
Connor wins the round 

Round 4: Connor   holding [19, 23, 29, 42, 43, 47] plays the 42 
Round 4: Mitchell holding [13, 17, 21, 25, 31, 46] plays the 21 
Round 4: Andrew   holding [11, 16, 27, 28, 30, 49] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
26 33 37 38 40 41 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [26, 33, 37, 38, 40, 41] plays the 26 
Connor wins the round which contains 7 penalty points

Round 5: Connor   holding [19, 23, 29, 43, 47] plays the 23 
Round 5: Mitchell holding [13, 17, 25, 31, 46] plays the 31 
Round 5: Andrew   holding [11, 16, 27, 30, 49] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
33 37 38 40 41 0 0 0 0 0 

37------------------------------------------------------------------------

Round 5: Eugenius holding [33, 37, 38, 40, 41] plays the 37 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
33 38 40 41 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 6: Eugenius holding [33, 38, 40, 41] plays the 33 
Round 6: Connor   holding [19, 29, 43, 47] plays the 43 
Round 6: Mitchell holding [13, 17, 25, 46] plays the 46 
Round 6: Andrew   holding [16, 27, 30, 49] plays the 27 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
38 40 41 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 7: Eugenius holding [38, 40, 41] plays the 38 
Round 7: Connor   holding [19, 29, 47] plays the 47 
Round 7: Mitchell holding [13, 17, 25] plays the 13 
Round 7: Andrew   holding [16, 30, 49] plays the 16 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
40 41 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 8: Eugenius holding [40, 41] plays the 40 
Round 8: Connor   holding [19, 29] plays the 19 
Round 8: Mitchell holding [17, 25] plays the 25 
Round 8: Andrew   holding [30, 49] plays the 30 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Round 9: Connor   holding [29] plays the 29 
Round 9: Mitchell holding [17] plays the 17 
Round 9: Andrew   holding [49] plays the 49 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Mitchell (system)
#1 with 0 penalty points Andrew (system)
#3 with 7 penalty points Connor (system)
#4 with 11 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2713885 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Dylan   : [19, 21, 30, 31, 36, 37, 38, 42, 45, 48]
Table position 1: Eugenius: [12, 13, 17, 20, 23, 25, 26, 39, 40, 47]
Table position 2: Reede   : [10, 15, 18, 27, 29, 33, 35, 43, 46, 49]
Table position 3: George  : [11, 14, 16, 22, 24, 28, 32, 34, 41, 44]

Discards:
Dylan    [42, 45, 48]
Eugenius [39, 40, 47]
Reede    [18, 35, 46]
George   [11, 24, 34]

Round 0: Dylan    holding [11, 19, 21, 24, 30, 31, 34, 36, 37, 38] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 17 20 23 25 26 42 45 48 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 13, 17, 20, 23, 25, 26, 42, 45, 48] plays the 12 
Round 0: Reede    holding [10, 15, 27, 29, 33, 39, 40, 43, 47, 49] plays the 27 
Round 0: George   holding [14, 16, 18, 22, 28, 32, 35, 41, 44, 46] plays the 14 
Reede wins the round 

Round 1: Reede    holding [10, 15, 29, 33, 39, 40, 43, 47, 49] plays the 15 
Round 1: George   holding [16, 18, 22, 28, 32, 35, 41, 44, 46] plays the 18 
Round 1: Dylan    holding [11, 19, 24, 30, 31, 34, 36, 37, 38] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 20 23 25 26 42 45 48 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [13, 17, 20, 23, 25, 26, 42, 45, 48] plays the 20 
Dylan wins the round 

Round 2: Dylan    holding [11, 19, 30, 31, 34, 36, 37, 38] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 25 26 42 45 48 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 23, 25, 26, 42, 45, 48] plays the 26 
Round 2: Reede    holding [10, 29, 33, 39, 40, 43, 47, 49] plays the 10 
Round 2: George   holding [16, 22, 28, 32, 35, 41, 44, 46] plays the 32 
Dylan wins the round 

Round 3: Dylan    holding [11, 19, 30, 31, 34, 37, 38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 25 42 45 48 0 0 0 

42------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 23, 25, 42, 45, 48] plays the 42 
Round 3: Reede    holding [29, 33, 39, 40, 43, 47, 49] plays the 40 
Round 3: George   holding [16, 22, 28, 35, 41, 44, 46] plays the 22 
Eugenius wins the round which contains 7 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 25 45 48 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 23, 25, 45, 48] plays the 25 
Round 4: Reede    holding [29, 33, 39, 43, 47, 49] plays the 39 
Round 4: George   holding [16, 28, 35, 41, 44, 46] plays the 35 
Round 4: Dylan    holding [11, 19, 30, 31, 34, 37] plays the 30 
George wins the round 

Round 5: George   holding [16, 28, 41, 44, 46] plays the 28 
Round 5: Dylan    holding [11, 19, 31, 34, 37] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 45 48 0 0 0 0 0 

48------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 23, 45, 48] plays the 48 
Round 5: Reede    holding [29, 33, 43, 47, 49] plays the 49 
Reede wins the round 

Round 6: Reede    holding [29, 33, 43, 47] plays the 33 
Round 6: George   holding [16, 41, 44, 46] plays the 44 
Round 6: Dylan    holding [11, 19, 31, 37] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 45 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 6: Eugenius holding [13, 17, 23, 45] plays the 45 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 17, 23] plays the 13 
Round 7: Reede    holding [29, 43, 47] plays the 43 
Round 7: George   holding [16, 41, 46] plays the 41 
Round 7: Dylan    holding [11, 31, 37] plays the 31 
Reede wins the round which contains 4 penalty points

Round 8: Reede    holding [29, 47] plays the 47 
Round 8: George   holding [16, 46] plays the 46 
Round 8: Dylan    holding [11, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 0 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 8: Eugenius holding [17, 23] plays the 17 
Reede wins the round which contains 3 penalty points

Round 9: Reede    holding [29] plays the 29 
Round 9: George   holding [16] plays the 16 
Round 9: Dylan    holding [11] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
23 0 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 9: Eugenius holding [23] plays the 23 
Reede wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Dylan (system)
#1 with 0 penalty points George (system)
#3 with 8 penalty points Eugenius (dodo.c)
#4 with 10 penalty points Reede (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 13721545 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 12, 13, 23, 24, 25, 26, 39, 42, 45]
Table position 1: George  : [14, 16, 27, 29, 30, 31, 33, 35, 37, 49]
Table position 2: Xue     : [15, 17, 18, 19, 20, 28, 34, 36, 38, 43]
Table position 3: Alex    : [10, 21, 22, 32, 40, 41, 44, 46, 47, 48]

Discards:
Eugenius [39, 42, 45]
George   [33, 35, 37]
Xue      [15, 20, 43]
Alex     [21, 46, 48]


Debug output from Eugenius
------------------------------------------------------------------------
11 12 13 21 23 24 25 26 46 48 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 13, 21, 23, 24, 25, 26, 46, 48] plays the 12 
Round 0: George   holding [14, 16, 27, 29, 30, 31, 39, 42, 45, 49] plays the 30 
Round 0: Xue      holding [17, 18, 19, 28, 33, 34, 35, 36, 37, 38] plays the 36 
Round 0: Alex     holding [10, 15, 20, 22, 32, 40, 41, 43, 44, 47] plays the 32 
Xue wins the round 

Round 1: Xue      holding [17, 18, 19, 28, 33, 34, 35, 37, 38] plays the 38 
Round 1: Alex     holding [10, 15, 20, 22, 40, 41, 43, 44, 47] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 21 23 24 25 26 46 48 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 21, 23, 24, 25, 26, 46, 48] plays the 24 
Round 1: George   holding [14, 16, 27, 29, 31, 39, 42, 45, 49] plays the 14 
Alex wins the round 

Round 2: Alex     holding [10, 15, 20, 22, 41, 43, 44, 47] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 21 23 25 26 46 48 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 21, 23, 25, 26, 46, 48] plays the 26 
Round 2: George   holding [16, 27, 29, 31, 39, 42, 45, 49] plays the 16 
Round 2: Xue      holding [17, 18, 19, 28, 33, 34, 35, 37] plays the 33 
Xue wins the round 

Round 3: Xue      holding [17, 18, 19, 28, 34, 35, 37] plays the 18 
Round 3: Alex     holding [10, 15, 20, 41, 43, 44, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 21 23 25 46 48 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 21, 23, 25, 46, 48] plays the 21 
Round 3: George   holding [27, 29, 31, 39, 42, 45, 49] plays the 39 
George wins the round 

Round 4: George   holding [27, 29, 31, 42, 45, 49] plays the 45 
Round 4: Xue      holding [17, 19, 28, 34, 35, 37] plays the 35 
Round 4: Alex     holding [10, 15, 41, 43, 44, 47] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 23 25 46 48 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 23, 25, 46, 48] plays the 25 
George wins the round 

Round 5: George   holding [27, 29, 31, 42, 49] plays the 27 
Round 5: Xue      holding [17, 19, 28, 34, 37] plays the 34 
Round 5: Alex     holding [10, 41, 43, 44, 47] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 23 46 48 0 0 0 0 0 

48------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 23, 46, 48] plays the 48 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
11 13 23 46 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 13, 23, 46] plays the 11 
Round 6: George   holding [29, 31, 42, 49] plays the 31 
Round 6: Xue      holding [17, 19, 28, 37] plays the 19 
Round 6: Alex     holding [10, 41, 44, 47] plays the 41 
Alex wins the round which contains 4 penalty points

Round 7: Alex     holding [10, 44, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 46 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 23, 46] plays the 13 
Round 7: George   holding [29, 42, 49] plays the 29 
Round 7: Xue      holding [17, 28, 37] plays the 17 
Alex wins the round which contains 4 penalty points

Round 8: Alex     holding [10, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
23 46 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 8: Eugenius holding [23, 46] plays the 46 
Round 8: George   holding [42, 49] plays the 42 
Round 8: Xue      holding [28, 37] plays the 28 
Eugenius wins the round which contains 7 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
23 0 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 9: Eugenius holding [23] plays the 23 
Round 9: George   holding [49] plays the 49 
Round 9: Xue      holding [37] plays the 37 
Round 9: Alex     holding [10] plays the 10 
Xue wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points George (system)
#2 with 2 penalty points Xue (system)
#3 with 8 penalty points Eugenius (dodo.c)
#3 with 8 penalty points Alex (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7032063 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Emily   : [10, 15, 21, 29, 31, 33, 37, 41, 43, 44]
Table position 1: Harrison: [11, 13, 17, 18, 19, 24, 30, 39, 40, 47]
Table position 2: Alex    : [12, 14, 22, 23, 26, 27, 28, 32, 35, 49]
Table position 3: Eugenius: [16, 20, 25, 34, 36, 38, 42, 45, 46, 48]

Discards:
Emily    [29, 33, 43]
Harrison [17, 39, 47]
Alex     [23, 26, 35]
Eugenius [45, 46, 48]

Round 0: Emily    holding [10, 15, 21, 31, 37, 41, 44, 45, 46, 48] plays the 46 
Round 0: Harrison holding [11, 13, 18, 19, 24, 29, 30, 33, 40, 43] plays the 24 
Round 0: Alex     holding [12, 14, 17, 22, 27, 28, 32, 39, 47, 49] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
16 20 23 25 26 34 35 36 38 42 

16------------------------------------------------------------------------

Round 0: Eugenius holding [16, 20, 23, 25, 26, 34, 35, 36, 38, 42] plays the 16 
Emily wins the round 

Round 1: Emily    holding [10, 15, 21, 31, 37, 41, 44, 45, 48] plays the 45 
Round 1: Harrison holding [11, 13, 18, 19, 29, 30, 33, 40, 43] plays the 40 
Round 1: Alex     holding [12, 17, 22, 27, 28, 32, 39, 47, 49] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
20 23 25 26 34 35 36 38 42 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [20, 23, 25, 26, 34, 35, 36, 38, 42] plays the 20 
Emily wins the round 

Round 2: Emily    holding [10, 15, 21, 31, 37, 41, 44, 48] plays the 44 
Round 2: Harrison holding [11, 13, 18, 19, 29, 30, 33, 43] plays the 30 
Round 2: Alex     holding [12, 17, 22, 28, 32, 39, 47, 49] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 26 34 35 36 38 42 0 0 

26------------------------------------------------------------------------

Round 2: Eugenius holding [23, 25, 26, 34, 35, 36, 38, 42] plays the 26 
Emily wins the round 

Round 3: Emily    holding [10, 15, 21, 31, 37, 41, 48] plays the 15 
Round 3: Harrison holding [11, 13, 18, 19, 29, 33, 43] plays the 18 
Round 3: Alex     holding [17, 22, 28, 32, 39, 47, 49] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 34 35 36 38 42 0 0 0 

25------------------------------------------------------------------------

Round 3: Eugenius holding [23, 25, 34, 35, 36, 38, 42] plays the 25 
Alex wins the round 

Round 4: Alex     holding [17, 22, 28, 32, 47, 49] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
23 34 35 36 38 42 0 0 0 0 

34------------------------------------------------------------------------

Round 4: Eugenius holding [23, 34, 35, 36, 38, 42] plays the 34 
Round 4: Emily    holding [10, 21, 31, 37, 41, 48] plays the 10 
Round 4: Harrison holding [11, 13, 19, 29, 33, 43] plays the 43 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
23 35 36 38 42 0 0 0 0 0 

23------------------------------------------------------------------------

Round 5: Eugenius holding [23, 35, 36, 38, 42] plays the 23 
Round 5: Emily    holding [21, 31, 37, 41, 48] plays the 31 
Round 5: Harrison holding [11, 13, 19, 29, 33] plays the 13 
Round 5: Alex     holding [17, 22, 32, 47, 49] plays the 47 
Alex wins the round which contains 4 penalty points

Round 6: Alex     holding [17, 22, 32, 49] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
35 36 38 42 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 6: Eugenius holding [35, 36, 38, 42] plays the 35 
Round 6: Emily    holding [21, 37, 41, 48] plays the 37 
Round 6: Harrison holding [11, 19, 29, 33] plays the 29 
Emily wins the round which contains 3 penalty points

Round 7: Emily    holding [21, 41, 48] plays the 21 
Round 7: Harrison holding [11, 19, 33] plays the 33 
Round 7: Alex     holding [22, 32, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
36 38 42 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 7: Eugenius holding [36, 38, 42] plays the 36 
Alex wins the round 

Round 8: Alex     holding [22, 32] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
38 42 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [38, 42] plays the 38 
Round 8: Emily    holding [41, 48] plays the 48 
Round 8: Harrison holding [11, 19] plays the 11 
Emily wins the round which contains 1 penalty points

Round 9: Emily    holding [41] plays the 41 
Round 9: Harrison holding [19] plays the 19 
Round 9: Alex     holding [32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
42 0 0 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 9: Eugenius holding [42] plays the 42 
Emily wins the round which contains 9 penalty points


Finishing Positions

#1 with 0 penalty points Harrison (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Alex (system)
#4 with 13 penalty points Emily (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15867754 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Stephen : [14, 20, 24, 25, 26, 30, 32, 34, 44, 47]
Table position 1: Eugenius: [10, 16, 19, 22, 28, 33, 36, 41, 45, 49]
Table position 2: Vincent : [11, 18, 21, 27, 31, 38, 39, 40, 42, 46]
Table position 3: Eleni   : [12, 13, 15, 17, 23, 29, 35, 37, 43, 48]

Discards:
Stephen  [24, 34, 44]
Eugenius [41, 45, 49]
Vincent  [11, 27, 40]
Eleni    [12, 37, 43]

Round 0: Stephen  holding [12, 14, 20, 25, 26, 30, 32, 37, 43, 47] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
10 16 19 22 24 28 33 34 36 44 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 16, 19, 22, 24, 28, 33, 34, 36, 44] plays the 10 
Round 0: Vincent  holding [18, 21, 31, 38, 39, 41, 42, 45, 46, 49] plays the 42 
Round 0: Eleni    holding [11, 13, 15, 17, 23, 27, 29, 35, 40, 48] plays the 27 
Vincent wins the round which contains 7 penalty points

Round 1: Vincent  holding [18, 21, 31, 38, 39, 41, 45, 46, 49] plays the 38 
Round 1: Eleni    holding [11, 13, 15, 17, 23, 29, 35, 40, 48] plays the 48 
Round 1: Stephen  holding [12, 14, 20, 25, 26, 32, 37, 43, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
16 19 22 24 28 33 34 36 44 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 19, 22, 24, 28, 33, 34, 36, 44] plays the 16 
Eleni wins the round 

Round 2: Eleni    holding [11, 13, 15, 17, 23, 29, 35, 40] plays the 15 
Round 2: Stephen  holding [12, 14, 25, 26, 32, 37, 43, 47] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 24 28 33 34 36 44 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [19, 22, 24, 28, 33, 34, 36, 44] plays the 24 
Round 2: Vincent  holding [18, 21, 31, 39, 41, 45, 46, 49] plays the 45 
Vincent wins the round 

Round 3: Vincent  holding [18, 21, 31, 39, 41, 46, 49] plays the 46 
Round 3: Eleni    holding [11, 13, 17, 23, 29, 35, 40] plays the 40 
Round 3: Stephen  holding [12, 14, 26, 32, 37, 43, 47] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
19 22 28 33 34 36 44 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [19, 22, 28, 33, 34, 36, 44] plays the 22 
Vincent wins the round 

Round 4: Vincent  holding [18, 21, 31, 39, 41, 49] plays the 49 
Round 4: Eleni    holding [11, 13, 17, 23, 29, 35] plays the 35 
Round 4: Stephen  holding [12, 26, 32, 37, 43, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
19 28 33 34 36 44 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [19, 28, 33, 34, 36, 44] plays the 28 
Vincent wins the round which contains 1 penalty points

Round 5: Vincent  holding [18, 21, 31, 39, 41] plays the 18 
Round 5: Eleni    holding [11, 13, 17, 23, 29] plays the 13 
Round 5: Stephen  holding [12, 26, 32, 37, 43] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
19 33 34 36 44 0 0 0 0 0 

33------------------------------------------------------------------------

Round 5: Eugenius holding [19, 33, 34, 36, 44] plays the 33 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
19 34 36 44 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 34, 36, 44] plays the 19 
Round 6: Vincent  holding [21, 31, 39, 41] plays the 41 
Round 6: Eleni    holding [11, 17, 23, 29] plays the 17 
Round 6: Stephen  holding [12, 32, 37, 43] plays the 43 
Stephen wins the round which contains 4 penalty points

Round 7: Stephen  holding [12, 32, 37] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
34 36 44 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 7: Eugenius holding [34, 36, 44] plays the 34 
Round 7: Vincent  holding [21, 31, 39] plays the 21 
Round 7: Eleni    holding [11, 23, 29] plays the 11 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
36 44 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [36, 44] plays the 36 
Round 8: Vincent  holding [31, 39] plays the 39 
Round 8: Eleni    holding [23, 29] plays the 23 
Round 8: Stephen  holding [32, 37] plays the 32 
Vincent wins the round which contains 1 penalty points

Round 9: Vincent  holding [31] plays the 31 
Round 9: Eleni    holding [29] plays the 29 
Round 9: Stephen  holding [37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
44 0 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 9: Eugenius holding [44] plays the 44 
Stephen wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eleni (system)
#2 with 2 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Stephen (system)
#4 with 9 penalty points Vincent (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6129865 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [15, 25, 29, 31, 33, 36, 38, 41, 48, 49]
Table position 1: Andrew  : [11, 13, 17, 24, 28, 30, 32, 35, 43, 45]
Table position 2: George  : [14, 16, 22, 23, 27, 34, 37, 40, 44, 46]
Table position 3: Xue     : [10, 12, 18, 19, 20, 21, 26, 39, 42, 47]

Discards:
Eugenius [41, 48, 49]
Andrew   [11, 30, 32]
George   [16, 22, 46]
Xue      [19, 20, 21]


Debug output from Eugenius
------------------------------------------------------------------------
15 19 20 21 25 29 31 33 36 38 

15------------------------------------------------------------------------

Round 0: Eugenius holding [15, 19, 20, 21, 25, 29, 31, 33, 36, 38] plays the 15 
Round 0: Andrew   holding [13, 17, 24, 28, 35, 41, 43, 45, 48, 49] plays the 45 
Round 0: George   holding [11, 14, 23, 27, 30, 32, 34, 37, 40, 44] plays the 27 
Round 0: Xue      holding [10, 12, 16, 18, 22, 26, 39, 42, 46, 47] plays the 18 
Andrew wins the round 

Round 1: Andrew   holding [13, 17, 24, 28, 35, 41, 43, 48, 49] plays the 24 
Round 1: George   holding [11, 14, 23, 30, 32, 34, 37, 40, 44] plays the 30 
Round 1: Xue      holding [10, 12, 16, 22, 26, 39, 42, 46, 47] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
19 20 21 25 29 31 33 36 38 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [19, 20, 21, 25, 29, 31, 33, 36, 38] plays the 20 
George wins the round 

Round 2: George   holding [11, 14, 23, 32, 34, 37, 40, 44] plays the 40 
Round 2: Xue      holding [10, 16, 22, 26, 39, 42, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
19 21 25 29 31 33 36 38 0 0 

25------------------------------------------------------------------------

Round 2: Eugenius holding [19, 21, 25, 29, 31, 33, 36, 38] plays the 25 
Round 2: Andrew   holding [13, 17, 28, 35, 41, 43, 48, 49] plays the 48 
Andrew wins the round 

Round 3: Andrew   holding [13, 17, 28, 35, 41, 43, 49] plays the 49 
Round 3: George   holding [11, 14, 23, 32, 34, 37, 44] plays the 14 
Round 3: Xue      holding [10, 16, 22, 26, 39, 42, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
19 21 29 31 33 36 38 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [19, 21, 29, 31, 33, 36, 38] plays the 21 
Andrew wins the round which contains 7 penalty points

Round 4: Andrew   holding [13, 17, 28, 35, 41, 43] plays the 35 
Round 4: George   holding [11, 23, 32, 34, 37, 44] plays the 11 
Round 4: Xue      holding [10, 16, 22, 26, 39, 47] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 31 33 36 38 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 4: Eugenius holding [19, 29, 31, 33, 36, 38] plays the 19 
Andrew wins the round which contains 2 penalty points

Round 5: Andrew   holding [13, 17, 28, 41, 43] plays the 43 
Round 5: George   holding [23, 32, 34, 37, 44] plays the 37 
Round 5: Xue      holding [16, 22, 26, 39, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 33 36 38 0 0 0 0 0 

29------------------------------------------------------------------------

Round 5: Eugenius holding [29, 31, 33, 36, 38] plays the 29 
Xue wins the round which contains 4 penalty points

Round 6: Xue      holding [16, 22, 26, 39] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
31 33 36 38 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 6: Eugenius holding [31, 33, 36, 38] plays the 33 
Round 6: Andrew   holding [13, 17, 28, 41] plays the 28 
Round 6: George   holding [23, 32, 34, 44] plays the 34 
George wins the round 

Round 7: George   holding [23, 32, 44] plays the 23 
Round 7: Xue      holding [16, 26, 39] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
31 36 38 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [31, 36, 38] plays the 31 
Round 7: Andrew   holding [13, 17, 41] plays the 13 
Eugenius wins the round which contains 3 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
36 38 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [36, 38] plays the 36 
Round 8: Andrew   holding [17, 41] plays the 17 
Round 8: George   holding [32, 44] plays the 44 
Round 8: Xue      holding [16, 39] plays the 16 
George wins the round which contains 1 penalty points

Round 9: George   holding [32] plays the 32 
Round 9: Xue      holding [39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Round 9: Andrew   holding [41] plays the 41 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 1 penalty points George (system)
#2 with 4 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Xue (system)
#4 with 9 penalty points Andrew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7025776 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: George  : [19, 26, 28, 29, 32, 35, 37, 38, 39, 44]
Table position 1: Stephen : [15, 20, 25, 31, 34, 41, 43, 46, 47, 48]
Table position 2: Nathan  : [10, 11, 14, 16, 18, 22, 24, 36, 40, 42]
Table position 3: Eugenius: [12, 13, 17, 21, 23, 27, 30, 33, 45, 49]

Discards:
George   [19, 28, 39]
Stephen  [25, 43, 48]
Nathan   [14, 24, 42]
Eugenius [33, 45, 49]

Round 0: George   holding [26, 29, 32, 33, 35, 37, 38, 44, 45, 49] plays the 49 
Round 0: Stephen  holding [15, 19, 20, 28, 31, 34, 39, 41, 46, 47] plays the 28 
Round 0: Nathan   holding [10, 11, 16, 18, 22, 25, 36, 40, 43, 48] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 14 17 21 23 24 27 30 42 

14------------------------------------------------------------------------

Round 0: Eugenius holding [12, 13, 14, 17, 21, 23, 24, 27, 30, 42] plays the 14 
George wins the round 

Round 1: George   holding [26, 29, 32, 33, 35, 37, 38, 44, 45] plays the 26 
Round 1: Stephen  holding [15, 19, 20, 31, 34, 39, 41, 46, 47] plays the 20 
Round 1: Nathan   holding [10, 11, 16, 18, 22, 25, 36, 43, 48] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 17 21 23 24 27 30 42 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 13, 17, 21, 23, 24, 27, 30, 42] plays the 12 
George wins the round 

Round 2: George   holding [29, 32, 33, 35, 37, 38, 44, 45] plays the 38 
Round 2: Stephen  holding [15, 19, 31, 34, 39, 41, 46, 47] plays the 34 
Round 2: Nathan   holding [10, 11, 16, 22, 25, 36, 43, 48] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 21 23 24 27 30 42 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 21, 23, 24, 27, 30, 42] plays the 24 
George wins the round 

Round 3: George   holding [29, 32, 33, 35, 37, 44, 45] plays the 44 
Round 3: Stephen  holding [15, 19, 31, 39, 41, 46, 47] plays the 46 
Round 3: Nathan   holding [11, 16, 22, 25, 36, 43, 48] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 21 23 27 30 42 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 21, 23, 27, 30, 42] plays the 30 
Stephen wins the round 

Round 4: Stephen  holding [15, 19, 31, 39, 41, 47] plays the 39 
Round 4: Nathan   holding [11, 16, 25, 36, 43, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 21 23 27 42 0 0 0 0 

21------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 21, 23, 27, 42] plays the 21 
Round 4: George   holding [29, 32, 33, 35, 37, 45] plays the 33 
Nathan wins the round 

Round 5: Nathan   holding [11, 16, 25, 36, 43] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 27 42 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 23, 27, 42] plays the 13 
Round 5: George   holding [29, 32, 35, 37, 45] plays the 35 
Round 5: Stephen  holding [15, 19, 31, 41, 47] plays the 15 
George wins the round which contains 1 penalty points

Round 6: George   holding [29, 32, 37, 45] plays the 29 
Round 6: Stephen  holding [19, 31, 41, 47] plays the 41 
Round 6: Nathan   holding [11, 16, 36, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 27 42 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 23, 27, 42] plays the 17 
Nathan wins the round which contains 4 penalty points

Round 7: Nathan   holding [11, 16, 36] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
23 27 42 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius holding [23, 27, 42] plays the 23 
Round 7: George   holding [32, 37, 45] plays the 37 
Round 7: Stephen  holding [19, 31, 47] plays the 19 
George wins the round which contains 4 penalty points

Round 8: George   holding [32, 45] plays the 32 
Round 8: Stephen  holding [31, 47] plays the 31 
Round 8: Nathan   holding [16, 36] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
27 42 0 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 8: Eugenius holding [27, 42] plays the 42 
Eugenius wins the round which contains 8 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
27 0 0 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 9: Eugenius holding [27] plays the 27 
Round 9: George   holding [45] plays the 45 
Round 9: Stephen  holding [47] plays the 47 
Round 9: Nathan   holding [16] plays the 16 
George wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Stephen (system)
#2 with 4 penalty points Nathan (system)
#3 with 6 penalty points George (system)
#4 with 8 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1407370 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Costa   : [11, 12, 16, 17, 21, 31, 32, 38, 39, 43]
Table position 1: Sabrina : [10, 18, 20, 22, 24, 35, 37, 41, 48, 49]
Table position 2: Eugenius: [13, 14, 15, 27, 29, 30, 34, 42, 44, 46]
Table position 3: Andrew  : [19, 23, 25, 26, 28, 33, 36, 40, 45, 47]

Discards:
Costa    [11, 17, 31]
Sabrina  [18, 20, 35]
Eugenius [42, 44, 46]
Andrew   [25, 26, 28]

Round 0: Costa    holding [12, 16, 21, 25, 26, 28, 32, 38, 39, 43] plays the 16 
Round 0: Sabrina  holding [10, 11, 17, 22, 24, 31, 37, 41, 48, 49] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
13 14 15 18 20 27 29 30 34 35 

14------------------------------------------------------------------------

Round 0: Eugenius holding [13, 14, 15, 18, 20, 27, 29, 30, 34, 35] plays the 14 
Round 0: Andrew   holding [19, 23, 33, 36, 40, 42, 44, 45, 46, 47] plays the 44 
Sabrina wins the round 

Round 1: Sabrina  holding [10, 11, 17, 22, 24, 31, 37, 41, 49] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 18 20 27 29 30 34 35 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [13, 15, 18, 20, 27, 29, 30, 34, 35] plays the 18 
Round 1: Andrew   holding [19, 23, 33, 36, 40, 42, 45, 46, 47] plays the 33 
Round 1: Costa    holding [12, 21, 25, 26, 28, 32, 38, 39, 43] plays the 12 
Andrew wins the round 

Round 2: Andrew   holding [19, 23, 36, 40, 42, 45, 46, 47] plays the 42 
Round 2: Costa    holding [21, 25, 26, 28, 32, 38, 39, 43] plays the 21 
Round 2: Sabrina  holding [10, 11, 17, 24, 31, 37, 41, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 20 27 29 30 34 35 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius holding [13, 15, 20, 27, 29, 30, 34, 35] plays the 15 
Sabrina wins the round which contains 7 penalty points

Round 3: Sabrina  holding [10, 11, 17, 24, 31, 37, 41] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
13 20 27 29 30 34 35 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [13, 20, 27, 29, 30, 34, 35] plays the 20 
Round 3: Andrew   holding [19, 23, 36, 40, 45, 46, 47] plays the 36 
Round 3: Costa    holding [25, 26, 28, 32, 38, 39, 43] plays the 25 
Andrew wins the round 

Round 4: Andrew   holding [19, 23, 40, 45, 46, 47] plays the 40 
Round 4: Costa    holding [26, 28, 32, 38, 39, 43] plays the 28 
Round 4: Sabrina  holding [11, 17, 24, 31, 37, 41] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 27 29 30 34 35 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [13, 27, 29, 30, 34, 35] plays the 30 
Andrew wins the round 

Round 5: Andrew   holding [19, 23, 45, 46, 47] plays the 45 
Round 5: Costa    holding [26, 32, 38, 39, 43] plays the 39 
Round 5: Sabrina  holding [11, 17, 31, 37, 41] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
13 27 29 34 35 0 0 0 0 0 

27------------------------------------------------------------------------

Round 5: Eugenius holding [13, 27, 29, 34, 35] plays the 27 
Andrew wins the round which contains 1 penalty points

Round 6: Andrew   holding [19, 23, 46, 47] plays the 19 
Round 6: Costa    holding [26, 32, 38, 43] plays the 43 
Round 6: Sabrina  holding [11, 17, 31, 41] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 34 35 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 6: Eugenius holding [13, 29, 34, 35] plays the 13 
Costa wins the round which contains 4 penalty points

Round 7: Costa    holding [26, 32, 38] plays the 38 
Round 7: Sabrina  holding [11, 17, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
29 34 35 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 7: Eugenius holding [29, 34, 35] plays the 34 
Round 7: Andrew   holding [23, 46, 47] plays the 46 
Andrew wins the round which contains 1 penalty points

Round 8: Andrew   holding [23, 47] plays the 47 
Round 8: Costa    holding [26, 32] plays the 32 
Round 8: Sabrina  holding [11, 17] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
29 35 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 35] plays the 29 
Andrew wins the round which contains 3 penalty points

Round 9: Andrew   holding [23] plays the 23 
Round 9: Costa    holding [26] plays the 26 
Round 9: Sabrina  holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
35 0 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 9: Eugenius holding [35] plays the 35 
Andrew wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Costa (system)
#3 with 7 penalty points Sabrina (system)
#3 with 7 penalty points Andrew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1475972 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Nicholas: [10, 21, 22, 27, 39, 41, 43, 44, 46, 47]
Table position 1: Dean    : [16, 18, 23, 24, 25, 26, 29, 35, 38, 48]
Table position 2: Eugenius: [11, 17, 20, 30, 32, 33, 36, 37, 40, 49]
Table position 3: Benjamin: [12, 13, 14, 15, 19, 28, 31, 34, 42, 45]

Discards:
Nicholas [27, 39, 41]
Dean     [23, 29, 38]
Eugenius [37, 40, 49]
Benjamin [15, 19, 42]

Round 0: Nicholas holding [10, 15, 19, 21, 22, 42, 43, 44, 46, 47] plays the 46 
Round 0: Dean     holding [16, 18, 24, 25, 26, 27, 35, 39, 41, 48] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 20 23 29 30 32 33 36 38 

20------------------------------------------------------------------------

Round 0: Eugenius holding [11, 17, 20, 23, 29, 30, 32, 33, 36, 38] plays the 20 
Round 0: Benjamin holding [12, 13, 14, 28, 31, 34, 37, 40, 45, 49] plays the 12 
Nicholas wins the round 

Round 1: Nicholas holding [10, 15, 19, 21, 22, 42, 43, 44, 47] plays the 10 
Round 1: Dean     holding [18, 24, 25, 26, 27, 35, 39, 41, 48] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 23 29 30 32 33 36 38 0 

30------------------------------------------------------------------------

Round 1: Eugenius holding [11, 17, 23, 29, 30, 32, 33, 36, 38] plays the 30 
Round 1: Benjamin holding [13, 14, 28, 31, 34, 37, 40, 45, 49] plays the 34 
Benjamin wins the round 

Round 2: Benjamin holding [13, 14, 28, 31, 37, 40, 45, 49] plays the 49 
Round 2: Nicholas holding [15, 19, 21, 22, 42, 43, 44, 47] plays the 21 
Round 2: Dean     holding [18, 24, 25, 27, 35, 39, 41, 48] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 23 29 32 33 36 38 0 0 

11 chah------------------------------------------------------------------------

Round 2: Eugenius holding [11, 17, 23, 29, 32, 33, 36, 38] plays the 11 
Benjamin wins the round which contains 1 penalty points

Round 3: Benjamin holding [13, 14, 28, 31, 37, 40, 45] plays the 13 
Round 3: Nicholas holding [15, 19, 22, 42, 43, 44, 47] plays the 43 
Round 3: Dean     holding [18, 24, 25, 27, 39, 41, 48] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 29 32 33 36 38 0 0 0 

17------------------------------------------------------------------------

Round 3: Eugenius holding [17, 23, 29, 32, 33, 36, 38] plays the 17 
Nicholas wins the round which contains 4 penalty points

Round 4: Nicholas holding [15, 19, 22, 42, 44, 47] plays the 47 
Round 4: Dean     holding [18, 24, 25, 27, 39, 48] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 32 33 36 38 0 0 0 0 

23------------------------------------------------------------------------

Round 4: Eugenius holding [23, 29, 32, 33, 36, 38] plays the 23 
Round 4: Benjamin holding [14, 28, 31, 37, 40, 45] plays the 31 
Nicholas wins the round which contains 3 penalty points

Round 5: Nicholas holding [15, 19, 22, 42, 44] plays the 22 
Round 5: Dean     holding [24, 25, 27, 39, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
29 32 33 36 38 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [29, 32, 33, 36, 38] plays the 32 
Round 5: Benjamin holding [14, 28, 37, 40, 45] plays the 28 
Dean wins the round 

Round 6: Dean     holding [24, 25, 27, 39] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
29 33 36 38 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 6: Eugenius holding [29, 33, 36, 38] plays the 33 
Round 6: Benjamin holding [14, 37, 40, 45] plays the 45 
Round 6: Nicholas holding [15, 19, 42, 44] plays the 15 
Benjamin wins the round 

Round 7: Benjamin holding [14, 37, 40] plays the 37 
Round 7: Nicholas holding [19, 42, 44] plays the 19 
Round 7: Dean     holding [24, 25, 39] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
29 36 38 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 36, 38] plays the 29 
Benjamin wins the round which contains 3 penalty points

Round 8: Benjamin holding [14, 40] plays the 14 
Round 8: Nicholas holding [42, 44] plays the 44 
Round 8: Dean     holding [25, 39] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
36 38 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 8: Eugenius holding [36, 38] plays the 36 
Nicholas wins the round 

Round 9: Nicholas holding [42] plays the 42 
Round 9: Dean     holding [39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Round 9: Benjamin holding [40] plays the 40 
Nicholas wins the round which contains 7 penalty points


Finishing Positions

#1 with 0 penalty points Dean (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Benjamin (system)
#4 with 14 penalty points Nicholas (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6768358 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 13, 17, 21, 26, 29, 37, 41, 45, 48]
Table position 1: Nathan  : [14, 15, 22, 25, 30, 35, 39, 43, 46, 49]
Table position 2: Benjamin: [10, 16, 27, 28, 32, 33, 34, 36, 44, 47]
Table position 3: Livia   : [12, 18, 19, 20, 23, 24, 31, 38, 40, 42]

Discards:
Eugenius [41, 45, 48]
Nathan   [25, 46, 49]
Benjamin [32, 34, 36]
Livia    [20, 23, 24]


Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 20 21 23 24 26 29 37 

20------------------------------------------------------------------------

Round 0: Eugenius holding [11, 13, 17, 20, 21, 23, 24, 26, 29, 37] plays the 20 
Round 0: Nathan   holding [14, 15, 22, 30, 35, 39, 41, 43, 45, 48] plays the 45 
Round 0: Benjamin holding [10, 16, 25, 27, 28, 33, 44, 46, 47, 49] plays the 28 
Round 0: Livia    holding [12, 18, 19, 31, 32, 34, 36, 38, 40, 42] plays the 40 
Nathan wins the round 

Round 1: Nathan   holding [14, 15, 22, 30, 35, 39, 41, 43, 48] plays the 39 
Round 1: Benjamin holding [10, 16, 25, 27, 33, 44, 46, 47, 49] plays the 33 
Round 1: Livia    holding [12, 18, 19, 31, 32, 34, 36, 38, 42] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 21 23 24 26 29 37 0 

21------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 17, 21, 23, 24, 26, 29, 37] plays the 21 
Nathan wins the round 

Round 2: Nathan   holding [14, 15, 22, 30, 35, 41, 43, 48] plays the 14 
Round 2: Benjamin holding [10, 16, 25, 27, 44, 46, 47, 49] plays the 16 
Round 2: Livia    holding [12, 19, 31, 32, 34, 36, 38, 42] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 23 24 26 29 37 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 17, 23, 24, 26, 29, 37] plays the 24 
Livia wins the round 

Round 3: Livia    holding [12, 19, 31, 34, 36, 38, 42] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 23 26 29 37 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 17, 23, 26, 29, 37] plays the 26 
Round 3: Nathan   holding [15, 22, 30, 35, 41, 43, 48] plays the 22 
Round 3: Benjamin holding [10, 25, 27, 44, 46, 47, 49] plays the 10 
Livia wins the round 

Round 4: Livia    holding [12, 19, 31, 34, 38, 42] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 17 23 29 37 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 17, 23, 29, 37] plays the 11 
Round 4: Nathan   holding [15, 30, 35, 41, 43, 48] plays the 48 
Round 4: Benjamin holding [25, 27, 44, 46, 47, 49] plays the 44 
Nathan wins the round which contains 1 penalty points

Round 5: Nathan   holding [15, 30, 35, 41, 43] plays the 41 
Round 5: Benjamin holding [25, 27, 46, 47, 49] plays the 47 
Round 5: Livia    holding [12, 19, 31, 38, 42] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 29 37 0 0 0 0 0 

13------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 23, 29, 37] plays the 13 
Benjamin wins the round which contains 4 penalty points

Round 6: Benjamin holding [25, 27, 46, 49] plays the 49 
Round 6: Livia    holding [12, 31, 38, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 29 37 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 6: Eugenius holding [17, 23, 29, 37] plays the 17 
Round 6: Nathan   holding [15, 30, 35, 43] plays the 35 
Benjamin wins the round which contains 8 penalty points

Round 7: Benjamin holding [25, 27, 46] plays the 27 
Round 7: Livia    holding [12, 31, 38] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 37 0 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 7: Eugenius holding [23, 29, 37] plays the 23 
Round 7: Nathan   holding [15, 30, 43] plays the 30 
Nathan wins the round which contains 1 penalty points

Round 8: Nathan   holding [15, 43] plays the 15 
Round 8: Benjamin holding [25, 46] plays the 25 
Round 8: Livia    holding [31, 38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
29 37 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 8: Eugenius holding [29, 37] plays the 29 
Benjamin wins the round which contains 1 penalty points

Round 9: Benjamin holding [46] plays the 46 
Round 9: Livia    holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Nathan   holding [43] plays the 43 
Benjamin wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Livia (system)
#3 with 2 penalty points Nathan (system)
#4 with 16 penalty points Benjamin (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 4336541 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Zachary : [11, 20, 24, 32, 33, 40, 43, 44, 47, 48]
Table position 1: Mitchell: [14, 21, 25, 26, 29, 30, 35, 37, 38, 45]
Table position 2: Nicholas: [12, 13, 15, 16, 17, 18, 31, 36, 46, 49]
Table position 3: Eugenius: [10, 19, 22, 23, 27, 28, 34, 39, 41, 42]

Discards:
Zachary  [43, 44, 48]
Mitchell [25, 35, 38]
Nicholas [17, 18, 46]
Eugenius [39, 41, 42]

Round 0: Zachary  holding [11, 20, 24, 32, 33, 39, 40, 41, 42, 47] plays the 32 
Round 0: Mitchell holding [14, 21, 26, 29, 30, 37, 43, 44, 45, 48] plays the 44 
Round 0: Nicholas holding [12, 13, 15, 16, 25, 31, 35, 36, 38, 49] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
10 17 18 19 22 23 27 28 34 46 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 17, 18, 19, 22, 23, 27, 28, 34, 46] plays the 10 
Mitchell wins the round 

Round 1: Mitchell holding [14, 21, 26, 29, 30, 37, 43, 45, 48] plays the 21 
Round 1: Nicholas holding [13, 15, 16, 25, 31, 35, 36, 38, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
17 18 19 22 23 27 28 34 46 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [17, 18, 19, 22, 23, 27, 28, 34, 46] plays the 18 
Round 1: Zachary  holding [11, 20, 24, 33, 39, 40, 41, 42, 47] plays the 24 
Nicholas wins the round 

Round 2: Nicholas holding [13, 15, 16, 25, 31, 35, 36, 38] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 22 23 27 28 34 46 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [17, 19, 22, 23, 27, 28, 34, 46] plays the 28 
Round 2: Zachary  holding [11, 20, 33, 39, 40, 41, 42, 47] plays the 42 
Round 2: Mitchell holding [14, 26, 29, 30, 37, 43, 45, 48] plays the 30 
Zachary wins the round which contains 7 penalty points

Round 3: Zachary  holding [11, 20, 33, 39, 40, 41, 47] plays the 20 
Round 3: Mitchell holding [14, 26, 29, 37, 43, 45, 48] plays the 14 
Round 3: Nicholas holding [13, 15, 16, 25, 31, 36, 38] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 22 23 27 34 46 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 22, 23, 27, 34, 46] plays the 22 
Nicholas wins the round 

Round 4: Nicholas holding [13, 15, 16, 25, 31, 38] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 23 27 34 46 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 23, 27, 34, 46] plays the 17 
Round 4: Zachary  holding [11, 33, 39, 40, 41, 47] plays the 40 
Round 4: Mitchell holding [26, 29, 37, 43, 45, 48] plays the 45 
Mitchell wins the round which contains 1 penalty points

Round 5: Mitchell holding [26, 29, 37, 43, 48] plays the 37 
Round 5: Nicholas holding [13, 15, 16, 31, 38] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 27 34 46 0 0 0 0 0 

19------------------------------------------------------------------------

Round 5: Eugenius holding [19, 23, 27, 34, 46] plays the 19 
Round 5: Zachary  holding [11, 33, 39, 41, 47] plays the 11 
Mitchell wins the round which contains 4 penalty points

Round 6: Mitchell holding [26, 29, 43, 48] plays the 26 
Round 6: Nicholas holding [15, 16, 31, 38] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
23 27 34 46 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 6: Eugenius holding [23, 27, 34, 46] plays the 34 
Round 6: Zachary  holding [33, 39, 41, 47] plays the 39 
Zachary wins the round 

Round 7: Zachary  holding [33, 41, 47] plays the 33 
Round 7: Mitchell holding [29, 43, 48] plays the 48 
Round 7: Nicholas holding [15, 31, 38] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
23 27 46 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius holding [23, 27, 46] plays the 27 
Mitchell wins the round 

Round 8: Mitchell holding [29, 43] plays the 29 
Round 8: Nicholas holding [31, 38] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
23 46 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 8: Eugenius holding [23, 46] plays the 23 
Round 8: Zachary  holding [41, 47] plays the 41 
Zachary wins the round which contains 4 penalty points

Round 9: Zachary  holding [47] plays the 47 
Round 9: Mitchell holding [43] plays the 43 
Round 9: Nicholas holding [38] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
46 0 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 9: Eugenius holding [46] plays the 46 
Zachary wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Nicholas (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 5 penalty points Mitchell (system)
#4 with 13 penalty points Zachary (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 6723311 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [15, 22, 24, 25, 27, 33, 34, 37, 43, 48]
Table position 1: Costa   : [16, 17, 18, 19, 39, 40, 41, 44, 45, 47]
Table position 2: Connor  : [14, 21, 23, 26, 29, 30, 32, 36, 46, 49]
Table position 3: Kane    : [10, 11, 12, 13, 20, 28, 31, 35, 38, 42]

Discards:
Eugenius [37, 43, 48]
Costa    [39, 40, 41]
Connor   [26, 30, 32]
Kane     [12, 31, 35]


Debug output from Eugenius
------------------------------------------------------------------------
12 15 22 24 25 27 31 33 34 35 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 15, 22, 24, 25, 27, 31, 33, 34, 35] plays the 12 
Round 0: Costa    holding [16, 17, 18, 19, 37, 43, 44, 45, 47, 48] plays the 18 
Round 0: Connor   holding [14, 21, 23, 29, 36, 39, 40, 41, 46, 49] plays the 39 
Round 0: Kane     holding [10, 11, 13, 20, 26, 28, 30, 32, 38, 42] plays the 10 
Connor wins the round 

Round 1: Connor   holding [14, 21, 23, 29, 36, 40, 41, 46, 49] plays the 40 
Round 1: Kane     holding [11, 13, 20, 26, 28, 30, 32, 38, 42] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
15 22 24 25 27 31 33 34 35 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [15, 22, 24, 25, 27, 31, 33, 34, 35] plays the 15 
Round 1: Costa    holding [16, 17, 19, 37, 43, 44, 45, 47, 48] plays the 45 
Costa wins the round 

Round 2: Costa    holding [16, 17, 19, 37, 43, 44, 47, 48] plays the 48 
Round 2: Connor   holding [14, 21, 23, 29, 36, 41, 46, 49] plays the 21 
Round 2: Kane     holding [11, 13, 26, 28, 30, 32, 38, 42] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
22 24 25 27 31 33 34 35 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [22, 24, 25, 27, 31, 33, 34, 35] plays the 22 
Costa wins the round 

Round 3: Costa    holding [16, 17, 19, 37, 43, 44, 47] plays the 16 
Round 3: Connor   holding [14, 23, 29, 36, 41, 46, 49] plays the 46 
Round 3: Kane     holding [11, 13, 26, 30, 32, 38, 42] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
24 25 27 31 33 34 35 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [24, 25, 27, 31, 33, 34, 35] plays the 24 
Connor wins the round 

Round 4: Connor   holding [14, 23, 29, 36, 41, 49] plays the 36 
Round 4: Kane     holding [11, 13, 26, 30, 32, 42] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
25 27 31 33 34 35 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [25, 27, 31, 33, 34, 35] plays the 27 
Round 4: Costa    holding [17, 19, 37, 43, 44, 47] plays the 44 
Costa wins the round which contains 7 penalty points

Round 5: Costa    holding [17, 19, 37, 43, 47] plays the 47 
Round 5: Connor   holding [14, 23, 29, 41, 49] plays the 29 
Round 5: Kane     holding [11, 13, 26, 30, 32] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
25 31 33 34 35 0 0 0 0 0 

31------------------------------------------------------------------------

Round 5: Eugenius holding [25, 31, 33, 34, 35] plays the 31 
Costa wins the round which contains 4 penalty points

Round 6: Costa    holding [17, 19, 37, 43] plays the 19 
Round 6: Connor   holding [14, 23, 41, 49] plays the 23 
Round 6: Kane     holding [11, 26, 30, 32] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
25 33 34 35 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 6: Eugenius holding [25, 33, 34, 35] plays the 25 
Connor wins the round which contains 3 penalty points

Round 7: Connor   holding [14, 41, 49] plays the 49 
Round 7: Kane     holding [26, 30, 32] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
33 34 35 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 7: Eugenius holding [33, 34, 35] plays the 35 
Round 7: Costa    holding [17, 37, 43] plays the 43 
Connor wins the round which contains 1 penalty points

Round 8: Connor   holding [14, 41] plays the 41 
Round 8: Kane     holding [26, 32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
33 34 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 8: Eugenius holding [33, 34] plays the 33 
Round 8: Costa    holding [17, 37] plays the 37 
Connor wins the round which contains 2 penalty points

Round 9: Connor   holding [14] plays the 14 
Round 9: Kane     holding [26] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
34 0 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 9: Eugenius holding [34] plays the 34 
Round 9: Costa    holding [17] plays the 17 
Eugenius wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Kane (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Connor (system)
#4 with 11 penalty points Costa (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5443568 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Stephen : [15, 17, 21, 24, 29, 33, 35, 37, 43, 47]
Table position 1: Eugenius: [10, 12, 19, 20, 22, 25, 26, 28, 48, 49]
Table position 2: Braedon : [13, 14, 23, 30, 31, 36, 39, 40, 42, 44]
Table position 3: Peter   : [11, 16, 18, 27, 32, 34, 38, 41, 45, 46]

Discards:
Stephen  [17, 29, 43]
Eugenius [28, 48, 49]
Braedon  [13, 30, 36]
Peter    [27, 45, 46]

Round 0: Stephen  holding [15, 21, 24, 27, 33, 35, 37, 45, 46, 47] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 17 19 20 22 25 26 29 43 

12------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 17, 19, 20, 22, 25, 26, 29, 43] plays the 12 
Round 0: Braedon  holding [14, 23, 28, 31, 39, 40, 42, 44, 48, 49] plays the 28 
Round 0: Peter    holding [11, 13, 16, 18, 30, 32, 34, 36, 38, 41] plays the 30 
Peter wins the round 

Round 1: Peter    holding [11, 13, 16, 18, 32, 34, 36, 38, 41] plays the 32 
Round 1: Stephen  holding [15, 24, 27, 33, 35, 37, 45, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
10 17 19 20 22 25 26 29 43 0 

10------------------------------------------------------------------------

Round 1: Eugenius holding [10, 17, 19, 20, 22, 25, 26, 29, 43] plays the 10 
Round 1: Braedon  holding [14, 23, 31, 39, 40, 42, 44, 48, 49] plays the 48 
Braedon wins the round 

Round 2: Braedon  holding [14, 23, 31, 39, 40, 42, 44, 49] plays the 40 
Round 2: Peter    holding [11, 13, 16, 18, 34, 36, 38, 41] plays the 18 
Round 2: Stephen  holding [15, 24, 27, 33, 35, 37, 45, 47] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 20 22 25 26 29 43 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [17, 19, 20, 22, 25, 26, 29, 43] plays the 20 
Braedon wins the round 

Round 3: Braedon  holding [14, 23, 31, 39, 42, 44, 49] plays the 14 
Round 3: Peter    holding [11, 13, 16, 34, 36, 38, 41] plays the 34 
Round 3: Stephen  holding [24, 27, 33, 35, 37, 45, 47] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 22 25 26 29 43 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 22, 25, 26, 29, 43] plays the 22 
Peter wins the round 

Round 4: Peter    holding [11, 13, 16, 36, 38, 41] plays the 36 
Round 4: Stephen  holding [27, 33, 35, 37, 45, 47] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 25 26 29 43 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 25, 26, 29, 43] plays the 26 
Round 4: Braedon  holding [23, 31, 39, 42, 44, 49] plays the 39 
Braedon wins the round 

Round 5: Braedon  holding [23, 31, 42, 44, 49] plays the 44 
Round 5: Peter    holding [11, 13, 16, 38, 41] plays the 16 
Round 5: Stephen  holding [33, 35, 37, 45, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 25 29 43 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 25, 29, 43] plays the 17 
Braedon wins the round which contains 1 penalty points

Round 6: Braedon  holding [23, 31, 42, 49] plays the 49 
Round 6: Peter    holding [11, 13, 38, 41] plays the 11 
Round 6: Stephen  holding [35, 37, 45, 47] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
19 25 29 43 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 6: Eugenius holding [19, 25, 29, 43] plays the 19 
Braedon wins the round which contains 2 penalty points

Round 7: Braedon  holding [23, 31, 42] plays the 42 
Round 7: Peter    holding [13, 38, 41] plays the 38 
Round 7: Stephen  holding [37, 45, 47] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 43 0 0 0 0 0 0 0 

25 chah------------------------------------------------------------------------

Round 7: Eugenius holding [25, 29, 43] plays the 25 
Stephen wins the round which contains 7 penalty points

Round 8: Stephen  holding [37, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
29 43 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 43] plays the 29 
Round 8: Braedon  holding [23, 31] plays the 31 
Round 8: Peter    holding [13, 41] plays the 41 
Stephen wins the round which contains 4 penalty points

Round 9: Stephen  holding [37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 9: Eugenius holding [43] plays the 43 
Round 9: Braedon  holding [23] plays the 23 
Round 9: Peter    holding [13] plays the 13 
Eugenius wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points Peter (system)
#2 with 3 penalty points Braedon (system)
#3 with 4 penalty points Eugenius (dodo.c)
#4 with 11 penalty points Stephen (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9889938 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius : [10, 19, 23, 24, 31, 33, 37, 39, 45, 49]
Table position 1: Claire   : [14, 15, 16, 17, 18, 20, 35, 38, 43, 48]
Table position 2: Elizabeth: [11, 21, 26, 27, 34, 36, 40, 41, 44, 47]
Table position 3: Trung    : [12, 13, 22, 25, 28, 29, 30, 32, 42, 46]

Discards:
Eugenius  [39, 45, 49]
Claire    [15, 17, 48]
Elizabeth [26, 27, 47]
Trung     [25, 32, 42]


Debug output from Eugenius
------------------------------------------------------------------------
10 19 23 24 25 31 32 33 37 42 

10------------------------------------------------------------------------

Round 0: Eugenius  holding [10, 19, 23, 24, 25, 31, 32, 33, 37, 42] plays the 10 
Round 0: Claire    holding [14, 16, 18, 20, 35, 38, 39, 43, 45, 49] plays the 16 
Round 0: Elizabeth holding [11, 15, 17, 21, 34, 36, 40, 41, 44, 48] plays the 15 
Round 0: Trung     holding [12, 13, 22, 26, 27, 28, 29, 30, 46, 47] plays the 26 
Trung wins the round 

Round 1: Trung     holding [12, 13, 22, 27, 28, 29, 30, 46, 47] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 24 25 31 32 33 37 42 0 

24------------------------------------------------------------------------

Round 1: Eugenius  holding [19, 23, 24, 25, 31, 32, 33, 37, 42] plays the 24 
Round 1: Claire    holding [14, 18, 20, 35, 38, 39, 43, 45, 49] plays the 35 
Round 1: Elizabeth holding [11, 17, 21, 34, 36, 40, 41, 44, 48] plays the 34 
Claire wins the round 

Round 2: Claire    holding [14, 18, 20, 38, 39, 43, 45, 49] plays the 14 
Round 2: Elizabeth holding [11, 17, 21, 36, 40, 41, 44, 48] plays the 21 
Round 2: Trung     holding [12, 13, 22, 27, 28, 29, 46, 47] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 25 31 32 33 37 42 0 0 

32------------------------------------------------------------------------

Round 2: Eugenius  holding [19, 23, 25, 31, 32, 33, 37, 42] plays the 32 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
19 23 25 31 33 37 42 0 0 0 

25------------------------------------------------------------------------

Round 3: Eugenius  holding [19, 23, 25, 31, 33, 37, 42] plays the 25 
Round 3: Claire    holding [18, 20, 38, 39, 43, 45, 49] plays the 45 
Round 3: Elizabeth holding [11, 17, 36, 40, 41, 44, 48] plays the 40 
Round 3: Trung     holding [12, 13, 22, 27, 29, 46, 47] plays the 27 
Claire wins the round 

Round 4: Claire    holding [18, 20, 38, 39, 43, 49] plays the 39 
Round 4: Elizabeth holding [11, 17, 36, 41, 44, 48] plays the 36 
Round 4: Trung     holding [12, 13, 22, 29, 46, 47] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 31 33 37 42 0 0 0 0 

33------------------------------------------------------------------------

Round 4: Eugenius  holding [19, 23, 31, 33, 37, 42] plays the 33 
Claire wins the round 

Round 5: Claire    holding [18, 20, 38, 43, 49] plays the 18 
Round 5: Elizabeth holding [11, 17, 41, 44, 48] plays the 48 
Round 5: Trung     holding [13, 22, 29, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 31 37 42 0 0 0 0 0 

42------------------------------------------------------------------------

Round 5: Eugenius  holding [19, 23, 31, 37, 42] plays the 42 
Elizabeth wins the round which contains 7 penalty points

Round 6: Elizabeth holding [11, 17, 41, 44] plays the 44 
Round 6: Trung     holding [13, 22, 29, 47] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
19 23 31 37 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 6: Eugenius  holding [19, 23, 31, 37] plays the 19 
Round 6: Claire    holding [20, 38, 43, 49] plays the 38 
Elizabeth wins the round which contains 1 penalty points

Round 7: Elizabeth holding [11, 17, 41] plays the 11 
Round 7: Trung     holding [13, 29, 47] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
23 31 37 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius  holding [23, 31, 37] plays the 23 
Round 7: Claire    holding [20, 43, 49] plays the 43 
Claire wins the round which contains 4 penalty points

Round 8: Claire    holding [20, 49] plays the 20 
Round 8: Elizabeth holding [17, 41] plays the 41 
Round 8: Trung     holding [29, 47] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius  holding [31, 37] plays the 31 
Claire wins the round which contains 3 penalty points

Round 9: Claire    holding [49] plays the 49 
Round 9: Elizabeth holding [17] plays the 17 
Round 9: Trung     holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 9: Eugenius  holding [37] plays the 37 
Claire wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Trung (system)
#3 with 8 penalty points Elizabeth (system)
#4 with 10 penalty points Claire (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7538039 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Reede    : [19, 22, 27, 32, 35, 37, 41, 43, 46, 49]
Table position 1: Elizabeth: [11, 12, 13, 14, 17, 24, 31, 36, 40, 45]
Table position 2: Eugenius : [10, 15, 20, 21, 25, 29, 33, 34, 39, 44]
Table position 3: Marc     : [16, 18, 23, 26, 28, 30, 38, 42, 47, 48]

Discards:
Reede     [27, 41, 43]
Elizabeth [12, 17, 36]
Eugenius  [34, 39, 44]
Marc      [28, 30, 48]

Round 0: Reede     holding [19, 22, 28, 30, 32, 35, 37, 46, 48, 49] plays the 30 
Round 0: Elizabeth holding [11, 13, 14, 24, 27, 31, 40, 41, 43, 45] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 15 17 20 21 25 29 33 36 

10------------------------------------------------------------------------

Round 0: Eugenius  holding [10, 12, 15, 17, 20, 21, 25, 29, 33, 36] plays the 10 
Round 0: Marc      holding [16, 18, 23, 26, 34, 38, 39, 42, 44, 47] plays the 26 
Reede wins the round 

Round 1: Reede     holding [19, 22, 28, 32, 35, 37, 46, 48, 49] plays the 48 
Round 1: Elizabeth holding [11, 13, 14, 27, 31, 40, 41, 43, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
12 15 17 20 21 25 29 33 36 0 

12------------------------------------------------------------------------

Round 1: Eugenius  holding [12, 15, 17, 20, 21, 25, 29, 33, 36] plays the 12 
Round 1: Marc      holding [16, 18, 23, 34, 38, 39, 42, 44, 47] plays the 34 
Reede wins the round 

Round 2: Reede     holding [19, 22, 28, 32, 35, 37, 46, 49] plays the 46 
Round 2: Elizabeth holding [11, 13, 14, 27, 31, 40, 41, 43] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
15 17 20 21 25 29 33 36 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius  holding [15, 17, 20, 21, 25, 29, 33, 36] plays the 20 
Round 2: Marc      holding [16, 18, 23, 38, 39, 42, 44, 47] plays the 44 
Reede wins the round 

Round 3: Reede     holding [19, 22, 28, 32, 35, 37, 49] plays the 28 
Round 3: Elizabeth holding [11, 13, 14, 27, 31, 41, 43] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
15 17 21 25 29 33 36 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius  holding [15, 17, 21, 25, 29, 33, 36] plays the 21 
Round 3: Marc      holding [16, 18, 23, 38, 39, 42, 47] plays the 18 
Reede wins the round 

Round 4: Reede     holding [19, 22, 32, 35, 37, 49] plays the 49 
Round 4: Elizabeth holding [11, 13, 27, 31, 41, 43] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
15 17 25 29 33 36 0 0 0 0 

15 chah------------------------------------------------------------------------

Round 4: Eugenius  holding [15, 17, 25, 29, 33, 36] plays the 15 
Round 4: Marc      holding [16, 23, 38, 39, 42, 47] plays the 42 
Reede wins the round which contains 7 penalty points

Round 5: Reede     holding [19, 22, 32, 35, 37] plays the 22 
Round 5: Elizabeth holding [11, 13, 31, 41, 43] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 29 33 36 0 0 0 0 0 

33------------------------------------------------------------------------

Round 5: Eugenius  holding [17, 25, 29, 33, 36] plays the 33 
Round 5: Marc      holding [16, 23, 38, 39, 47] plays the 38 
Marc wins the round which contains 1 penalty points

Round 6: Marc      holding [16, 23, 39, 47] plays the 23 
Round 6: Reede     holding [19, 32, 35, 37] plays the 19 
Round 6: Elizabeth holding [11, 13, 31, 43] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
17 25 29 36 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius  holding [17, 25, 29, 36] plays the 17 
Marc wins the round which contains 4 penalty points

Round 7: Marc      holding [16, 39, 47] plays the 16 
Round 7: Reede     holding [32, 35, 37] plays the 32 
Round 7: Elizabeth holding [11, 31, 43] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
25 29 36 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 7: Eugenius  holding [25, 29, 36] plays the 36 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
25 29 0 0 0 0 0 0 0 0 

25------------------------------------------------------------------------

Round 8: Eugenius  holding [25, 29] plays the 25 
Round 8: Marc      holding [39, 47] plays the 47 
Round 8: Reede     holding [35, 37] plays the 35 
Round 8: Elizabeth holding [31, 43] plays the 43 
Reede wins the round which contains 2 penalty points

Round 9: Reede     holding [37] plays the 37 
Round 9: Elizabeth holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
29 0 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 9: Eugenius  holding [29] plays the 29 
Round 9: Marc      holding [39] plays the 39 
Reede wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Elizabeth (system)
#2 with 1 penalty points Eugenius (dodo.c)
#3 with 5 penalty points Marc (system)
#4 with 12 penalty points Reede (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 8582113 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Costa   : [11, 12, 14, 17, 24, 26, 27, 32, 33, 35]
Table position 1: Eugenius: [10, 15, 18, 23, 29, 31, 37, 38, 39, 42]
Table position 2: Braedon : [13, 16, 20, 21, 22, 40, 44, 46, 48, 49]
Table position 3: Emily   : [19, 25, 28, 30, 34, 36, 41, 43, 45, 47]

Discards:
Costa    [14, 26, 33]
Eugenius [38, 39, 42]
Braedon  [20, 21, 46]
Emily    [25, 30, 45]

Round 0: Costa    holding [11, 12, 17, 24, 25, 27, 30, 32, 35, 45] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
10 14 15 18 23 26 29 31 33 37 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 14, 15, 18, 23, 26, 29, 31, 33, 37] plays the 10 
Round 0: Braedon  holding [13, 16, 22, 38, 39, 40, 42, 44, 48, 49] plays the 40 
Round 0: Emily    holding [19, 20, 21, 28, 34, 36, 41, 43, 46, 47] plays the 21 
Braedon wins the round 

Round 1: Braedon  holding [13, 16, 22, 38, 39, 42, 44, 48, 49] plays the 38 
Round 1: Emily    holding [19, 20, 28, 34, 36, 41, 43, 46, 47] plays the 36 
Round 1: Costa    holding [11, 12, 17, 24, 25, 27, 30, 32, 45] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
14 15 18 23 26 29 31 33 37 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 15, 18, 23, 26, 29, 31, 33, 37] plays the 14 
Braedon wins the round 

Round 2: Braedon  holding [13, 16, 22, 39, 42, 44, 48, 49] plays the 22 
Round 2: Emily    holding [19, 20, 28, 34, 41, 43, 46, 47] plays the 34 
Round 2: Costa    holding [11, 17, 24, 25, 27, 30, 32, 45] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
15 18 23 26 29 31 33 37 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [15, 18, 23, 26, 29, 31, 33, 37] plays the 18 
Emily wins the round 

Round 3: Emily    holding [19, 20, 28, 41, 43, 46, 47] plays the 46 
Round 3: Costa    holding [11, 17, 24, 25, 27, 30, 45] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
15 23 26 29 31 33 37 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [15, 23, 26, 29, 31, 33, 37] plays the 26 
Round 3: Braedon  holding [13, 16, 39, 42, 44, 48, 49] plays the 48 
Braedon wins the round 

Round 4: Braedon  holding [13, 16, 39, 42, 44, 49] plays the 49 
Round 4: Emily    holding [19, 20, 28, 41, 43, 47] plays the 28 
Round 4: Costa    holding [11, 17, 24, 25, 27, 45] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
15 23 29 31 33 37 0 0 0 0 

15 chah------------------------------------------------------------------------

Round 4: Eugenius holding [15, 23, 29, 31, 33, 37] plays the 15 
Braedon wins the round 

Round 5: Braedon  holding [13, 16, 39, 42, 44] plays the 42 
Round 5: Emily    holding [19, 20, 41, 43, 47] plays the 20 
Round 5: Costa    holding [11, 17, 25, 27, 45] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 31 33 37 0 0 0 0 0 

33------------------------------------------------------------------------

Round 5: Eugenius holding [23, 29, 31, 33, 37] plays the 33 
Braedon wins the round which contains 7 penalty points

Round 6: Braedon  holding [13, 16, 39, 44] plays the 44 
Round 6: Emily    holding [19, 41, 43, 47] plays the 19 
Round 6: Costa    holding [11, 17, 25, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 31 37 0 0 0 0 0 0 

23 chah------------------------------------------------------------------------

Round 6: Eugenius holding [23, 29, 31, 37] plays the 23 
Braedon wins the round which contains 2 penalty points

Round 7: Braedon  holding [13, 16, 39] plays the 16 
Round 7: Emily    holding [41, 43, 47] plays the 41 
Round 7: Costa    holding [11, 17, 25] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 37 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 37] plays the 29 
Braedon wins the round which contains 3 penalty points

Round 8: Braedon  holding [13, 39] plays the 13 
Round 8: Emily    holding [43, 47] plays the 43 
Round 8: Costa    holding [17, 25] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 37] plays the 31 
Emily wins the round which contains 4 penalty points

Round 9: Emily    holding [47] plays the 47 
Round 9: Costa    holding [25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Braedon  holding [39] plays the 39 
Emily wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Costa (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Emily (system)
#4 with 12 penalty points Braedon (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5904492 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Stephen : [16, 17, 19, 22, 28, 34, 35, 39, 42, 48]
Table position 1: Eugenius: [10, 12, 15, 20, 21, 32, 40, 45, 46, 49]
Table position 2: Kane    : [11, 14, 18, 23, 24, 26, 30, 31, 38, 44]
Table position 3: Finbar  : [13, 25, 27, 29, 33, 36, 37, 41, 43, 47]

Discards:
Stephen  [22, 34, 39]
Eugenius [45, 46, 49]
Kane     [14, 18, 23]
Finbar   [13, 27, 29]

Round 0: Stephen  holding [13, 16, 17, 19, 27, 28, 29, 35, 42, 48] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 15 20 21 22 32 34 39 40 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 15, 20, 21, 22, 32, 34, 39, 40] plays the 10 
Round 0: Kane     holding [11, 24, 26, 30, 31, 38, 44, 45, 46, 49] plays the 46 
Round 0: Finbar   holding [14, 18, 23, 25, 33, 36, 37, 41, 43, 47] plays the 18 
Kane wins the round 

Round 1: Kane     holding [11, 24, 26, 30, 31, 38, 44, 45, 49] plays the 24 
Round 1: Finbar   holding [14, 23, 25, 33, 36, 37, 41, 43, 47] plays the 14 
Round 1: Stephen  holding [13, 16, 17, 19, 27, 29, 35, 42, 48] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
12 15 20 21 22 32 34 39 40 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 15, 20, 21, 22, 32, 34, 39, 40] plays the 12 
Stephen wins the round which contains 7 penalty points

Round 2: Stephen  holding [13, 16, 17, 19, 27, 29, 35, 48] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
15 20 21 22 32 34 39 40 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius holding [15, 20, 21, 22, 32, 34, 39, 40] plays the 15 
Round 2: Kane     holding [11, 26, 30, 31, 38, 44, 45, 49] plays the 45 
Round 2: Finbar   holding [23, 25, 33, 36, 37, 41, 43, 47] plays the 25 
Kane wins the round 

Round 3: Kane     holding [11, 26, 30, 31, 38, 44, 49] plays the 44 
Round 3: Finbar   holding [23, 33, 36, 37, 41, 43, 47] plays the 33 
Round 3: Stephen  holding [13, 16, 17, 19, 27, 29, 48] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
20 21 22 32 34 39 40 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [20, 21, 22, 32, 34, 39, 40] plays the 20 
Kane wins the round 

Round 4: Kane     holding [11, 26, 30, 31, 38, 49] plays the 26 
Round 4: Finbar   holding [23, 36, 37, 41, 43, 47] plays the 36 
Round 4: Stephen  holding [13, 17, 19, 27, 29, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
21 22 32 34 39 40 0 0 0 0 

22------------------------------------------------------------------------

Round 4: Eugenius holding [21, 22, 32, 34, 39, 40] plays the 22 
Stephen wins the round 

Round 5: Stephen  holding [13, 17, 19, 27, 29] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
21 32 34 39 40 0 0 0 0 0 

21------------------------------------------------------------------------

Round 5: Eugenius holding [21, 32, 34, 39, 40] plays the 21 
Round 5: Kane     holding [11, 30, 31, 38, 49] plays the 30 
Round 5: Finbar   holding [23, 37, 41, 43, 47] plays the 41 
Kane wins the round which contains 1 penalty points

Round 6: Kane     holding [11, 31, 38, 49] plays the 11 
Round 6: Finbar   holding [23, 37, 43, 47] plays the 47 
Round 6: Stephen  holding [13, 17, 19, 29] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
32 34 39 40 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 6: Eugenius holding [32, 34, 39, 40] plays the 32 
Finbar wins the round which contains 3 penalty points

Round 7: Finbar   holding [23, 37, 43] plays the 37 
Round 7: Stephen  holding [13, 19, 29] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
34 39 40 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 7: Eugenius holding [34, 39, 40] plays the 34 
Round 7: Kane     holding [31, 38, 49] plays the 31 
Finbar wins the round which contains 3 penalty points

Round 8: Finbar   holding [23, 43] plays the 43 
Round 8: Stephen  holding [19, 29] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
39 40 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 8: Eugenius holding [39, 40] plays the 39 
Round 8: Kane     holding [38, 49] plays the 38 
Finbar wins the round which contains 2 penalty points

Round 9: Finbar   holding [23] plays the 23 
Round 9: Stephen  holding [19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
40 0 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 9: Eugenius holding [40] plays the 40 
Round 9: Kane     holding [49] plays the 49 
Finbar wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Kane (system)
#3 with 7 penalty points Stephen (system)
#4 with 10 penalty points Finbar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 925729 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 16, 27, 29, 30, 33, 36, 37, 39, 46]
Table position 1: Kane    : [10, 19, 24, 34, 35, 40, 41, 45, 48, 49]
Table position 2: Michael : [14, 15, 17, 21, 22, 28, 31, 38, 44, 47]
Table position 3: Trung   : [12, 13, 18, 20, 23, 25, 26, 32, 42, 43]

Discards:
Eugenius [37, 39, 46]
Kane     [24, 41, 49]
Michael  [14, 28, 31]
Trung    [20, 23, 32]


Debug output from Eugenius
------------------------------------------------------------------------
11 16 20 23 27 29 30 32 33 36 

16------------------------------------------------------------------------

Round 0: Eugenius holding [11, 16, 20, 23, 27, 29, 30, 32, 33, 36] plays the 16 
Round 0: Kane     holding [10, 19, 34, 35, 37, 39, 40, 45, 46, 48] plays the 10 
Round 0: Michael  holding [15, 17, 21, 22, 24, 38, 41, 44, 47, 49] plays the 24 
Round 0: Trung    holding [12, 13, 14, 18, 25, 26, 28, 31, 42, 43] plays the 18 
Michael wins the round 

Round 1: Michael  holding [15, 17, 21, 22, 38, 41, 44, 47, 49] plays the 22 
Round 1: Trung    holding [12, 13, 14, 25, 26, 28, 31, 42, 43] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
11 20 23 27 29 30 32 33 36 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [11, 20, 23, 27, 29, 30, 32, 33, 36] plays the 20 
Round 1: Kane     holding [19, 34, 35, 37, 39, 40, 45, 46, 48] plays the 46 
Kane wins the round 

Round 2: Kane     holding [19, 34, 35, 37, 39, 40, 45, 48] plays the 48 
Round 2: Michael  holding [15, 17, 21, 38, 41, 44, 47, 49] plays the 21 
Round 2: Trung    holding [12, 13, 25, 26, 28, 31, 42, 43] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 27 29 30 32 33 36 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [11, 23, 27, 29, 30, 32, 33, 36] plays the 27 
Kane wins the round 

Round 3: Kane     holding [19, 34, 35, 37, 39, 40, 45] plays the 34 
Round 3: Michael  holding [15, 17, 38, 41, 44, 47, 49] plays the 44 
Round 3: Trung    holding [12, 13, 25, 26, 31, 42, 43] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 29 30 32 33 36 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [11, 23, 29, 30, 32, 33, 36] plays the 30 
Michael wins the round 

Round 4: Michael  holding [15, 17, 38, 41, 47, 49] plays the 15 
Round 4: Trung    holding [13, 25, 26, 31, 42, 43] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 29 32 33 36 0 0 0 0 

33------------------------------------------------------------------------

Round 4: Eugenius holding [11, 23, 29, 32, 33, 36] plays the 33 
Round 4: Kane     holding [19, 35, 37, 39, 40, 45] plays the 40 
Kane wins the round 

Round 5: Kane     holding [19, 35, 37, 39, 45] plays the 35 
Round 5: Michael  holding [17, 38, 41, 47, 49] plays the 49 
Round 5: Trung    holding [13, 26, 31, 42, 43] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 23 29 32 36 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 23, 29, 32, 36] plays the 11 
Michael wins the round which contains 8 penalty points

Round 6: Michael  holding [17, 38, 41, 47] plays the 47 
Round 6: Trung    holding [13, 26, 31, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 32 36 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 29, 32, 36] plays the 23 
Round 6: Kane     holding [19, 37, 39, 45] plays the 19 
Michael wins the round which contains 4 penalty points

Round 7: Michael  holding [17, 38, 41] plays the 41 
Round 7: Trung    holding [13, 26, 31] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
29 32 36 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 32, 36] plays the 29 
Round 7: Kane     holding [37, 39, 45] plays the 37 
Michael wins the round which contains 4 penalty points

Round 8: Michael  holding [17, 38] plays the 38 
Round 8: Trung    holding [26, 31] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
32 36 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 8: Eugenius holding [32, 36] plays the 32 
Round 8: Kane     holding [39, 45] plays the 45 
Michael wins the round 

Round 9: Michael  holding [17] plays the 17 
Round 9: Trung    holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
36 0 0 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 9: Eugenius holding [36] plays the 36 
Round 9: Kane     holding [39] plays the 39 
Trung wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Kane (system)
#3 with 2 penalty points Trung (system)
#4 with 16 penalty points Michael (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7239799 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Gal     : [11, 13, 24, 30, 36, 43, 44, 47, 48, 49]
Table position 1: Stephen : [18, 23, 26, 32, 34, 37, 39, 40, 41, 42]
Table position 2: Eugenius: [10, 12, 14, 15, 17, 21, 28, 29, 31, 33]
Table position 3: George  : [16, 19, 20, 22, 25, 27, 35, 38, 45, 46]

Discards:
Gal      [13, 30, 49]
Stephen  [37, 41, 42]
Eugenius [29, 31, 33]
George   [16, 35, 45]

Round 0: Gal      holding [11, 16, 24, 35, 36, 43, 44, 45, 47, 48] plays the 48 
Round 0: Stephen  holding [13, 18, 23, 26, 30, 32, 34, 39, 40, 49] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 14 15 17 21 28 37 41 42 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 14, 15, 17, 21, 28, 37, 41, 42] plays the 10 
Round 0: George   holding [19, 20, 22, 25, 27, 29, 31, 33, 38, 46] plays the 46 
Gal wins the round 

Round 1: Gal      holding [11, 16, 24, 35, 36, 43, 44, 45, 47] plays the 16 
Round 1: Stephen  holding [13, 18, 23, 26, 30, 32, 34, 39, 49] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
12 14 15 17 21 28 37 41 42 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 14, 15, 17, 21, 28, 37, 41, 42] plays the 12 
Round 1: George   holding [19, 20, 22, 25, 27, 29, 31, 33, 38] plays the 22 
Stephen wins the round 

Round 2: Stephen  holding [13, 18, 23, 30, 32, 34, 39, 49] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
14 15 17 21 28 37 41 42 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius holding [14, 15, 17, 21, 28, 37, 41, 42] plays the 15 
Round 2: George   holding [19, 20, 25, 27, 29, 31, 33, 38] plays the 27 
Round 2: Gal      holding [11, 24, 35, 36, 43, 44, 45, 47] plays the 24 
Stephen wins the round 

Round 3: Stephen  holding [13, 18, 23, 30, 32, 34, 49] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 21 28 37 41 42 0 0 0 

14------------------------------------------------------------------------

Round 3: Eugenius holding [14, 17, 21, 28, 37, 41, 42] plays the 14 
Round 3: George   holding [19, 20, 25, 29, 31, 33, 38] plays the 38 
Round 3: Gal      holding [11, 35, 36, 43, 44, 45, 47] plays the 36 
George wins the round 

Round 4: George   holding [19, 20, 25, 29, 31, 33] plays the 20 
Round 4: Gal      holding [11, 35, 43, 44, 45, 47] plays the 44 
Round 4: Stephen  holding [13, 18, 23, 30, 32, 49] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
17 21 28 37 41 42 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [17, 21, 28, 37, 41, 42] plays the 28 
Gal wins the round 

Round 5: Gal      holding [11, 35, 43, 45, 47] plays the 45 
Round 5: Stephen  holding [13, 18, 23, 30, 49] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
17 21 37 41 42 0 0 0 0 0 

21------------------------------------------------------------------------

Round 5: Eugenius holding [17, 21, 37, 41, 42] plays the 21 
Round 5: George   holding [19, 25, 29, 31, 33] plays the 33 
Gal wins the round 

Round 6: Gal      holding [11, 35, 43, 47] plays the 35 
Round 6: Stephen  holding [13, 23, 30, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
17 37 41 42 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 6: Eugenius holding [17, 37, 41, 42] plays the 42 
Round 6: George   holding [19, 25, 29, 31] plays the 25 
Stephen wins the round which contains 7 penalty points

Round 7: Stephen  holding [13, 23, 30] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
17 37 41 0 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 7: Eugenius holding [17, 37, 41] plays the 17 
Round 7: George   holding [19, 29, 31] plays the 29 
Round 7: Gal      holding [11, 43, 47] plays the 43 
Stephen wins the round which contains 3 penalty points

Round 8: Stephen  holding [13, 23] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
37 41 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 8: Eugenius holding [37, 41] plays the 37 
Round 8: George   holding [19, 31] plays the 19 
Round 8: Gal      holding [11, 47] plays the 11 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Round 9: George   holding [31] plays the 31 
Round 9: Gal      holding [47] plays the 47 
Round 9: Stephen  holding [23] plays the 23 
Gal wins the round which contains 4 penalty points


Finishing Positions

#1 with 0 penalty points George (system)
#2 with 4 penalty points Gal (system)
#2 with 4 penalty points Eugenius (dodo.c)
#4 with 10 penalty points Stephen (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 7812057 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Andrew  : [11, 17, 23, 28, 31, 33, 38, 39, 46, 49]
Table position 1: Eugenius: [10, 12, 27, 29, 30, 32, 41, 42, 44, 45]
Table position 2: Sabrina : [16, 20, 21, 22, 24, 25, 37, 40, 43, 48]
Table position 3: Minh    : [13, 14, 15, 18, 19, 26, 34, 35, 36, 47]

Discards:
Andrew   [11, 17, 23]
Eugenius [42, 44, 45]
Sabrina  [20, 25, 48]
Minh     [14, 19, 35]

Round 0: Andrew   holding [14, 19, 28, 31, 33, 35, 38, 39, 46, 49] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
10 11 12 17 23 27 29 30 32 41 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 11, 12, 17, 23, 27, 29, 30, 32, 41] plays the 10 
Round 0: Sabrina  holding [16, 21, 22, 24, 37, 40, 42, 43, 44, 45] plays the 21 
Round 0: Minh     holding [13, 15, 18, 20, 25, 26, 34, 36, 47, 48] plays the 34 
Minh wins the round 

Round 1: Minh     holding [13, 15, 18, 20, 25, 26, 36, 47, 48] plays the 26 
Round 1: Andrew   holding [14, 19, 31, 33, 35, 38, 39, 46, 49] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 17 23 27 29 30 32 41 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [11, 12, 17, 23, 27, 29, 30, 32, 41] plays the 12 
Round 1: Sabrina  holding [16, 22, 24, 37, 40, 42, 43, 44, 45] plays the 40 
Andrew wins the round 

Round 2: Andrew   holding [14, 19, 31, 33, 35, 38, 39, 49] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 23 27 29 30 32 41 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [11, 17, 23, 27, 29, 30, 32, 41] plays the 27 
Round 2: Sabrina  holding [16, 22, 24, 37, 42, 43, 44, 45] plays the 42 
Round 2: Minh     holding [13, 15, 18, 20, 25, 36, 47, 48] plays the 48 
Minh wins the round which contains 7 penalty points

Round 3: Minh     holding [13, 15, 18, 20, 25, 36, 47] plays the 36 
Round 3: Andrew   holding [14, 19, 31, 35, 38, 39, 49] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 23 29 30 32 41 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [11, 17, 23, 29, 30, 32, 41] plays the 30 
Round 3: Sabrina  holding [16, 22, 24, 37, 43, 44, 45] plays the 16 
Minh wins the round 

Round 4: Minh     holding [13, 15, 18, 20, 25, 47] plays the 20 
Round 4: Andrew   holding [19, 31, 35, 38, 39, 49] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 23 29 32 41 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [11, 17, 23, 29, 32, 41] plays the 32 
Round 4: Sabrina  holding [22, 24, 37, 43, 44, 45] plays the 45 
Sabrina wins the round 

Round 5: Sabrina  holding [22, 24, 37, 43, 44] plays the 44 
Round 5: Minh     holding [13, 15, 18, 25, 47] plays the 18 
Round 5: Andrew   holding [19, 31, 35, 39, 49] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 23 29 41 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 17, 23, 29, 41] plays the 11 
Sabrina wins the round which contains 2 penalty points

Round 6: Sabrina  holding [22, 24, 37, 43] plays the 22 
Round 6: Minh     holding [13, 15, 25, 47] plays the 47 
Round 6: Andrew   holding [31, 35, 39, 49] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 29 41 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 6: Eugenius holding [17, 23, 29, 41] plays the 17 
Sabrina wins the round which contains 2 penalty points

Round 7: Sabrina  holding [24, 37, 43] plays the 37 
Round 7: Minh     holding [13, 15, 25] plays the 13 
Round 7: Andrew   holding [31, 35, 49] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 41 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 7: Eugenius holding [23, 29, 41] plays the 23 
Sabrina wins the round which contains 4 penalty points

Round 8: Sabrina  holding [24, 43] plays the 43 
Round 8: Minh     holding [15, 25] plays the 15 
Round 8: Andrew   holding [35, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
29 41 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 41] plays the 29 
Sabrina wins the round which contains 2 penalty points

Round 9: Sabrina  holding [24] plays the 24 
Round 9: Minh     holding [25] plays the 25 
Round 9: Andrew   holding [35] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41 chah------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Sabrina wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Andrew (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Minh (system)
#4 with 11 penalty points Sabrina (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 12168248 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: David   : [10, 24, 25, 26, 28, 31, 32, 34, 35, 49]
Table position 1: Heather : [11, 19, 20, 21, 29, 36, 38, 39, 45, 47]
Table position 2: Eugenius: [13, 16, 17, 18, 23, 27, 33, 40, 42, 46]
Table position 3: Benjamin: [12, 14, 15, 22, 30, 37, 41, 43, 44, 48]

Discards:
David    [10, 24, 26]
Heather  [21, 36, 38]
Eugenius [40, 42, 46]
Benjamin [12, 37, 43]

Round 0: David    holding [12, 25, 28, 31, 32, 34, 35, 37, 43, 49] plays the 12 
Round 0: Heather  holding [10, 11, 19, 20, 24, 26, 29, 39, 45, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 17 18 21 23 27 33 36 38 

16------------------------------------------------------------------------

Round 0: Eugenius holding [13, 16, 17, 18, 21, 23, 27, 33, 36, 38] plays the 16 
Round 0: Benjamin holding [14, 15, 22, 30, 40, 41, 42, 44, 46, 48] plays the 44 
Benjamin wins the round 

Round 1: Benjamin holding [14, 15, 22, 30, 40, 41, 42, 46, 48] plays the 30 
Round 1: David    holding [25, 28, 31, 32, 34, 35, 37, 43, 49] plays the 34 
Round 1: Heather  holding [10, 11, 19, 24, 26, 29, 39, 45, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 18 21 23 27 33 36 38 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [13, 17, 18, 21, 23, 27, 33, 36, 38] plays the 18 
David wins the round 

Round 2: David    holding [25, 28, 31, 32, 35, 37, 43, 49] plays the 35 
Round 2: Heather  holding [10, 11, 19, 24, 29, 39, 45, 47] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 21 23 27 33 36 38 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 21, 23, 27, 33, 36, 38] plays the 21 
Round 2: Benjamin holding [14, 15, 22, 40, 41, 42, 46, 48] plays the 15 
David wins the round 

Round 3: David    holding [25, 28, 31, 32, 37, 43, 49] plays the 28 
Round 3: Heather  holding [11, 19, 24, 29, 39, 45, 47] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 27 33 36 38 0 0 0 

36------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 23, 27, 33, 36, 38] plays the 36 
Round 3: Benjamin holding [14, 22, 40, 41, 42, 46, 48] plays the 22 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 27 33 38 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 23, 27, 33, 38] plays the 27 
Round 4: Benjamin holding [14, 40, 41, 42, 46, 48] plays the 48 
Round 4: David    holding [25, 31, 32, 37, 43, 49] plays the 25 
Round 4: Heather  holding [11, 19, 29, 39, 45, 47] plays the 39 
Benjamin wins the round 

Round 5: Benjamin holding [14, 40, 41, 42, 46] plays the 46 
Round 5: David    holding [31, 32, 37, 43, 49] plays the 32 
Round 5: Heather  holding [11, 19, 29, 45, 47] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 33 38 0 0 0 0 0 

38------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 23, 33, 38] plays the 38 
Benjamin wins the round which contains 1 penalty points

Round 6: Benjamin holding [14, 40, 41, 42] plays the 42 
Round 6: David    holding [31, 37, 43, 49] plays the 49 
Round 6: Heather  holding [19, 29, 45, 47] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 33 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 6: Eugenius holding [13, 17, 23, 33] plays the 33 
David wins the round which contains 7 penalty points

Round 7: David    holding [31, 37, 43] plays the 43 
Round 7: Heather  holding [19, 29, 47] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 23 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 17, 23] plays the 13 
Round 7: Benjamin holding [14, 40, 41] plays the 41 
David wins the round which contains 4 penalty points

Round 8: David    holding [31, 37] plays the 31 
Round 8: Heather  holding [19, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
17 23 0 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 8: Eugenius holding [17, 23] plays the 17 
Round 8: Benjamin holding [14, 40] plays the 14 
Heather wins the round which contains 3 penalty points

Round 9: Heather  holding [19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
23 0 0 0 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 9: Eugenius holding [23] plays the 23 
Round 9: Benjamin holding [40] plays the 40 
Round 9: David    holding [37] plays the 37 
David wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Benjamin (system)
#3 with 3 penalty points Heather (system)
#4 with 14 penalty points David (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9080469 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Reede   : [11, 14, 17, 21, 23, 26, 30, 33, 38, 47]
Table position 1: Eugenius: [15, 22, 27, 28, 29, 32, 36, 37, 44, 48]
Table position 2: George  : [19, 20, 24, 25, 31, 34, 35, 39, 42, 49]
Table position 3: Connor  : [10, 12, 13, 16, 18, 40, 41, 43, 45, 46]

Discards:
Reede    [17, 30, 33]
Eugenius [37, 44, 48]
George   [34, 35, 49]
Connor   [12, 45, 46]

Round 0: Reede    holding [11, 12, 14, 21, 23, 26, 38, 45, 46, 47] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
15 17 22 27 28 29 30 32 33 36 

15------------------------------------------------------------------------

Round 0: Eugenius holding [15, 17, 22, 27, 28, 29, 30, 32, 33, 36] plays the 15 
Round 0: George   holding [19, 20, 24, 25, 31, 37, 39, 42, 44, 48] plays the 39 
Round 0: Connor   holding [10, 13, 16, 18, 34, 35, 40, 41, 43, 49] plays the 34 
George wins the round 

Round 1: George   holding [19, 20, 24, 25, 31, 37, 42, 44, 48] plays the 20 
Round 1: Connor   holding [10, 13, 16, 18, 35, 40, 41, 43, 49] plays the 35 
Round 1: Reede    holding [11, 14, 21, 23, 26, 38, 45, 46, 47] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
17 22 27 28 29 30 32 33 36 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [17, 22, 27, 28, 29, 30, 32, 33, 36] plays the 22 
Reede wins the round 

Round 2: Reede    holding [11, 14, 21, 23, 26, 38, 46, 47] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
17 27 28 29 30 32 33 36 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [17, 27, 28, 29, 30, 32, 33, 36] plays the 27 
Round 2: George   holding [19, 24, 25, 31, 37, 42, 44, 48] plays the 48 
Round 2: Connor   holding [10, 13, 16, 18, 40, 41, 43, 49] plays the 18 
George wins the round 

Round 3: George   holding [19, 24, 25, 31, 37, 42, 44] plays the 42 
Round 3: Connor   holding [10, 13, 16, 40, 41, 43, 49] plays the 10 
Round 3: Reede    holding [11, 14, 23, 26, 38, 46, 47] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
17 28 29 30 32 33 36 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [17, 28, 29, 30, 32, 33, 36] plays the 28 
Reede wins the round which contains 7 penalty points

Round 4: Reede    holding [11, 14, 23, 26, 38, 47] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 30 32 33 36 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [17, 29, 30, 32, 33, 36] plays the 30 
Round 4: George   holding [19, 24, 25, 31, 37, 44] plays the 44 
Round 4: Connor   holding [13, 16, 40, 41, 43, 49] plays the 40 
George wins the round 

Round 5: George   holding [19, 24, 25, 31, 37] plays the 24 
Round 5: Connor   holding [13, 16, 41, 43, 49] plays the 16 
Round 5: Reede    holding [11, 14, 23, 38, 47] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 32 33 36 0 0 0 0 0 

32------------------------------------------------------------------------

Round 5: Eugenius holding [17, 29, 32, 33, 36] plays the 32 
Reede wins the round 

Round 6: Reede    holding [11, 14, 23, 47] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 33 36 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 6: Eugenius holding [17, 29, 33, 36] plays the 36 
Round 6: George   holding [19, 25, 31, 37] plays the 37 
Round 6: Connor   holding [13, 41, 43, 49] plays the 49 
Connor wins the round which contains 1 penalty points

Round 7: Connor   holding [13, 41, 43] plays the 13 
Round 7: Reede    holding [11, 23, 47] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 33 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 29, 33] plays the 17 
Round 7: George   holding [19, 25, 31] plays the 31 
George wins the round which contains 4 penalty points

Round 8: George   holding [19, 25] plays the 25 
Round 8: Connor   holding [41, 43] plays the 41 
Round 8: Reede    holding [11, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
29 33 0 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 8: Eugenius holding [29, 33] plays the 29 
George wins the round which contains 3 penalty points

Round 9: George   holding [19] plays the 19 
Round 9: Connor   holding [43] plays the 43 
Round 9: Reede    holding [11] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
33 0 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 9: Eugenius holding [33] plays the 33 
Connor wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 4 penalty points Connor (system)
#3 with 7 penalty points Reede (system)
#3 with 7 penalty points George (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 8026361 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Michael  : [15, 23, 26, 29, 31, 34, 37, 40, 41, 45]
Table position 1: Eugenius : [13, 16, 19, 21, 22, 36, 39, 42, 43, 49]
Table position 2: Oscar    : [10, 18, 20, 27, 28, 35, 38, 44, 46, 48]
Table position 3: Elizabeth: [11, 12, 14, 17, 24, 25, 30, 32, 33, 47]

Discards:
Michael   [31, 34, 45]
Eugenius  [42, 43, 49]
Oscar     [20, 35, 44]
Elizabeth [11, 24, 32]

Round 0: Michael   holding [11, 15, 23, 24, 26, 29, 32, 37, 40, 41] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 19 21 22 31 34 36 39 45 

16------------------------------------------------------------------------

Round 0: Eugenius  holding [13, 16, 19, 21, 22, 31, 34, 36, 39, 45] plays the 16 
Round 0: Oscar     holding [10, 18, 27, 28, 38, 42, 43, 46, 48, 49] plays the 18 
Round 0: Elizabeth holding [12, 14, 17, 20, 25, 30, 33, 35, 44, 47] plays the 33 
Elizabeth wins the round 

Round 1: Elizabeth holding [12, 14, 17, 20, 25, 30, 35, 44, 47] plays the 35 
Round 1: Michael   holding [11, 15, 23, 26, 29, 32, 37, 40, 41] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 21 22 31 34 36 39 45 0 

21------------------------------------------------------------------------

Round 1: Eugenius  holding [13, 19, 21, 22, 31, 34, 36, 39, 45] plays the 21 
Round 1: Oscar     holding [10, 27, 28, 38, 42, 43, 46, 48, 49] plays the 49 
Oscar wins the round 

Round 2: Oscar     holding [10, 27, 28, 38, 42, 43, 46, 48] plays the 48 
Round 2: Elizabeth holding [12, 14, 17, 20, 25, 30, 44, 47] plays the 12 
Round 2: Michael   holding [11, 15, 23, 26, 29, 32, 37, 41] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 22 31 34 36 39 45 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius  holding [13, 19, 22, 31, 34, 36, 39, 45] plays the 22 
Oscar wins the round 

Round 3: Oscar     holding [10, 27, 28, 38, 42, 43, 46] plays the 28 
Round 3: Elizabeth holding [14, 17, 20, 25, 30, 44, 47] plays the 14 
Round 3: Michael   holding [11, 23, 26, 29, 32, 37, 41] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 31 34 36 39 45 0 0 0 

34------------------------------------------------------------------------

Round 3: Eugenius  holding [13, 19, 31, 34, 36, 39, 45] plays the 34 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 19 31 36 39 45 0 0 0 0 

36------------------------------------------------------------------------

Round 4: Eugenius  holding [13, 19, 31, 36, 39, 45] plays the 36 
Round 4: Oscar     holding [10, 27, 38, 42, 43, 46] plays the 42 
Round 4: Elizabeth holding [17, 20, 25, 30, 44, 47] plays the 20 
Round 4: Michael   holding [11, 23, 29, 32, 37, 41] plays the 32 
Oscar wins the round which contains 7 penalty points

Round 5: Oscar     holding [10, 27, 38, 43, 46] plays the 46 
Round 5: Elizabeth holding [17, 25, 30, 44, 47] plays the 30 
Round 5: Michael   holding [11, 23, 29, 37, 41] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
13 19 31 39 45 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 5: Eugenius  holding [13, 19, 31, 39, 45] plays the 13 
Oscar wins the round which contains 2 penalty points

Round 6: Oscar     holding [10, 27, 38, 43] plays the 43 
Round 6: Elizabeth holding [17, 25, 44, 47] plays the 17 
Round 6: Michael   holding [23, 29, 37, 41] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
19 31 39 45 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius  holding [19, 31, 39, 45] plays the 19 
Oscar wins the round which contains 4 penalty points

Round 7: Oscar     holding [10, 27, 38] plays the 27 
Round 7: Elizabeth holding [25, 44, 47] plays the 47 
Round 7: Michael   holding [29, 37, 41] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
31 39 45 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 7: Eugenius  holding [31, 39, 45] plays the 39 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
31 45 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius  holding [31, 45] plays the 31 
Round 8: Oscar     holding [10, 38] plays the 38 
Round 8: Elizabeth holding [25, 44] plays the 44 
Round 8: Michael   holding [37, 41] plays the 41 
Michael wins the round which contains 2 penalty points

Round 9: Michael   holding [37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius  holding [45] plays the 45 
Round 9: Oscar     holding [10] plays the 10 
Round 9: Elizabeth holding [25] plays the 25 
Michael wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Elizabeth (system)
#2 with 2 penalty points Eugenius (dodo.c)
#3 with 3 penalty points Michael (system)
#4 with 13 penalty points Oscar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 556887 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Costa    : [16, 18, 21, 23, 28, 33, 34, 36, 46, 49]
Table position 1: Mitchell : [10, 14, 22, 24, 31, 32, 37, 40, 43, 45]
Table position 2: Eugenius : [12, 13, 15, 17, 19, 25, 26, 30, 39, 48]
Table position 3: Elizabeth: [11, 20, 27, 29, 35, 38, 41, 42, 44, 47]

Discards:
Costa     [16, 34, 46]
Mitchell  [10, 22, 43]
Eugenius  [30, 39, 48]
Elizabeth [20, 38, 44]

Round 0: Costa     holding [18, 20, 21, 23, 28, 33, 36, 38, 44, 49] plays the 49 
Round 0: Mitchell  holding [14, 16, 24, 31, 32, 34, 37, 40, 45, 46] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 13 15 17 19 22 25 26 43 

10 chah------------------------------------------------------------------------

Round 0: Eugenius  holding [10, 12, 13, 15, 17, 19, 22, 25, 26, 43] plays the 10 
Round 0: Elizabeth holding [11, 27, 29, 30, 35, 39, 41, 42, 47, 48] plays the 35 
Costa wins the round 

Round 1: Costa     holding [18, 20, 21, 23, 28, 33, 36, 38, 44] plays the 36 
Round 1: Mitchell  holding [16, 24, 31, 32, 34, 37, 40, 45, 46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 15 17 19 22 25 26 43 0 

12------------------------------------------------------------------------

Round 1: Eugenius  holding [12, 13, 15, 17, 19, 22, 25, 26, 43] plays the 12 
Round 1: Elizabeth holding [11, 27, 29, 30, 39, 41, 42, 47, 48] plays the 39 
Mitchell wins the round 

Round 2: Mitchell  holding [16, 24, 31, 32, 34, 37, 40, 45] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 17 19 22 25 26 43 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius  holding [13, 15, 17, 19, 22, 25, 26, 43] plays the 22 
Round 2: Elizabeth holding [11, 27, 29, 30, 41, 42, 47, 48] plays the 42 
Round 2: Costa     holding [18, 20, 21, 23, 28, 33, 38, 44] plays the 38 
Elizabeth wins the round which contains 7 penalty points

Round 3: Elizabeth holding [11, 27, 29, 30, 41, 47, 48] plays the 30 
Round 3: Costa     holding [18, 20, 21, 23, 28, 33, 44] plays the 20 
Round 3: Mitchell  holding [16, 24, 31, 34, 37, 40, 45] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 17 19 25 26 43 0 0 0 

15------------------------------------------------------------------------

Round 3: Eugenius  holding [13, 15, 17, 19, 25, 26, 43] plays the 15 
Mitchell wins the round 

Round 4: Mitchell  holding [16, 24, 31, 34, 37, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 25 26 43 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius  holding [13, 17, 19, 25, 26, 43] plays the 25 
Round 4: Elizabeth holding [11, 27, 29, 41, 47, 48] plays the 48 
Round 4: Costa     holding [18, 21, 23, 28, 33, 44] plays the 21 
Elizabeth wins the round 

Round 5: Elizabeth holding [11, 27, 29, 41, 47] plays the 27 
Round 5: Costa     holding [18, 23, 28, 33, 44] plays the 33 
Round 5: Mitchell  holding [16, 24, 31, 34, 37] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 26 43 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 5: Eugenius  holding [13, 17, 19, 26, 43] plays the 13 
Costa wins the round which contains 1 penalty points

Round 6: Costa     holding [18, 23, 28, 44] plays the 18 
Round 6: Mitchell  holding [16, 31, 34, 37] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 26 43 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 6: Eugenius  holding [17, 19, 26, 43] plays the 26 
Round 6: Elizabeth holding [11, 29, 41, 47] plays the 29 
Mitchell wins the round which contains 1 penalty points

Round 7: Mitchell  holding [16, 31, 37] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 43 0 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 7: Eugenius  holding [17, 19, 43] plays the 17 
Round 7: Elizabeth holding [11, 41, 47] plays the 41 
Round 7: Costa     holding [23, 28, 44] plays the 28 
Costa wins the round which contains 2 penalty points

Round 8: Costa     holding [23, 44] plays the 23 
Round 8: Mitchell  holding [31, 37] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
19 43 0 0 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 8: Eugenius  holding [19, 43] plays the 19 
Round 8: Elizabeth holding [11, 47] plays the 47 
Elizabeth wins the round which contains 4 penalty points

Round 9: Elizabeth holding [11] plays the 11 
Round 9: Costa     holding [44] plays the 44 
Round 9: Mitchell  holding [37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
43 0 0 0 0 0 0 0 0 0 

43------------------------------------------------------------------------

Round 9: Eugenius  holding [43] plays the 43 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 1 penalty points Mitchell (system)
#2 with 3 penalty points Costa (system)
#2 with 3 penalty points Eugenius (dodo.c)
#4 with 11 penalty points Elizabeth (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11918423 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Oscar   : [11, 12, 21, 25, 30, 31, 35, 44, 46, 47]
Table position 1: Peter   : [13, 15, 20, 23, 26, 32, 34, 42, 45, 48]
Table position 2: Eugenius: [16, 17, 19, 24, 29, 36, 39, 40, 41, 43]
Table position 3: Dylan   : [10, 14, 18, 22, 27, 28, 33, 37, 38, 49]

Discards:
Oscar    [25, 30, 31]
Peter    [15, 26, 45]
Eugenius [40, 41, 43]
Dylan    [22, 33, 37]

Round 0: Oscar    holding [11, 12, 21, 22, 33, 35, 37, 44, 46, 47] plays the 46 
Round 0: Peter    holding [13, 20, 23, 25, 30, 31, 32, 34, 42, 48] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
15 16 17 19 24 26 29 36 39 45 

16------------------------------------------------------------------------

Round 0: Eugenius holding [15, 16, 17, 19, 24, 26, 29, 36, 39, 45] plays the 16 
Round 0: Dylan    holding [10, 14, 18, 27, 28, 38, 40, 41, 43, 49] plays the 14 
Oscar wins the round which contains 7 penalty points

Round 1: Oscar    holding [11, 12, 21, 22, 33, 35, 37, 44, 47] plays the 44 
Round 1: Peter    holding [13, 20, 23, 25, 30, 31, 32, 34, 48] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
15 17 19 24 26 29 36 39 45 0 

24------------------------------------------------------------------------

Round 1: Eugenius holding [15, 17, 19, 24, 26, 29, 36, 39, 45] plays the 24 
Round 1: Dylan    holding [10, 18, 27, 28, 38, 40, 41, 43, 49] plays the 18 
Oscar wins the round 

Round 2: Oscar    holding [11, 12, 21, 22, 33, 35, 37, 47] plays the 12 
Round 2: Peter    holding [13, 20, 23, 25, 30, 31, 32, 48] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
15 17 19 26 29 36 39 45 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius holding [15, 17, 19, 26, 29, 36, 39, 45] plays the 15 
Round 2: Dylan    holding [10, 27, 28, 38, 40, 41, 43, 49] plays the 27 
Peter wins the round 

Round 3: Peter    holding [13, 20, 23, 25, 30, 31, 48] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 26 29 36 39 45 0 0 0 

45------------------------------------------------------------------------

Round 3: Eugenius holding [17, 19, 26, 29, 36, 39, 45] plays the 45 
Round 3: Dylan    holding [10, 28, 38, 40, 41, 43, 49] plays the 10 
Round 3: Oscar    holding [11, 21, 22, 33, 35, 37, 47] plays the 35 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
17 19 26 29 36 39 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 26, 29, 36, 39] plays the 26 
Round 4: Dylan    holding [28, 38, 40, 41, 43, 49] plays the 40 
Round 4: Oscar    holding [11, 21, 22, 33, 37, 47] plays the 22 
Round 4: Peter    holding [13, 20, 23, 30, 31, 48] plays the 20 
Dylan wins the round 

Round 5: Dylan    holding [28, 38, 41, 43, 49] plays the 38 
Round 5: Oscar    holding [11, 21, 33, 37, 47] plays the 47 
Round 5: Peter    holding [13, 23, 30, 31, 48] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 36 39 0 0 0 0 0 

36------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 29, 36, 39] plays the 36 
Dylan wins the round which contains 1 penalty points

Round 6: Dylan    holding [28, 41, 43, 49] plays the 41 
Round 6: Oscar    holding [11, 21, 33, 37] plays the 37 
Round 6: Peter    holding [13, 23, 31, 48] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 29 39 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 6: Eugenius holding [17, 19, 29, 39] plays the 17 
Dylan wins the round which contains 4 penalty points

Round 7: Dylan    holding [28, 43, 49] plays the 28 
Round 7: Oscar    holding [11, 21, 33] plays the 21 
Round 7: Peter    holding [23, 31, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
19 29 39 0 0 0 0 0 0 0 

19 chah------------------------------------------------------------------------

Round 7: Eugenius holding [19, 29, 39] plays the 19 
Peter wins the round which contains 1 penalty points

Round 8: Peter    holding [23, 31] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
29 39 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 39] plays the 29 
Round 8: Dylan    holding [43, 49] plays the 43 
Round 8: Oscar    holding [11, 33] plays the 11 
Dylan wins the round which contains 4 penalty points

Round 9: Dylan    holding [49] plays the 49 
Round 9: Oscar    holding [33] plays the 33 
Round 9: Peter    holding [31] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39 chah------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Dylan wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Peter (system)
#3 with 7 penalty points Oscar (system)
#4 with 10 penalty points Dylan (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 2152792 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Michael : [11, 15, 16, 17, 19, 28, 30, 32, 43, 45]
Table position 1: George  : [20, 25, 34, 37, 38, 39, 40, 41, 46, 49]
Table position 2: Kangying: [10, 12, 18, 22, 26, 29, 31, 36, 42, 47]
Table position 3: Eugenius: [13, 14, 21, 23, 24, 27, 33, 35, 44, 48]

Discards:
Michael  [11, 28, 43]
George   [20, 37, 39]
Kangying [10, 22, 42]
Eugenius [35, 44, 48]

Round 0: Michael  holding [15, 16, 17, 19, 30, 32, 35, 44, 45, 48] plays the 16 
Round 0: George   holding [11, 25, 28, 34, 38, 40, 41, 43, 46, 49] plays the 38 
Round 0: Kangying holding [12, 18, 20, 26, 29, 31, 36, 37, 39, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
10 13 14 21 22 23 24 27 33 42 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 13, 14, 21, 22, 23, 24, 27, 33, 42] plays the 10 
George wins the round 

Round 1: George   holding [11, 25, 28, 34, 40, 41, 43, 46, 49] plays the 25 
Round 1: Kangying holding [12, 18, 26, 29, 31, 36, 37, 39, 47] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
13 14 21 22 23 24 27 33 42 0 

13 chah------------------------------------------------------------------------

Round 1: Eugenius holding [13, 14, 21, 22, 23, 24, 27, 33, 42] plays the 13 
Round 1: Michael  holding [15, 17, 19, 30, 32, 35, 44, 45, 48] plays the 15 
George wins the round which contains 2 penalty points

Round 2: George   holding [11, 28, 34, 40, 41, 43, 46, 49] plays the 41 
Round 2: Kangying holding [12, 18, 26, 29, 31, 36, 39, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
14 21 22 23 24 27 33 42 0 0 

23------------------------------------------------------------------------

Round 2: Eugenius holding [14, 21, 22, 23, 24, 27, 33, 42] plays the 23 
Round 2: Michael  holding [17, 19, 30, 32, 35, 44, 45, 48] plays the 17 
Kangying wins the round which contains 4 penalty points

Round 3: Kangying holding [12, 18, 26, 29, 31, 36, 39] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
14 21 22 24 27 33 42 0 0 0 

14------------------------------------------------------------------------

Round 3: Eugenius holding [14, 21, 22, 24, 27, 33, 42] plays the 14 
Round 3: Michael  holding [19, 30, 32, 35, 44, 45, 48] plays the 32 
Round 3: George   holding [11, 28, 34, 40, 43, 46, 49] plays the 28 
Michael wins the round 

Round 4: Michael  holding [19, 30, 35, 44, 45, 48] plays the 19 
Round 4: George   holding [11, 34, 40, 43, 46, 49] plays the 11 
Round 4: Kangying holding [12, 18, 29, 31, 36, 39] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
21 22 24 27 33 42 0 0 0 0 

21------------------------------------------------------------------------

Round 4: Eugenius holding [21, 22, 24, 27, 33, 42] plays the 21 
Kangying wins the round which contains 3 penalty points

Round 5: Kangying holding [12, 18, 29, 36, 39] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
22 24 27 33 42 0 0 0 0 0 

22------------------------------------------------------------------------

Round 5: Eugenius holding [22, 24, 27, 33, 42] plays the 22 
Round 5: Michael  holding [30, 35, 44, 45, 48] plays the 45 
Round 5: George   holding [34, 40, 43, 46, 49] plays the 43 
George wins the round which contains 2 penalty points

Round 6: George   holding [34, 40, 46, 49] plays the 46 
Round 6: Kangying holding [12, 18, 36, 39] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
24 27 33 42 0 0 0 0 0 0 

24------------------------------------------------------------------------

Round 6: Eugenius holding [24, 27, 33, 42] plays the 24 
Round 6: Michael  holding [30, 35, 44, 48] plays the 48 
Michael wins the round 

Round 7: Michael  holding [30, 35, 44] plays the 44 
Round 7: George   holding [34, 40, 49] plays the 40 
Round 7: Kangying holding [18, 36, 39] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
27 33 42 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 7: Eugenius holding [27, 33, 42] plays the 33 
Michael wins the round 

Round 8: Michael  holding [30, 35] plays the 35 
Round 8: George   holding [34, 49] plays the 49 
Round 8: Kangying holding [36, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
27 42 0 0 0 0 0 0 0 0 

42------------------------------------------------------------------------

Round 8: Eugenius holding [27, 42] plays the 42 
George wins the round which contains 7 penalty points

Round 9: George   holding [34] plays the 34 
Round 9: Kangying holding [36] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
27 0 0 0 0 0 0 0 0 0 

27 chah------------------------------------------------------------------------

Round 9: Eugenius holding [27] plays the 27 
Round 9: Michael  holding [30] plays the 30 
Kangying wins the round 


Finishing Positions

#1 with 0 penalty points Michael (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Kangying (system)
#4 with 11 penalty points George (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14875831 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Peter   : [12, 17, 22, 23, 26, 33, 42, 45, 47, 48]
Table position 1: Xue     : [14, 16, 19, 20, 21, 24, 27, 32, 40, 49]
Table position 2: Oscar   : [10, 15, 18, 25, 28, 36, 37, 39, 41, 46]
Table position 3: Eugenius: [11, 13, 29, 30, 31, 34, 35, 38, 43, 44]

Discards:
Peter    [22, 23, 45]
Xue      [14, 19, 24]
Oscar    [37, 39, 46]
Eugenius [38, 43, 44]

Round 0: Peter    holding [12, 17, 26, 33, 38, 42, 43, 44, 47, 48] plays the 33 
Round 0: Xue      holding [16, 20, 21, 22, 23, 27, 32, 40, 45, 49] plays the 45 
Round 0: Oscar    holding [10, 14, 15, 18, 19, 24, 25, 28, 36, 41] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 29 30 31 34 35 37 39 46 

30------------------------------------------------------------------------

Round 0: Eugenius holding [11, 13, 29, 30, 31, 34, 35, 37, 39, 46] plays the 30 
Xue wins the round 

Round 1: Xue      holding [16, 20, 21, 22, 23, 27, 32, 40, 49] plays the 22 
Round 1: Oscar    holding [10, 14, 18, 19, 24, 25, 28, 36, 41] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 29 31 34 35 37 39 46 0 

34------------------------------------------------------------------------

Round 1: Eugenius holding [11, 13, 29, 31, 34, 35, 37, 39, 46] plays the 34 
Round 1: Peter    holding [12, 17, 26, 38, 42, 43, 44, 47, 48] plays the 38 
Peter wins the round 

Round 2: Peter    holding [12, 17, 26, 42, 43, 44, 47, 48] plays the 42 
Round 2: Xue      holding [16, 20, 21, 23, 27, 32, 40, 49] plays the 40 
Round 2: Oscar    holding [10, 14, 18, 19, 25, 28, 36, 41] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 29 31 35 37 39 46 0 0 

35------------------------------------------------------------------------

Round 2: Eugenius holding [11, 13, 29, 31, 35, 37, 39, 46] plays the 35 
Peter wins the round which contains 7 penalty points

Round 3: Peter    holding [12, 17, 26, 43, 44, 47, 48] plays the 26 
Round 3: Xue      holding [16, 20, 21, 23, 27, 32, 49] plays the 16 
Round 3: Oscar    holding [14, 18, 19, 25, 28, 36, 41] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 29 31 37 39 46 0 0 0 

39------------------------------------------------------------------------

Round 3: Eugenius holding [11, 13, 29, 31, 37, 39, 46] plays the 39 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
11 13 29 31 37 46 0 0 0 0 

46------------------------------------------------------------------------

Round 4: Eugenius holding [11, 13, 29, 31, 37, 46] plays the 46 
Round 4: Peter    holding [12, 17, 43, 44, 47, 48] plays the 48 
Round 4: Xue      holding [20, 21, 23, 27, 32, 49] plays the 20 
Round 4: Oscar    holding [14, 18, 19, 25, 36, 41] plays the 18 
Peter wins the round 

Round 5: Peter    holding [12, 17, 43, 44, 47] plays the 12 
Round 5: Xue      holding [21, 23, 27, 32, 49] plays the 27 
Round 5: Oscar    holding [14, 19, 25, 36, 41] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
11 13 29 31 37 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 5: Eugenius holding [11, 13, 29, 31, 37] plays the 11 
Xue wins the round which contains 1 penalty points

Round 6: Xue      holding [21, 23, 32, 49] plays the 21 
Round 6: Oscar    holding [19, 25, 36, 41] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
13 29 31 37 0 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 6: Eugenius holding [13, 29, 31, 37] plays the 13 
Round 6: Peter    holding [17, 43, 44, 47] plays the 43 
Oscar wins the round which contains 2 penalty points

Round 7: Oscar    holding [19, 25, 41] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 37 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 37] plays the 29 
Round 7: Peter    holding [17, 44, 47] plays the 47 
Round 7: Xue      holding [23, 32, 49] plays the 49 
Oscar wins the round which contains 2 penalty points

Round 8: Oscar    holding [19, 41] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 37] plays the 31 
Round 8: Peter    holding [17, 44] plays the 17 
Round 8: Xue      holding [23, 32] plays the 23 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Round 9: Peter    holding [44] plays the 44 
Round 9: Xue      holding [32] plays the 32 
Round 9: Oscar    holding [41] plays the 41 
Oscar wins the round which contains 2 penalty points


Finishing Positions

#1 with 1 penalty points Xue (system)
#2 with 4 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Oscar (system)
#4 with 7 penalty points Peter (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15718956 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Dylan   : [11, 15, 16, 17, 20, 32, 38, 39, 42, 43]
Table position 1: Xue     : [10, 12, 19, 21, 22, 25, 36, 40, 46, 47]
Table position 2: Mitchell: [14, 24, 27, 29, 30, 34, 37, 41, 44, 45]
Table position 3: Eugenius: [13, 18, 23, 26, 28, 31, 33, 35, 48, 49]

Discards:
Dylan    [15, 38, 43]
Xue      [10, 12, 25]
Mitchell [29, 37, 45]
Eugenius [35, 48, 49]

Round 0: Dylan    holding [11, 16, 17, 20, 32, 35, 39, 42, 48, 49] plays the 20 
Round 0: Xue      holding [15, 19, 21, 22, 36, 38, 40, 43, 46, 47] plays the 36 
Round 0: Mitchell holding [10, 12, 14, 24, 25, 27, 30, 34, 41, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
13 18 23 26 28 29 31 33 37 45 

18------------------------------------------------------------------------

Round 0: Eugenius holding [13, 18, 23, 26, 28, 29, 31, 33, 37, 45] plays the 18 
Mitchell wins the round 

Round 1: Mitchell holding [10, 12, 14, 24, 25, 27, 30, 34, 41] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 26 28 29 31 33 37 45 0 

26------------------------------------------------------------------------

Round 1: Eugenius holding [13, 23, 26, 28, 29, 31, 33, 37, 45] plays the 26 
Round 1: Dylan    holding [11, 16, 17, 32, 35, 39, 42, 48, 49] plays the 49 
Round 1: Xue      holding [15, 19, 21, 22, 38, 40, 43, 46, 47] plays the 21 
Dylan wins the round 

Round 2: Dylan    holding [11, 16, 17, 32, 35, 39, 42, 48] plays the 16 
Round 2: Xue      holding [15, 19, 22, 38, 40, 43, 46, 47] plays the 38 
Round 2: Mitchell holding [10, 12, 24, 25, 27, 30, 34, 41] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 28 29 31 33 37 45 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [13, 23, 28, 29, 31, 33, 37, 45] plays the 28 
Xue wins the round 

Round 3: Xue      holding [15, 19, 22, 40, 43, 46, 47] plays the 40 
Round 3: Mitchell holding [10, 12, 25, 27, 30, 34, 41] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 29 31 33 37 45 0 0 0 

45------------------------------------------------------------------------

Round 3: Eugenius holding [13, 23, 29, 31, 33, 37, 45] plays the 45 
Round 3: Dylan    holding [11, 17, 32, 35, 39, 42, 48] plays the 35 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 23 29 31 33 37 0 0 0 0 

33------------------------------------------------------------------------

Round 4: Eugenius holding [13, 23, 29, 31, 33, 37] plays the 33 
Round 4: Dylan    holding [11, 17, 32, 39, 42, 48] plays the 42 
Round 4: Xue      holding [15, 19, 22, 43, 46, 47] plays the 22 
Round 4: Mitchell holding [12, 25, 27, 30, 34, 41] plays the 30 
Dylan wins the round which contains 7 penalty points

Round 5: Dylan    holding [11, 17, 32, 39, 48] plays the 32 
Round 5: Xue      holding [15, 19, 43, 46, 47] plays the 46 
Round 5: Mitchell holding [12, 25, 27, 34, 41] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 23 29 31 37 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 5: Eugenius holding [13, 23, 29, 31, 37] plays the 13 
Xue wins the round which contains 1 penalty points

Round 6: Xue      holding [15, 19, 43, 47] plays the 47 
Round 6: Mitchell holding [12, 25, 27, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
23 29 31 37 0 0 0 0 0 0 

23------------------------------------------------------------------------

Round 6: Eugenius holding [23, 29, 31, 37] plays the 23 
Round 6: Dylan    holding [11, 17, 39, 48] plays the 17 
Xue wins the round which contains 4 penalty points

Round 7: Xue      holding [15, 19, 43] plays the 15 
Round 7: Mitchell holding [12, 25, 27] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 37 0 0 0 0 0 0 0 

29 chah------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 37] plays the 29 
Round 7: Dylan    holding [11, 39, 48] plays the 39 
Dylan wins the round which contains 1 penalty points

Round 8: Dylan    holding [11, 48] plays the 48 
Round 8: Xue      holding [19, 43] plays the 43 
Round 8: Mitchell holding [12, 25] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius holding [31, 37] plays the 31 
Dylan wins the round which contains 2 penalty points

Round 9: Dylan    holding [11] plays the 11 
Round 9: Xue      holding [19] plays the 19 
Round 9: Mitchell holding [25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 0 penalty points Mitchell (system)
#2 with 3 penalty points Eugenius (dodo.c)
#3 with 5 penalty points Xue (system)
#4 with 10 penalty points Dylan (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16239207 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Nicholas: [23, 28, 33, 35, 36, 37, 38, 40, 48, 49]
Table position 1: Eugenius: [10, 13, 17, 18, 25, 31, 32, 42, 44, 46]
Table position 2: Sabrina : [11, 12, 16, 19, 20, 22, 27, 30, 34, 45]
Table position 3: Costa   : [14, 15, 21, 24, 26, 29, 39, 41, 43, 47]

Discards:
Nicholas [33, 38, 49]
Eugenius [42, 44, 46]
Sabrina  [16, 19, 22]
Costa    [26, 29, 39]

Round 0: Nicholas holding [23, 26, 28, 29, 35, 36, 37, 39, 40, 48] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
10 13 17 18 25 31 32 33 38 49 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 13, 17, 18, 25, 31, 32, 33, 38, 49] plays the 10 
Round 0: Sabrina  holding [11, 12, 20, 27, 30, 34, 42, 44, 45, 46] plays the 45 
Round 0: Costa    holding [14, 15, 16, 19, 21, 22, 24, 41, 43, 47] plays the 15 
Sabrina wins the round 

Round 1: Sabrina  holding [11, 12, 20, 27, 30, 34, 42, 44, 46] plays the 44 
Round 1: Costa    holding [14, 16, 19, 21, 22, 24, 41, 43, 47] plays the 16 
Round 1: Nicholas holding [23, 26, 28, 29, 36, 37, 39, 40, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 18 25 31 32 33 38 49 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [13, 17, 18, 25, 31, 32, 33, 38, 49] plays the 18 
Nicholas wins the round 

Round 2: Nicholas holding [23, 26, 28, 29, 36, 37, 39, 40] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 25 31 32 33 38 49 0 0 

32------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 25, 31, 32, 33, 38, 49] plays the 32 
Round 2: Sabrina  holding [11, 12, 20, 27, 30, 34, 42, 46] plays the 20 
Round 2: Costa    holding [14, 19, 21, 22, 24, 41, 43, 47] plays the 21 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 17 25 31 33 38 49 0 0 0 

25------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 25, 31, 33, 38, 49] plays the 25 
Round 3: Sabrina  holding [11, 12, 27, 30, 34, 42, 46] plays the 30 
Round 3: Costa    holding [14, 19, 22, 24, 41, 43, 47] plays the 14 
Round 3: Nicholas holding [23, 26, 29, 36, 37, 39, 40] plays the 40 
Nicholas wins the round 

Round 4: Nicholas holding [23, 26, 29, 36, 37, 39] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 31 33 38 49 0 0 0 0 

33------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 31, 33, 38, 49] plays the 33 
Round 4: Sabrina  holding [11, 12, 27, 34, 42, 46] plays the 12 
Round 4: Costa    holding [19, 22, 24, 41, 43, 47] plays the 24 
Nicholas wins the round 

Round 5: Nicholas holding [23, 26, 29, 36, 37] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 31 38 49 0 0 0 0 0 

38------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 31, 38, 49] plays the 38 
Round 5: Sabrina  holding [11, 27, 34, 42, 46] plays the 34 
Round 5: Costa    holding [19, 22, 41, 43, 47] plays the 22 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 17 31 49 0 0 0 0 0 0 

49------------------------------------------------------------------------

Round 6: Eugenius holding [13, 17, 31, 49] plays the 49 
Round 6: Sabrina  holding [11, 27, 42, 46] plays the 42 
Round 6: Costa    holding [19, 41, 43, 47] plays the 47 
Round 6: Nicholas holding [23, 26, 29, 37] plays the 37 
Eugenius wins the round which contains 9 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
13 17 31 0 0 0 0 0 0 0 

13------------------------------------------------------------------------

Round 7: Eugenius holding [13, 17, 31] plays the 13 
Round 7: Sabrina  holding [11, 27, 46] plays the 11 
Round 7: Costa    holding [19, 41, 43] plays the 41 
Round 7: Nicholas holding [23, 26, 29] plays the 23 
Costa wins the round which contains 4 penalty points

Round 8: Costa    holding [19, 43] plays the 43 
Round 8: Nicholas holding [26, 29] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 0 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 8: Eugenius holding [17, 31] plays the 17 
Round 8: Sabrina  holding [27, 46] plays the 27 
Costa wins the round which contains 3 penalty points

Round 9: Costa    holding [19] plays the 19 
Round 9: Nicholas holding [26] plays the 26 

Debug output from Eugenius
------------------------------------------------------------------------
31 0 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 9: Eugenius holding [31] plays the 31 
Round 9: Sabrina  holding [46] plays the 46 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Nicholas (system)
#1 with 0 penalty points Sabrina (system)
#3 with 7 penalty points Costa (system)
#4 with 11 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14650338 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Gal     : [10, 18, 20, 21, 24, 27, 33, 34, 44, 48]
Table position 1: Emily   : [15, 17, 19, 22, 30, 32, 40, 41, 43, 47]
Table position 2: Eugenius: [11, 14, 16, 28, 29, 36, 38, 39, 42, 49]
Table position 3: Xue     : [12, 13, 23, 25, 26, 31, 35, 37, 45, 46]

Discards:
Gal      [10, 44, 48]
Emily    [32, 40, 41]
Eugenius [39, 42, 49]
Xue      [23, 37, 45]

Round 0: Gal      holding [18, 20, 21, 23, 24, 27, 33, 34, 37, 45] plays the 24 
Round 0: Emily    holding [10, 15, 17, 19, 22, 30, 43, 44, 47, 48] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 16 28 29 32 36 38 40 41 

14------------------------------------------------------------------------

Round 0: Eugenius holding [11, 14, 16, 28, 29, 32, 36, 38, 40, 41] plays the 14 
Round 0: Xue      holding [12, 13, 25, 26, 31, 35, 39, 42, 46, 49] plays the 12 
Emily wins the round 

Round 1: Emily    holding [10, 15, 17, 19, 22, 30, 43, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 28 29 32 36 38 40 41 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [11, 16, 28, 29, 32, 36, 38, 40, 41] plays the 16 
Round 1: Xue      holding [13, 25, 26, 31, 35, 39, 42, 46, 49] plays the 39 
Round 1: Gal      holding [18, 20, 21, 23, 27, 33, 34, 37, 45] plays the 45 
Emily wins the round 

Round 2: Emily    holding [10, 15, 17, 19, 22, 30, 43, 47] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
11 28 29 32 36 38 40 41 0 0 

28------------------------------------------------------------------------

Round 2: Eugenius holding [11, 28, 29, 32, 36, 38, 40, 41] plays the 28 
Round 2: Xue      holding [13, 25, 26, 31, 35, 42, 46, 49] plays the 26 
Round 2: Gal      holding [18, 20, 21, 23, 27, 33, 34, 37] plays the 34 
Gal wins the round 

Round 3: Gal      holding [18, 20, 21, 23, 27, 33, 37] plays the 21 
Round 3: Emily    holding [15, 17, 19, 22, 30, 43, 47] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 29 32 36 38 40 41 0 0 0 

36------------------------------------------------------------------------

Round 3: Eugenius holding [11, 29, 32, 36, 38, 40, 41] plays the 36 
Round 3: Xue      holding [13, 25, 31, 35, 42, 46, 49] plays the 49 
Xue wins the round 

Round 4: Xue      holding [13, 25, 31, 35, 42, 46] plays the 46 
Round 4: Gal      holding [18, 20, 23, 27, 33, 37] plays the 18 
Round 4: Emily    holding [17, 19, 22, 30, 43, 47] plays the 30 

Debug output from Eugenius
------------------------------------------------------------------------
11 29 32 38 40 41 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [11, 29, 32, 38, 40, 41] plays the 32 
Xue wins the round 

Round 5: Xue      holding [13, 25, 31, 35, 42] plays the 42 
Round 5: Gal      holding [20, 23, 27, 33, 37] plays the 27 
Round 5: Emily    holding [17, 19, 22, 43, 47] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
11 29 38 40 41 0 0 0 0 0 

38------------------------------------------------------------------------

Round 5: Eugenius holding [11, 29, 38, 40, 41] plays the 38 
Xue wins the round which contains 7 penalty points

Round 6: Xue      holding [13, 25, 31, 35] plays the 35 
Round 6: Gal      holding [20, 23, 33, 37] plays the 20 
Round 6: Emily    holding [17, 19, 43, 47] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
11 29 40 41 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 6: Eugenius holding [11, 29, 40, 41] plays the 40 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
11 29 41 0 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 7: Eugenius holding [11, 29, 41] plays the 11 
Round 7: Xue      holding [13, 25, 31] plays the 13 
Round 7: Gal      holding [23, 33, 37] plays the 37 
Round 7: Emily    holding [17, 43, 47] plays the 47 
Emily wins the round which contains 4 penalty points

Round 8: Emily    holding [17, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
29 41 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [29, 41] plays the 29 
Round 8: Xue      holding [25, 31] plays the 31 
Round 8: Gal      holding [23, 33] plays the 23 
Emily wins the round which contains 4 penalty points

Round 9: Emily    holding [17] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
41 0 0 0 0 0 0 0 0 0 

41------------------------------------------------------------------------

Round 9: Eugenius holding [41] plays the 41 
Round 9: Xue      holding [25] plays the 25 
Round 9: Gal      holding [33] plays the 33 
Eugenius wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Gal (system)
#2 with 3 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Xue (system)
#4 with 8 penalty points Emily (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 11985510 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [10, 14, 18, 21, 22, 29, 32, 36, 43, 48]
Table position 1: Xue     : [12, 24, 27, 34, 35, 38, 39, 40, 46, 49]
Table position 2: Dean    : [13, 16, 19, 20, 25, 26, 28, 30, 37, 44]
Table position 3: Matthew : [11, 15, 17, 23, 31, 33, 41, 42, 45, 47]

Discards:
Eugenius [36, 43, 48]
Xue      [12, 34, 46]
Dean     [25, 28, 37]
Matthew  [17, 31, 47]


Debug output from Eugenius
------------------------------------------------------------------------
10 14 17 18 21 22 29 31 32 47 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 14, 17, 18, 21, 22, 29, 31, 32, 47] plays the 10 
Round 0: Xue      holding [24, 27, 35, 36, 38, 39, 40, 43, 48, 49] plays the 38 
Round 0: Dean     holding [12, 13, 16, 19, 20, 26, 30, 34, 44, 46] plays the 20 
Round 0: Matthew  holding [11, 15, 23, 25, 28, 33, 37, 41, 42, 45] plays the 25 
Xue wins the round 

Round 1: Xue      holding [24, 27, 35, 36, 39, 40, 43, 48, 49] plays the 36 
Round 1: Dean     holding [12, 13, 16, 19, 26, 30, 34, 44, 46] plays the 44 
Round 1: Matthew  holding [11, 15, 23, 28, 33, 37, 41, 42, 45] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
14 17 18 21 22 29 31 32 47 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [14, 17, 18, 21, 22, 29, 31, 32, 47] plays the 14 
Dean wins the round which contains 7 penalty points

Round 2: Dean     holding [12, 13, 16, 19, 26, 30, 34, 46] plays the 12 
Round 2: Matthew  holding [11, 15, 23, 28, 33, 37, 41, 45] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
17 18 21 22 29 31 32 47 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [17, 18, 21, 22, 29, 31, 32, 47] plays the 18 
Round 2: Xue      holding [24, 27, 35, 39, 40, 43, 48, 49] plays the 48 
Xue wins the round 

Round 3: Xue      holding [24, 27, 35, 39, 40, 43, 49] plays the 40 
Round 3: Dean     holding [13, 16, 19, 26, 30, 34, 46] plays the 46 
Round 3: Matthew  holding [11, 23, 28, 33, 37, 41, 45] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
17 21 22 29 31 32 47 0 0 0 

22------------------------------------------------------------------------

Round 3: Eugenius holding [17, 21, 22, 29, 31, 32, 47] plays the 22 
Dean wins the round 

Round 4: Dean     holding [13, 16, 19, 26, 30, 34] plays the 30 
Round 4: Matthew  holding [11, 23, 33, 37, 41, 45] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
17 21 29 31 32 47 0 0 0 0 

21------------------------------------------------------------------------

Round 4: Eugenius holding [17, 21, 29, 31, 32, 47] plays the 21 
Round 4: Xue      holding [24, 27, 35, 39, 43, 49] plays the 24 
Matthew wins the round 

Round 5: Matthew  holding [11, 23, 37, 41, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 31 32 47 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 5: Eugenius holding [17, 29, 31, 32, 47] plays the 17 
Round 5: Xue      holding [27, 35, 39, 43, 49] plays the 39 
Round 5: Dean     holding [13, 16, 19, 26, 34] plays the 19 
Matthew wins the round which contains 2 penalty points

Round 6: Matthew  holding [11, 23, 37, 41] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 32 47 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 6: Eugenius holding [29, 31, 32, 47] plays the 29 
Round 6: Xue      holding [27, 35, 43, 49] plays the 43 
Round 6: Dean     holding [13, 16, 26, 34] plays the 13 
Xue wins the round which contains 4 penalty points

Round 7: Xue      holding [27, 35, 49] plays the 27 
Round 7: Dean     holding [16, 26, 34] plays the 26 
Round 7: Matthew  holding [23, 37, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
31 32 47 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 7: Eugenius holding [31, 32, 47] plays the 31 
Xue wins the round which contains 2 penalty points

Round 8: Xue      holding [35, 49] plays the 49 
Round 8: Dean     holding [16, 34] plays the 16 
Round 8: Matthew  holding [23, 37] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
32 47 0 0 0 0 0 0 0 0 

32 chah------------------------------------------------------------------------

Round 8: Eugenius holding [32, 47] plays the 32 
Xue wins the round which contains 1 penalty points

Round 9: Xue      holding [35] plays the 35 
Round 9: Dean     holding [34] plays the 34 
Round 9: Matthew  holding [37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
47 0 0 0 0 0 0 0 0 0 

47 chah------------------------------------------------------------------------

Round 9: Eugenius holding [47] plays the 47 
Xue wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 2 penalty points Matthew (system)
#3 with 7 penalty points Dean (system)
#4 with 9 penalty points Xue (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14827790 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [11, 14, 24, 28, 30, 32, 34, 43, 44, 46]
Table position 1: Zachary : [10, 16, 17, 20, 21, 23, 26, 35, 40, 49]
Table position 2: Connor  : [12, 13, 19, 25, 27, 31, 38, 39, 41, 45]
Table position 3: Dean    : [15, 18, 22, 29, 33, 36, 37, 42, 47, 48]

Discards:
Eugenius [43, 44, 46]
Zachary  [20, 23, 49]
Connor   [12, 25, 45]
Dean     [18, 22, 37]


Debug output from Eugenius
------------------------------------------------------------------------
11 14 18 22 24 28 30 32 34 37 

14------------------------------------------------------------------------

Round 0: Eugenius holding [11, 14, 18, 22, 24, 28, 30, 32, 34, 37] plays the 14 
Round 0: Zachary  holding [10, 16, 17, 21, 26, 35, 40, 43, 44, 46] plays the 26 
Round 0: Connor   holding [13, 19, 20, 23, 27, 31, 38, 39, 41, 49] plays the 49 
Round 0: Dean     holding [12, 15, 25, 29, 33, 36, 42, 45, 47, 48] plays the 36 
Connor wins the round 

Round 1: Connor   holding [13, 19, 20, 23, 27, 31, 38, 39, 41] plays the 39 
Round 1: Dean     holding [12, 15, 25, 29, 33, 42, 45, 47, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
11 18 22 24 28 30 32 34 37 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [11, 18, 22, 24, 28, 30, 32, 34, 37] plays the 18 
Round 1: Zachary  holding [10, 16, 17, 21, 35, 40, 43, 44, 46] plays the 21 
Dean wins the round 

Round 2: Dean     holding [12, 15, 25, 29, 33, 42, 45, 47] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
11 22 24 28 30 32 34 37 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [11, 22, 24, 28, 30, 32, 34, 37] plays the 22 
Round 2: Zachary  holding [10, 16, 17, 35, 40, 43, 44, 46] plays the 44 
Round 2: Connor   holding [13, 19, 20, 23, 27, 31, 38, 41] plays the 27 
Zachary wins the round 

Round 3: Zachary  holding [10, 16, 17, 35, 40, 43, 46] plays the 46 
Round 3: Connor   holding [13, 19, 20, 23, 31, 38, 41] plays the 38 
Round 3: Dean     holding [12, 15, 25, 29, 42, 45, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
11 24 28 30 32 34 37 0 0 0 

24------------------------------------------------------------------------

Round 3: Eugenius holding [11, 24, 28, 30, 32, 34, 37] plays the 24 
Zachary wins the round which contains 7 penalty points

Round 4: Zachary  holding [10, 16, 17, 35, 40, 43] plays the 40 
Round 4: Connor   holding [13, 19, 20, 23, 31, 41] plays the 20 
Round 4: Dean     holding [12, 15, 25, 29, 45, 47] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
11 28 30 32 34 37 0 0 0 0 

28------------------------------------------------------------------------

Round 4: Eugenius holding [11, 28, 30, 32, 34, 37] plays the 28 
Zachary wins the round 

Round 5: Zachary  holding [10, 16, 17, 35, 43] plays the 35 
Round 5: Connor   holding [13, 19, 23, 31, 41] plays the 23 
Round 5: Dean     holding [15, 25, 29, 45, 47] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
11 30 32 34 37 0 0 0 0 0 

30------------------------------------------------------------------------

Round 5: Eugenius holding [11, 30, 32, 34, 37] plays the 30 
Dean wins the round which contains 1 penalty points

Round 6: Dean     holding [15, 25, 29, 47] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 32 34 37 0 0 0 0 0 0 

11 chah------------------------------------------------------------------------

Round 6: Eugenius holding [11, 32, 34, 37] plays the 11 
Round 6: Zachary  holding [10, 16, 17, 43] plays the 10 
Round 6: Connor   holding [13, 19, 31, 41] plays the 31 
Dean wins the round which contains 2 penalty points

Round 7: Dean     holding [25, 29, 47] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
32 34 37 0 0 0 0 0 0 0 

32 chah------------------------------------------------------------------------

Round 7: Eugenius holding [32, 34, 37] plays the 32 
Round 7: Zachary  holding [16, 17, 43] plays the 17 
Round 7: Connor   holding [13, 19, 41] plays the 19 
Dean wins the round which contains 2 penalty points

Round 8: Dean     holding [29, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
34 37 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 8: Eugenius holding [34, 37] plays the 37 
Round 8: Zachary  holding [16, 43] plays the 43 
Round 8: Connor   holding [13, 41] plays the 41 
Dean wins the round which contains 4 penalty points

Round 9: Dean     holding [29] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
34 0 0 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 9: Eugenius holding [34] plays the 34 
Round 9: Zachary  holding [16] plays the 16 
Round 9: Connor   holding [13] plays the 13 
Dean wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Connor (system)
#3 with 7 penalty points Zachary (system)
#4 with 11 penalty points Dean (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1734285 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Sabrina : [10, 17, 20, 27, 33, 36, 37, 41, 42, 45]
Table position 1: Aydin   : [12, 14, 19, 23, 25, 31, 43, 44, 47, 48]
Table position 2: Xue     : [11, 18, 21, 22, 24, 28, 34, 35, 46, 49]
Table position 3: Eugenius: [13, 15, 16, 26, 29, 30, 32, 38, 39, 40]

Discards:
Sabrina  [36, 41, 42]
Aydin    [14, 31, 47]
Xue      [18, 21, 24]
Eugenius [38, 39, 40]

Round 0: Sabrina  holding [10, 17, 20, 27, 33, 37, 38, 39, 40, 45] plays the 40 
Round 0: Aydin    holding [12, 19, 23, 25, 36, 41, 42, 43, 44, 48] plays the 12 
Round 0: Xue      holding [11, 14, 22, 28, 31, 34, 35, 46, 47, 49] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 15 16 18 21 24 26 29 30 32 

15------------------------------------------------------------------------

Round 0: Eugenius holding [13, 15, 16, 18, 21, 24, 26, 29, 30, 32] plays the 15 
Sabrina wins the round 

Round 1: Sabrina  holding [10, 17, 20, 27, 33, 37, 38, 39, 45] plays the 39 
Round 1: Aydin    holding [19, 23, 25, 36, 41, 42, 43, 44, 48] plays the 48 
Round 1: Xue      holding [11, 14, 22, 28, 31, 35, 46, 47, 49] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 18 21 24 26 29 30 32 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [13, 16, 18, 21, 24, 26, 29, 30, 32] plays the 18 
Aydin wins the round which contains 1 penalty points

Round 2: Aydin    holding [19, 23, 25, 36, 41, 42, 43, 44] plays the 42 
Round 2: Xue      holding [14, 22, 28, 31, 35, 46, 47, 49] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
13 16 21 24 26 29 30 32 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [13, 16, 21, 24, 26, 29, 30, 32] plays the 16 
Round 2: Sabrina  holding [10, 17, 20, 27, 33, 37, 38, 45] plays the 45 
Sabrina wins the round which contains 7 penalty points

Round 3: Sabrina  holding [10, 17, 20, 27, 33, 37, 38] plays the 33 
Round 3: Aydin    holding [19, 23, 25, 36, 41, 43, 44] plays the 44 
Round 3: Xue      holding [22, 28, 31, 35, 46, 47, 49] plays the 22 

Debug output from Eugenius
------------------------------------------------------------------------
13 21 24 26 29 30 32 0 0 0 

21------------------------------------------------------------------------

Round 3: Eugenius holding [13, 21, 24, 26, 29, 30, 32] plays the 21 
Aydin wins the round 

Round 4: Aydin    holding [19, 23, 25, 36, 41, 43] plays the 25 
Round 4: Xue      holding [28, 31, 35, 46, 47, 49] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
13 24 26 29 30 32 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [13, 24, 26, 29, 30, 32] plays the 30 
Round 4: Sabrina  holding [10, 17, 20, 27, 37, 38] plays the 20 
Xue wins the round 

Round 5: Xue      holding [28, 31, 46, 47, 49] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
13 24 26 29 32 0 0 0 0 0 

13------------------------------------------------------------------------

Round 5: Eugenius holding [13, 24, 26, 29, 32] plays the 13 
Round 5: Sabrina  holding [10, 17, 27, 37, 38] plays the 17 
Round 5: Aydin    holding [19, 23, 36, 41, 43] plays the 23 
Xue wins the round which contains 4 penalty points

Round 6: Xue      holding [28, 46, 47, 49] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
24 26 29 32 0 0 0 0 0 0 

24------------------------------------------------------------------------

Round 6: Eugenius holding [24, 26, 29, 32] plays the 24 
Round 6: Sabrina  holding [10, 27, 37, 38] plays the 10 
Round 6: Aydin    holding [19, 36, 41, 43] plays the 36 
Aydin wins the round 

Round 7: Aydin    holding [19, 41, 43] plays the 43 
Round 7: Xue      holding [46, 47, 49] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
26 29 32 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [26, 29, 32] plays the 29 
Round 7: Sabrina  holding [27, 37, 38] plays the 37 
Xue wins the round which contains 4 penalty points

Round 8: Xue      holding [46, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
26 32 0 0 0 0 0 0 0 0 

26 chah------------------------------------------------------------------------

Round 8: Eugenius holding [26, 32] plays the 26 
Round 8: Sabrina  holding [27, 38] plays the 38 
Round 8: Aydin    holding [19, 41] plays the 19 
Xue wins the round which contains 1 penalty points

Round 9: Xue      holding [46] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
32 0 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 9: Eugenius holding [32] plays the 32 
Round 9: Sabrina  holding [27] plays the 27 
Round 9: Aydin    holding [41] plays the 41 
Xue wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 1 penalty points Aydin (system)
#3 with 7 penalty points Sabrina (system)
#4 with 10 penalty points Xue (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 9177319 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Michael : [15, 23, 27, 28, 29, 30, 33, 34, 37, 47]
Table position 1: Emily   : [12, 17, 18, 21, 24, 25, 36, 44, 45, 48]
Table position 2: Eugenius: [10, 13, 20, 26, 31, 32, 38, 39, 42, 46]
Table position 3: Matthew : [11, 14, 16, 19, 22, 35, 40, 41, 43, 49]

Discards:
Michael  [29, 34, 47]
Emily    [12, 18, 48]
Eugenius [39, 42, 46]
Matthew  [14, 16, 35]

Round 0: Michael  holding [14, 15, 16, 23, 27, 28, 30, 33, 35, 37] plays the 28 
Round 0: Emily    holding [17, 21, 24, 25, 29, 34, 36, 44, 45, 47] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 13 18 20 26 31 32 38 48 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 12, 13, 18, 20, 26, 31, 32, 38, 48] plays the 10 
Round 0: Matthew  holding [11, 19, 22, 39, 40, 41, 42, 43, 46, 49] plays the 22 
Emily wins the round 

Round 1: Emily    holding [17, 21, 24, 25, 29, 34, 44, 45, 47] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
12 13 18 20 26 31 32 38 48 0 

12------------------------------------------------------------------------

Round 1: Eugenius holding [12, 13, 18, 20, 26, 31, 32, 38, 48] plays the 12 
Round 1: Matthew  holding [11, 19, 39, 40, 41, 42, 43, 46, 49] plays the 42 
Round 1: Michael  holding [14, 15, 16, 23, 27, 30, 33, 35, 37] plays the 27 
Matthew wins the round which contains 7 penalty points

Round 2: Matthew  holding [11, 19, 39, 40, 41, 43, 46, 49] plays the 40 
Round 2: Michael  holding [14, 15, 16, 23, 30, 33, 35, 37] plays the 30 
Round 2: Emily    holding [17, 24, 25, 29, 34, 44, 45, 47] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
13 18 20 26 31 32 38 48 0 0 

18------------------------------------------------------------------------

Round 2: Eugenius holding [13, 18, 20, 26, 31, 32, 38, 48] plays the 18 
Matthew wins the round 

Round 3: Matthew  holding [11, 19, 39, 41, 43, 46, 49] plays the 49 
Round 3: Michael  holding [14, 15, 16, 23, 33, 35, 37] plays the 14 
Round 3: Emily    holding [17, 24, 25, 29, 44, 45, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
13 20 26 31 32 38 48 0 0 0 

13 chah------------------------------------------------------------------------

Round 3: Eugenius holding [13, 20, 26, 31, 32, 38, 48] plays the 13 
Matthew wins the round which contains 2 penalty points

Round 4: Matthew  holding [11, 19, 39, 41, 43, 46] plays the 11 
Round 4: Michael  holding [15, 16, 23, 33, 35, 37] plays the 23 
Round 4: Emily    holding [17, 24, 25, 29, 44, 45] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
20 26 31 32 38 48 0 0 0 0 

31------------------------------------------------------------------------

Round 4: Eugenius holding [20, 26, 31, 32, 38, 48] plays the 31 
Eugenius wins the round which contains 4 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
20 26 32 38 48 0 0 0 0 0 

20------------------------------------------------------------------------

Round 5: Eugenius holding [20, 26, 32, 38, 48] plays the 20 
Round 5: Matthew  holding [19, 39, 41, 43, 46] plays the 46 
Round 5: Michael  holding [15, 16, 33, 35, 37] plays the 35 
Round 5: Emily    holding [17, 24, 25, 44, 45] plays the 24 
Matthew wins the round 

Round 6: Matthew  holding [19, 39, 41, 43] plays the 41 
Round 6: Michael  holding [15, 16, 33, 37] plays the 37 
Round 6: Emily    holding [17, 25, 44, 45] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
26 32 38 48 0 0 0 0 0 0 

26------------------------------------------------------------------------

Round 6: Eugenius holding [26, 32, 38, 48] plays the 26 
Matthew wins the round which contains 3 penalty points

Round 7: Matthew  holding [19, 39, 43] plays the 39 
Round 7: Michael  holding [15, 16, 33] plays the 15 
Round 7: Emily    holding [25, 44, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
32 38 48 0 0 0 0 0 0 0 

48------------------------------------------------------------------------

Round 7: Eugenius holding [32, 38, 48] plays the 48 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
32 38 0 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 8: Eugenius holding [32, 38] plays the 32 
Round 8: Matthew  holding [19, 43] plays the 43 
Round 8: Michael  holding [16, 33] plays the 16 
Round 8: Emily    holding [25, 44] plays the 44 
Emily wins the round which contains 1 penalty points

Round 9: Emily    holding [25] plays the 25 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38 chah------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Round 9: Matthew  holding [19] plays the 19 
Round 9: Michael  holding [33] plays the 33 
Emily wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Michael (system)
#2 with 2 penalty points Emily (system)
#3 with 4 penalty points Eugenius (dodo.c)
#4 with 12 penalty points Matthew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16377058 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [15, 16, 21, 27, 29, 31, 36, 37, 41, 42]
Table position 1: Xue     : [11, 12, 19, 24, 25, 28, 39, 43, 47, 48]
Table position 2: Heather : [14, 18, 22, 23, 26, 30, 33, 35, 40, 49]
Table position 3: Jamal   : [10, 13, 17, 20, 32, 34, 38, 44, 45, 46]

Discards:
Eugenius [37, 41, 42]
Xue      [24, 25, 28]
Heather  [14, 33, 40]
Jamal    [34, 38, 46]


Debug output from Eugenius
------------------------------------------------------------------------
15 16 21 27 29 31 34 36 38 46 

15------------------------------------------------------------------------

Round 0: Eugenius holding [15, 16, 21, 27, 29, 31, 34, 36, 38, 46] plays the 15 
Round 0: Xue      holding [11, 12, 19, 37, 39, 41, 42, 43, 47, 48] plays the 12 
Round 0: Heather  holding [18, 22, 23, 24, 25, 26, 28, 30, 35, 49] plays the 25 
Round 0: Jamal    holding [10, 13, 14, 17, 20, 32, 33, 40, 44, 45] plays the 33 
Jamal wins the round 

Round 1: Jamal    holding [10, 13, 14, 17, 20, 32, 40, 44, 45] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
16 21 27 29 31 34 36 38 46 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 21, 27, 29, 31, 34, 36, 38, 46] plays the 16 
Round 1: Xue      holding [11, 19, 37, 39, 41, 42, 43, 47, 48] plays the 42 
Round 1: Heather  holding [18, 22, 23, 24, 26, 28, 30, 35, 49] plays the 30 
Xue wins the round which contains 7 penalty points

Round 2: Xue      holding [11, 19, 37, 39, 41, 43, 47, 48] plays the 39 
Round 2: Heather  holding [18, 22, 23, 24, 26, 28, 35, 49] plays the 18 
Round 2: Jamal    holding [13, 14, 17, 20, 32, 40, 44, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
21 27 29 31 34 36 38 46 0 0 

21------------------------------------------------------------------------

Round 2: Eugenius holding [21, 27, 29, 31, 34, 36, 38, 46] plays the 21 
Jamal wins the round 

Round 3: Jamal    holding [13, 14, 17, 20, 32, 40, 44] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 31 34 36 38 46 0 0 0 

34------------------------------------------------------------------------

Round 3: Eugenius holding [27, 29, 31, 34, 36, 38, 46] plays the 34 
Round 3: Xue      holding [11, 19, 37, 41, 43, 47, 48] plays the 48 
Round 3: Heather  holding [22, 23, 24, 26, 28, 35, 49] plays the 24 
Xue wins the round 

Round 4: Xue      holding [11, 19, 37, 41, 43, 47] plays the 41 
Round 4: Heather  holding [22, 23, 26, 28, 35, 49] plays the 23 
Round 4: Jamal    holding [13, 14, 17, 32, 40, 44] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 31 36 38 46 0 0 0 0 

29------------------------------------------------------------------------

Round 4: Eugenius holding [27, 29, 31, 36, 38, 46] plays the 29 
Xue wins the round which contains 4 penalty points

Round 5: Xue      holding [11, 19, 37, 43, 47] plays the 47 
Round 5: Heather  holding [22, 26, 28, 35, 49] plays the 28 
Round 5: Jamal    holding [14, 17, 32, 40, 44] plays the 17 

Debug output from Eugenius
------------------------------------------------------------------------
27 31 36 38 46 0 0 0 0 0 

31------------------------------------------------------------------------

Round 5: Eugenius holding [27, 31, 36, 38, 46] plays the 31 
Xue wins the round which contains 3 penalty points

Round 6: Xue      holding [11, 19, 37, 43] plays the 37 
Round 6: Heather  holding [22, 26, 35, 49] plays the 49 
Round 6: Jamal    holding [14, 32, 40, 44] plays the 14 

Debug output from Eugenius
------------------------------------------------------------------------
27 36 38 46 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 6: Eugenius holding [27, 36, 38, 46] plays the 27 
Xue wins the round which contains 1 penalty points

Round 7: Xue      holding [11, 19, 43] plays the 19 
Round 7: Heather  holding [22, 26, 35] plays the 22 
Round 7: Jamal    holding [32, 40, 44] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
36 38 46 0 0 0 0 0 0 0 

36------------------------------------------------------------------------

Round 7: Eugenius holding [36, 38, 46] plays the 36 
Xue wins the round which contains 1 penalty points

Round 8: Xue      holding [11, 43] plays the 11 
Round 8: Heather  holding [26, 35] plays the 26 
Round 8: Jamal    holding [32, 40] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
38 46 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [38, 46] plays the 38 
Xue wins the round which contains 1 penalty points

Round 9: Xue      holding [43] plays the 43 
Round 9: Heather  holding [35] plays the 35 
Round 9: Jamal    holding [32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
46 0 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 9: Eugenius holding [46] plays the 46 
Xue wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#1 with 0 penalty points Heather (system)
#1 with 0 penalty points Jamal (system)
#4 with 18 penalty points Xue (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 10333547 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Braedon : [10, 20, 21, 26, 27, 31, 32, 35, 42, 47]
Table position 1: Dean    : [15, 23, 25, 33, 34, 37, 40, 43, 44, 49]
Table position 2: Nicholas: [11, 12, 13, 14, 19, 24, 36, 41, 46, 48]
Table position 3: Eugenius: [16, 17, 18, 22, 28, 29, 30, 38, 39, 45]

Discards:
Braedon  [10, 20, 47]
Dean     [15, 23, 34]
Nicholas [11, 12, 14]
Eugenius [38, 39, 45]

Round 0: Braedon  holding [21, 26, 27, 31, 32, 35, 38, 39, 42, 45] plays the 32 
Round 0: Dean     holding [10, 20, 25, 33, 37, 40, 43, 44, 47, 49] plays the 20 
Round 0: Nicholas holding [13, 15, 19, 23, 24, 34, 36, 41, 46, 48] plays the 46 

Debug output from Eugenius
------------------------------------------------------------------------
11 12 14 16 17 18 22 28 29 30 

12------------------------------------------------------------------------

Round 0: Eugenius holding [11, 12, 14, 16, 17, 18, 22, 28, 29, 30] plays the 12 
Nicholas wins the round 

Round 1: Nicholas holding [13, 15, 19, 23, 24, 34, 36, 41, 48] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
11 14 16 17 18 22 28 29 30 0 

14------------------------------------------------------------------------

Round 1: Eugenius holding [11, 14, 16, 17, 18, 22, 28, 29, 30] plays the 14 
Round 1: Braedon  holding [21, 26, 27, 31, 35, 38, 39, 42, 45] plays the 45 
Round 1: Dean     holding [10, 25, 33, 37, 40, 43, 44, 47, 49] plays the 33 
Nicholas wins the round 

Round 2: Nicholas holding [13, 15, 19, 23, 24, 34, 36, 41] plays the 34 

Debug output from Eugenius
------------------------------------------------------------------------
11 16 17 18 22 28 29 30 0 0 

16------------------------------------------------------------------------

Round 2: Eugenius holding [11, 16, 17, 18, 22, 28, 29, 30] plays the 16 
Round 2: Braedon  holding [21, 26, 27, 31, 35, 38, 39, 42] plays the 42 
Round 2: Dean     holding [10, 25, 37, 40, 43, 44, 47, 49] plays the 40 
Braedon wins the round which contains 7 penalty points

Round 3: Braedon  holding [21, 26, 27, 31, 35, 38, 39] plays the 38 
Round 3: Dean     holding [10, 25, 37, 43, 44, 47, 49] plays the 44 
Round 3: Nicholas holding [13, 15, 19, 23, 24, 36, 41] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 18 22 28 29 30 0 0 0 

18------------------------------------------------------------------------

Round 3: Eugenius holding [11, 17, 18, 22, 28, 29, 30] plays the 18 
Dean wins the round 

Round 4: Dean     holding [10, 25, 37, 43, 47, 49] plays the 25 
Round 4: Nicholas holding [13, 15, 19, 23, 36, 41] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 22 28 29 30 0 0 0 0 

30------------------------------------------------------------------------

Round 4: Eugenius holding [11, 17, 22, 28, 29, 30] plays the 30 
Round 4: Braedon  holding [21, 26, 27, 31, 35, 39] plays the 35 
Braedon wins the round 

Round 5: Braedon  holding [21, 26, 27, 31, 39] plays the 26 
Round 5: Dean     holding [10, 37, 43, 47, 49] plays the 10 
Round 5: Nicholas holding [13, 19, 23, 36, 41] plays the 36 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 22 28 29 0 0 0 0 0 

22------------------------------------------------------------------------

Round 5: Eugenius holding [11, 17, 22, 28, 29] plays the 22 
Nicholas wins the round 

Round 6: Nicholas holding [13, 19, 23, 41] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
11 17 28 29 0 0 0 0 0 0 

11------------------------------------------------------------------------

Round 6: Eugenius holding [11, 17, 28, 29] plays the 11 
Round 6: Braedon  holding [21, 27, 31, 39] plays the 31 
Round 6: Dean     holding [37, 43, 47, 49] plays the 37 
Dean wins the round which contains 4 penalty points

Round 7: Dean     holding [43, 47, 49] plays the 47 
Round 7: Nicholas holding [19, 23, 41] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
17 28 29 0 0 0 0 0 0 0 

17------------------------------------------------------------------------

Round 7: Eugenius holding [17, 28, 29] plays the 17 
Round 7: Braedon  holding [21, 27, 39] plays the 21 
Dean wins the round which contains 3 penalty points

Round 8: Dean     holding [43, 49] plays the 43 
Round 8: Nicholas holding [23, 41] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
28 29 0 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 8: Eugenius holding [28, 29] plays the 29 
Round 8: Braedon  holding [27, 39] plays the 27 
Dean wins the round which contains 3 penalty points

Round 9: Dean     holding [49] plays the 49 
Round 9: Nicholas holding [41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
28 0 0 0 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 9: Eugenius holding [28] plays the 28 
Round 9: Braedon  holding [39] plays the 39 
Dean wins the round which contains 1 penalty points


Finishing Positions

#1 with 0 penalty points Nicholas (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 7 penalty points Braedon (system)
#4 with 11 penalty points Dean (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 16384524 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Nicholas: [16, 17, 23, 24, 29, 34, 37, 39, 44, 47]
Table position 1: Eugenius: [10, 13, 20, 30, 31, 32, 38, 43, 48, 49]
Table position 2: George  : [11, 14, 15, 21, 22, 25, 27, 35, 40, 46]
Table position 3: Dylan   : [12, 18, 19, 26, 28, 33, 36, 41, 42, 45]

Discards:
Nicholas [17, 24, 37]
Eugenius [43, 48, 49]
George   [11, 15, 21]
Dylan    [12, 19, 42]

Round 0: Nicholas holding [12, 16, 19, 23, 29, 34, 39, 42, 44, 47] plays the 44 

Debug output from Eugenius
------------------------------------------------------------------------
10 13 17 20 24 30 31 32 37 38 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 13, 17, 20, 24, 30, 31, 32, 37, 38] plays the 10 
Round 0: George   holding [14, 22, 25, 27, 35, 40, 43, 46, 48, 49] plays the 48 
Round 0: Dylan    holding [11, 15, 18, 21, 26, 28, 33, 36, 41, 45] plays the 36 
George wins the round 

Round 1: George   holding [14, 22, 25, 27, 35, 40, 43, 46, 49] plays the 35 
Round 1: Dylan    holding [11, 15, 18, 21, 26, 28, 33, 41, 45] plays the 21 
Round 1: Nicholas holding [12, 16, 19, 23, 29, 34, 39, 42, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 20 24 30 31 32 37 38 0 

20------------------------------------------------------------------------

Round 1: Eugenius holding [13, 17, 20, 24, 30, 31, 32, 37, 38] plays the 20 
Nicholas wins the round which contains 7 penalty points

Round 2: Nicholas holding [12, 16, 19, 23, 29, 34, 39, 47] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 24 30 31 32 37 38 0 0 

24------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 24, 30, 31, 32, 37, 38] plays the 24 
Round 2: George   holding [14, 22, 25, 27, 40, 43, 46, 49] plays the 27 
Round 2: Dylan    holding [11, 15, 18, 26, 28, 33, 41, 45] plays the 28 
Dylan wins the round 

Round 3: Dylan    holding [11, 15, 18, 26, 33, 41, 45] plays the 33 
Round 3: Nicholas holding [16, 19, 23, 29, 34, 39, 47] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 30 31 32 37 38 0 0 0 

30------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 30, 31, 32, 37, 38] plays the 30 
Round 3: George   holding [14, 22, 25, 40, 43, 46, 49] plays the 22 
Nicholas wins the round 

Round 4: Nicholas holding [16, 19, 23, 29, 34, 47] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 31 32 37 38 0 0 0 0 

32------------------------------------------------------------------------

Round 4: Eugenius holding [13, 17, 31, 32, 37, 38] plays the 32 
Round 4: George   holding [14, 25, 40, 43, 46, 49] plays the 14 
Round 4: Dylan    holding [11, 15, 18, 26, 41, 45] plays the 26 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
13 17 31 37 38 0 0 0 0 0 

38------------------------------------------------------------------------

Round 5: Eugenius holding [13, 17, 31, 37, 38] plays the 38 
Round 5: George   holding [25, 40, 43, 46, 49] plays the 40 
Round 5: Dylan    holding [11, 15, 18, 41, 45] plays the 18 
Round 5: Nicholas holding [19, 23, 29, 34, 47] plays the 34 
George wins the round 

Round 6: George   holding [25, 43, 46, 49] plays the 46 
Round 6: Dylan    holding [11, 15, 41, 45] plays the 41 
Round 6: Nicholas holding [19, 23, 29, 47] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 31 37 0 0 0 0 0 0 

13 chah------------------------------------------------------------------------

Round 6: Eugenius holding [13, 17, 31, 37] plays the 13 
George wins the round which contains 3 penalty points

Round 7: George   holding [25, 43, 49] plays the 49 
Round 7: Dylan    holding [11, 15, 45] plays the 15 
Round 7: Nicholas holding [19, 23, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
17 31 37 0 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 7: Eugenius holding [17, 31, 37] plays the 17 
George wins the round which contains 2 penalty points

Round 8: George   holding [25, 43] plays the 43 
Round 8: Dylan    holding [11, 45] plays the 11 
Round 8: Nicholas holding [19, 23] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
31 37 0 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 8: Eugenius holding [31, 37] plays the 31 
George wins the round which contains 4 penalty points

Round 9: George   holding [25] plays the 25 
Round 9: Dylan    holding [45] plays the 45 
Round 9: Nicholas holding [23] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
37 0 0 0 0 0 0 0 0 0 

37 chah------------------------------------------------------------------------

Round 9: Eugenius holding [37] plays the 37 
Dylan wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 2 penalty points Dylan (system)
#3 with 7 penalty points Nicholas (system)
#4 with 9 penalty points George (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 1791028 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Eugenius: [12, 15, 17, 26, 28, 29, 31, 35, 44, 46]
Table position 1: Kane    : [10, 13, 14, 22, 27, 30, 34, 42, 43, 45]
Table position 2: Nathan  : [21, 23, 24, 25, 32, 33, 36, 37, 38, 40]
Table position 3: Andrew  : [11, 16, 18, 19, 20, 39, 41, 47, 48, 49]

Discards:
Eugenius [35, 44, 46]
Kane     [13, 14, 30]
Nathan   [23, 24, 33]
Andrew   [18, 20, 39]


Debug output from Eugenius
------------------------------------------------------------------------
12 15 17 18 20 26 28 29 31 39 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 15, 17, 18, 20, 26, 28, 29, 31, 39] plays the 12 
Round 0: Kane     holding [10, 22, 27, 34, 35, 42, 43, 44, 45, 46] plays the 45 
Round 0: Nathan   holding [13, 14, 21, 25, 30, 32, 36, 37, 38, 40] plays the 21 
Round 0: Andrew   holding [11, 16, 19, 23, 24, 33, 41, 47, 48, 49] plays the 16 
Kane wins the round 

Round 1: Kane     holding [10, 22, 27, 34, 35, 42, 43, 44, 46] plays the 34 
Round 1: Nathan   holding [13, 14, 25, 30, 32, 36, 37, 38, 40] plays the 36 
Round 1: Andrew   holding [11, 19, 23, 24, 33, 41, 47, 48, 49] plays the 48 

Debug output from Eugenius
------------------------------------------------------------------------
15 17 18 20 26 28 29 31 39 0 

18------------------------------------------------------------------------

Round 1: Eugenius holding [15, 17, 18, 20, 26, 28, 29, 31, 39] plays the 18 
Andrew wins the round 

Round 2: Andrew   holding [11, 19, 23, 24, 33, 41, 47, 49] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
15 17 20 26 28 29 31 39 0 0 

15------------------------------------------------------------------------

Round 2: Eugenius holding [15, 17, 20, 26, 28, 29, 31, 39] plays the 15 
Round 2: Kane     holding [10, 22, 27, 35, 42, 43, 44, 46] plays the 44 
Round 2: Nathan   holding [13, 14, 25, 30, 32, 37, 38, 40] plays the 30 
Kane wins the round 

Round 3: Kane     holding [10, 22, 27, 35, 42, 43, 46] plays the 42 
Round 3: Nathan   holding [13, 14, 25, 32, 37, 38, 40] plays the 40 
Round 3: Andrew   holding [11, 19, 23, 24, 41, 47, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
17 20 26 28 29 31 39 0 0 0 

20------------------------------------------------------------------------

Round 3: Eugenius holding [17, 20, 26, 28, 29, 31, 39] plays the 20 
Andrew wins the round which contains 7 penalty points

Round 4: Andrew   holding [11, 19, 23, 24, 41, 47] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
17 26 28 29 31 39 0 0 0 0 

26------------------------------------------------------------------------

Round 4: Eugenius holding [17, 26, 28, 29, 31, 39] plays the 26 
Round 4: Kane     holding [10, 22, 27, 35, 43, 46] plays the 27 
Round 4: Nathan   holding [13, 14, 25, 32, 37, 38] plays the 32 
Nathan wins the round 

Round 5: Nathan   holding [13, 14, 25, 37, 38] plays the 38 
Round 5: Andrew   holding [11, 19, 23, 41, 47] plays the 23 

Debug output from Eugenius
------------------------------------------------------------------------
17 28 29 31 39 0 0 0 0 0 

28------------------------------------------------------------------------

Round 5: Eugenius holding [17, 28, 29, 31, 39] plays the 28 
Round 5: Kane     holding [10, 22, 35, 43, 46] plays the 22 
Nathan wins the round which contains 1 penalty points

Round 6: Nathan   holding [13, 14, 25, 37] plays the 25 
Round 6: Andrew   holding [11, 19, 41, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
17 29 31 39 0 0 0 0 0 0 

17 chah------------------------------------------------------------------------

Round 6: Eugenius holding [17, 29, 31, 39] plays the 17 
Round 6: Kane     holding [10, 35, 43, 46] plays the 35 
Kane wins the round which contains 2 penalty points

Round 7: Kane     holding [10, 43, 46] plays the 43 
Round 7: Nathan   holding [13, 14, 37] plays the 13 
Round 7: Andrew   holding [11, 19, 41] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
29 31 39 0 0 0 0 0 0 0 

29------------------------------------------------------------------------

Round 7: Eugenius holding [29, 31, 39] plays the 29 
Kane wins the round which contains 4 penalty points

Round 8: Kane     holding [10, 46] plays the 10 
Round 8: Nathan   holding [14, 37] plays the 14 
Round 8: Andrew   holding [19, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
31 39 0 0 0 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 8: Eugenius holding [31, 39] plays the 31 
Nathan wins the round which contains 2 penalty points

Round 9: Nathan   holding [37] plays the 37 
Round 9: Andrew   holding [19] plays the 19 

Debug output from Eugenius
------------------------------------------------------------------------
39 0 0 0 0 0 0 0 0 0 

39------------------------------------------------------------------------

Round 9: Eugenius holding [39] plays the 39 
Round 9: Kane     holding [46] plays the 46 
Nathan wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Eugenius (dodo.c)
#2 with 5 penalty points Nathan (system)
#3 with 6 penalty points Kane (system)
#4 with 7 penalty points Andrew (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14900813 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Finbar  : [11, 12, 13, 26, 31, 39, 44, 46, 48, 49]
Table position 1: Peter   : [10, 14, 16, 17, 19, 21, 22, 35, 36, 38]
Table position 2: Connor  : [18, 20, 23, 29, 30, 37, 40, 42, 43, 47]
Table position 3: Eugenius: [15, 24, 25, 27, 28, 32, 33, 34, 41, 45]

Discards:
Finbar   [12, 39, 49]
Peter    [10, 19, 35]
Connor   [23, 30, 37]
Eugenius [34, 41, 45]

Round 0: Finbar   holding [11, 13, 26, 31, 34, 41, 44, 45, 46, 48] plays the 46 
Round 0: Peter    holding [12, 14, 16, 17, 21, 22, 36, 38, 39, 49] plays the 38 
Round 0: Connor   holding [10, 18, 19, 20, 29, 35, 40, 42, 43, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
15 23 24 25 27 28 30 32 33 37 

24------------------------------------------------------------------------

Round 0: Eugenius holding [15, 23, 24, 25, 27, 28, 30, 32, 33, 37] plays the 24 
Finbar wins the round which contains 7 penalty points

Round 1: Finbar   holding [11, 13, 26, 31, 34, 41, 44, 45, 48] plays the 45 
Round 1: Peter    holding [12, 14, 16, 17, 21, 22, 36, 39, 49] plays the 36 
Round 1: Connor   holding [10, 18, 19, 20, 29, 35, 40, 43, 47] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
15 23 25 27 28 30 32 33 37 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [15, 23, 25, 27, 28, 30, 32, 33, 37] plays the 15 
Finbar wins the round 

Round 2: Finbar   holding [11, 13, 26, 31, 34, 41, 44, 48] plays the 48 
Round 2: Peter    holding [12, 14, 16, 17, 21, 22, 39, 49] plays the 39 
Round 2: Connor   holding [18, 19, 20, 29, 35, 40, 43, 47] plays the 20 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 27 28 30 32 33 37 0 0 

27------------------------------------------------------------------------

Round 2: Eugenius holding [23, 25, 27, 28, 30, 32, 33, 37] plays the 27 
Finbar wins the round 

Round 3: Finbar   holding [11, 13, 26, 31, 34, 41, 44] plays the 34 
Round 3: Peter    holding [12, 14, 16, 17, 21, 22, 49] plays the 22 
Round 3: Connor   holding [18, 19, 29, 35, 40, 43, 47] plays the 40 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 28 30 32 33 37 0 0 0 

28------------------------------------------------------------------------

Round 3: Eugenius holding [23, 25, 28, 30, 32, 33, 37] plays the 28 
Connor wins the round 

Round 4: Connor   holding [18, 19, 29, 35, 43, 47] plays the 35 

Debug output from Eugenius
------------------------------------------------------------------------
23 25 30 32 33 37 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [23, 25, 30, 32, 33, 37] plays the 25 
Round 4: Finbar   holding [11, 13, 26, 31, 41, 44] plays the 31 
Round 4: Peter    holding [12, 14, 16, 17, 21, 49] plays the 21 
Connor wins the round which contains 1 penalty points

Round 5: Connor   holding [18, 19, 29, 43, 47] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
23 30 32 33 37 0 0 0 0 0 

23------------------------------------------------------------------------

Round 5: Eugenius holding [23, 30, 32, 33, 37] plays the 23 
Round 5: Finbar   holding [11, 13, 26, 41, 44] plays the 41 
Round 5: Peter    holding [12, 14, 16, 17, 49] plays the 17 
Finbar wins the round which contains 4 penalty points

Round 6: Finbar   holding [11, 13, 26, 44] plays the 26 
Round 6: Peter    holding [12, 14, 16, 49] plays the 12 
Round 6: Connor   holding [18, 19, 43, 47] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
30 32 33 37 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 6: Eugenius holding [30, 32, 33, 37] plays the 30 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
32 33 37 0 0 0 0 0 0 0 

32------------------------------------------------------------------------

Round 7: Eugenius holding [32, 33, 37] plays the 32 
Round 7: Finbar   holding [11, 13, 44] plays the 44 
Round 7: Peter    holding [14, 16, 49] plays the 14 
Round 7: Connor   holding [19, 43, 47] plays the 19 
Finbar wins the round which contains 1 penalty points

Round 8: Finbar   holding [11, 13] plays the 13 
Round 8: Peter    holding [16, 49] plays the 49 
Round 8: Connor   holding [43, 47] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
33 37 0 0 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 8: Eugenius holding [33, 37] plays the 37 
Connor wins the round which contains 3 penalty points

Round 9: Connor   holding [47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
33 0 0 0 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 9: Eugenius holding [33] plays the 33 
Round 9: Finbar   holding [11] plays the 11 
Round 9: Peter    holding [16] plays the 16 
Connor wins the round which contains 2 penalty points


Finishing Positions

#1 with 0 penalty points Peter (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 6 penalty points Connor (system)
#4 with 12 penalty points Finbar (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 4579552 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Claire  : [10, 13, 14, 17, 19, 28, 29, 44, 45, 46]
Table position 1: Finbar  : [11, 15, 21, 31, 32, 33, 37, 38, 39, 43]
Table position 2: Eugenius: [12, 16, 22, 25, 26, 34, 35, 41, 47, 48]
Table position 3: Costa   : [18, 20, 23, 24, 27, 30, 36, 40, 42, 49]

Discards:
Claire   [13, 28, 45]
Finbar   [31, 37, 38]
Eugenius [41, 47, 48]
Costa    [30, 40, 49]

Round 0: Claire   holding [10, 14, 17, 19, 29, 30, 40, 44, 46, 49] plays the 14 
Round 0: Finbar   holding [11, 13, 15, 21, 28, 32, 33, 39, 43, 45] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
12 16 22 25 26 31 34 35 37 38 

12------------------------------------------------------------------------

Round 0: Eugenius holding [12, 16, 22, 25, 26, 31, 34, 35, 37, 38] plays the 12 
Round 0: Costa    holding [18, 20, 23, 24, 27, 36, 41, 42, 47, 48] plays the 42 
Costa wins the round which contains 7 penalty points

Round 1: Costa    holding [18, 20, 23, 24, 27, 36, 41, 47, 48] plays the 24 
Round 1: Claire   holding [10, 17, 19, 29, 30, 40, 44, 46, 49] plays the 30 
Round 1: Finbar   holding [11, 13, 15, 28, 32, 33, 39, 43, 45] plays the 33 

Debug output from Eugenius
------------------------------------------------------------------------
16 22 25 26 31 34 35 37 38 0 

16------------------------------------------------------------------------

Round 1: Eugenius holding [16, 22, 25, 26, 31, 34, 35, 37, 38] plays the 16 
Finbar wins the round 

Round 2: Finbar   holding [11, 13, 15, 28, 32, 39, 43, 45] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
22 25 26 31 34 35 37 38 0 0 

22------------------------------------------------------------------------

Round 2: Eugenius holding [22, 25, 26, 31, 34, 35, 37, 38] plays the 22 
Round 2: Costa    holding [18, 20, 23, 27, 36, 41, 47, 48] plays the 18 
Round 2: Claire   holding [10, 17, 19, 29, 40, 44, 46, 49] plays the 49 
Claire wins the round 

Round 3: Claire   holding [10, 17, 19, 29, 40, 44, 46] plays the 44 
Round 3: Finbar   holding [11, 13, 15, 32, 39, 43, 45] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
25 26 31 34 35 37 38 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [25, 26, 31, 34, 35, 37, 38] plays the 26 
Round 3: Costa    holding [20, 23, 27, 36, 41, 47, 48] plays the 20 
Claire wins the round 

Round 4: Claire   holding [10, 17, 19, 29, 40, 46] plays the 10 
Round 4: Finbar   holding [11, 13, 15, 39, 43, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
25 31 34 35 37 38 0 0 0 0 

25------------------------------------------------------------------------

Round 4: Eugenius holding [25, 31, 34, 35, 37, 38] plays the 25 
Round 4: Costa    holding [23, 27, 36, 41, 47, 48] plays the 36 
Finbar wins the round 

Round 5: Finbar   holding [11, 13, 15, 39, 43] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
31 34 35 37 38 0 0 0 0 0 

31 chah------------------------------------------------------------------------

Round 5: Eugenius holding [31, 34, 35, 37, 38] plays the 31 
Round 5: Costa    holding [23, 27, 41, 47, 48] plays the 48 
Round 5: Claire   holding [17, 19, 29, 40, 46] plays the 19 
Costa wins the round which contains 2 penalty points

Round 6: Costa    holding [23, 27, 41, 47] plays the 41 
Round 6: Claire   holding [17, 29, 40, 46] plays the 17 
Round 6: Finbar   holding [11, 13, 15, 43] plays the 43 

Debug output from Eugenius
------------------------------------------------------------------------
34 35 37 38 0 0 0 0 0 0 

37------------------------------------------------------------------------

Round 6: Eugenius holding [34, 35, 37, 38] plays the 37 
Finbar wins the round which contains 4 penalty points

Round 7: Finbar   holding [11, 13, 15] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
34 35 38 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 7: Eugenius holding [34, 35, 38] plays the 34 
Round 7: Costa    holding [23, 27, 47] plays the 47 
Round 7: Claire   holding [29, 40, 46] plays the 29 
Costa wins the round which contains 3 penalty points

Round 8: Costa    holding [23, 27] plays the 23 
Round 8: Claire   holding [40, 46] plays the 46 
Round 8: Finbar   holding [13, 15] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
35 38 0 0 0 0 0 0 0 0 

35------------------------------------------------------------------------

Round 8: Eugenius holding [35, 38] plays the 35 
Costa wins the round which contains 2 penalty points

Round 9: Costa    holding [27] plays the 27 
Round 9: Claire   holding [40] plays the 40 
Round 9: Finbar   holding [15] plays the 15 

Debug output from Eugenius
------------------------------------------------------------------------
38 0 0 0 0 0 0 0 0 0 

38 chah------------------------------------------------------------------------

Round 9: Eugenius holding [38] plays the 38 
Costa wins the round 


Finishing Positions

#1 with 0 penalty points Claire (system)
#1 with 0 penalty points Eugenius (dodo.c)
#3 with 4 penalty points Finbar (system)
#4 with 14 penalty points Costa (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 5028899 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Livia    : [13, 16, 20, 21, 22, 31, 32, 36, 44, 46]
Table position 1: Andrew   : [11, 14, 15, 17, 18, 25, 28, 30, 39, 47]
Table position 2: Elizabeth: [10, 19, 23, 24, 27, 37, 38, 42, 45, 49]
Table position 3: Eugenius : [12, 26, 29, 33, 34, 35, 40, 41, 43, 48]

Discards:
Livia     [13, 16, 32]
Andrew    [11, 28, 47]
Elizabeth [10, 27, 45]
Eugenius  [41, 43, 48]

Round 0: Livia     holding [20, 21, 22, 31, 36, 41, 43, 44, 46, 48] plays the 46 
Round 0: Andrew    holding [13, 14, 15, 16, 17, 18, 25, 30, 32, 39] plays the 14 
Round 0: Elizabeth holding [11, 19, 23, 24, 28, 37, 38, 42, 47, 49] plays the 38 

Debug output from Eugenius
------------------------------------------------------------------------
10 12 26 27 29 33 34 35 40 45 

10------------------------------------------------------------------------

Round 0: Eugenius  holding [10, 12, 26, 27, 29, 33, 34, 35, 40, 45] plays the 10 
Livia wins the round 

Round 1: Livia     holding [20, 21, 22, 31, 36, 41, 43, 44, 48] plays the 21 
Round 1: Andrew    holding [13, 15, 16, 17, 18, 25, 30, 32, 39] plays the 18 
Round 1: Elizabeth holding [11, 19, 23, 24, 28, 37, 42, 47, 49] plays the 28 

Debug output from Eugenius
------------------------------------------------------------------------
12 26 27 29 33 34 35 40 45 0 

12------------------------------------------------------------------------

Round 1: Eugenius  holding [12, 26, 27, 29, 33, 34, 35, 40, 45] plays the 12 
Elizabeth wins the round 

Round 2: Elizabeth holding [11, 19, 23, 24, 37, 42, 47, 49] plays the 49 

Debug output from Eugenius
------------------------------------------------------------------------
26 27 29 33 34 35 40 45 0 0 

35------------------------------------------------------------------------

Round 2: Eugenius  holding [26, 27, 29, 33, 34, 35, 40, 45] plays the 35 
Round 2: Livia     holding [20, 22, 31, 36, 41, 43, 44, 48] plays the 44 
Round 2: Andrew    holding [13, 15, 16, 17, 25, 30, 32, 39] plays the 30 
Elizabeth wins the round 

Round 3: Elizabeth holding [11, 19, 23, 24, 37, 42, 47] plays the 24 

Debug output from Eugenius
------------------------------------------------------------------------
26 27 29 33 34 40 45 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius  holding [26, 27, 29, 33, 34, 40, 45] plays the 26 
Round 3: Livia     holding [20, 22, 31, 36, 41, 43, 48] plays the 48 
Round 3: Andrew    holding [13, 15, 16, 17, 25, 32, 39] plays the 15 
Livia wins the round 

Round 4: Livia     holding [20, 22, 31, 36, 41, 43] plays the 20 
Round 4: Andrew    holding [13, 16, 17, 25, 32, 39] plays the 16 
Round 4: Elizabeth holding [11, 19, 23, 37, 42, 47] plays the 42 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 33 34 40 45 0 0 0 0 

34------------------------------------------------------------------------

Round 4: Eugenius  holding [27, 29, 33, 34, 40, 45] plays the 34 
Elizabeth wins the round which contains 7 penalty points

Round 5: Elizabeth holding [11, 19, 23, 37, 47] plays the 11 

Debug output from Eugenius
------------------------------------------------------------------------
27 29 33 40 45 0 0 0 0 0 

29------------------------------------------------------------------------

Round 5: Eugenius  holding [27, 29, 33, 40, 45] plays the 29 
Round 5: Livia     holding [22, 31, 36, 41, 43] plays the 43 
Round 5: Andrew    holding [13, 17, 25, 32, 39] plays the 17 
Livia wins the round which contains 4 penalty points

Round 6: Livia     holding [22, 31, 36, 41] plays the 22 
Round 6: Andrew    holding [13, 25, 32, 39] plays the 32 
Round 6: Elizabeth holding [19, 23, 37, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
27 33 40 45 0 0 0 0 0 0 

33------------------------------------------------------------------------

Round 6: Eugenius  holding [27, 33, 40, 45] plays the 33 
Eugenius wins the round which contains 1 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
27 40 45 0 0 0 0 0 0 0 

27------------------------------------------------------------------------

Round 7: Eugenius  holding [27, 40, 45] plays the 27 
Round 7: Livia     holding [31, 36, 41] plays the 36 
Round 7: Andrew    holding [13, 25, 39] plays the 39 
Round 7: Elizabeth holding [19, 23, 37] plays the 19 
Andrew wins the round which contains 1 penalty points

Round 8: Andrew    holding [13, 25] plays the 25 
Round 8: Elizabeth holding [23, 37] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
40 45 0 0 0 0 0 0 0 0 

40------------------------------------------------------------------------

Round 8: Eugenius  holding [40, 45] plays the 40 
Round 8: Livia     holding [31, 41] plays the 31 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
45 0 0 0 0 0 0 0 0 0 

45------------------------------------------------------------------------

Round 9: Eugenius  holding [45] plays the 45 
Round 9: Livia     holding [41] plays the 41 
Round 9: Andrew    holding [13] plays the 13 
Round 9: Elizabeth holding [23] plays the 23 
Eugenius wins the round which contains 3 penalty points


Finishing Positions

#1 with 1 penalty points Andrew (system)
#2 with 4 penalty points Livia (system)
#3 with 6 penalty points Eugenius (dodo.c)
#4 with 7 penalty points Elizabeth (system)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15371970 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Harrison: [11, 14, 16, 17, 24, 35, 40, 41, 43, 49]
Table position 1: Nathan  : [19, 22, 23, 25, 29, 32, 33, 39, 42, 44]
Table position 2: Stephen : [10, 12, 13, 18, 21, 31, 37, 38, 46, 47]
Table position 3: Eugenius: [15, 20, 26, 27, 28, 30, 34, 36, 45, 48]

Discards:
Harrison [24, 40, 49]
Nathan   [29, 32, 42]
Stephen  [10, 38, 46]
Eugenius [36, 45, 48]

Round 0: Harrison holding [11, 14, 16, 17, 35, 36, 41, 43, 45, 48] plays the 14 
Round 0: Nathan   holding [19, 22, 23, 24, 25, 33, 39, 40, 44, 49] plays the 22 
Round 0: Stephen  holding [12, 13, 18, 21, 29, 31, 32, 37, 42, 47] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
10 15 20 26 27 28 30 34 38 46 

10------------------------------------------------------------------------

Round 0: Eugenius holding [10, 15, 20, 26, 27, 28, 30, 34, 38, 46] plays the 10 
Nathan wins the round 

Round 1: Nathan   holding [19, 23, 24, 25, 33, 39, 40, 44, 49] plays the 25 
Round 1: Stephen  holding [13, 18, 21, 29, 31, 32, 37, 42, 47] plays the 47 

Debug output from Eugenius
------------------------------------------------------------------------
15 20 26 27 28 30 34 38 46 0 

15------------------------------------------------------------------------

Round 1: Eugenius holding [15, 20, 26, 27, 28, 30, 34, 38, 46] plays the 15 
Round 1: Harrison holding [11, 16, 17, 35, 36, 41, 43, 45, 48] plays the 45 
Harrison wins the round which contains 1 penalty points

Round 2: Harrison holding [11, 16, 17, 35, 36, 41, 43, 48] plays the 16 
Round 2: Nathan   holding [19, 23, 24, 33, 39, 40, 44, 49] plays the 44 
Round 2: Stephen  holding [13, 18, 21, 29, 31, 32, 37, 42] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
20 26 27 28 30 34 38 46 0 0 

20------------------------------------------------------------------------

Round 2: Eugenius holding [20, 26, 27, 28, 30, 34, 38, 46] plays the 20 
Nathan wins the round 

Round 3: Nathan   holding [19, 23, 24, 33, 39, 40, 49] plays the 39 
Round 3: Stephen  holding [13, 18, 21, 29, 31, 37, 42] plays the 21 

Debug output from Eugenius
------------------------------------------------------------------------
26 27 28 30 34 38 46 0 0 0 

26------------------------------------------------------------------------

Round 3: Eugenius holding [26, 27, 28, 30, 34, 38, 46] plays the 26 
Round 3: Harrison holding [11, 17, 35, 36, 41, 43, 48] plays the 48 
Harrison wins the round 

Round 4: Harrison holding [11, 17, 35, 36, 41, 43] plays the 43 
Round 4: Nathan   holding [19, 23, 24, 33, 40, 49] plays the 23 
Round 4: Stephen  holding [13, 18, 29, 31, 37, 42] plays the 37 

Debug output from Eugenius
------------------------------------------------------------------------
27 28 30 34 38 46 0 0 0 0 

27------------------------------------------------------------------------

Round 4: Eugenius holding [27, 28, 30, 34, 38, 46] plays the 27 
Harrison wins the round which contains 3 penalty points

Round 5: Harrison holding [11, 17, 35, 36, 41] plays the 17 
Round 5: Nathan   holding [19, 24, 33, 40, 49] plays the 19 
Round 5: Stephen  holding [13, 18, 29, 31, 42] plays the 29 

Debug output from Eugenius
------------------------------------------------------------------------
28 30 34 38 46 0 0 0 0 0 

28------------------------------------------------------------------------

Round 5: Eugenius holding [28, 30, 34, 38, 46] plays the 28 
Stephen wins the round which contains 3 penalty points

Round 6: Stephen  holding [13, 18, 31, 42] plays the 13 

Debug output from Eugenius
------------------------------------------------------------------------
30 34 38 46 0 0 0 0 0 0 

30------------------------------------------------------------------------

Round 6: Eugenius holding [30, 34, 38, 46] plays the 30 
Round 6: Harrison holding [11, 35, 36, 41] plays the 41 
Round 6: Nathan   holding [24, 33, 40, 49] plays the 24 
Harrison wins the round which contains 2 penalty points

Round 7: Harrison holding [11, 35, 36] plays the 11 
Round 7: Nathan   holding [33, 40, 49] plays the 49 
Round 7: Stephen  holding [18, 31, 42] plays the 31 

Debug output from Eugenius
------------------------------------------------------------------------
34 38 46 0 0 0 0 0 0 0 

34------------------------------------------------------------------------

Round 7: Eugenius holding [34, 38, 46] plays the 34 
Stephen wins the round which contains 2 penalty points

Round 8: Stephen  holding [18, 42] plays the 18 

Debug output from Eugenius
------------------------------------------------------------------------
38 46 0 0 0 0 0 0 0 0 

38------------------------------------------------------------------------

Round 8: Eugenius holding [38, 46] plays the 38 
Round 8: Harrison holding [35, 36] plays the 36 
Round 8: Nathan   holding [33, 40] plays the 33 
Eugenius wins the round 


Debug output from Eugenius
------------------------------------------------------------------------
46 0 0 0 0 0 0 0 0 0 

46------------------------------------------------------------------------

Round 9: Eugenius holding [46] plays the 46 
Round 9: Harrison holding [35] plays the 35 
Round 9: Nathan   holding [40] plays the 40 
Round 9: Stephen  holding [42] plays the 42 
Eugenius wins the round which contains 7 penalty points


Finishing Positions

#1 with 0 penalty points Nathan (system)
#2 with 5 penalty points Stephen (system)
#3 with 6 penalty points Harrison (system)
#4 with 7 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 14068728 dodo.c

dodo.c: warning: some lines are not consistently indented.
Incorrectly indented lines are marked with an *.
    68  int min(int a, int b) 
    69  {
    70*    if ( a <  b )
    71        return a;
    72*    return b;
    73  }
......
   106  bool is_cocomposite(int a, int b)
   107  {
   108*    int smallest = min(a, b);
   109*    for( int i = 2; i < smallest; i++)
   110     {
   111*       if ( (a % i == 0) && (b % i == 0) )
   112           return true;
   113*    }
   114      return false;        
   115  }
......
   209  void choose_card_to_play(void) 
   210  {
   211      int n_cards_in_hand;
   212      int n_cards_played_this_round;
   213      int table_position;
   214  
   215      //ARRAY DECLARATIONS
   216      int my_hand[N_CARDS_INITIAL_HAND]={0};
   217      int cards_played_this_round[N_PLAYERS] = {0};
   218      int cards_played_in_previous_rounds[N_CARDS] = {0};
   219      int discards[N_CARDS_DISCARDED] = {0};
   220      int discards_received[N_CARDS_DISCARDED] = {0};
   221  
   222      int primes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   223      int nonprimes_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   224      int cocomposite_to_first_card_in_my_hand[N_CARDS_INITIAL_HAND]={0};
   225  
   226      int legal_plays[10]={0}; 
   227      
   228  
   229      // CODE TO READ THE FIRST THREE NUMBERS WHICH ARE:
   230      // NUMBER OF CARDS IN YOUR HAND,  NUMBER OF CARDS PLAYED THIS ROUND, TABLE POSITION
   231      assert(scanf("%d %d %d", &n_cards_in_hand, &n_cards_played_this_round, &table_position) == 3);
   232      assert(n_cards_in_hand >= 1 && n_cards_in_hand <= N_CARDS_INITIAL_HAND);
   233      assert(n_cards_played_this_round >= 0 && n_cards_played_this_round < N_PLAYERS);
   234      assert(table_position >= 0 && table_position < N_PLAYERS); 
   235  
   236      // READS THE CARDS OF MY HAND INTO AN ARRAY
   237      read_cards(my_hand, n_cards_in_hand);
   238      // READS THE CARDS PREVIOUSLY PLAYED THIS ROUND INTO AN ARRAY
   239      read_cards(cards_played_this_round, n_cards_played_this_round);
   240      // READS THE CARDS PLAYED IN THE HISTORY OF THE GAME INTO AN ARRAY
   241      read_cards(cards_played_in_previous_rounds, N_PLAYERS * ( N_CARDS_INITIAL_HAND - n_cards_in_hand )); 
   242      //READ DISCARDS
   243      read_cards(discards, N_CARDS_DISCARDED);
   244      read_cards(discards_received, N_CARDS_DISCARDED);
   245     
   246      //INITIALISE primes_in_my_hand, non_primes_in_my_hand, coprime_to_firstcard
   247    
   248      set_primes(my_hand, primes_in_my_hand, n_cards_in_hand);
   249      set_nonprimes(my_hand, nonprimes_in_my_hand, n_cards_in_hand);
   250      set_cocomposite(my_hand, cocomposite_to_first_card_in_my_hand, n_cards_in_hand, cards_played_this_round[0]);   
   251*      for(int i=0;i<10;i++)
   252*        {  printf("%d ",my_hand[i]); }
   253*      printf("\n\n");
   254      //********DUMB STATEGY - JUST PLAY FIRST LEGAL CARD *****************
   255  
   256  
   257      //check if your playing first card in a round
   258      if ( n_cards_played_this_round == 0)  
   259      {
   260         //check is a prime numbered card has been played yet
   261          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == true ) 
   262          {   
   263              //play any card            
   264              int selection =rand() % n_cards_in_hand;
   265              printf("%d",my_hand[0]);
   266          }  
   267          if ( contains_prime(cards_played_in_previous_rounds , N_CARDS) == false )
   268          {
   269              if ( contains_nonprime(my_hand, n_cards_in_hand) == true )
   270              {
   271                  // play non prime card
   272                  int selection = rand() % n_cards_in_hand;
   273                  //just play first non-prime card in hand for now
   274                  printf("%d",nonprimes_in_my_hand[0]);
   275              }   
   276              if ( contains_nonprime(my_hand, n_cards_in_hand) == false )
   277              {
   278                   //play any card 
   279                  int selection = rand() % n_cards_in_hand;
   280                  printf("%d",my_hand[0]);
   281              }
   282          }
   283      }
   284  
   285  
   286      if ( n_cards_played_this_round != 0)
   287      {
   288          if ( is_prime(cards_played_this_round[0]) == true )
   289          {
   290              if ( contains_prime(my_hand, n_cards_in_hand) == true )
   291              {
   292                  //play prime card
   293                  printf("%d",primes_in_my_hand[0]);
   294              }           
   295              if ( contains_prime(my_hand, n_cards_in_hand) == false )
   296              {
   297                  //play any card
   298                  int selection = rand() % n_cards_in_hand;
   299                  printf("%d",my_hand[0]);
   300              }
   301          } 
   302          if ( is_prime(cards_played_this_round[0]) == false )
   303          {
   304              if ( cocomposite_to_first_card_in_my_hand[0] != 0) 
   305              {
   306                  //play first  composite card in your hand
   307                  printf("%d", cocomposite_to_first_card_in_my_hand[0]); 
   308              }
   309              if ( cocomposite_to_first_card_in_my_hand[0] == 0)
   310              {
   311                  //play any card
   312                  int selection = rand() % n_cards_in_hand;
   313                  int state = 7;
   314    //            play_stategy( my_hand, cards_played_in_previous_rounds, cards_played_this_round, state);         
   315                  printf("%d chah", my_hand[0]);
   316              }
   317          }
   318   
   319      } 
   320  
   321  }  // end main 
Version: 0.1
dcc -o coco dodo.c
dcc --valgrind -o coco-valgrind dodo.c

Deal:
Table position 0: Gal     : [10, 12, 16, 17, 18, 22, 23, 26, 27, 45]
Table position 1: Eugenius: [13, 19, 28, 31, 33, 42, 44, 46, 48, 49]
Table position 2: Kane    : [11, 14, 25, 29, 30, 37, 38, 40, 43, 47]
Table position 3: Oscar   : [15, 20, 21, 24, 32, 34, 35, 36, 39, 41]

Discards:
Gal      [17, 18, 22]
Eugenius [46, 48, 49]
Kane     [14, 37, 38]
Oscar    [32, 39, 41]

Round 0: Gal      holding [10, 12, 16, 23, 26, 27, 32, 39, 41, 45] plays the 27 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 18 19 22 28 31 33 42 44 

18------------------------------------------------------------------------

Round 0: Eugenius holding [13, 17, 18, 19, 22, 28, 31, 33, 42, 44] plays the 18 
Round 0: Kane     holding [11, 25, 29, 30, 40, 43, 46, 47, 48, 49] plays the 48 
Round 0: Oscar    holding [14, 15, 20, 21, 24, 34, 35, 36, 37, 38] plays the 24 
Kane wins the round 

Round 1: Kane     holding [11, 25, 29, 30, 40, 43, 46, 47, 49] plays the 30 
Round 1: Oscar    holding [14, 15, 20, 21, 34, 35, 36, 37, 38] plays the 35 
Round 1: Gal      holding [10, 12, 16, 23, 26, 32, 39, 41, 45] plays the 12 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 22 28 31 33 42 44 0 

22------------------------------------------------------------------------

Round 1: Eugenius holding [13, 17, 19, 22, 28, 31, 33, 42, 44] plays the 22 
Oscar wins the round 

Round 2: Oscar    holding [14, 15, 20, 21, 34, 36, 37, 38] plays the 15 
Round 2: Gal      holding [10, 16, 23, 26, 32, 39, 41, 45] plays the 10 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 28 31 33 42 44 0 0 

33------------------------------------------------------------------------

Round 2: Eugenius holding [13, 17, 19, 28, 31, 33, 42, 44] plays the 33 
Round 2: Kane     holding [11, 25, 29, 40, 43, 46, 47, 49] plays the 40 
Kane wins the round 

Round 3: Kane     holding [11, 25, 29, 43, 46, 47, 49] plays the 25 
Round 3: Oscar    holding [14, 20, 21, 34, 36, 37, 38] plays the 20 
Round 3: Gal      holding [16, 23, 26, 32, 39, 41, 45] plays the 45 

Debug output from Eugenius
------------------------------------------------------------------------
13 17 19 28 31 42 44 0 0 0 

13 chah------------------------------------------------------------------------

Round 3: Eugenius holding [13, 17, 19, 28, 31, 42, 44] plays the 13 
Gal wins the round which contains 1 penalty points

Round 4: Gal      holding [16, 23, 26, 32, 39, 41] plays the 39 

Debug output from Eugenius
------------------------------------------------------------------------
17 19 28 31 42 44 0 0 0 0 

42------------------------------------------------------------------------

Round 4: Eugenius holding [17, 19, 28, 31, 42, 44] plays the 42 
Round 4: Kane     holding [11, 29, 43, 46, 47, 49] plays the 11 
Round 4: Oscar    holding [14, 21, 34, 36, 37, 38] plays the 21 
Eugenius wins the round which contains 8 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
17 19 28 31 44 0 0 0 0 0 

17------------------------------------------------------------------------

Round 5: Eugenius holding [17, 19, 28, 31, 44] plays the 17 
Round 5: Kane     holding [29, 43, 46, 47, 49] plays the 47 
Round 5: Oscar    holding [14, 34, 36, 37, 38] plays the 37 
Round 5: Gal      holding [16, 23, 26, 32, 41] plays the 23 
Kane wins the round which contains 4 penalty points

Round 6: Kane     holding [29, 43, 46, 49] plays the 43 
Round 6: Oscar    holding [14, 34, 36, 38] plays the 36 
Round 6: Gal      holding [16, 26, 32, 41] plays the 41 

Debug output from Eugenius
------------------------------------------------------------------------
19 28 31 44 0 0 0 0 0 0 

19------------------------------------------------------------------------

Round 6: Eugenius holding [19, 28, 31, 44] plays the 19 
Kane wins the round which contains 3 penalty points

Round 7: Kane     holding [29, 46, 49] plays the 29 
Round 7: Oscar    holding [14, 34, 38] plays the 34 
Round 7: Gal      holding [16, 26, 32] plays the 32 

Debug output from Eugenius
------------------------------------------------------------------------
28 31 44 0 0 0 0 0 0 0 

31------------------------------------------------------------------------

Round 7: Eugenius holding [28, 31, 44] plays the 31 
Eugenius wins the round which contains 2 penalty points


Debug output from Eugenius
------------------------------------------------------------------------
28 44 0 0 0 0 0 0 0 0 

28------------------------------------------------------------------------

Round 8: Eugenius holding [28, 44] plays the 28 
Round 8: Kane     holding [46, 49] plays the 49 
Round 8: Oscar    holding [14, 38] plays the 14 
Round 8: Gal      holding [16, 26] plays the 26 
Kane wins the round 

Round 9: Kane     holding [46] plays the 46 
Round 9: Oscar    holding [38] plays the 38 
Round 9: Gal      holding [16] plays the 16 

Debug output from Eugenius
------------------------------------------------------------------------
44 0 0 0 0 0 0 0 0 0 

44------------------------------------------------------------------------

Round 9: Eugenius holding [44] plays the 44 
Kane wins the round 


Finishing Positions

#1 with 0 penalty points Oscar (system)
#2 with 1 penalty points Gal (system)
#3 with 7 penalty points Kane (system)
#4 with 10 penalty points Eugenius (dodo.c)

You can rerun this game with this command:
/home/cs1511/bin/coco_referee -s 15231754 dodo.c

